
Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f04  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002f04  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016c  20000070  00002f74  00010070  2**2
                  ALLOC
  3 .stack        00002004  200001dc  000030e0  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002397b  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e4a  00000000  00000000  00033a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004614  00000000  00000000  000368b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  0003aecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000548  00000000  00000000  0003b404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018c0d  00000000  00000000  0003b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c9b8  00000000  00000000  00054559  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084269  00000000  00000000  00060f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013ac  00000000  00000000  000e517c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021e0 	.word	0x200021e0
       4:	00001905 	.word	0x00001905
       8:	00001901 	.word	0x00001901
       c:	00001901 	.word	0x00001901
	...
      2c:	00001901 	.word	0x00001901
	...
      38:	00001901 	.word	0x00001901
      3c:	00001901 	.word	0x00001901
      40:	00001901 	.word	0x00001901
      44:	00001901 	.word	0x00001901
      48:	00001901 	.word	0x00001901
      4c:	00001901 	.word	0x00001901
      50:	00001901 	.word	0x00001901
      54:	00001901 	.word	0x00001901
      58:	00001901 	.word	0x00001901
      5c:	00001901 	.word	0x00001901
      60:	00001901 	.word	0x00001901
      64:	00000e8d 	.word	0x00000e8d
      68:	00000e9d 	.word	0x00000e9d
      6c:	00000ead 	.word	0x00000ead
      70:	00000ebd 	.word	0x00000ebd
      74:	00000ecd 	.word	0x00000ecd
      78:	00000edd 	.word	0x00000edd
      7c:	00000f35 	.word	0x00000f35
      80:	00000f45 	.word	0x00000f45
      84:	00000f55 	.word	0x00000f55
      88:	00001901 	.word	0x00001901
      8c:	00001901 	.word	0x00001901
      90:	00001901 	.word	0x00001901
	...
      9c:	00001901 	.word	0x00001901
      a0:	00001901 	.word	0x00001901
      a4:	00000000 	.word	0x00000000
      a8:	00001901 	.word	0x00001901
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00002f04 	.word	0x00002f04

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00002f04 	.word	0x00002f04
     108:	20000074 	.word	0x20000074
     10c:	00002f04 	.word	0x00002f04
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00001691 	.word	0x00001691
     140:	00001be9 	.word	0x00001be9
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     150:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_ms+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     158:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     15e:	e006      	b.n	16e <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     164:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     166:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_ms+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000004 	.word	0x20000004
     178:	e000e010 	.word	0xe000e010

0000017c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     17c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     17e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     180:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     182:	4281      	cmp	r1, r0
     184:	d30c      	bcc.n	1a0 <_sercom_get_sync_baud_val+0x24>
     186:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     188:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     18a:	3301      	adds	r3, #1
     18c:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     18e:	4288      	cmp	r0, r1
     190:	d9fa      	bls.n	188 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     192:	3b01      	subs	r3, #1
     194:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     196:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     198:	2bff      	cmp	r3, #255	; 0xff
     19a:	d801      	bhi.n	1a0 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     19c:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     19e:	2400      	movs	r4, #0
	}
}
     1a0:	1c20      	adds	r0, r4, #0
     1a2:	bd10      	pop	{r4, pc}

000001a4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a6:	465f      	mov	r7, fp
     1a8:	4656      	mov	r6, sl
     1aa:	464d      	mov	r5, r9
     1ac:	4644      	mov	r4, r8
     1ae:	b4f0      	push	{r4, r5, r6, r7}
     1b0:	b089      	sub	sp, #36	; 0x24
     1b2:	1c1c      	adds	r4, r3, #0
     1b4:	ab12      	add	r3, sp, #72	; 0x48
     1b6:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     1b8:	1c06      	adds	r6, r0, #0
     1ba:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1bc:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     1be:	428e      	cmp	r6, r1
     1c0:	d900      	bls.n	1c4 <_sercom_get_async_baud_val+0x20>
     1c2:	e0c7      	b.n	354 <_sercom_get_async_baud_val+0x1b0>
     1c4:	1c25      	adds	r5, r4, #0
     1c6:	9207      	str	r2, [sp, #28]
     1c8:	1c0c      	adds	r4, r1, #0
     1ca:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     1cc:	2d00      	cmp	r5, #0
     1ce:	d151      	bne.n	274 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     1d0:	1c18      	adds	r0, r3, #0
     1d2:	2100      	movs	r1, #0
     1d4:	2300      	movs	r3, #0
     1d6:	4d63      	ldr	r5, [pc, #396]	; (364 <_sercom_get_async_baud_val+0x1c0>)
     1d8:	47a8      	blx	r5
     1da:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     1dc:	1c26      	adds	r6, r4, #0
     1de:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     1e0:	2300      	movs	r3, #0
     1e2:	2400      	movs	r4, #0
     1e4:	9302      	str	r3, [sp, #8]
     1e6:	9403      	str	r4, [sp, #12]
     1e8:	2200      	movs	r2, #0
     1ea:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     1ec:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     1ee:	2120      	movs	r1, #32
     1f0:	468c      	mov	ip, r1
     1f2:	391f      	subs	r1, #31
     1f4:	9600      	str	r6, [sp, #0]
     1f6:	9701      	str	r7, [sp, #4]
     1f8:	2420      	movs	r4, #32
     1fa:	4264      	negs	r4, r4
     1fc:	1904      	adds	r4, r0, r4
     1fe:	d403      	bmi.n	208 <_sercom_get_async_baud_val+0x64>
     200:	1c0d      	adds	r5, r1, #0
     202:	40a5      	lsls	r5, r4
     204:	46a8      	mov	r8, r5
     206:	e004      	b.n	212 <_sercom_get_async_baud_val+0x6e>
     208:	4664      	mov	r4, ip
     20a:	1a24      	subs	r4, r4, r0
     20c:	1c0d      	adds	r5, r1, #0
     20e:	40e5      	lsrs	r5, r4
     210:	46a8      	mov	r8, r5
     212:	1c0c      	adds	r4, r1, #0
     214:	4084      	lsls	r4, r0
     216:	46a1      	mov	r9, r4

		r = r << 1;
     218:	1c14      	adds	r4, r2, #0
     21a:	1c1d      	adds	r5, r3, #0
     21c:	18a4      	adds	r4, r4, r2
     21e:	415d      	adcs	r5, r3
     220:	1c22      	adds	r2, r4, #0
     222:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     224:	465e      	mov	r6, fp
     226:	4647      	mov	r7, r8
     228:	423e      	tst	r6, r7
     22a:	d003      	beq.n	234 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     22c:	1c0e      	adds	r6, r1, #0
     22e:	4326      	orrs	r6, r4
     230:	1c32      	adds	r2, r6, #0
     232:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     234:	9c01      	ldr	r4, [sp, #4]
     236:	429c      	cmp	r4, r3
     238:	d810      	bhi.n	25c <_sercom_get_async_baud_val+0xb8>
     23a:	d102      	bne.n	242 <_sercom_get_async_baud_val+0x9e>
     23c:	9c00      	ldr	r4, [sp, #0]
     23e:	4294      	cmp	r4, r2
     240:	d80c      	bhi.n	25c <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     242:	9c00      	ldr	r4, [sp, #0]
     244:	9d01      	ldr	r5, [sp, #4]
     246:	1b12      	subs	r2, r2, r4
     248:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     24a:	464d      	mov	r5, r9
     24c:	9e02      	ldr	r6, [sp, #8]
     24e:	9f03      	ldr	r7, [sp, #12]
     250:	4335      	orrs	r5, r6
     252:	1c3c      	adds	r4, r7, #0
     254:	4646      	mov	r6, r8
     256:	4334      	orrs	r4, r6
     258:	9502      	str	r5, [sp, #8]
     25a:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     25c:	3801      	subs	r0, #1
     25e:	d2cb      	bcs.n	1f8 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     260:	2200      	movs	r2, #0
     262:	2301      	movs	r3, #1
     264:	9802      	ldr	r0, [sp, #8]
     266:	9903      	ldr	r1, [sp, #12]
     268:	1a12      	subs	r2, r2, r0
     26a:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     26c:	0c11      	lsrs	r1, r2, #16
     26e:	041b      	lsls	r3, r3, #16
     270:	4319      	orrs	r1, r3
     272:	e06c      	b.n	34e <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     274:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     276:	2d01      	cmp	r5, #1
     278:	d169      	bne.n	34e <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     27a:	0f61      	lsrs	r1, r4, #29
     27c:	1c0f      	adds	r7, r1, #0
     27e:	00e1      	lsls	r1, r4, #3
     280:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     282:	1c18      	adds	r0, r3, #0
     284:	2100      	movs	r1, #0
     286:	2300      	movs	r3, #0
     288:	4c36      	ldr	r4, [pc, #216]	; (364 <_sercom_get_async_baud_val+0x1c0>)
     28a:	47a0      	blx	r4
     28c:	1c04      	adds	r4, r0, #0
     28e:	1c0d      	adds	r5, r1, #0
     290:	2300      	movs	r3, #0
     292:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     294:	3320      	adds	r3, #32
     296:	469b      	mov	fp, r3
     298:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     29a:	4663      	mov	r3, ip
     29c:	9305      	str	r3, [sp, #20]
     29e:	46b9      	mov	r9, r7
     2a0:	466b      	mov	r3, sp
     2a2:	7d1b      	ldrb	r3, [r3, #20]
     2a4:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     2a6:	2300      	movs	r3, #0
     2a8:	469c      	mov	ip, r3
     2aa:	2000      	movs	r0, #0
     2ac:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     2ae:	223f      	movs	r2, #63	; 0x3f
     2b0:	9400      	str	r4, [sp, #0]
     2b2:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     2b4:	2320      	movs	r3, #32
     2b6:	425b      	negs	r3, r3
     2b8:	18d3      	adds	r3, r2, r3
     2ba:	d403      	bmi.n	2c4 <_sercom_get_async_baud_val+0x120>
     2bc:	1c34      	adds	r4, r6, #0
     2be:	409c      	lsls	r4, r3
     2c0:	1c23      	adds	r3, r4, #0
     2c2:	e004      	b.n	2ce <_sercom_get_async_baud_val+0x12a>
     2c4:	465b      	mov	r3, fp
     2c6:	1a9b      	subs	r3, r3, r2
     2c8:	1c34      	adds	r4, r6, #0
     2ca:	40dc      	lsrs	r4, r3
     2cc:	1c23      	adds	r3, r4, #0
     2ce:	1c37      	adds	r7, r6, #0
     2d0:	4097      	lsls	r7, r2

		r = r << 1;
     2d2:	1c04      	adds	r4, r0, #0
     2d4:	1c0d      	adds	r5, r1, #0
     2d6:	1824      	adds	r4, r4, r0
     2d8:	414d      	adcs	r5, r1
     2da:	1c20      	adds	r0, r4, #0
     2dc:	1c29      	adds	r1, r5, #0
     2de:	9002      	str	r0, [sp, #8]
     2e0:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     2e2:	4644      	mov	r4, r8
     2e4:	403c      	ands	r4, r7
     2e6:	46a2      	mov	sl, r4
     2e8:	464c      	mov	r4, r9
     2ea:	4023      	ands	r3, r4
     2ec:	4654      	mov	r4, sl
     2ee:	4323      	orrs	r3, r4
     2f0:	d005      	beq.n	2fe <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     2f2:	9b02      	ldr	r3, [sp, #8]
     2f4:	9c03      	ldr	r4, [sp, #12]
     2f6:	1c1d      	adds	r5, r3, #0
     2f8:	4335      	orrs	r5, r6
     2fa:	1c28      	adds	r0, r5, #0
     2fc:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     2fe:	9b01      	ldr	r3, [sp, #4]
     300:	428b      	cmp	r3, r1
     302:	d80a      	bhi.n	31a <_sercom_get_async_baud_val+0x176>
     304:	d102      	bne.n	30c <_sercom_get_async_baud_val+0x168>
     306:	9b00      	ldr	r3, [sp, #0]
     308:	4283      	cmp	r3, r0
     30a:	d806      	bhi.n	31a <_sercom_get_async_baud_val+0x176>
			r = r - d;
     30c:	9b00      	ldr	r3, [sp, #0]
     30e:	9c01      	ldr	r4, [sp, #4]
     310:	1ac0      	subs	r0, r0, r3
     312:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     314:	4663      	mov	r3, ip
     316:	433b      	orrs	r3, r7
     318:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     31a:	3a01      	subs	r2, #1
     31c:	d2ca      	bcs.n	2b4 <_sercom_get_async_baud_val+0x110>
     31e:	9c00      	ldr	r4, [sp, #0]
     320:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     322:	4662      	mov	r2, ip
     324:	9905      	ldr	r1, [sp, #20]
     326:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     328:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     32a:	4a0f      	ldr	r2, [pc, #60]	; (368 <_sercom_get_async_baud_val+0x1c4>)
     32c:	4293      	cmp	r3, r2
     32e:	d908      	bls.n	342 <_sercom_get_async_baud_val+0x19e>
     330:	9a06      	ldr	r2, [sp, #24]
     332:	3201      	adds	r2, #1
     334:	b2d2      	uxtb	r2, r2
     336:	9206      	str	r2, [sp, #24]
     338:	1c0a      	adds	r2, r1, #0
     33a:	3201      	adds	r2, #1
     33c:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     33e:	2a08      	cmp	r2, #8
     340:	d1ae      	bne.n	2a0 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     342:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     344:	9a06      	ldr	r2, [sp, #24]
     346:	2a08      	cmp	r2, #8
     348:	d004      	beq.n	354 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     34a:	0351      	lsls	r1, r2, #13
     34c:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     34e:	9b07      	ldr	r3, [sp, #28]
     350:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     352:	2500      	movs	r5, #0
}
     354:	1c28      	adds	r0, r5, #0
     356:	b009      	add	sp, #36	; 0x24
     358:	bc3c      	pop	{r2, r3, r4, r5}
     35a:	4690      	mov	r8, r2
     35c:	4699      	mov	r9, r3
     35e:	46a2      	mov	sl, r4
     360:	46ab      	mov	fp, r5
     362:	bdf0      	pop	{r4, r5, r6, r7, pc}
     364:	00001d0d 	.word	0x00001d0d
     368:	00001fff 	.word	0x00001fff

0000036c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     36c:	b510      	push	{r4, lr}
     36e:	b082      	sub	sp, #8
     370:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     372:	4b0e      	ldr	r3, [pc, #56]	; (3ac <sercom_set_gclk_generator+0x40>)
     374:	781b      	ldrb	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d001      	beq.n	37e <sercom_set_gclk_generator+0x12>
     37a:	2900      	cmp	r1, #0
     37c:	d00d      	beq.n	39a <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     37e:	a901      	add	r1, sp, #4
     380:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     382:	2013      	movs	r0, #19
     384:	4b0a      	ldr	r3, [pc, #40]	; (3b0 <sercom_set_gclk_generator+0x44>)
     386:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     388:	2013      	movs	r0, #19
     38a:	4b0a      	ldr	r3, [pc, #40]	; (3b4 <sercom_set_gclk_generator+0x48>)
     38c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <sercom_set_gclk_generator+0x40>)
     390:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     392:	2201      	movs	r2, #1
     394:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     396:	2000      	movs	r0, #0
     398:	e006      	b.n	3a8 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     39a:	4b04      	ldr	r3, [pc, #16]	; (3ac <sercom_set_gclk_generator+0x40>)
     39c:	785b      	ldrb	r3, [r3, #1]
     39e:	4283      	cmp	r3, r0
     3a0:	d001      	beq.n	3a6 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3a2:	201d      	movs	r0, #29
     3a4:	e000      	b.n	3a8 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     3a6:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     3a8:	b002      	add	sp, #8
     3aa:	bd10      	pop	{r4, pc}
     3ac:	2000008c 	.word	0x2000008c
     3b0:	000017a9 	.word	0x000017a9
     3b4:	0000171d 	.word	0x0000171d

000003b8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3b8:	4b44      	ldr	r3, [pc, #272]	; (4cc <_sercom_get_default_pad+0x114>)
     3ba:	4298      	cmp	r0, r3
     3bc:	d033      	beq.n	426 <_sercom_get_default_pad+0x6e>
     3be:	d806      	bhi.n	3ce <_sercom_get_default_pad+0x16>
     3c0:	4b43      	ldr	r3, [pc, #268]	; (4d0 <_sercom_get_default_pad+0x118>)
     3c2:	4298      	cmp	r0, r3
     3c4:	d00d      	beq.n	3e2 <_sercom_get_default_pad+0x2a>
     3c6:	4b43      	ldr	r3, [pc, #268]	; (4d4 <_sercom_get_default_pad+0x11c>)
     3c8:	4298      	cmp	r0, r3
     3ca:	d01b      	beq.n	404 <_sercom_get_default_pad+0x4c>
     3cc:	e06f      	b.n	4ae <_sercom_get_default_pad+0xf6>
     3ce:	4b42      	ldr	r3, [pc, #264]	; (4d8 <_sercom_get_default_pad+0x120>)
     3d0:	4298      	cmp	r0, r3
     3d2:	d04a      	beq.n	46a <_sercom_get_default_pad+0xb2>
     3d4:	4b41      	ldr	r3, [pc, #260]	; (4dc <_sercom_get_default_pad+0x124>)
     3d6:	4298      	cmp	r0, r3
     3d8:	d058      	beq.n	48c <_sercom_get_default_pad+0xd4>
     3da:	4b41      	ldr	r3, [pc, #260]	; (4e0 <_sercom_get_default_pad+0x128>)
     3dc:	4298      	cmp	r0, r3
     3de:	d166      	bne.n	4ae <_sercom_get_default_pad+0xf6>
     3e0:	e032      	b.n	448 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3e2:	2901      	cmp	r1, #1
     3e4:	d006      	beq.n	3f4 <_sercom_get_default_pad+0x3c>
     3e6:	2900      	cmp	r1, #0
     3e8:	d063      	beq.n	4b2 <_sercom_get_default_pad+0xfa>
     3ea:	2902      	cmp	r1, #2
     3ec:	d006      	beq.n	3fc <_sercom_get_default_pad+0x44>
     3ee:	2903      	cmp	r1, #3
     3f0:	d006      	beq.n	400 <_sercom_get_default_pad+0x48>
     3f2:	e001      	b.n	3f8 <_sercom_get_default_pad+0x40>
     3f4:	483b      	ldr	r0, [pc, #236]	; (4e4 <_sercom_get_default_pad+0x12c>)
     3f6:	e067      	b.n	4c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3f8:	2000      	movs	r0, #0
     3fa:	e065      	b.n	4c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fc:	483a      	ldr	r0, [pc, #232]	; (4e8 <_sercom_get_default_pad+0x130>)
     3fe:	e063      	b.n	4c8 <_sercom_get_default_pad+0x110>
     400:	483a      	ldr	r0, [pc, #232]	; (4ec <_sercom_get_default_pad+0x134>)
     402:	e061      	b.n	4c8 <_sercom_get_default_pad+0x110>
     404:	2901      	cmp	r1, #1
     406:	d006      	beq.n	416 <_sercom_get_default_pad+0x5e>
     408:	2900      	cmp	r1, #0
     40a:	d054      	beq.n	4b6 <_sercom_get_default_pad+0xfe>
     40c:	2902      	cmp	r1, #2
     40e:	d006      	beq.n	41e <_sercom_get_default_pad+0x66>
     410:	2903      	cmp	r1, #3
     412:	d006      	beq.n	422 <_sercom_get_default_pad+0x6a>
     414:	e001      	b.n	41a <_sercom_get_default_pad+0x62>
     416:	4836      	ldr	r0, [pc, #216]	; (4f0 <_sercom_get_default_pad+0x138>)
     418:	e056      	b.n	4c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     41a:	2000      	movs	r0, #0
     41c:	e054      	b.n	4c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     41e:	4835      	ldr	r0, [pc, #212]	; (4f4 <_sercom_get_default_pad+0x13c>)
     420:	e052      	b.n	4c8 <_sercom_get_default_pad+0x110>
     422:	4835      	ldr	r0, [pc, #212]	; (4f8 <_sercom_get_default_pad+0x140>)
     424:	e050      	b.n	4c8 <_sercom_get_default_pad+0x110>
     426:	2901      	cmp	r1, #1
     428:	d006      	beq.n	438 <_sercom_get_default_pad+0x80>
     42a:	2900      	cmp	r1, #0
     42c:	d045      	beq.n	4ba <_sercom_get_default_pad+0x102>
     42e:	2902      	cmp	r1, #2
     430:	d006      	beq.n	440 <_sercom_get_default_pad+0x88>
     432:	2903      	cmp	r1, #3
     434:	d006      	beq.n	444 <_sercom_get_default_pad+0x8c>
     436:	e001      	b.n	43c <_sercom_get_default_pad+0x84>
     438:	4830      	ldr	r0, [pc, #192]	; (4fc <_sercom_get_default_pad+0x144>)
     43a:	e045      	b.n	4c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     43c:	2000      	movs	r0, #0
     43e:	e043      	b.n	4c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     440:	482f      	ldr	r0, [pc, #188]	; (500 <_sercom_get_default_pad+0x148>)
     442:	e041      	b.n	4c8 <_sercom_get_default_pad+0x110>
     444:	482f      	ldr	r0, [pc, #188]	; (504 <_sercom_get_default_pad+0x14c>)
     446:	e03f      	b.n	4c8 <_sercom_get_default_pad+0x110>
     448:	2901      	cmp	r1, #1
     44a:	d006      	beq.n	45a <_sercom_get_default_pad+0xa2>
     44c:	2900      	cmp	r1, #0
     44e:	d036      	beq.n	4be <_sercom_get_default_pad+0x106>
     450:	2902      	cmp	r1, #2
     452:	d006      	beq.n	462 <_sercom_get_default_pad+0xaa>
     454:	2903      	cmp	r1, #3
     456:	d006      	beq.n	466 <_sercom_get_default_pad+0xae>
     458:	e001      	b.n	45e <_sercom_get_default_pad+0xa6>
     45a:	482b      	ldr	r0, [pc, #172]	; (508 <_sercom_get_default_pad+0x150>)
     45c:	e034      	b.n	4c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     45e:	2000      	movs	r0, #0
     460:	e032      	b.n	4c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	482a      	ldr	r0, [pc, #168]	; (50c <_sercom_get_default_pad+0x154>)
     464:	e030      	b.n	4c8 <_sercom_get_default_pad+0x110>
     466:	482a      	ldr	r0, [pc, #168]	; (510 <_sercom_get_default_pad+0x158>)
     468:	e02e      	b.n	4c8 <_sercom_get_default_pad+0x110>
     46a:	2901      	cmp	r1, #1
     46c:	d006      	beq.n	47c <_sercom_get_default_pad+0xc4>
     46e:	2900      	cmp	r1, #0
     470:	d027      	beq.n	4c2 <_sercom_get_default_pad+0x10a>
     472:	2902      	cmp	r1, #2
     474:	d006      	beq.n	484 <_sercom_get_default_pad+0xcc>
     476:	2903      	cmp	r1, #3
     478:	d006      	beq.n	488 <_sercom_get_default_pad+0xd0>
     47a:	e001      	b.n	480 <_sercom_get_default_pad+0xc8>
     47c:	4825      	ldr	r0, [pc, #148]	; (514 <_sercom_get_default_pad+0x15c>)
     47e:	e023      	b.n	4c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     480:	2000      	movs	r0, #0
     482:	e021      	b.n	4c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     484:	4824      	ldr	r0, [pc, #144]	; (518 <_sercom_get_default_pad+0x160>)
     486:	e01f      	b.n	4c8 <_sercom_get_default_pad+0x110>
     488:	4824      	ldr	r0, [pc, #144]	; (51c <_sercom_get_default_pad+0x164>)
     48a:	e01d      	b.n	4c8 <_sercom_get_default_pad+0x110>
     48c:	2901      	cmp	r1, #1
     48e:	d006      	beq.n	49e <_sercom_get_default_pad+0xe6>
     490:	2900      	cmp	r1, #0
     492:	d018      	beq.n	4c6 <_sercom_get_default_pad+0x10e>
     494:	2902      	cmp	r1, #2
     496:	d006      	beq.n	4a6 <_sercom_get_default_pad+0xee>
     498:	2903      	cmp	r1, #3
     49a:	d006      	beq.n	4aa <_sercom_get_default_pad+0xf2>
     49c:	e001      	b.n	4a2 <_sercom_get_default_pad+0xea>
     49e:	4820      	ldr	r0, [pc, #128]	; (520 <_sercom_get_default_pad+0x168>)
     4a0:	e012      	b.n	4c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4a2:	2000      	movs	r0, #0
     4a4:	e010      	b.n	4c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4a6:	481f      	ldr	r0, [pc, #124]	; (524 <_sercom_get_default_pad+0x16c>)
     4a8:	e00e      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4aa:	481f      	ldr	r0, [pc, #124]	; (528 <_sercom_get_default_pad+0x170>)
     4ac:	e00c      	b.n	4c8 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4ae:	2000      	movs	r0, #0
     4b0:	e00a      	b.n	4c8 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4b2:	481e      	ldr	r0, [pc, #120]	; (52c <_sercom_get_default_pad+0x174>)
     4b4:	e008      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4b6:	2003      	movs	r0, #3
     4b8:	e006      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4ba:	481d      	ldr	r0, [pc, #116]	; (530 <_sercom_get_default_pad+0x178>)
     4bc:	e004      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4be:	481d      	ldr	r0, [pc, #116]	; (534 <_sercom_get_default_pad+0x17c>)
     4c0:	e002      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4c2:	481d      	ldr	r0, [pc, #116]	; (538 <_sercom_get_default_pad+0x180>)
     4c4:	e000      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4c6:	481d      	ldr	r0, [pc, #116]	; (53c <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     4c8:	4770      	bx	lr
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	42001000 	.word	0x42001000
     4d0:	42000800 	.word	0x42000800
     4d4:	42000c00 	.word	0x42000c00
     4d8:	42001800 	.word	0x42001800
     4dc:	42001c00 	.word	0x42001c00
     4e0:	42001400 	.word	0x42001400
     4e4:	00050003 	.word	0x00050003
     4e8:	00060003 	.word	0x00060003
     4ec:	00070003 	.word	0x00070003
     4f0:	00010003 	.word	0x00010003
     4f4:	001e0003 	.word	0x001e0003
     4f8:	001f0003 	.word	0x001f0003
     4fc:	000d0002 	.word	0x000d0002
     500:	000e0002 	.word	0x000e0002
     504:	000f0002 	.word	0x000f0002
     508:	00110003 	.word	0x00110003
     50c:	00120003 	.word	0x00120003
     510:	00130003 	.word	0x00130003
     514:	003f0005 	.word	0x003f0005
     518:	003e0005 	.word	0x003e0005
     51c:	00520005 	.word	0x00520005
     520:	00170003 	.word	0x00170003
     524:	00180003 	.word	0x00180003
     528:	00190003 	.word	0x00190003
     52c:	00040003 	.word	0x00040003
     530:	000c0002 	.word	0x000c0002
     534:	00100003 	.word	0x00100003
     538:	00530005 	.word	0x00530005
     53c:	00160003 	.word	0x00160003

00000540 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     540:	b530      	push	{r4, r5, lr}
     542:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     544:	4b0c      	ldr	r3, [pc, #48]	; (578 <_sercom_get_sercom_inst_index+0x38>)
     546:	466a      	mov	r2, sp
     548:	cb32      	ldmia	r3!, {r1, r4, r5}
     54a:	c232      	stmia	r2!, {r1, r4, r5}
     54c:	cb32      	ldmia	r3!, {r1, r4, r5}
     54e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     550:	9b00      	ldr	r3, [sp, #0]
     552:	4283      	cmp	r3, r0
     554:	d006      	beq.n	564 <_sercom_get_sercom_inst_index+0x24>
     556:	2301      	movs	r3, #1
     558:	009a      	lsls	r2, r3, #2
     55a:	4669      	mov	r1, sp
     55c:	5852      	ldr	r2, [r2, r1]
     55e:	4282      	cmp	r2, r0
     560:	d103      	bne.n	56a <_sercom_get_sercom_inst_index+0x2a>
     562:	e000      	b.n	566 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     564:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     566:	b2d8      	uxtb	r0, r3
     568:	e003      	b.n	572 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     56a:	3301      	adds	r3, #1
     56c:	2b06      	cmp	r3, #6
     56e:	d1f3      	bne.n	558 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     570:	2000      	movs	r0, #0
}
     572:	b007      	add	sp, #28
     574:	bd30      	pop	{r4, r5, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	00002d04 	.word	0x00002d04

0000057c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     57c:	b5f0      	push	{r4, r5, r6, r7, lr}
     57e:	4647      	mov	r7, r8
     580:	b480      	push	{r7}
     582:	1c0c      	adds	r4, r1, #0
     584:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     586:	2800      	cmp	r0, #0
     588:	d110      	bne.n	5ac <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
     58a:	2a00      	cmp	r2, #0
     58c:	dd0a      	ble.n	5a4 <_read+0x28>
     58e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     590:	4e09      	ldr	r6, [pc, #36]	; (5b8 <_read+0x3c>)
     592:	4d0a      	ldr	r5, [pc, #40]	; (5bc <_read+0x40>)
     594:	6830      	ldr	r0, [r6, #0]
     596:	1c21      	adds	r1, r4, #0
     598:	682b      	ldr	r3, [r5, #0]
     59a:	4798      	blx	r3
		ptr++;
     59c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     59e:	42bc      	cmp	r4, r7
     5a0:	d1f8      	bne.n	594 <_read+0x18>
     5a2:	e001      	b.n	5a8 <_read+0x2c>
     5a4:	2300      	movs	r3, #0
     5a6:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     5a8:	4640      	mov	r0, r8
     5aa:	e001      	b.n	5b0 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     5ac:	2001      	movs	r0, #1
     5ae:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     5b0:	bc04      	pop	{r2}
     5b2:	4690      	mov	r8, r2
     5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	200001b0 	.word	0x200001b0
     5bc:	200001a8 	.word	0x200001a8

000005c0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c2:	4647      	mov	r7, r8
     5c4:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     5c6:	3801      	subs	r0, #1
     5c8:	2802      	cmp	r0, #2
     5ca:	d815      	bhi.n	5f8 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
     5cc:	2a00      	cmp	r2, #0
     5ce:	d010      	beq.n	5f2 <_write+0x32>
     5d0:	1c15      	adds	r5, r2, #0
     5d2:	1c0e      	adds	r6, r1, #0
     5d4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     5d6:	4b0c      	ldr	r3, [pc, #48]	; (608 <_write+0x48>)
     5d8:	4698      	mov	r8, r3
     5da:	4f0c      	ldr	r7, [pc, #48]	; (60c <_write+0x4c>)
     5dc:	4643      	mov	r3, r8
     5de:	6818      	ldr	r0, [r3, #0]
     5e0:	5d31      	ldrb	r1, [r6, r4]
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	4798      	blx	r3
     5e6:	2800      	cmp	r0, #0
     5e8:	db09      	blt.n	5fe <_write+0x3e>
			return -1;
		}
		++nChars;
     5ea:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     5ec:	42a5      	cmp	r5, r4
     5ee:	d1f5      	bne.n	5dc <_write+0x1c>
     5f0:	e000      	b.n	5f4 <_write+0x34>
     5f2:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     5f4:	1c20      	adds	r0, r4, #0
     5f6:	e004      	b.n	602 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     5f8:	2001      	movs	r0, #1
     5fa:	4240      	negs	r0, r0
     5fc:	e001      	b.n	602 <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     5fe:	2001      	movs	r0, #1
     600:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     602:	bc04      	pop	{r2}
     604:	4690      	mov	r8, r2
     606:	bdf0      	pop	{r4, r5, r6, r7, pc}
     608:	200001b0 	.word	0x200001b0
     60c:	200001ac 	.word	0x200001ac

00000610 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b082      	sub	sp, #8
     614:	1c05      	adds	r5, r0, #0
     616:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     618:	2200      	movs	r2, #0
     61a:	466b      	mov	r3, sp
     61c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     61e:	4c06      	ldr	r4, [pc, #24]	; (638 <usart_serial_getchar+0x28>)
     620:	1c28      	adds	r0, r5, #0
     622:	466b      	mov	r3, sp
     624:	1d99      	adds	r1, r3, #6
     626:	47a0      	blx	r4
     628:	2800      	cmp	r0, #0
     62a:	d1f9      	bne.n	620 <usart_serial_getchar+0x10>

	*c = temp;
     62c:	466b      	mov	r3, sp
     62e:	3306      	adds	r3, #6
     630:	881b      	ldrh	r3, [r3, #0]
     632:	7033      	strb	r3, [r6, #0]
}
     634:	b002      	add	sp, #8
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	00000b69 	.word	0x00000b69

0000063c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     640:	b28c      	uxth	r4, r1
     642:	4e03      	ldr	r6, [pc, #12]	; (650 <usart_serial_putchar+0x14>)
     644:	1c28      	adds	r0, r5, #0
     646:	1c21      	adds	r1, r4, #0
     648:	47b0      	blx	r6
     64a:	2800      	cmp	r0, #0
     64c:	d1fa      	bne.n	644 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     64e:	bd70      	pop	{r4, r5, r6, pc}
     650:	00000b3d 	.word	0x00000b3d

00000654 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     654:	b510      	push	{r4, lr}
     656:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
     658:	466b      	mov	r3, sp
     65a:	1ddc      	adds	r4, r3, #7
     65c:	4810      	ldr	r0, [pc, #64]	; (6a0 <USART_HOST_ISR_VECT+0x4c>)
     65e:	1c21      	adds	r1, r4, #0
     660:	2201      	movs	r2, #1
     662:	4b10      	ldr	r3, [pc, #64]	; (6a4 <USART_HOST_ISR_VECT+0x50>)
     664:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     666:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     668:	f3bf 8f5f 	dmb	sy
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     66c:	2200      	movs	r2, #0
     66e:	4b0e      	ldr	r3, [pc, #56]	; (6a8 <USART_HOST_ISR_VECT+0x54>)
     670:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     672:	4b0e      	ldr	r3, [pc, #56]	; (6ac <USART_HOST_ISR_VECT+0x58>)
     674:	781b      	ldrb	r3, [r3, #0]
     676:	7821      	ldrb	r1, [r4, #0]
     678:	4a0d      	ldr	r2, [pc, #52]	; (6b0 <USART_HOST_ISR_VECT+0x5c>)
     67a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     67c:	2b9b      	cmp	r3, #155	; 0x9b
     67e:	d103      	bne.n	688 <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     680:	2200      	movs	r2, #0
     682:	4b0a      	ldr	r3, [pc, #40]	; (6ac <USART_HOST_ISR_VECT+0x58>)
     684:	701a      	strb	r2, [r3, #0]
     686:	e002      	b.n	68e <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
     688:	3301      	adds	r3, #1
     68a:	4a08      	ldr	r2, [pc, #32]	; (6ac <USART_HOST_ISR_VECT+0x58>)
     68c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
     68e:	2201      	movs	r2, #1
     690:	4b05      	ldr	r3, [pc, #20]	; (6a8 <USART_HOST_ISR_VECT+0x54>)
     692:	701a      	strb	r2, [r3, #0]
     694:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     698:	b662      	cpsie	i
}
     69a:	b002      	add	sp, #8
     69c:	bd10      	pop	{r4, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	2000012c 	.word	0x2000012c
     6a4:	00000be1 	.word	0x00000be1
     6a8:	20000008 	.word	0x20000008
     6ac:	20000160 	.word	0x20000160
     6b0:	20000090 	.word	0x20000090

000006b4 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
     6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	05db      	lsls	r3, r3, #23
     6bc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6be:	2300      	movs	r3, #0
     6c0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     6c2:	22ff      	movs	r2, #255	; 0xff
     6c4:	4669      	mov	r1, sp
     6c6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     6c8:	2200      	movs	r2, #0
     6ca:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     6cc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     6ce:	2401      	movs	r4, #1
     6d0:	2124      	movs	r1, #36	; 0x24
     6d2:	4668      	mov	r0, sp
     6d4:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     6d6:	3101      	adds	r1, #1
     6d8:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     6da:	3101      	adds	r1, #1
     6dc:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     6de:	3101      	adds	r1, #1
     6e0:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     6e2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     6e4:	3105      	adds	r1, #5
     6e6:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     6e8:	3101      	adds	r1, #1
     6ea:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     6ec:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     6ee:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     6f0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     6f2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     6f4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     6f6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     6f8:	2313      	movs	r3, #19
     6fa:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     6fc:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
     6fe:	2380      	movs	r3, #128	; 0x80
     700:	035b      	lsls	r3, r3, #13
     702:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
     704:	4b2f      	ldr	r3, [pc, #188]	; (7c4 <sio2host_init+0x110>)
     706:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
     708:	4b2f      	ldr	r3, [pc, #188]	; (7c8 <sio2host_init+0x114>)
     70a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
     70c:	2301      	movs	r3, #1
     70e:	425b      	negs	r3, r3
     710:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
     712:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
     714:	23e1      	movs	r3, #225	; 0xe1
     716:	025b      	lsls	r3, r3, #9
     718:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     71a:	4d2c      	ldr	r5, [pc, #176]	; (7cc <sio2host_init+0x118>)
     71c:	4b2c      	ldr	r3, [pc, #176]	; (7d0 <sio2host_init+0x11c>)
     71e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     720:	4a2c      	ldr	r2, [pc, #176]	; (7d4 <sio2host_init+0x120>)
     722:	4b2d      	ldr	r3, [pc, #180]	; (7d8 <sio2host_init+0x124>)
     724:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     726:	4a2d      	ldr	r2, [pc, #180]	; (7dc <sio2host_init+0x128>)
     728:	4b2d      	ldr	r3, [pc, #180]	; (7e0 <sio2host_init+0x12c>)
     72a:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     72c:	1c28      	adds	r0, r5, #0
     72e:	492d      	ldr	r1, [pc, #180]	; (7e4 <sio2host_init+0x130>)
     730:	466a      	mov	r2, sp
     732:	4b2d      	ldr	r3, [pc, #180]	; (7e8 <sio2host_init+0x134>)
     734:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     736:	4f2d      	ldr	r7, [pc, #180]	; (7ec <sio2host_init+0x138>)
     738:	683b      	ldr	r3, [r7, #0]
     73a:	6898      	ldr	r0, [r3, #8]
     73c:	2100      	movs	r1, #0
     73e:	4e2c      	ldr	r6, [pc, #176]	; (7f0 <sio2host_init+0x13c>)
     740:	47b0      	blx	r6
	setbuf(stdin, NULL);
     742:	683b      	ldr	r3, [r7, #0]
     744:	6858      	ldr	r0, [r3, #4]
     746:	2100      	movs	r1, #0
     748:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     74a:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     74c:	1c30      	adds	r0, r6, #0
     74e:	4b29      	ldr	r3, [pc, #164]	; (7f4 <sio2host_init+0x140>)
     750:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     752:	231f      	movs	r3, #31
     754:	4018      	ands	r0, r3
     756:	4084      	lsls	r4, r0
     758:	4b27      	ldr	r3, [pc, #156]	; (7f8 <sio2host_init+0x144>)
     75a:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     75c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     75e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     760:	2b00      	cmp	r3, #0
     762:	d1fc      	bne.n	75e <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     764:	6832      	ldr	r2, [r6, #0]
     766:	3302      	adds	r3, #2
     768:	4313      	orrs	r3, r2
     76a:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     76c:	4b17      	ldr	r3, [pc, #92]	; (7cc <sio2host_init+0x118>)
     76e:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     770:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     772:	2a00      	cmp	r2, #0
     774:	d1fc      	bne.n	770 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
     776:	685a      	ldr	r2, [r3, #4]
     778:	2180      	movs	r1, #128	; 0x80
     77a:	0249      	lsls	r1, r1, #9
     77c:	430a      	orrs	r2, r1
     77e:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
     780:	2101      	movs	r1, #1
     782:	4a12      	ldr	r2, [pc, #72]	; (7cc <sio2host_init+0x118>)
     784:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     786:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     788:	2a00      	cmp	r2, #0
     78a:	d1fc      	bne.n	786 <sio2host_init+0xd2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     78c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     78e:	2a00      	cmp	r2, #0
     790:	d1fc      	bne.n	78c <sio2host_init+0xd8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     792:	685a      	ldr	r2, [r3, #4]
     794:	2180      	movs	r1, #128	; 0x80
     796:	0289      	lsls	r1, r1, #10
     798:	430a      	orrs	r2, r1
     79a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     79c:	2101      	movs	r1, #1
     79e:	4a0b      	ldr	r2, [pc, #44]	; (7cc <sio2host_init+0x118>)
     7a0:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7a2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7a4:	2a00      	cmp	r2, #0
     7a6:	d1fc      	bne.n	7a2 <sio2host_init+0xee>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
     7a8:	2000      	movs	r0, #0
     7aa:	4914      	ldr	r1, [pc, #80]	; (7fc <sio2host_init+0x148>)
     7ac:	4b14      	ldr	r3, [pc, #80]	; (800 <sio2host_init+0x14c>)
     7ae:	4798      	blx	r3
     7b0:	2204      	movs	r2, #4
     7b2:	4b0c      	ldr	r3, [pc, #48]	; (7e4 <sio2host_init+0x130>)
     7b4:	759a      	strb	r2, [r3, #22]
     7b6:	32fd      	adds	r2, #253	; 0xfd
     7b8:	32ff      	adds	r2, #255	; 0xff
     7ba:	4b0f      	ldr	r3, [pc, #60]	; (7f8 <sio2host_init+0x144>)
     7bc:	601a      	str	r2, [r3, #0]
}
     7be:	b011      	add	sp, #68	; 0x44
     7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00040003 	.word	0x00040003
     7c8:	00050003 	.word	0x00050003
     7cc:	2000012c 	.word	0x2000012c
     7d0:	200001b0 	.word	0x200001b0
     7d4:	0000063d 	.word	0x0000063d
     7d8:	200001ac 	.word	0x200001ac
     7dc:	00000611 	.word	0x00000611
     7e0:	200001a8 	.word	0x200001a8
     7e4:	42000800 	.word	0x42000800
     7e8:	00000805 	.word	0x00000805
     7ec:	2000006c 	.word	0x2000006c
     7f0:	00001e05 	.word	0x00001e05
     7f4:	00000e61 	.word	0x00000e61
     7f8:	e000e100 	.word	0xe000e100
     7fc:	00000655 	.word	0x00000655
     800:	00000e25 	.word	0x00000e25

00000804 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     804:	b5f0      	push	{r4, r5, r6, r7, lr}
     806:	465f      	mov	r7, fp
     808:	4656      	mov	r6, sl
     80a:	464d      	mov	r5, r9
     80c:	4644      	mov	r4, r8
     80e:	b4f0      	push	{r4, r5, r6, r7}
     810:	b091      	sub	sp, #68	; 0x44
     812:	1c05      	adds	r5, r0, #0
     814:	1c0c      	adds	r4, r1, #0
     816:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     818:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     81a:	1c08      	adds	r0, r1, #0
     81c:	4bb9      	ldr	r3, [pc, #740]	; (b04 <usart_init+0x300>)
     81e:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     820:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     822:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     824:	07d2      	lsls	r2, r2, #31
     826:	d500      	bpl.n	82a <usart_init+0x26>
     828:	e163      	b.n	af2 <usart_init+0x2ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     82a:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     82c:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     82e:	0792      	lsls	r2, r2, #30
     830:	d500      	bpl.n	834 <usart_init+0x30>
     832:	e15e      	b.n	af2 <usart_init+0x2ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     834:	49b4      	ldr	r1, [pc, #720]	; (b08 <usart_init+0x304>)
     836:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     838:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     83a:	3b1b      	subs	r3, #27
     83c:	40bb      	lsls	r3, r7
     83e:	4313      	orrs	r3, r2
     840:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     842:	a90f      	add	r1, sp, #60	; 0x3c
     844:	272d      	movs	r7, #45	; 0x2d
     846:	5df3      	ldrb	r3, [r6, r7]
     848:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     84a:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     84c:	b2c3      	uxtb	r3, r0
     84e:	9302      	str	r3, [sp, #8]
     850:	1c18      	adds	r0, r3, #0
     852:	4bae      	ldr	r3, [pc, #696]	; (b0c <usart_init+0x308>)
     854:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     856:	9802      	ldr	r0, [sp, #8]
     858:	4bad      	ldr	r3, [pc, #692]	; (b10 <usart_init+0x30c>)
     85a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     85c:	5df0      	ldrb	r0, [r6, r7]
     85e:	2100      	movs	r1, #0
     860:	4bac      	ldr	r3, [pc, #688]	; (b14 <usart_init+0x310>)
     862:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     864:	7af3      	ldrb	r3, [r6, #11]
     866:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     868:	2324      	movs	r3, #36	; 0x24
     86a:	5cf3      	ldrb	r3, [r6, r3]
     86c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     86e:	2325      	movs	r3, #37	; 0x25
     870:	5cf3      	ldrb	r3, [r6, r3]
     872:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     874:	7ef3      	ldrb	r3, [r6, #27]
     876:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     878:	7f33      	ldrb	r3, [r6, #28]
     87a:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     87c:	682b      	ldr	r3, [r5, #0]
     87e:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     880:	1c18      	adds	r0, r3, #0
     882:	4ba0      	ldr	r3, [pc, #640]	; (b04 <usart_init+0x300>)
     884:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     886:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     888:	2200      	movs	r2, #0
     88a:	230e      	movs	r3, #14
     88c:	a906      	add	r1, sp, #24
     88e:	468c      	mov	ip, r1
     890:	4463      	add	r3, ip
     892:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     894:	8a33      	ldrh	r3, [r6, #16]
     896:	4699      	mov	r9, r3
     898:	2380      	movs	r3, #128	; 0x80
     89a:	01db      	lsls	r3, r3, #7
     89c:	4599      	cmp	r9, r3
     89e:	d019      	beq.n	8d4 <usart_init+0xd0>
     8a0:	d804      	bhi.n	8ac <usart_init+0xa8>
     8a2:	2380      	movs	r3, #128	; 0x80
     8a4:	019b      	lsls	r3, r3, #6
     8a6:	4599      	cmp	r9, r3
     8a8:	d00a      	beq.n	8c0 <usart_init+0xbc>
     8aa:	e103      	b.n	ab4 <usart_init+0x2b0>
     8ac:	23c0      	movs	r3, #192	; 0xc0
     8ae:	01db      	lsls	r3, r3, #7
     8b0:	4599      	cmp	r9, r3
     8b2:	d00a      	beq.n	8ca <usart_init+0xc6>
     8b4:	2380      	movs	r3, #128	; 0x80
     8b6:	021b      	lsls	r3, r3, #8
     8b8:	4599      	cmp	r9, r3
     8ba:	d100      	bne.n	8be <usart_init+0xba>
     8bc:	e0ff      	b.n	abe <usart_init+0x2ba>
     8be:	e0f9      	b.n	ab4 <usart_init+0x2b0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8c0:	2310      	movs	r3, #16
     8c2:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8c4:	3b0f      	subs	r3, #15
     8c6:	9307      	str	r3, [sp, #28]
     8c8:	e0fd      	b.n	ac6 <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8ca:	2308      	movs	r3, #8
     8cc:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8ce:	3b07      	subs	r3, #7
     8d0:	9307      	str	r3, [sp, #28]
     8d2:	e0f8      	b.n	ac6 <usart_init+0x2c2>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8d4:	6833      	ldr	r3, [r6, #0]
     8d6:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     8d8:	68f3      	ldr	r3, [r6, #12]
     8da:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     8dc:	6973      	ldr	r3, [r6, #20]
     8de:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8e0:	7e33      	ldrb	r3, [r6, #24]
     8e2:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8e4:	2326      	movs	r3, #38	; 0x26
     8e6:	5cf3      	ldrb	r3, [r6, r3]
     8e8:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     8ea:	6872      	ldr	r2, [r6, #4]
     8ec:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     8ee:	2a00      	cmp	r2, #0
     8f0:	d015      	beq.n	91e <usart_init+0x11a>
     8f2:	2380      	movs	r3, #128	; 0x80
     8f4:	055b      	lsls	r3, r3, #21
     8f6:	429a      	cmp	r2, r3
     8f8:	d136      	bne.n	968 <usart_init+0x164>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     8fa:	2327      	movs	r3, #39	; 0x27
     8fc:	5cf3      	ldrb	r3, [r6, r3]
     8fe:	2b00      	cmp	r3, #0
     900:	d136      	bne.n	970 <usart_init+0x16c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     902:	6a33      	ldr	r3, [r6, #32]
     904:	4698      	mov	r8, r3
     906:	b2c0      	uxtb	r0, r0
     908:	4b83      	ldr	r3, [pc, #524]	; (b18 <usart_init+0x314>)
     90a:	4798      	blx	r3
     90c:	1c01      	adds	r1, r0, #0
     90e:	4640      	mov	r0, r8
     910:	220e      	movs	r2, #14
     912:	ab06      	add	r3, sp, #24
     914:	469c      	mov	ip, r3
     916:	4462      	add	r2, ip
     918:	4b80      	ldr	r3, [pc, #512]	; (b1c <usart_init+0x318>)
     91a:	4798      	blx	r3
     91c:	e025      	b.n	96a <usart_init+0x166>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     91e:	2308      	movs	r3, #8
     920:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     922:	2300      	movs	r3, #0
     924:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     926:	2327      	movs	r3, #39	; 0x27
     928:	5cf3      	ldrb	r3, [r6, r3]
     92a:	2b00      	cmp	r3, #0
     92c:	d00b      	beq.n	946 <usart_init+0x142>
				status_code =
     92e:	4643      	mov	r3, r8
     930:	9300      	str	r3, [sp, #0]
     932:	6a30      	ldr	r0, [r6, #32]
     934:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     936:	220e      	movs	r2, #14
     938:	ab06      	add	r3, sp, #24
     93a:	469c      	mov	ip, r3
     93c:	4462      	add	r2, ip
     93e:	9b07      	ldr	r3, [sp, #28]
     940:	4f77      	ldr	r7, [pc, #476]	; (b20 <usart_init+0x31c>)
     942:	47b8      	blx	r7
     944:	e011      	b.n	96a <usart_init+0x166>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     946:	6a33      	ldr	r3, [r6, #32]
     948:	1c1f      	adds	r7, r3, #0
     94a:	b2c0      	uxtb	r0, r0
     94c:	4b72      	ldr	r3, [pc, #456]	; (b18 <usart_init+0x314>)
     94e:	4798      	blx	r3
     950:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     952:	4643      	mov	r3, r8
     954:	9300      	str	r3, [sp, #0]
     956:	1c38      	adds	r0, r7, #0
     958:	220e      	movs	r2, #14
     95a:	ab06      	add	r3, sp, #24
     95c:	469c      	mov	ip, r3
     95e:	4462      	add	r2, ip
     960:	9b07      	ldr	r3, [sp, #28]
     962:	4f6f      	ldr	r7, [pc, #444]	; (b20 <usart_init+0x31c>)
     964:	47b8      	blx	r7
     966:	e000      	b.n	96a <usart_init+0x166>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     968:	2000      	movs	r0, #0
     96a:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     96c:	d000      	beq.n	970 <usart_init+0x16c>
     96e:	e0c0      	b.n	af2 <usart_init+0x2ee>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     970:	7e73      	ldrb	r3, [r6, #25]
     972:	2b00      	cmp	r3, #0
     974:	d002      	beq.n	97c <usart_init+0x178>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     976:	7eb3      	ldrb	r3, [r6, #26]
     978:	4652      	mov	r2, sl
     97a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     97c:	682a      	ldr	r2, [r5, #0]
     97e:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     980:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     982:	2b00      	cmp	r3, #0
     984:	d1fc      	bne.n	980 <usart_init+0x17c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     986:	330e      	adds	r3, #14
     988:	aa06      	add	r2, sp, #24
     98a:	4694      	mov	ip, r2
     98c:	4463      	add	r3, ip
     98e:	881b      	ldrh	r3, [r3, #0]
     990:	4652      	mov	r2, sl
     992:	8193      	strh	r3, [r2, #12]
     994:	9b02      	ldr	r3, [sp, #8]
     996:	465a      	mov	r2, fp
     998:	4313      	orrs	r3, r2
     99a:	9a03      	ldr	r2, [sp, #12]
     99c:	4313      	orrs	r3, r2
     99e:	433b      	orrs	r3, r7
     9a0:	464a      	mov	r2, r9
     9a2:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9a4:	9a04      	ldr	r2, [sp, #16]
     9a6:	0212      	lsls	r2, r2, #8
     9a8:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9aa:	9a05      	ldr	r2, [sp, #20]
     9ac:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     9ae:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     9b0:	2327      	movs	r3, #39	; 0x27
     9b2:	5cf3      	ldrb	r3, [r6, r3]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d101      	bne.n	9bc <usart_init+0x1b8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     9b8:	3304      	adds	r3, #4
     9ba:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9bc:	7f33      	ldrb	r3, [r6, #28]
     9be:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     9c0:	7e72      	ldrb	r2, [r6, #25]
     9c2:	0293      	lsls	r3, r2, #10
     9c4:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9c6:	7f72      	ldrb	r2, [r6, #29]
     9c8:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9ca:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9cc:	2224      	movs	r2, #36	; 0x24
     9ce:	5cb2      	ldrb	r2, [r6, r2]
     9d0:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9d2:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     9d4:	2225      	movs	r2, #37	; 0x25
     9d6:	5cb2      	ldrb	r2, [r6, r2]
     9d8:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9da:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     9dc:	7af1      	ldrb	r1, [r6, #11]
     9de:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     9e0:	8933      	ldrh	r3, [r6, #8]
     9e2:	2bff      	cmp	r3, #255	; 0xff
     9e4:	d004      	beq.n	9f0 <usart_init+0x1ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     9e6:	2280      	movs	r2, #128	; 0x80
     9e8:	0452      	lsls	r2, r2, #17
     9ea:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     9ec:	4319      	orrs	r1, r3
     9ee:	e005      	b.n	9fc <usart_init+0x1f8>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     9f0:	7ef3      	ldrb	r3, [r6, #27]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d002      	beq.n	9fc <usart_init+0x1f8>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     9f6:	2380      	movs	r3, #128	; 0x80
     9f8:	04db      	lsls	r3, r3, #19
     9fa:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     9fc:	232c      	movs	r3, #44	; 0x2c
     9fe:	5cf3      	ldrb	r3, [r6, r3]
     a00:	2b00      	cmp	r3, #0
     a02:	d103      	bne.n	a0c <usart_init+0x208>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a04:	4b47      	ldr	r3, [pc, #284]	; (b24 <usart_init+0x320>)
     a06:	789b      	ldrb	r3, [r3, #2]
     a08:	079b      	lsls	r3, r3, #30
     a0a:	d501      	bpl.n	a10 <usart_init+0x20c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a0c:	2380      	movs	r3, #128	; 0x80
     a0e:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a10:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a12:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a14:	2b00      	cmp	r3, #0
     a16:	d1fc      	bne.n	a12 <usart_init+0x20e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     a18:	4653      	mov	r3, sl
     a1a:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a1c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a1e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a20:	2b00      	cmp	r3, #0
     a22:	d1fc      	bne.n	a1e <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     a24:	4653      	mov	r3, sl
     a26:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a28:	ab0e      	add	r3, sp, #56	; 0x38
     a2a:	2280      	movs	r2, #128	; 0x80
     a2c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a2e:	2200      	movs	r2, #0
     a30:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a32:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a34:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     a36:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a38:	930a      	str	r3, [sp, #40]	; 0x28
     a3a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a3c:	930b      	str	r3, [sp, #44]	; 0x2c
     a3e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a40:	930c      	str	r3, [sp, #48]	; 0x30
     a42:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a44:	9302      	str	r3, [sp, #8]
     a46:	930d      	str	r3, [sp, #52]	; 0x34
     a48:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a4a:	ae0e      	add	r6, sp, #56	; 0x38
     a4c:	b2f9      	uxtb	r1, r7
     a4e:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a50:	aa0a      	add	r2, sp, #40	; 0x28
     a52:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     a54:	2800      	cmp	r0, #0
     a56:	d102      	bne.n	a5e <usart_init+0x25a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a58:	1c20      	adds	r0, r4, #0
     a5a:	4b33      	ldr	r3, [pc, #204]	; (b28 <usart_init+0x324>)
     a5c:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a5e:	1c43      	adds	r3, r0, #1
     a60:	d005      	beq.n	a6e <usart_init+0x26a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a62:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a64:	0c00      	lsrs	r0, r0, #16
     a66:	b2c0      	uxtb	r0, r0
     a68:	1c31      	adds	r1, r6, #0
     a6a:	4b30      	ldr	r3, [pc, #192]	; (b2c <usart_init+0x328>)
     a6c:	4798      	blx	r3
     a6e:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a70:	2f04      	cmp	r7, #4
     a72:	d1eb      	bne.n	a4c <usart_init+0x248>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     a74:	2300      	movs	r3, #0
     a76:	60eb      	str	r3, [r5, #12]
     a78:	612b      	str	r3, [r5, #16]
     a7a:	616b      	str	r3, [r5, #20]
     a7c:	61ab      	str	r3, [r5, #24]
     a7e:	61eb      	str	r3, [r5, #28]
     a80:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     a82:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     a84:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     a86:	2200      	movs	r2, #0
     a88:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     a8a:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     a8c:	3330      	adds	r3, #48	; 0x30
     a8e:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a90:	3301      	adds	r3, #1
     a92:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a94:	3301      	adds	r3, #1
     a96:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a98:	3301      	adds	r3, #1
     a9a:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a9c:	6828      	ldr	r0, [r5, #0]
     a9e:	4b19      	ldr	r3, [pc, #100]	; (b04 <usart_init+0x300>)
     aa0:	4798      	blx	r3
     aa2:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     aa4:	4922      	ldr	r1, [pc, #136]	; (b30 <usart_init+0x32c>)
     aa6:	4b23      	ldr	r3, [pc, #140]	; (b34 <usart_init+0x330>)
     aa8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     aaa:	00a4      	lsls	r4, r4, #2
     aac:	4b22      	ldr	r3, [pc, #136]	; (b38 <usart_init+0x334>)
     aae:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     ab0:	2300      	movs	r3, #0
     ab2:	e01e      	b.n	af2 <usart_init+0x2ee>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ab4:	2310      	movs	r3, #16
     ab6:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ab8:	2300      	movs	r3, #0
     aba:	9307      	str	r3, [sp, #28]
     abc:	e003      	b.n	ac6 <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     abe:	2303      	movs	r3, #3
     ac0:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ac2:	2300      	movs	r3, #0
     ac4:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ac6:	6833      	ldr	r3, [r6, #0]
     ac8:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     aca:	68f3      	ldr	r3, [r6, #12]
     acc:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ace:	6973      	ldr	r3, [r6, #20]
     ad0:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ad2:	7e33      	ldrb	r3, [r6, #24]
     ad4:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ad6:	2326      	movs	r3, #38	; 0x26
     ad8:	5cf3      	ldrb	r3, [r6, r3]
     ada:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     adc:	6872      	ldr	r2, [r6, #4]
     ade:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     ae0:	2a00      	cmp	r2, #0
     ae2:	d100      	bne.n	ae6 <usart_init+0x2e2>
     ae4:	e71f      	b.n	926 <usart_init+0x122>
     ae6:	2380      	movs	r3, #128	; 0x80
     ae8:	055b      	lsls	r3, r3, #21
     aea:	429a      	cmp	r2, r3
     aec:	d100      	bne.n	af0 <usart_init+0x2ec>
     aee:	e704      	b.n	8fa <usart_init+0xf6>
     af0:	e73e      	b.n	970 <usart_init+0x16c>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     af2:	1c18      	adds	r0, r3, #0
     af4:	b011      	add	sp, #68	; 0x44
     af6:	bc3c      	pop	{r2, r3, r4, r5}
     af8:	4690      	mov	r8, r2
     afa:	4699      	mov	r9, r3
     afc:	46a2      	mov	sl, r4
     afe:	46ab      	mov	fp, r5
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	00000541 	.word	0x00000541
     b08:	40000400 	.word	0x40000400
     b0c:	000017a9 	.word	0x000017a9
     b10:	0000171d 	.word	0x0000171d
     b14:	0000036d 	.word	0x0000036d
     b18:	000017c5 	.word	0x000017c5
     b1c:	0000017d 	.word	0x0000017d
     b20:	000001a5 	.word	0x000001a5
     b24:	41002000 	.word	0x41002000
     b28:	000003b9 	.word	0x000003b9
     b2c:	000018a1 	.word	0x000018a1
     b30:	00000c81 	.word	0x00000c81
     b34:	00000e25 	.word	0x00000e25
     b38:	200001b4 	.word	0x200001b4

00000b3c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     b3c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b3e:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b40:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     b42:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b44:	2c00      	cmp	r4, #0
     b46:	d00d      	beq.n	b64 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b48:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     b4a:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     b4c:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b4e:	2800      	cmp	r0, #0
     b50:	d108      	bne.n	b64 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b52:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b54:	2a00      	cmp	r2, #0
     b56:	d1fc      	bne.n	b52 <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     b58:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b5a:	2102      	movs	r1, #2
     b5c:	7e1a      	ldrb	r2, [r3, #24]
     b5e:	420a      	tst	r2, r1
     b60:	d0fc      	beq.n	b5c <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     b62:	2200      	movs	r2, #0
}
     b64:	1c10      	adds	r0, r2, #0
     b66:	bd10      	pop	{r4, pc}

00000b68 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     b68:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b6a:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b6c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     b6e:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b70:	2a00      	cmp	r2, #0
     b72:	d033      	beq.n	bdc <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     b74:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     b76:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b78:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     b7a:	2a00      	cmp	r2, #0
     b7c:	d12e      	bne.n	bdc <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b7e:	7e22      	ldrb	r2, [r4, #24]
     b80:	0752      	lsls	r2, r2, #29
     b82:	d52b      	bpl.n	bdc <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b84:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b86:	2b00      	cmp	r3, #0
     b88:	d1fc      	bne.n	b84 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b8a:	8b63      	ldrh	r3, [r4, #26]
     b8c:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     b8e:	069a      	lsls	r2, r3, #26
     b90:	d021      	beq.n	bd6 <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     b92:	079a      	lsls	r2, r3, #30
     b94:	d503      	bpl.n	b9e <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b96:	2302      	movs	r3, #2
     b98:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     b9a:	3318      	adds	r3, #24
     b9c:	e01e      	b.n	bdc <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b9e:	075a      	lsls	r2, r3, #29
     ba0:	d503      	bpl.n	baa <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ba2:	2304      	movs	r3, #4
     ba4:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     ba6:	331a      	adds	r3, #26
     ba8:	e018      	b.n	bdc <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     baa:	07da      	lsls	r2, r3, #31
     bac:	d503      	bpl.n	bb6 <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bae:	2301      	movs	r3, #1
     bb0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     bb2:	3312      	adds	r3, #18
     bb4:	e012      	b.n	bdc <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     bb6:	06da      	lsls	r2, r3, #27
     bb8:	d505      	bpl.n	bc6 <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     bba:	8b62      	ldrh	r2, [r4, #26]
     bbc:	2310      	movs	r3, #16
     bbe:	4313      	orrs	r3, r2
     bc0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     bc2:	2342      	movs	r3, #66	; 0x42
     bc4:	e00a      	b.n	bdc <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     bc6:	069b      	lsls	r3, r3, #26
     bc8:	d505      	bpl.n	bd6 <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     bca:	8b62      	ldrh	r2, [r4, #26]
     bcc:	2320      	movs	r3, #32
     bce:	4313      	orrs	r3, r2
     bd0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     bd2:	2341      	movs	r3, #65	; 0x41
     bd4:	e002      	b.n	bdc <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     bd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     bd8:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     bda:	2300      	movs	r3, #0
}
     bdc:	1c18      	adds	r0, r3, #0
     bde:	bd10      	pop	{r4, pc}

00000be0 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	4657      	mov	r7, sl
     be4:	464e      	mov	r6, r9
     be6:	b4c0      	push	{r6, r7}
     be8:	b083      	sub	sp, #12
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     bea:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     bec:	2a00      	cmp	r2, #0
     bee:	d03c      	beq.n	c6a <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     bf0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     bf2:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     bf4:	2c00      	cmp	r4, #0
     bf6:	d038      	beq.n	c6a <usart_read_buffer_wait+0x8a>
     bf8:	468a      	mov	sl, r1
     bfa:	4681      	mov	r9, r0
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bfc:	6805      	ldr	r5, [r0, #0]
     bfe:	1c17      	adds	r7, r2, #0
     c00:	2600      	movs	r6, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     c02:	2404      	movs	r4, #4
     c04:	e02c      	b.n	c60 <usart_read_buffer_wait+0x80>
     c06:	7e2a      	ldrb	r2, [r5, #24]
     c08:	4222      	tst	r2, r4
     c0a:	d104      	bne.n	c16 <usart_read_buffer_wait+0x36>
				break;
			} else if (i == USART_TIMEOUT) {
     c0c:	2b01      	cmp	r3, #1
     c0e:	d023      	beq.n	c58 <usart_read_buffer_wait+0x78>
     c10:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c12:	2b00      	cmp	r3, #0
     c14:	d1f7      	bne.n	c06 <usart_read_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
     c16:	466b      	mov	r3, sp
     c18:	1d99      	adds	r1, r3, #6
     c1a:	2300      	movs	r3, #0
     c1c:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
     c1e:	4648      	mov	r0, r9
     c20:	4b15      	ldr	r3, [pc, #84]	; (c78 <usart_read_buffer_wait+0x98>)
     c22:	4798      	blx	r3

		if (retval != STATUS_OK) {
     c24:	2800      	cmp	r0, #0
     c26:	d119      	bne.n	c5c <usart_read_buffer_wait+0x7c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     c28:	1c73      	adds	r3, r6, #1
     c2a:	b299      	uxth	r1, r3
     c2c:	466b      	mov	r3, sp
     c2e:	3306      	adds	r3, #6
     c30:	881b      	ldrh	r3, [r3, #0]
     c32:	4652      	mov	r2, sl
     c34:	5593      	strb	r3, [r2, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c36:	464a      	mov	r2, r9
     c38:	7952      	ldrb	r2, [r2, #5]
     c3a:	2a01      	cmp	r2, #1
     c3c:	d105      	bne.n	c4a <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
     c3e:	1cb2      	adds	r2, r6, #2
     c40:	b296      	uxth	r6, r2
     c42:	0a1b      	lsrs	r3, r3, #8
     c44:	4652      	mov	r2, sl
     c46:	5453      	strb	r3, [r2, r1]
     c48:	e000      	b.n	c4c <usart_read_buffer_wait+0x6c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     c4a:	1c0e      	adds	r6, r1, #0
     c4c:	1e7a      	subs	r2, r7, #1
     c4e:	b297      	uxth	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
     c50:	2f00      	cmp	r7, #0
     c52:	d105      	bne.n	c60 <usart_read_buffer_wait+0x80>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
     c54:	2300      	movs	r3, #0
     c56:	e008      	b.n	c6a <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     c58:	2312      	movs	r3, #18
     c5a:	e006      	b.n	c6a <usart_read_buffer_wait+0x8a>
		}

		enum status_code retval;
		uint16_t received_data = 0;

		retval = usart_read_wait(module, &received_data);
     c5c:	1c03      	adds	r3, r0, #0
     c5e:	e004      	b.n	c6a <usart_read_buffer_wait+0x8a>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     c60:	7e2b      	ldrb	r3, [r5, #24]
     c62:	4223      	tst	r3, r4
     c64:	d1d7      	bne.n	c16 <usart_read_buffer_wait+0x36>
     c66:	4b05      	ldr	r3, [pc, #20]	; (c7c <usart_read_buffer_wait+0x9c>)
     c68:	e7cd      	b.n	c06 <usart_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     c6a:	1c18      	adds	r0, r3, #0
     c6c:	b003      	add	sp, #12
     c6e:	bc0c      	pop	{r2, r3}
     c70:	4691      	mov	r9, r2
     c72:	469a      	mov	sl, r3
     c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	00000b69 	.word	0x00000b69
     c7c:	0000ffff 	.word	0x0000ffff

00000c80 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c82:	0080      	lsls	r0, r0, #2
     c84:	4b65      	ldr	r3, [pc, #404]	; (e1c <_usart_interrupt_handler+0x19c>)
     c86:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c88:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c8a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c8c:	2b00      	cmp	r3, #0
     c8e:	d1fc      	bne.n	c8a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c90:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c92:	7da6      	ldrb	r6, [r4, #22]
     c94:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     c96:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     c98:	5ceb      	ldrb	r3, [r5, r3]
     c9a:	2230      	movs	r2, #48	; 0x30
     c9c:	5caf      	ldrb	r7, [r5, r2]
     c9e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ca0:	07f3      	lsls	r3, r6, #31
     ca2:	d522      	bpl.n	cea <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     ca4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     ca6:	b29b      	uxth	r3, r3
     ca8:	2b00      	cmp	r3, #0
     caa:	d01c      	beq.n	ce6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     cae:	7813      	ldrb	r3, [r2, #0]
     cb0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     cb2:	1c51      	adds	r1, r2, #1
     cb4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cb6:	7969      	ldrb	r1, [r5, #5]
     cb8:	2901      	cmp	r1, #1
     cba:	d001      	beq.n	cc0 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cbc:	b29b      	uxth	r3, r3
     cbe:	e004      	b.n	cca <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     cc0:	7851      	ldrb	r1, [r2, #1]
     cc2:	0209      	lsls	r1, r1, #8
     cc4:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     cc6:	3202      	adds	r2, #2
     cc8:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     cca:	05db      	lsls	r3, r3, #23
     ccc:	0ddb      	lsrs	r3, r3, #23
     cce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     cd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cd2:	3b01      	subs	r3, #1
     cd4:	b29b      	uxth	r3, r3
     cd6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     cd8:	2b00      	cmp	r3, #0
     cda:	d106      	bne.n	cea <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cdc:	3301      	adds	r3, #1
     cde:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     ce0:	3301      	adds	r3, #1
     ce2:	75a3      	strb	r3, [r4, #22]
     ce4:	e001      	b.n	cea <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ce6:	2301      	movs	r3, #1
     ce8:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     cea:	07b3      	lsls	r3, r6, #30
     cec:	d509      	bpl.n	d02 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     cee:	2302      	movs	r3, #2
     cf0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     cf2:	2200      	movs	r2, #0
     cf4:	3331      	adds	r3, #49	; 0x31
     cf6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     cf8:	07fb      	lsls	r3, r7, #31
     cfa:	d502      	bpl.n	d02 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     cfc:	1c28      	adds	r0, r5, #0
     cfe:	68eb      	ldr	r3, [r5, #12]
     d00:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     d02:	0773      	lsls	r3, r6, #29
     d04:	d56a      	bpl.n	ddc <_usart_interrupt_handler+0x15c>

		if (module->remaining_rx_buffer_length) {
     d06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d08:	b29b      	uxth	r3, r3
     d0a:	2b00      	cmp	r3, #0
     d0c:	d064      	beq.n	dd8 <_usart_interrupt_handler+0x158>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d0e:	8b63      	ldrh	r3, [r4, #26]
     d10:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d12:	071a      	lsls	r2, r3, #28
     d14:	d402      	bmi.n	d1c <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d16:	223f      	movs	r2, #63	; 0x3f
     d18:	4013      	ands	r3, r2
     d1a:	e001      	b.n	d20 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d1c:	2237      	movs	r2, #55	; 0x37
     d1e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d20:	2b00      	cmp	r3, #0
     d22:	d037      	beq.n	d94 <_usart_interrupt_handler+0x114>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d24:	079a      	lsls	r2, r3, #30
     d26:	d507      	bpl.n	d38 <_usart_interrupt_handler+0xb8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d28:	221a      	movs	r2, #26
     d2a:	2332      	movs	r3, #50	; 0x32
     d2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     d2e:	8b62      	ldrh	r2, [r4, #26]
     d30:	3b30      	subs	r3, #48	; 0x30
     d32:	4313      	orrs	r3, r2
     d34:	8363      	strh	r3, [r4, #26]
     d36:	e027      	b.n	d88 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d38:	075a      	lsls	r2, r3, #29
     d3a:	d507      	bpl.n	d4c <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     d3c:	221e      	movs	r2, #30
     d3e:	2332      	movs	r3, #50	; 0x32
     d40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     d42:	8b62      	ldrh	r2, [r4, #26]
     d44:	3b2e      	subs	r3, #46	; 0x2e
     d46:	4313      	orrs	r3, r2
     d48:	8363      	strh	r3, [r4, #26]
     d4a:	e01d      	b.n	d88 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d4c:	07da      	lsls	r2, r3, #31
     d4e:	d507      	bpl.n	d60 <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     d50:	2213      	movs	r2, #19
     d52:	2332      	movs	r3, #50	; 0x32
     d54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     d56:	8b62      	ldrh	r2, [r4, #26]
     d58:	3b31      	subs	r3, #49	; 0x31
     d5a:	4313      	orrs	r3, r2
     d5c:	8363      	strh	r3, [r4, #26]
     d5e:	e013      	b.n	d88 <_usart_interrupt_handler+0x108>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     d60:	06da      	lsls	r2, r3, #27
     d62:	d507      	bpl.n	d74 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     d64:	2242      	movs	r2, #66	; 0x42
     d66:	2332      	movs	r3, #50	; 0x32
     d68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     d6a:	8b62      	ldrh	r2, [r4, #26]
     d6c:	3b22      	subs	r3, #34	; 0x22
     d6e:	4313      	orrs	r3, r2
     d70:	8363      	strh	r3, [r4, #26]
     d72:	e009      	b.n	d88 <_usart_interrupt_handler+0x108>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     d74:	2220      	movs	r2, #32
     d76:	421a      	tst	r2, r3
     d78:	d006      	beq.n	d88 <_usart_interrupt_handler+0x108>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d7a:	3221      	adds	r2, #33	; 0x21
     d7c:	2332      	movs	r3, #50	; 0x32
     d7e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     d80:	8b62      	ldrh	r2, [r4, #26]
     d82:	3b12      	subs	r3, #18
     d84:	4313      	orrs	r3, r2
     d86:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d88:	077b      	lsls	r3, r7, #29
     d8a:	d527      	bpl.n	ddc <_usart_interrupt_handler+0x15c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d8c:	1c28      	adds	r0, r5, #0
     d8e:	696b      	ldr	r3, [r5, #20]
     d90:	4798      	blx	r3
     d92:	e023      	b.n	ddc <_usart_interrupt_handler+0x15c>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d96:	05db      	lsls	r3, r3, #23
     d98:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d9a:	b2da      	uxtb	r2, r3
     d9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d9e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     da0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     da2:	1c51      	adds	r1, r2, #1
     da4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     da6:	7969      	ldrb	r1, [r5, #5]
     da8:	2901      	cmp	r1, #1
     daa:	d104      	bne.n	db6 <_usart_interrupt_handler+0x136>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     dac:	0a1b      	lsrs	r3, r3, #8
     dae:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     db0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     db2:	3301      	adds	r3, #1
     db4:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     db6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     db8:	3b01      	subs	r3, #1
     dba:	b29b      	uxth	r3, r3
     dbc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     dbe:	2b00      	cmp	r3, #0
     dc0:	d10c      	bne.n	ddc <_usart_interrupt_handler+0x15c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     dc2:	3304      	adds	r3, #4
     dc4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     dc6:	2200      	movs	r2, #0
     dc8:	332e      	adds	r3, #46	; 0x2e
     dca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     dcc:	07bb      	lsls	r3, r7, #30
     dce:	d505      	bpl.n	ddc <_usart_interrupt_handler+0x15c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     dd0:	1c28      	adds	r0, r5, #0
     dd2:	692b      	ldr	r3, [r5, #16]
     dd4:	4798      	blx	r3
     dd6:	e001      	b.n	ddc <_usart_interrupt_handler+0x15c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     dd8:	2304      	movs	r3, #4
     dda:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ddc:	06f3      	lsls	r3, r6, #27
     dde:	d507      	bpl.n	df0 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     de0:	2310      	movs	r3, #16
     de2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     de4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     de6:	06fb      	lsls	r3, r7, #27
     de8:	d502      	bpl.n	df0 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     dea:	1c28      	adds	r0, r5, #0
     dec:	69eb      	ldr	r3, [r5, #28]
     dee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     df0:	06b3      	lsls	r3, r6, #26
     df2:	d507      	bpl.n	e04 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     df4:	2320      	movs	r3, #32
     df6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     df8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     dfa:	073b      	lsls	r3, r7, #28
     dfc:	d502      	bpl.n	e04 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     dfe:	1c28      	adds	r0, r5, #0
     e00:	69ab      	ldr	r3, [r5, #24]
     e02:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     e04:	0733      	lsls	r3, r6, #28
     e06:	d507      	bpl.n	e18 <_usart_interrupt_handler+0x198>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     e08:	2308      	movs	r3, #8
     e0a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     e0c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     e0e:	06bb      	lsls	r3, r7, #26
     e10:	d502      	bpl.n	e18 <_usart_interrupt_handler+0x198>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     e12:	6a2b      	ldr	r3, [r5, #32]
     e14:	1c28      	adds	r0, r5, #0
     e16:	4798      	blx	r3
		}
	}
#endif
}
     e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	200001b4 	.word	0x200001b4

00000e20 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e20:	4770      	bx	lr
     e22:	46c0      	nop			; (mov r8, r8)

00000e24 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e24:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     e26:	4b0a      	ldr	r3, [pc, #40]	; (e50 <_sercom_set_handler+0x2c>)
     e28:	781b      	ldrb	r3, [r3, #0]
     e2a:	2b00      	cmp	r3, #0
     e2c:	d10c      	bne.n	e48 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e2e:	4f09      	ldr	r7, [pc, #36]	; (e54 <_sercom_set_handler+0x30>)
     e30:	4e09      	ldr	r6, [pc, #36]	; (e58 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     e32:	4d0a      	ldr	r5, [pc, #40]	; (e5c <_sercom_set_handler+0x38>)
     e34:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e36:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e38:	195a      	adds	r2, r3, r5
     e3a:	6014      	str	r4, [r2, #0]
     e3c:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e3e:	2b18      	cmp	r3, #24
     e40:	d1f9      	bne.n	e36 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     e42:	2201      	movs	r2, #1
     e44:	4b02      	ldr	r3, [pc, #8]	; (e50 <_sercom_set_handler+0x2c>)
     e46:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e48:	0080      	lsls	r0, r0, #2
     e4a:	4b02      	ldr	r3, [pc, #8]	; (e54 <_sercom_set_handler+0x30>)
     e4c:	50c1      	str	r1, [r0, r3]
}
     e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e50:	20000161 	.word	0x20000161
     e54:	20000164 	.word	0x20000164
     e58:	00000e21 	.word	0x00000e21
     e5c:	200001b4 	.word	0x200001b4

00000e60 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e60:	b510      	push	{r4, lr}
     e62:	b082      	sub	sp, #8
     e64:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e66:	4668      	mov	r0, sp
     e68:	4905      	ldr	r1, [pc, #20]	; (e80 <_sercom_get_interrupt_vector+0x20>)
     e6a:	2206      	movs	r2, #6
     e6c:	4b05      	ldr	r3, [pc, #20]	; (e84 <_sercom_get_interrupt_vector+0x24>)
     e6e:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e70:	1c20      	adds	r0, r4, #0
     e72:	4b05      	ldr	r3, [pc, #20]	; (e88 <_sercom_get_interrupt_vector+0x28>)
     e74:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e76:	466b      	mov	r3, sp
     e78:	5618      	ldrsb	r0, [r3, r0]
}
     e7a:	b002      	add	sp, #8
     e7c:	bd10      	pop	{r4, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	00002d1c 	.word	0x00002d1c
     e84:	00001dad 	.word	0x00001dad
     e88:	00000541 	.word	0x00000541

00000e8c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e8c:	b508      	push	{r3, lr}
     e8e:	4b02      	ldr	r3, [pc, #8]	; (e98 <SERCOM0_Handler+0xc>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	2000      	movs	r0, #0
     e94:	4798      	blx	r3
     e96:	bd08      	pop	{r3, pc}
     e98:	20000164 	.word	0x20000164

00000e9c <SERCOM1_Handler>:
     e9c:	b508      	push	{r3, lr}
     e9e:	4b02      	ldr	r3, [pc, #8]	; (ea8 <SERCOM1_Handler+0xc>)
     ea0:	685b      	ldr	r3, [r3, #4]
     ea2:	2001      	movs	r0, #1
     ea4:	4798      	blx	r3
     ea6:	bd08      	pop	{r3, pc}
     ea8:	20000164 	.word	0x20000164

00000eac <SERCOM2_Handler>:
     eac:	b508      	push	{r3, lr}
     eae:	4b02      	ldr	r3, [pc, #8]	; (eb8 <SERCOM2_Handler+0xc>)
     eb0:	689b      	ldr	r3, [r3, #8]
     eb2:	2002      	movs	r0, #2
     eb4:	4798      	blx	r3
     eb6:	bd08      	pop	{r3, pc}
     eb8:	20000164 	.word	0x20000164

00000ebc <SERCOM3_Handler>:
     ebc:	b508      	push	{r3, lr}
     ebe:	4b02      	ldr	r3, [pc, #8]	; (ec8 <SERCOM3_Handler+0xc>)
     ec0:	68db      	ldr	r3, [r3, #12]
     ec2:	2003      	movs	r0, #3
     ec4:	4798      	blx	r3
     ec6:	bd08      	pop	{r3, pc}
     ec8:	20000164 	.word	0x20000164

00000ecc <SERCOM4_Handler>:
     ecc:	b508      	push	{r3, lr}
     ece:	4b02      	ldr	r3, [pc, #8]	; (ed8 <SERCOM4_Handler+0xc>)
     ed0:	691b      	ldr	r3, [r3, #16]
     ed2:	2004      	movs	r0, #4
     ed4:	4798      	blx	r3
     ed6:	bd08      	pop	{r3, pc}
     ed8:	20000164 	.word	0x20000164

00000edc <SERCOM5_Handler>:
     edc:	b508      	push	{r3, lr}
     ede:	4b02      	ldr	r3, [pc, #8]	; (ee8 <SERCOM5_Handler+0xc>)
     ee0:	695b      	ldr	r3, [r3, #20]
     ee2:	2005      	movs	r0, #5
     ee4:	4798      	blx	r3
     ee6:	bd08      	pop	{r3, pc}
     ee8:	20000164 	.word	0x20000164

00000eec <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     eec:	b5f0      	push	{r4, r5, r6, r7, lr}
     eee:	4647      	mov	r7, r8
     ef0:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     ef2:	0080      	lsls	r0, r0, #2
     ef4:	4b0d      	ldr	r3, [pc, #52]	; (f2c <_tcc_interrupt_handler+0x40>)
     ef6:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     ef8:	683b      	ldr	r3, [r7, #0]
     efa:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     efe:	401e      	ands	r6, r3
     f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f02:	401e      	ands	r6, r3
     f04:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     f06:	4b0a      	ldr	r3, [pc, #40]	; (f30 <_tcc_interrupt_handler+0x44>)
     f08:	4698      	mov	r8, r3
     f0a:	4643      	mov	r3, r8
     f0c:	58e5      	ldr	r5, [r4, r3]
     f0e:	422e      	tst	r6, r5
     f10:	d005      	beq.n	f1e <_tcc_interrupt_handler+0x32>
     f12:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     f14:	685b      	ldr	r3, [r3, #4]
     f16:	1c38      	adds	r0, r7, #0
     f18:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     f1a:	683b      	ldr	r3, [r7, #0]
     f1c:	62dd      	str	r5, [r3, #44]	; 0x2c
     f1e:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     f20:	2c30      	cmp	r4, #48	; 0x30
     f22:	d1f2      	bne.n	f0a <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     f24:	bc04      	pop	{r2}
     f26:	4690      	mov	r8, r2
     f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	200001cc 	.word	0x200001cc
     f30:	00002d24 	.word	0x00002d24

00000f34 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     f34:	b508      	push	{r3, lr}
     f36:	2000      	movs	r0, #0
     f38:	4b01      	ldr	r3, [pc, #4]	; (f40 <TCC0_Handler+0xc>)
     f3a:	4798      	blx	r3
     f3c:	bd08      	pop	{r3, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000eed 	.word	0x00000eed

00000f44 <TCC1_Handler>:
     f44:	b508      	push	{r3, lr}
     f46:	2001      	movs	r0, #1
     f48:	4b01      	ldr	r3, [pc, #4]	; (f50 <TCC1_Handler+0xc>)
     f4a:	4798      	blx	r3
     f4c:	bd08      	pop	{r3, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	00000eed 	.word	0x00000eed

00000f54 <TCC2_Handler>:
     f54:	b508      	push	{r3, lr}
     f56:	2002      	movs	r0, #2
     f58:	4b01      	ldr	r3, [pc, #4]	; (f60 <TCC2_Handler+0xc>)
     f5a:	4798      	blx	r3
     f5c:	bd08      	pop	{r3, pc}
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	00000eed 	.word	0x00000eed

00000f64 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f64:	4b0c      	ldr	r3, [pc, #48]	; (f98 <cpu_irq_enter_critical+0x34>)
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	2b00      	cmp	r3, #0
     f6a:	d110      	bne.n	f8e <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f6c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f70:	2b00      	cmp	r3, #0
     f72:	d109      	bne.n	f88 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     f74:	b672      	cpsid	i
     f76:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f7a:	2200      	movs	r2, #0
     f7c:	4b07      	ldr	r3, [pc, #28]	; (f9c <cpu_irq_enter_critical+0x38>)
     f7e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f80:	3201      	adds	r2, #1
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <cpu_irq_enter_critical+0x3c>)
     f84:	701a      	strb	r2, [r3, #0]
     f86:	e002      	b.n	f8e <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f88:	2200      	movs	r2, #0
     f8a:	4b05      	ldr	r3, [pc, #20]	; (fa0 <cpu_irq_enter_critical+0x3c>)
     f8c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f8e:	4a02      	ldr	r2, [pc, #8]	; (f98 <cpu_irq_enter_critical+0x34>)
     f90:	6813      	ldr	r3, [r2, #0]
     f92:	3301      	adds	r3, #1
     f94:	6013      	str	r3, [r2, #0]
}
     f96:	4770      	bx	lr
     f98:	2000017c 	.word	0x2000017c
     f9c:	20000008 	.word	0x20000008
     fa0:	20000180 	.word	0x20000180

00000fa4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     fa4:	4b08      	ldr	r3, [pc, #32]	; (fc8 <cpu_irq_leave_critical+0x24>)
     fa6:	681a      	ldr	r2, [r3, #0]
     fa8:	3a01      	subs	r2, #1
     faa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	2b00      	cmp	r3, #0
     fb0:	d109      	bne.n	fc6 <cpu_irq_leave_critical+0x22>
     fb2:	4b06      	ldr	r3, [pc, #24]	; (fcc <cpu_irq_leave_critical+0x28>)
     fb4:	781b      	ldrb	r3, [r3, #0]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d005      	beq.n	fc6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fba:	2201      	movs	r2, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <cpu_irq_leave_critical+0x2c>)
     fbe:	701a      	strb	r2, [r3, #0]
     fc0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     fc4:	b662      	cpsie	i
	}
}
     fc6:	4770      	bx	lr
     fc8:	2000017c 	.word	0x2000017c
     fcc:	20000180 	.word	0x20000180
     fd0:	20000008 	.word	0x20000008

00000fd4 <system_board_init>:




void system_board_init(void)
{
     fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd6:	4647      	mov	r7, r8
     fd8:	b480      	push	{r7}
     fda:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     fdc:	ac01      	add	r4, sp, #4
     fde:	2601      	movs	r6, #1
     fe0:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     fe2:	2700      	movs	r7, #0
     fe4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     fe6:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     fe8:	2013      	movs	r0, #19
     fea:	1c21      	adds	r1, r4, #0
     fec:	4d0b      	ldr	r5, [pc, #44]	; (101c <system_board_init+0x48>)
     fee:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ff0:	4b0b      	ldr	r3, [pc, #44]	; (1020 <system_board_init+0x4c>)
     ff2:	4698      	mov	r8, r3
     ff4:	2380      	movs	r3, #128	; 0x80
     ff6:	031b      	lsls	r3, r3, #12
     ff8:	4642      	mov	r2, r8
     ffa:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	
	port_pin_set_config(PIN_PA13, &pin_conf);
     ffc:	200d      	movs	r0, #13
     ffe:	1c21      	adds	r1, r4, #0
    1000:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1002:	2380      	movs	r3, #128	; 0x80
    1004:	019b      	lsls	r3, r3, #6
    1006:	4642      	mov	r2, r8
    1008:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(PIN_PA13, false);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    100a:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    100c:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    100e:	201c      	movs	r0, #28
    1010:	1c21      	adds	r1, r4, #0
    1012:	47a8      	blx	r5
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    1014:	b002      	add	sp, #8
    1016:	bc04      	pop	{r2}
    1018:	4690      	mov	r8, r2
    101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    101c:	00001025 	.word	0x00001025
    1020:	41004400 	.word	0x41004400

00001024 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1024:	b500      	push	{lr}
    1026:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1028:	ab01      	add	r3, sp, #4
    102a:	2280      	movs	r2, #128	; 0x80
    102c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    102e:	780a      	ldrb	r2, [r1, #0]
    1030:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1032:	784a      	ldrb	r2, [r1, #1]
    1034:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1036:	788a      	ldrb	r2, [r1, #2]
    1038:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    103a:	1c19      	adds	r1, r3, #0
    103c:	4b01      	ldr	r3, [pc, #4]	; (1044 <port_pin_set_config+0x20>)
    103e:	4798      	blx	r3
}
    1040:	b003      	add	sp, #12
    1042:	bd00      	pop	{pc}
    1044:	000018a1 	.word	0x000018a1

00001048 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1048:	b508      	push	{r3, lr}
	switch (clock_source) {
    104a:	2808      	cmp	r0, #8
    104c:	d803      	bhi.n	1056 <system_clock_source_get_hz+0xe>
    104e:	0080      	lsls	r0, r0, #2
    1050:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <system_clock_source_get_hz+0x78>)
    1052:	581b      	ldr	r3, [r3, r0]
    1054:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1056:	2000      	movs	r0, #0
    1058:	e031      	b.n	10be <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    105a:	4b1a      	ldr	r3, [pc, #104]	; (10c4 <system_clock_source_get_hz+0x7c>)
    105c:	6918      	ldr	r0, [r3, #16]
    105e:	e02e      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1060:	4b19      	ldr	r3, [pc, #100]	; (10c8 <system_clock_source_get_hz+0x80>)
    1062:	6a18      	ldr	r0, [r3, #32]
    1064:	0580      	lsls	r0, r0, #22
    1066:	0f80      	lsrs	r0, r0, #30
    1068:	4b18      	ldr	r3, [pc, #96]	; (10cc <system_clock_source_get_hz+0x84>)
    106a:	40c3      	lsrs	r3, r0
    106c:	1c18      	adds	r0, r3, #0
    106e:	e026      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1070:	4b14      	ldr	r3, [pc, #80]	; (10c4 <system_clock_source_get_hz+0x7c>)
    1072:	6958      	ldr	r0, [r3, #20]
    1074:	e023      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1076:	4b13      	ldr	r3, [pc, #76]	; (10c4 <system_clock_source_get_hz+0x7c>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	2002      	movs	r0, #2
    107c:	4018      	ands	r0, r3
    107e:	d01e      	beq.n	10be <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1080:	4911      	ldr	r1, [pc, #68]	; (10c8 <system_clock_source_get_hz+0x80>)
    1082:	2210      	movs	r2, #16
    1084:	68cb      	ldr	r3, [r1, #12]
    1086:	421a      	tst	r2, r3
    1088:	d0fc      	beq.n	1084 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    108a:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <system_clock_source_get_hz+0x7c>)
    108c:	681b      	ldr	r3, [r3, #0]
    108e:	075b      	lsls	r3, r3, #29
    1090:	d514      	bpl.n	10bc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1092:	2000      	movs	r0, #0
    1094:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <system_clock_source_get_hz+0x88>)
    1096:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <system_clock_source_get_hz+0x7c>)
    109a:	689b      	ldr	r3, [r3, #8]
    109c:	041b      	lsls	r3, r3, #16
    109e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10a0:	4358      	muls	r0, r3
    10a2:	e00c      	b.n	10be <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10a4:	2350      	movs	r3, #80	; 0x50
    10a6:	4a08      	ldr	r2, [pc, #32]	; (10c8 <system_clock_source_get_hz+0x80>)
    10a8:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    10aa:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10ac:	075b      	lsls	r3, r3, #29
    10ae:	d506      	bpl.n	10be <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    10b0:	4b04      	ldr	r3, [pc, #16]	; (10c4 <system_clock_source_get_hz+0x7c>)
    10b2:	68d8      	ldr	r0, [r3, #12]
    10b4:	e003      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    10b6:	2080      	movs	r0, #128	; 0x80
    10b8:	0200      	lsls	r0, r0, #8
    10ba:	e000      	b.n	10be <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    10bc:	4805      	ldr	r0, [pc, #20]	; (10d4 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    10be:	bd08      	pop	{r3, pc}
    10c0:	00002d54 	.word	0x00002d54
    10c4:	20000184 	.word	0x20000184
    10c8:	40000800 	.word	0x40000800
    10cc:	007a1200 	.word	0x007a1200
    10d0:	000017c5 	.word	0x000017c5
    10d4:	02dc6c00 	.word	0x02dc6c00

000010d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    10da:	4c0c      	ldr	r4, [pc, #48]	; (110c <system_clock_source_osc8m_set_config+0x34>)
    10dc:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    10de:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10e0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    10e2:	7842      	ldrb	r2, [r0, #1]
    10e4:	2001      	movs	r0, #1
    10e6:	4002      	ands	r2, r0
    10e8:	0192      	lsls	r2, r2, #6
    10ea:	2640      	movs	r6, #64	; 0x40
    10ec:	43b3      	bics	r3, r6
    10ee:	4313      	orrs	r3, r2
    10f0:	1c02      	adds	r2, r0, #0
    10f2:	402a      	ands	r2, r5
    10f4:	01d2      	lsls	r2, r2, #7
    10f6:	307f      	adds	r0, #127	; 0x7f
    10f8:	4383      	bics	r3, r0
    10fa:	4313      	orrs	r3, r2
    10fc:	2203      	movs	r2, #3
    10fe:	400a      	ands	r2, r1
    1100:	0212      	lsls	r2, r2, #8
    1102:	4903      	ldr	r1, [pc, #12]	; (1110 <system_clock_source_osc8m_set_config+0x38>)
    1104:	400b      	ands	r3, r1
    1106:	4313      	orrs	r3, r2
    1108:	6223      	str	r3, [r4, #32]
}
    110a:	bd70      	pop	{r4, r5, r6, pc}
    110c:	40000800 	.word	0x40000800
    1110:	fffffcff 	.word	0xfffffcff

00001114 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1114:	b5f0      	push	{r4, r5, r6, r7, lr}
    1116:	4657      	mov	r7, sl
    1118:	464e      	mov	r6, r9
    111a:	4645      	mov	r5, r8
    111c:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    111e:	4e1c      	ldr	r6, [pc, #112]	; (1190 <system_clock_source_osc32k_set_config+0x7c>)
    1120:	69b3      	ldr	r3, [r6, #24]
    1122:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1124:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1126:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1128:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    112a:	78c3      	ldrb	r3, [r0, #3]
    112c:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    112e:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1130:	7883      	ldrb	r3, [r0, #2]
    1132:	2001      	movs	r0, #1
    1134:	4003      	ands	r3, r0
    1136:	009b      	lsls	r3, r3, #2
    1138:	469a      	mov	sl, r3
    113a:	2204      	movs	r2, #4
    113c:	4690      	mov	r8, r2
    113e:	4662      	mov	r2, ip
    1140:	4643      	mov	r3, r8
    1142:	439a      	bics	r2, r3
    1144:	1c13      	adds	r3, r2, #0
    1146:	4652      	mov	r2, sl
    1148:	431a      	orrs	r2, r3
    114a:	1c13      	adds	r3, r2, #0
    114c:	4001      	ands	r1, r0
    114e:	00c9      	lsls	r1, r1, #3
    1150:	2208      	movs	r2, #8
    1152:	4393      	bics	r3, r2
    1154:	430b      	orrs	r3, r1
    1156:	464a      	mov	r2, r9
    1158:	4002      	ands	r2, r0
    115a:	0192      	lsls	r2, r2, #6
    115c:	2140      	movs	r1, #64	; 0x40
    115e:	438b      	bics	r3, r1
    1160:	4313      	orrs	r3, r2
    1162:	4007      	ands	r7, r0
    1164:	01ff      	lsls	r7, r7, #7
    1166:	2280      	movs	r2, #128	; 0x80
    1168:	4393      	bics	r3, r2
    116a:	433b      	orrs	r3, r7
    116c:	3a79      	subs	r2, #121	; 0x79
    116e:	4015      	ands	r5, r2
    1170:	022d      	lsls	r5, r5, #8
    1172:	4f08      	ldr	r7, [pc, #32]	; (1194 <system_clock_source_osc32k_set_config+0x80>)
    1174:	403b      	ands	r3, r7
    1176:	432b      	orrs	r3, r5
    1178:	4004      	ands	r4, r0
    117a:	0320      	lsls	r0, r4, #12
    117c:	4c06      	ldr	r4, [pc, #24]	; (1198 <system_clock_source_osc32k_set_config+0x84>)
    117e:	401c      	ands	r4, r3
    1180:	4304      	orrs	r4, r0
    1182:	61b4      	str	r4, [r6, #24]
}
    1184:	bc1c      	pop	{r2, r3, r4}
    1186:	4690      	mov	r8, r2
    1188:	4699      	mov	r9, r3
    118a:	46a2      	mov	sl, r4
    118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	40000800 	.word	0x40000800
    1194:	fffff8ff 	.word	0xfffff8ff
    1198:	ffffefff 	.word	0xffffefff

0000119c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    119c:	b5f0      	push	{r4, r5, r6, r7, lr}
    119e:	465f      	mov	r7, fp
    11a0:	4656      	mov	r6, sl
    11a2:	464d      	mov	r5, r9
    11a4:	4644      	mov	r4, r8
    11a6:	b4f0      	push	{r4, r5, r6, r7}
    11a8:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    11aa:	4e2e      	ldr	r6, [pc, #184]	; (1264 <system_clock_source_xosc32k_set_config+0xc8>)
    11ac:	8ab3      	ldrh	r3, [r6, #20]
    11ae:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    11b0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    11b2:	7803      	ldrb	r3, [r0, #0]
    11b4:	425a      	negs	r2, r3
    11b6:	415a      	adcs	r2, r3
    11b8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    11ba:	7883      	ldrb	r3, [r0, #2]
    11bc:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    11be:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    11c0:	7902      	ldrb	r2, [r0, #4]
    11c2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    11c4:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    11c6:	7b02      	ldrb	r2, [r0, #12]
    11c8:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    11ca:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    11cc:	6882      	ldr	r2, [r0, #8]
    11ce:	4826      	ldr	r0, [pc, #152]	; (1268 <system_clock_source_xosc32k_set_config+0xcc>)
    11d0:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    11d2:	2001      	movs	r0, #1
    11d4:	464a      	mov	r2, r9
    11d6:	0092      	lsls	r2, r2, #2
    11d8:	4691      	mov	r9, r2
    11da:	2204      	movs	r2, #4
    11dc:	4692      	mov	sl, r2
    11de:	4662      	mov	r2, ip
    11e0:	4651      	mov	r1, sl
    11e2:	438a      	bics	r2, r1
    11e4:	4694      	mov	ip, r2
    11e6:	464a      	mov	r2, r9
    11e8:	4661      	mov	r1, ip
    11ea:	430a      	orrs	r2, r1
    11ec:	4694      	mov	ip, r2
    11ee:	4642      	mov	r2, r8
    11f0:	4002      	ands	r2, r0
    11f2:	00d2      	lsls	r2, r2, #3
    11f4:	4690      	mov	r8, r2
    11f6:	2208      	movs	r2, #8
    11f8:	4691      	mov	r9, r2
    11fa:	4662      	mov	r2, ip
    11fc:	4649      	mov	r1, r9
    11fe:	438a      	bics	r2, r1
    1200:	4694      	mov	ip, r2
    1202:	4642      	mov	r2, r8
    1204:	4661      	mov	r1, ip
    1206:	430a      	orrs	r2, r1
    1208:	4694      	mov	ip, r2
    120a:	4003      	ands	r3, r0
    120c:	011b      	lsls	r3, r3, #4
    120e:	2210      	movs	r2, #16
    1210:	4690      	mov	r8, r2
    1212:	4662      	mov	r2, ip
    1214:	4641      	mov	r1, r8
    1216:	438a      	bics	r2, r1
    1218:	4313      	orrs	r3, r2
    121a:	4659      	mov	r1, fp
    121c:	4001      	ands	r1, r0
    121e:	0149      	lsls	r1, r1, #5
    1220:	2220      	movs	r2, #32
    1222:	4393      	bics	r3, r2
    1224:	430b      	orrs	r3, r1
    1226:	9a01      	ldr	r2, [sp, #4]
    1228:	4002      	ands	r2, r0
    122a:	0192      	lsls	r2, r2, #6
    122c:	2140      	movs	r1, #64	; 0x40
    122e:	438b      	bics	r3, r1
    1230:	4313      	orrs	r3, r2
    1232:	4007      	ands	r7, r0
    1234:	01ff      	lsls	r7, r7, #7
    1236:	2280      	movs	r2, #128	; 0x80
    1238:	4393      	bics	r3, r2
    123a:	433b      	orrs	r3, r7
    123c:	3a79      	subs	r2, #121	; 0x79
    123e:	4015      	ands	r5, r2
    1240:	022d      	lsls	r5, r5, #8
    1242:	4f0a      	ldr	r7, [pc, #40]	; (126c <system_clock_source_xosc32k_set_config+0xd0>)
    1244:	403b      	ands	r3, r7
    1246:	432b      	orrs	r3, r5
    1248:	4004      	ands	r4, r0
    124a:	0320      	lsls	r0, r4, #12
    124c:	4c08      	ldr	r4, [pc, #32]	; (1270 <system_clock_source_xosc32k_set_config+0xd4>)
    124e:	401c      	ands	r4, r3
    1250:	4304      	orrs	r4, r0
    1252:	82b4      	strh	r4, [r6, #20]
}
    1254:	b003      	add	sp, #12
    1256:	bc3c      	pop	{r2, r3, r4, r5}
    1258:	4690      	mov	r8, r2
    125a:	4699      	mov	r9, r3
    125c:	46a2      	mov	sl, r4
    125e:	46ab      	mov	fp, r5
    1260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	40000800 	.word	0x40000800
    1268:	20000184 	.word	0x20000184
    126c:	fffff8ff 	.word	0xfffff8ff
    1270:	ffffefff 	.word	0xffffefff

00001274 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1274:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1276:	7a03      	ldrb	r3, [r0, #8]
    1278:	069b      	lsls	r3, r3, #26
    127a:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    127c:	8943      	ldrh	r3, [r0, #10]
    127e:	059b      	lsls	r3, r3, #22
    1280:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1282:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1284:	4c19      	ldr	r4, [pc, #100]	; (12ec <system_clock_source_dfll_set_config+0x78>)
    1286:	6063      	str	r3, [r4, #4]
    1288:	8881      	ldrh	r1, [r0, #4]
    128a:	8843      	ldrh	r3, [r0, #2]
    128c:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    128e:	79c3      	ldrb	r3, [r0, #7]
    1290:	7982      	ldrb	r2, [r0, #6]
    1292:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1294:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1296:	7842      	ldrb	r2, [r0, #1]
    1298:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    129a:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    129c:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    129e:	7803      	ldrb	r3, [r0, #0]
    12a0:	2b04      	cmp	r3, #4
    12a2:	d10f      	bne.n	12c4 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12a4:	7b03      	ldrb	r3, [r0, #12]
    12a6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12a8:	8a02      	ldrh	r2, [r0, #16]
    12aa:	4313      	orrs	r3, r2
    12ac:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12ae:	89c3      	ldrh	r3, [r0, #14]
    12b0:	041b      	lsls	r3, r3, #16
    12b2:	4a0f      	ldr	r2, [pc, #60]	; (12f0 <system_clock_source_dfll_set_config+0x7c>)
    12b4:	4013      	ands	r3, r2
    12b6:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    12b8:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    12ba:	6821      	ldr	r1, [r4, #0]
    12bc:	2304      	movs	r3, #4
    12be:	430b      	orrs	r3, r1
    12c0:	6023      	str	r3, [r4, #0]
    12c2:	e011      	b.n	12e8 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12c4:	2b20      	cmp	r3, #32
    12c6:	d10f      	bne.n	12e8 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12c8:	7b03      	ldrb	r3, [r0, #12]
    12ca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12cc:	8a02      	ldrh	r2, [r0, #16]
    12ce:	4313      	orrs	r3, r2
    12d0:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12d2:	89c3      	ldrh	r3, [r0, #14]
    12d4:	041b      	lsls	r3, r3, #16
    12d6:	4a06      	ldr	r2, [pc, #24]	; (12f0 <system_clock_source_dfll_set_config+0x7c>)
    12d8:	4013      	ands	r3, r2
    12da:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    12dc:	4a03      	ldr	r2, [pc, #12]	; (12ec <system_clock_source_dfll_set_config+0x78>)
    12de:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    12e0:	6813      	ldr	r3, [r2, #0]
    12e2:	4904      	ldr	r1, [pc, #16]	; (12f4 <system_clock_source_dfll_set_config+0x80>)
    12e4:	430b      	orrs	r3, r1
    12e6:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    12e8:	bd10      	pop	{r4, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	20000184 	.word	0x20000184
    12f0:	03ff0000 	.word	0x03ff0000
    12f4:	00000424 	.word	0x00000424

000012f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    12f8:	2808      	cmp	r0, #8
    12fa:	d803      	bhi.n	1304 <system_clock_source_enable+0xc>
    12fc:	0080      	lsls	r0, r0, #2
    12fe:	4b25      	ldr	r3, [pc, #148]	; (1394 <system_clock_source_enable+0x9c>)
    1300:	581b      	ldr	r3, [r3, r0]
    1302:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1304:	2017      	movs	r0, #23
    1306:	e044      	b.n	1392 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1308:	4a23      	ldr	r2, [pc, #140]	; (1398 <system_clock_source_enable+0xa0>)
    130a:	6a11      	ldr	r1, [r2, #32]
    130c:	2302      	movs	r3, #2
    130e:	430b      	orrs	r3, r1
    1310:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1312:	2000      	movs	r0, #0
    1314:	e03d      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1316:	4a20      	ldr	r2, [pc, #128]	; (1398 <system_clock_source_enable+0xa0>)
    1318:	6991      	ldr	r1, [r2, #24]
    131a:	2302      	movs	r3, #2
    131c:	430b      	orrs	r3, r1
    131e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1320:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1322:	e036      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1324:	4a1c      	ldr	r2, [pc, #112]	; (1398 <system_clock_source_enable+0xa0>)
    1326:	8a11      	ldrh	r1, [r2, #16]
    1328:	2302      	movs	r3, #2
    132a:	430b      	orrs	r3, r1
    132c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    132e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1330:	e02f      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1332:	4a19      	ldr	r2, [pc, #100]	; (1398 <system_clock_source_enable+0xa0>)
    1334:	8a91      	ldrh	r1, [r2, #20]
    1336:	2302      	movs	r3, #2
    1338:	430b      	orrs	r3, r1
    133a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    133c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    133e:	e028      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1340:	4916      	ldr	r1, [pc, #88]	; (139c <system_clock_source_enable+0xa4>)
    1342:	680b      	ldr	r3, [r1, #0]
    1344:	2202      	movs	r2, #2
    1346:	4313      	orrs	r3, r2
    1348:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    134a:	4b13      	ldr	r3, [pc, #76]	; (1398 <system_clock_source_enable+0xa0>)
    134c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    134e:	1c19      	adds	r1, r3, #0
    1350:	320e      	adds	r2, #14
    1352:	68cb      	ldr	r3, [r1, #12]
    1354:	421a      	tst	r2, r3
    1356:	d0fc      	beq.n	1352 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1358:	4a10      	ldr	r2, [pc, #64]	; (139c <system_clock_source_enable+0xa4>)
    135a:	6891      	ldr	r1, [r2, #8]
    135c:	4b0e      	ldr	r3, [pc, #56]	; (1398 <system_clock_source_enable+0xa0>)
    135e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1360:	6852      	ldr	r2, [r2, #4]
    1362:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1364:	2200      	movs	r2, #0
    1366:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1368:	1c19      	adds	r1, r3, #0
    136a:	3210      	adds	r2, #16
    136c:	68cb      	ldr	r3, [r1, #12]
    136e:	421a      	tst	r2, r3
    1370:	d0fc      	beq.n	136c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1372:	4b0a      	ldr	r3, [pc, #40]	; (139c <system_clock_source_enable+0xa4>)
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	b29b      	uxth	r3, r3
    1378:	4a07      	ldr	r2, [pc, #28]	; (1398 <system_clock_source_enable+0xa0>)
    137a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    137c:	2000      	movs	r0, #0
    137e:	e008      	b.n	1392 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1380:	4905      	ldr	r1, [pc, #20]	; (1398 <system_clock_source_enable+0xa0>)
    1382:	2244      	movs	r2, #68	; 0x44
    1384:	5c88      	ldrb	r0, [r1, r2]
    1386:	2302      	movs	r3, #2
    1388:	4303      	orrs	r3, r0
    138a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    138c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    138e:	e000      	b.n	1392 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1390:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1392:	4770      	bx	lr
    1394:	00002d78 	.word	0x00002d78
    1398:	40000800 	.word	0x40000800
    139c:	20000184 	.word	0x20000184

000013a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13a2:	464f      	mov	r7, r9
    13a4:	4646      	mov	r6, r8
    13a6:	b4c0      	push	{r6, r7}
    13a8:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13aa:	22c2      	movs	r2, #194	; 0xc2
    13ac:	00d2      	lsls	r2, r2, #3
    13ae:	4b61      	ldr	r3, [pc, #388]	; (1534 <system_clock_init+0x194>)
    13b0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13b2:	4961      	ldr	r1, [pc, #388]	; (1538 <system_clock_init+0x198>)
    13b4:	684b      	ldr	r3, [r1, #4]
    13b6:	221e      	movs	r2, #30
    13b8:	4393      	bics	r3, r2
    13ba:	3a1a      	subs	r2, #26
    13bc:	4313      	orrs	r3, r2
    13be:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    13c0:	ab01      	add	r3, sp, #4
    13c2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13c4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13c6:	4d5d      	ldr	r5, [pc, #372]	; (153c <system_clock_init+0x19c>)
    13c8:	b2e0      	uxtb	r0, r4
    13ca:	a901      	add	r1, sp, #4
    13cc:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13ce:	3401      	adds	r4, #1
    13d0:	2c25      	cmp	r4, #37	; 0x25
    13d2:	d1f9      	bne.n	13c8 <system_clock_init+0x28>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    13d4:	a80c      	add	r0, sp, #48	; 0x30
    13d6:	2300      	movs	r3, #0
    13d8:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    13da:	2280      	movs	r2, #128	; 0x80
    13dc:	0212      	lsls	r2, r2, #8
    13de:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    13e0:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    13e2:	2201      	movs	r2, #1
    13e4:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    13e6:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    13e8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    13ea:	2106      	movs	r1, #6
    13ec:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    13ee:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    13f0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    13f2:	4b53      	ldr	r3, [pc, #332]	; (1540 <system_clock_init+0x1a0>)
    13f4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    13f6:	2005      	movs	r0, #5
    13f8:	4b52      	ldr	r3, [pc, #328]	; (1544 <system_clock_init+0x1a4>)
    13fa:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    13fc:	494d      	ldr	r1, [pc, #308]	; (1534 <system_clock_init+0x194>)
    13fe:	2202      	movs	r2, #2
    1400:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1402:	421a      	tst	r2, r3
    1404:	d0fc      	beq.n	1400 <system_clock_init+0x60>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1406:	494b      	ldr	r1, [pc, #300]	; (1534 <system_clock_init+0x194>)
    1408:	8a8a      	ldrh	r2, [r1, #20]
    140a:	2380      	movs	r3, #128	; 0x80
    140c:	4313      	orrs	r3, r2
    140e:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1410:	4d4d      	ldr	r5, [pc, #308]	; (1548 <system_clock_init+0x1a8>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1412:	682b      	ldr	r3, [r5, #0]
    1414:	04db      	lsls	r3, r3, #19
    1416:	0e5b      	lsrs	r3, r3, #25
    1418:	041a      	lsls	r2, r3, #16
    141a:	6988      	ldr	r0, [r1, #24]
    141c:	4b4b      	ldr	r3, [pc, #300]	; (154c <system_clock_init+0x1ac>)
    141e:	4003      	ands	r3, r0
    1420:	4313      	orrs	r3, r2
    1422:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1424:	a80a      	add	r0, sp, #40	; 0x28
    1426:	2301      	movs	r3, #1
    1428:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    142a:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    142c:	2400      	movs	r4, #0
    142e:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    1430:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1432:	3306      	adds	r3, #6
    1434:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1436:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1438:	4b45      	ldr	r3, [pc, #276]	; (1550 <system_clock_init+0x1b0>)
    143a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    143c:	2004      	movs	r0, #4
    143e:	4b41      	ldr	r3, [pc, #260]	; (1544 <system_clock_init+0x1a4>)
    1440:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1442:	ab05      	add	r3, sp, #20
    1444:	2200      	movs	r2, #0
    1446:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1448:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    144a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    144c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    144e:	213f      	movs	r1, #63	; 0x3f
    1450:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1452:	393b      	subs	r1, #59	; 0x3b
    1454:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1456:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1458:	682b      	ldr	r3, [r5, #0]
    145a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    145c:	2b3f      	cmp	r3, #63	; 0x3f
    145e:	d100      	bne.n	1462 <system_clock_init+0xc2>
		coarse = 0x1f;
    1460:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1462:	a805      	add	r0, sp, #20
    1464:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1466:	23b7      	movs	r3, #183	; 0xb7
    1468:	00db      	lsls	r3, r3, #3
    146a:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    146c:	2307      	movs	r3, #7
    146e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1470:	3338      	adds	r3, #56	; 0x38
    1472:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1474:	4b37      	ldr	r3, [pc, #220]	; (1554 <system_clock_init+0x1b4>)
    1476:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1478:	a804      	add	r0, sp, #16
    147a:	2500      	movs	r5, #0
    147c:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    147e:	2601      	movs	r6, #1
    1480:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1482:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1484:	4b34      	ldr	r3, [pc, #208]	; (1558 <system_clock_init+0x1b8>)
    1486:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1488:	2006      	movs	r0, #6
    148a:	4b2e      	ldr	r3, [pc, #184]	; (1544 <system_clock_init+0x1a4>)
    148c:	4699      	mov	r9, r3
    148e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1490:	4b32      	ldr	r3, [pc, #200]	; (155c <system_clock_init+0x1bc>)
    1492:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1494:	ac01      	add	r4, sp, #4
    1496:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1498:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    149a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    149c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    149e:	2305      	movs	r3, #5
    14a0:	7023      	strb	r3, [r4, #0]
    14a2:	2001      	movs	r0, #1
    14a4:	1c21      	adds	r1, r4, #0
    14a6:	4b2e      	ldr	r3, [pc, #184]	; (1560 <system_clock_init+0x1c0>)
    14a8:	4698      	mov	r8, r3
    14aa:	4798      	blx	r3
    14ac:	2001      	movs	r0, #1
    14ae:	4f2d      	ldr	r7, [pc, #180]	; (1564 <system_clock_init+0x1c4>)
    14b0:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    14b2:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    14b4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14b6:	7265      	strb	r5, [r4, #9]
    14b8:	2304      	movs	r3, #4
    14ba:	7023      	strb	r3, [r4, #0]
    14bc:	331c      	adds	r3, #28
    14be:	6063      	str	r3, [r4, #4]
    14c0:	2002      	movs	r0, #2
    14c2:	1c21      	adds	r1, r4, #0
    14c4:	47c0      	blx	r8
    14c6:	2002      	movs	r0, #2
    14c8:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    14ca:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    14cc:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14ce:	2306      	movs	r3, #6
    14d0:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    14d2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14d4:	7265      	strb	r5, [r4, #9]
    14d6:	2003      	movs	r0, #3
    14d8:	1c21      	adds	r1, r4, #0
    14da:	47c0      	blx	r8
    14dc:	2003      	movs	r0, #3
    14de:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    14e0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    14e2:	2000      	movs	r0, #0
    14e4:	1c21      	adds	r1, r4, #0
    14e6:	4b15      	ldr	r3, [pc, #84]	; (153c <system_clock_init+0x19c>)
    14e8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    14ea:	2000      	movs	r0, #0
    14ec:	4b1e      	ldr	r3, [pc, #120]	; (1568 <system_clock_init+0x1c8>)
    14ee:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    14f0:	2007      	movs	r0, #7
    14f2:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    14f4:	490f      	ldr	r1, [pc, #60]	; (1534 <system_clock_init+0x194>)
    14f6:	22d0      	movs	r2, #208	; 0xd0
    14f8:	68cb      	ldr	r3, [r1, #12]
    14fa:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    14fc:	2bd0      	cmp	r3, #208	; 0xd0
    14fe:	d1fb      	bne.n	14f8 <system_clock_init+0x158>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1500:	4a1a      	ldr	r2, [pc, #104]	; (156c <system_clock_init+0x1cc>)
    1502:	2300      	movs	r3, #0
    1504:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1506:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1508:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    150a:	72d3      	strb	r3, [r2, #11]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    150c:	a901      	add	r1, sp, #4
    150e:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1510:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1512:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1514:	3307      	adds	r3, #7
    1516:	700b      	strb	r3, [r1, #0]
    1518:	3b04      	subs	r3, #4
    151a:	604b      	str	r3, [r1, #4]
    151c:	2000      	movs	r0, #0
    151e:	4b10      	ldr	r3, [pc, #64]	; (1560 <system_clock_init+0x1c0>)
    1520:	4798      	blx	r3
    1522:	2000      	movs	r0, #0
    1524:	4b0f      	ldr	r3, [pc, #60]	; (1564 <system_clock_init+0x1c4>)
    1526:	4798      	blx	r3
#endif
}
    1528:	b011      	add	sp, #68	; 0x44
    152a:	bc0c      	pop	{r2, r3}
    152c:	4690      	mov	r8, r2
    152e:	4699      	mov	r9, r3
    1530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	40000800 	.word	0x40000800
    1538:	41004000 	.word	0x41004000
    153c:	000017a9 	.word	0x000017a9
    1540:	0000119d 	.word	0x0000119d
    1544:	000012f9 	.word	0x000012f9
    1548:	00806024 	.word	0x00806024
    154c:	ff80ffff 	.word	0xff80ffff
    1550:	00001115 	.word	0x00001115
    1554:	00001275 	.word	0x00001275
    1558:	000010d9 	.word	0x000010d9
    155c:	00001571 	.word	0x00001571
    1560:	00001595 	.word	0x00001595
    1564:	0000164d 	.word	0x0000164d
    1568:	0000171d 	.word	0x0000171d
    156c:	40000400 	.word	0x40000400

00001570 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1570:	4a06      	ldr	r2, [pc, #24]	; (158c <system_gclk_init+0x1c>)
    1572:	6991      	ldr	r1, [r2, #24]
    1574:	2308      	movs	r3, #8
    1576:	430b      	orrs	r3, r1
    1578:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    157a:	2201      	movs	r2, #1
    157c:	4b04      	ldr	r3, [pc, #16]	; (1590 <system_gclk_init+0x20>)
    157e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1580:	1c19      	adds	r1, r3, #0
    1582:	780b      	ldrb	r3, [r1, #0]
    1584:	4213      	tst	r3, r2
    1586:	d1fc      	bne.n	1582 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1588:	4770      	bx	lr
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	40000400 	.word	0x40000400
    1590:	40000c00 	.word	0x40000c00

00001594 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1594:	b570      	push	{r4, r5, r6, lr}
    1596:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1598:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    159a:	780d      	ldrb	r5, [r1, #0]
    159c:	022d      	lsls	r5, r5, #8
    159e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    15a0:	784b      	ldrb	r3, [r1, #1]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d002      	beq.n	15ac <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    15a6:	2380      	movs	r3, #128	; 0x80
    15a8:	02db      	lsls	r3, r3, #11
    15aa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    15ac:	7a4b      	ldrb	r3, [r1, #9]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d002      	beq.n	15b8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    15b2:	2380      	movs	r3, #128	; 0x80
    15b4:	031b      	lsls	r3, r3, #12
    15b6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    15b8:	6848      	ldr	r0, [r1, #4]
    15ba:	2801      	cmp	r0, #1
    15bc:	d918      	bls.n	15f0 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    15be:	1e43      	subs	r3, r0, #1
    15c0:	4218      	tst	r0, r3
    15c2:	d110      	bne.n	15e6 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    15c4:	2802      	cmp	r0, #2
    15c6:	d906      	bls.n	15d6 <system_gclk_gen_set_config+0x42>
    15c8:	2302      	movs	r3, #2
    15ca:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    15cc:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    15ce:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    15d0:	4298      	cmp	r0, r3
    15d2:	d8fb      	bhi.n	15cc <system_gclk_gen_set_config+0x38>
    15d4:	e000      	b.n	15d8 <system_gclk_gen_set_config+0x44>
    15d6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    15d8:	0212      	lsls	r2, r2, #8
    15da:	4332      	orrs	r2, r6
    15dc:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    15de:	2380      	movs	r3, #128	; 0x80
    15e0:	035b      	lsls	r3, r3, #13
    15e2:	431d      	orrs	r5, r3
    15e4:	e004      	b.n	15f0 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    15e6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    15e8:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	029b      	lsls	r3, r3, #10
    15ee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15f0:	7a0b      	ldrb	r3, [r1, #8]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d002      	beq.n	15fc <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15f6:	2380      	movs	r3, #128	; 0x80
    15f8:	039b      	lsls	r3, r3, #14
    15fa:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15fc:	4a0f      	ldr	r2, [pc, #60]	; (163c <system_gclk_gen_set_config+0xa8>)
    15fe:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1600:	b25b      	sxtb	r3, r3
    1602:	2b00      	cmp	r3, #0
    1604:	dbfb      	blt.n	15fe <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1606:	4b0e      	ldr	r3, [pc, #56]	; (1640 <system_gclk_gen_set_config+0xac>)
    1608:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    160a:	4b0e      	ldr	r3, [pc, #56]	; (1644 <system_gclk_gen_set_config+0xb0>)
    160c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    160e:	4a0b      	ldr	r2, [pc, #44]	; (163c <system_gclk_gen_set_config+0xa8>)
    1610:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1612:	b25b      	sxtb	r3, r3
    1614:	2b00      	cmp	r3, #0
    1616:	dbfb      	blt.n	1610 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1618:	4b08      	ldr	r3, [pc, #32]	; (163c <system_gclk_gen_set_config+0xa8>)
    161a:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    161c:	1c1a      	adds	r2, r3, #0
    161e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1620:	b25b      	sxtb	r3, r3
    1622:	2b00      	cmp	r3, #0
    1624:	dbfb      	blt.n	161e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1626:	4a05      	ldr	r2, [pc, #20]	; (163c <system_gclk_gen_set_config+0xa8>)
    1628:	6851      	ldr	r1, [r2, #4]
    162a:	2380      	movs	r3, #128	; 0x80
    162c:	025b      	lsls	r3, r3, #9
    162e:	400b      	ands	r3, r1
    1630:	431d      	orrs	r5, r3
    1632:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1634:	4b04      	ldr	r3, [pc, #16]	; (1648 <system_gclk_gen_set_config+0xb4>)
    1636:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1638:	bd70      	pop	{r4, r5, r6, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	40000c00 	.word	0x40000c00
    1640:	00000f65 	.word	0x00000f65
    1644:	40000c08 	.word	0x40000c08
    1648:	00000fa5 	.word	0x00000fa5

0000164c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    164c:	b510      	push	{r4, lr}
    164e:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1650:	4a0b      	ldr	r2, [pc, #44]	; (1680 <system_gclk_gen_enable+0x34>)
    1652:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1654:	b25b      	sxtb	r3, r3
    1656:	2b00      	cmp	r3, #0
    1658:	dbfb      	blt.n	1652 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    165a:	4b0a      	ldr	r3, [pc, #40]	; (1684 <system_gclk_gen_enable+0x38>)
    165c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <system_gclk_gen_enable+0x3c>)
    1660:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1662:	4a07      	ldr	r2, [pc, #28]	; (1680 <system_gclk_gen_enable+0x34>)
    1664:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1666:	b25b      	sxtb	r3, r3
    1668:	2b00      	cmp	r3, #0
    166a:	dbfb      	blt.n	1664 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    166c:	4a04      	ldr	r2, [pc, #16]	; (1680 <system_gclk_gen_enable+0x34>)
    166e:	6853      	ldr	r3, [r2, #4]
    1670:	2180      	movs	r1, #128	; 0x80
    1672:	0249      	lsls	r1, r1, #9
    1674:	430b      	orrs	r3, r1
    1676:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1678:	4b04      	ldr	r3, [pc, #16]	; (168c <system_gclk_gen_enable+0x40>)
    167a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    167c:	bd10      	pop	{r4, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	40000c00 	.word	0x40000c00
    1684:	00000f65 	.word	0x00000f65
    1688:	40000c04 	.word	0x40000c04
    168c:	00000fa5 	.word	0x00000fa5

00001690 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1690:	b570      	push	{r4, r5, r6, lr}
    1692:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1694:	4a1a      	ldr	r2, [pc, #104]	; (1700 <system_gclk_gen_get_hz+0x70>)
    1696:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1698:	b25b      	sxtb	r3, r3
    169a:	2b00      	cmp	r3, #0
    169c:	dbfb      	blt.n	1696 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    169e:	4b19      	ldr	r3, [pc, #100]	; (1704 <system_gclk_gen_get_hz+0x74>)
    16a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16a2:	4b19      	ldr	r3, [pc, #100]	; (1708 <system_gclk_gen_get_hz+0x78>)
    16a4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16a6:	4a16      	ldr	r2, [pc, #88]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16a8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    16aa:	b25b      	sxtb	r3, r3
    16ac:	2b00      	cmp	r3, #0
    16ae:	dbfb      	blt.n	16a8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    16b0:	4e13      	ldr	r6, [pc, #76]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16b2:	6870      	ldr	r0, [r6, #4]
    16b4:	04c0      	lsls	r0, r0, #19
    16b6:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    16b8:	4b14      	ldr	r3, [pc, #80]	; (170c <system_gclk_gen_get_hz+0x7c>)
    16ba:	4798      	blx	r3
    16bc:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16be:	4b12      	ldr	r3, [pc, #72]	; (1708 <system_gclk_gen_get_hz+0x78>)
    16c0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    16c2:	6876      	ldr	r6, [r6, #4]
    16c4:	02f6      	lsls	r6, r6, #11
    16c6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16c8:	4b11      	ldr	r3, [pc, #68]	; (1710 <system_gclk_gen_get_hz+0x80>)
    16ca:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16cc:	4a0c      	ldr	r2, [pc, #48]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16ce:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    16d0:	b25b      	sxtb	r3, r3
    16d2:	2b00      	cmp	r3, #0
    16d4:	dbfb      	blt.n	16ce <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    16d6:	4b0a      	ldr	r3, [pc, #40]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16d8:	689c      	ldr	r4, [r3, #8]
    16da:	0a24      	lsrs	r4, r4, #8
    16dc:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16de:	4b0d      	ldr	r3, [pc, #52]	; (1714 <system_gclk_gen_get_hz+0x84>)
    16e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16e2:	2e00      	cmp	r6, #0
    16e4:	d107      	bne.n	16f6 <system_gclk_gen_get_hz+0x66>
    16e6:	2c01      	cmp	r4, #1
    16e8:	d907      	bls.n	16fa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16ea:	1c28      	adds	r0, r5, #0
    16ec:	1c21      	adds	r1, r4, #0
    16ee:	4b0a      	ldr	r3, [pc, #40]	; (1718 <system_gclk_gen_get_hz+0x88>)
    16f0:	4798      	blx	r3
    16f2:	1c05      	adds	r5, r0, #0
    16f4:	e001      	b.n	16fa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16f6:	3401      	adds	r4, #1
    16f8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16fa:	1c28      	adds	r0, r5, #0
    16fc:	bd70      	pop	{r4, r5, r6, pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	40000c00 	.word	0x40000c00
    1704:	00000f65 	.word	0x00000f65
    1708:	40000c04 	.word	0x40000c04
    170c:	00001049 	.word	0x00001049
    1710:	40000c08 	.word	0x40000c08
    1714:	00000fa5 	.word	0x00000fa5
    1718:	00001be9 	.word	0x00001be9

0000171c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    171c:	b510      	push	{r4, lr}
    171e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <system_gclk_chan_enable+0x20>)
    1722:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1724:	4b06      	ldr	r3, [pc, #24]	; (1740 <system_gclk_chan_enable+0x24>)
    1726:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1728:	4a06      	ldr	r2, [pc, #24]	; (1744 <system_gclk_chan_enable+0x28>)
    172a:	8851      	ldrh	r1, [r2, #2]
    172c:	2380      	movs	r3, #128	; 0x80
    172e:	01db      	lsls	r3, r3, #7
    1730:	430b      	orrs	r3, r1
    1732:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1734:	4b04      	ldr	r3, [pc, #16]	; (1748 <system_gclk_chan_enable+0x2c>)
    1736:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1738:	bd10      	pop	{r4, pc}
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	00000f65 	.word	0x00000f65
    1740:	40000c02 	.word	0x40000c02
    1744:	40000c00 	.word	0x40000c00
    1748:	00000fa5 	.word	0x00000fa5

0000174c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    174c:	b510      	push	{r4, lr}
    174e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1750:	4b0f      	ldr	r3, [pc, #60]	; (1790 <system_gclk_chan_disable+0x44>)
    1752:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1754:	4b0f      	ldr	r3, [pc, #60]	; (1794 <system_gclk_chan_disable+0x48>)
    1756:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1758:	4b0f      	ldr	r3, [pc, #60]	; (1798 <system_gclk_chan_disable+0x4c>)
    175a:	885a      	ldrh	r2, [r3, #2]
    175c:	0512      	lsls	r2, r2, #20
    175e:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1760:	8859      	ldrh	r1, [r3, #2]
    1762:	4a0e      	ldr	r2, [pc, #56]	; (179c <system_gclk_chan_disable+0x50>)
    1764:	400a      	ands	r2, r1
    1766:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1768:	8859      	ldrh	r1, [r3, #2]
    176a:	4a0d      	ldr	r2, [pc, #52]	; (17a0 <system_gclk_chan_disable+0x54>)
    176c:	400a      	ands	r2, r1
    176e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1770:	1c19      	adds	r1, r3, #0
    1772:	2280      	movs	r2, #128	; 0x80
    1774:	01d2      	lsls	r2, r2, #7
    1776:	884b      	ldrh	r3, [r1, #2]
    1778:	4213      	tst	r3, r2
    177a:	d1fc      	bne.n	1776 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    177c:	4906      	ldr	r1, [pc, #24]	; (1798 <system_gclk_chan_disable+0x4c>)
    177e:	0202      	lsls	r2, r0, #8
    1780:	8848      	ldrh	r0, [r1, #2]
    1782:	4b06      	ldr	r3, [pc, #24]	; (179c <system_gclk_chan_disable+0x50>)
    1784:	4003      	ands	r3, r0
    1786:	4313      	orrs	r3, r2
    1788:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    178a:	4b06      	ldr	r3, [pc, #24]	; (17a4 <system_gclk_chan_disable+0x58>)
    178c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    178e:	bd10      	pop	{r4, pc}
    1790:	00000f65 	.word	0x00000f65
    1794:	40000c02 	.word	0x40000c02
    1798:	40000c00 	.word	0x40000c00
    179c:	fffff0ff 	.word	0xfffff0ff
    17a0:	ffffbfff 	.word	0xffffbfff
    17a4:	00000fa5 	.word	0x00000fa5

000017a8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    17a8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    17aa:	780c      	ldrb	r4, [r1, #0]
    17ac:	0224      	lsls	r4, r4, #8
    17ae:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    17b0:	4b02      	ldr	r3, [pc, #8]	; (17bc <system_gclk_chan_set_config+0x14>)
    17b2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    17b4:	b2a4      	uxth	r4, r4
    17b6:	4b02      	ldr	r3, [pc, #8]	; (17c0 <system_gclk_chan_set_config+0x18>)
    17b8:	805c      	strh	r4, [r3, #2]
}
    17ba:	bd10      	pop	{r4, pc}
    17bc:	0000174d 	.word	0x0000174d
    17c0:	40000c00 	.word	0x40000c00

000017c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    17c4:	b510      	push	{r4, lr}
    17c6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    17c8:	4b06      	ldr	r3, [pc, #24]	; (17e4 <system_gclk_chan_get_hz+0x20>)
    17ca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    17cc:	4b06      	ldr	r3, [pc, #24]	; (17e8 <system_gclk_chan_get_hz+0x24>)
    17ce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    17d0:	4b06      	ldr	r3, [pc, #24]	; (17ec <system_gclk_chan_get_hz+0x28>)
    17d2:	885c      	ldrh	r4, [r3, #2]
    17d4:	0524      	lsls	r4, r4, #20
    17d6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <system_gclk_chan_get_hz+0x2c>)
    17da:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    17dc:	1c20      	adds	r0, r4, #0
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <system_gclk_chan_get_hz+0x30>)
    17e0:	4798      	blx	r3
}
    17e2:	bd10      	pop	{r4, pc}
    17e4:	00000f65 	.word	0x00000f65
    17e8:	40000c02 	.word	0x40000c02
    17ec:	40000c00 	.word	0x40000c00
    17f0:	00000fa5 	.word	0x00000fa5
    17f4:	00001691 	.word	0x00001691

000017f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17fa:	78d3      	ldrb	r3, [r2, #3]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d11e      	bne.n	183e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1800:	7814      	ldrb	r4, [r2, #0]
    1802:	2c80      	cmp	r4, #128	; 0x80
    1804:	d004      	beq.n	1810 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1806:	0624      	lsls	r4, r4, #24
    1808:	2380      	movs	r3, #128	; 0x80
    180a:	025b      	lsls	r3, r3, #9
    180c:	431c      	orrs	r4, r3
    180e:	e000      	b.n	1812 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1810:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1812:	7853      	ldrb	r3, [r2, #1]
    1814:	2502      	movs	r5, #2
    1816:	43ab      	bics	r3, r5
    1818:	d10a      	bne.n	1830 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    181a:	7893      	ldrb	r3, [r2, #2]
    181c:	2b00      	cmp	r3, #0
    181e:	d103      	bne.n	1828 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1820:	2380      	movs	r3, #128	; 0x80
    1822:	029b      	lsls	r3, r3, #10
    1824:	431c      	orrs	r4, r3
    1826:	e002      	b.n	182e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1828:	23c0      	movs	r3, #192	; 0xc0
    182a:	02db      	lsls	r3, r3, #11
    182c:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    182e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1830:	7853      	ldrb	r3, [r2, #1]
    1832:	3b01      	subs	r3, #1
    1834:	2b01      	cmp	r3, #1
    1836:	d812      	bhi.n	185e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1838:	4b18      	ldr	r3, [pc, #96]	; (189c <_system_pinmux_config+0xa4>)
    183a:	401c      	ands	r4, r3
    183c:	e00f      	b.n	185e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    183e:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1840:	040b      	lsls	r3, r1, #16
    1842:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1844:	24a0      	movs	r4, #160	; 0xa0
    1846:	05e4      	lsls	r4, r4, #23
    1848:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    184a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    184c:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    184e:	24d0      	movs	r4, #208	; 0xd0
    1850:	0624      	lsls	r4, r4, #24
    1852:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1854:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1856:	78d3      	ldrb	r3, [r2, #3]
    1858:	2b00      	cmp	r3, #0
    185a:	d018      	beq.n	188e <_system_pinmux_config+0x96>
    185c:	e01c      	b.n	1898 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    185e:	040b      	lsls	r3, r1, #16
    1860:	0c1b      	lsrs	r3, r3, #16
    1862:	25a0      	movs	r5, #160	; 0xa0
    1864:	05ed      	lsls	r5, r5, #23
    1866:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1868:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    186a:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    186c:	0c0b      	lsrs	r3, r1, #16
    186e:	25d0      	movs	r5, #208	; 0xd0
    1870:	062d      	lsls	r5, r5, #24
    1872:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1874:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1876:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1878:	78d3      	ldrb	r3, [r2, #3]
    187a:	2b00      	cmp	r3, #0
    187c:	d10c      	bne.n	1898 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    187e:	0363      	lsls	r3, r4, #13
    1880:	d505      	bpl.n	188e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1882:	7893      	ldrb	r3, [r2, #2]
    1884:	2b01      	cmp	r3, #1
    1886:	d101      	bne.n	188c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1888:	6181      	str	r1, [r0, #24]
    188a:	e000      	b.n	188e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    188c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    188e:	7853      	ldrb	r3, [r2, #1]
    1890:	3b01      	subs	r3, #1
    1892:	2b01      	cmp	r3, #1
    1894:	d800      	bhi.n	1898 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1896:	6081      	str	r1, [r0, #8]
		}
	}
}
    1898:	bd30      	pop	{r4, r5, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	fffbffff 	.word	0xfffbffff

000018a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    18a0:	b508      	push	{r3, lr}
    18a2:	1c03      	adds	r3, r0, #0
    18a4:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    18a6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    18a8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    18aa:	2900      	cmp	r1, #0
    18ac:	d104      	bne.n	18b8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    18ae:	0958      	lsrs	r0, r3, #5
    18b0:	01c0      	lsls	r0, r0, #7
    18b2:	4905      	ldr	r1, [pc, #20]	; (18c8 <system_pinmux_pin_set_config+0x28>)
    18b4:	468c      	mov	ip, r1
    18b6:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    18b8:	211f      	movs	r1, #31
    18ba:	400b      	ands	r3, r1
    18bc:	391e      	subs	r1, #30
    18be:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    18c0:	4b02      	ldr	r3, [pc, #8]	; (18cc <system_pinmux_pin_set_config+0x2c>)
    18c2:	4798      	blx	r3
}
    18c4:	bd08      	pop	{r3, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	41004400 	.word	0x41004400
    18cc:	000017f9 	.word	0x000017f9

000018d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    18d0:	4770      	bx	lr
    18d2:	46c0      	nop			; (mov r8, r8)

000018d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    18d4:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    18d6:	4b05      	ldr	r3, [pc, #20]	; (18ec <system_init+0x18>)
    18d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <system_init+0x1c>)
    18dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    18de:	4b05      	ldr	r3, [pc, #20]	; (18f4 <system_init+0x20>)
    18e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18e2:	4b05      	ldr	r3, [pc, #20]	; (18f8 <system_init+0x24>)
    18e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18e6:	4b05      	ldr	r3, [pc, #20]	; (18fc <system_init+0x28>)
    18e8:	4798      	blx	r3
}
    18ea:	bd08      	pop	{r3, pc}
    18ec:	000013a1 	.word	0x000013a1
    18f0:	00000fd5 	.word	0x00000fd5
    18f4:	000018d1 	.word	0x000018d1
    18f8:	000018d1 	.word	0x000018d1
    18fc:	000018d1 	.word	0x000018d1

00001900 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1900:	e7fe      	b.n	1900 <Dummy_Handler>
    1902:	46c0      	nop			; (mov r8, r8)

00001904 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1904:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1906:	4b2e      	ldr	r3, [pc, #184]	; (19c0 <Reset_Handler+0xbc>)
    1908:	4a2e      	ldr	r2, [pc, #184]	; (19c4 <Reset_Handler+0xc0>)
    190a:	429a      	cmp	r2, r3
    190c:	d003      	beq.n	1916 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    190e:	4b2e      	ldr	r3, [pc, #184]	; (19c8 <Reset_Handler+0xc4>)
    1910:	4a2b      	ldr	r2, [pc, #172]	; (19c0 <Reset_Handler+0xbc>)
    1912:	429a      	cmp	r2, r3
    1914:	d304      	bcc.n	1920 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1916:	4b2d      	ldr	r3, [pc, #180]	; (19cc <Reset_Handler+0xc8>)
    1918:	4a2d      	ldr	r2, [pc, #180]	; (19d0 <Reset_Handler+0xcc>)
    191a:	429a      	cmp	r2, r3
    191c:	d310      	bcc.n	1940 <Reset_Handler+0x3c>
    191e:	e01e      	b.n	195e <Reset_Handler+0x5a>
    1920:	4a2c      	ldr	r2, [pc, #176]	; (19d4 <Reset_Handler+0xd0>)
    1922:	4b29      	ldr	r3, [pc, #164]	; (19c8 <Reset_Handler+0xc4>)
    1924:	3303      	adds	r3, #3
    1926:	1a9b      	subs	r3, r3, r2
    1928:	089b      	lsrs	r3, r3, #2
    192a:	3301      	adds	r3, #1
    192c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    192e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1930:	4823      	ldr	r0, [pc, #140]	; (19c0 <Reset_Handler+0xbc>)
    1932:	4924      	ldr	r1, [pc, #144]	; (19c4 <Reset_Handler+0xc0>)
    1934:	588c      	ldr	r4, [r1, r2]
    1936:	5084      	str	r4, [r0, r2]
    1938:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    193a:	429a      	cmp	r2, r3
    193c:	d1fa      	bne.n	1934 <Reset_Handler+0x30>
    193e:	e7ea      	b.n	1916 <Reset_Handler+0x12>
    1940:	4a25      	ldr	r2, [pc, #148]	; (19d8 <Reset_Handler+0xd4>)
    1942:	4b22      	ldr	r3, [pc, #136]	; (19cc <Reset_Handler+0xc8>)
    1944:	3303      	adds	r3, #3
    1946:	1a9b      	subs	r3, r3, r2
    1948:	089b      	lsrs	r3, r3, #2
    194a:	3301      	adds	r3, #1
    194c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    194e:	2200      	movs	r2, #0
                *pDest++ = 0;
    1950:	481f      	ldr	r0, [pc, #124]	; (19d0 <Reset_Handler+0xcc>)
    1952:	2100      	movs	r1, #0
    1954:	1814      	adds	r4, r2, r0
    1956:	6021      	str	r1, [r4, #0]
    1958:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    195a:	429a      	cmp	r2, r3
    195c:	d1fa      	bne.n	1954 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    195e:	4a1f      	ldr	r2, [pc, #124]	; (19dc <Reset_Handler+0xd8>)
    1960:	21ff      	movs	r1, #255	; 0xff
    1962:	4b1f      	ldr	r3, [pc, #124]	; (19e0 <Reset_Handler+0xdc>)
    1964:	438b      	bics	r3, r1
    1966:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1968:	39fd      	subs	r1, #253	; 0xfd
    196a:	2390      	movs	r3, #144	; 0x90
    196c:	005b      	lsls	r3, r3, #1
    196e:	4a1d      	ldr	r2, [pc, #116]	; (19e4 <Reset_Handler+0xe0>)
    1970:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1972:	481d      	ldr	r0, [pc, #116]	; (19e8 <Reset_Handler+0xe4>)
    1974:	78c3      	ldrb	r3, [r0, #3]
    1976:	2403      	movs	r4, #3
    1978:	43a3      	bics	r3, r4
    197a:	2202      	movs	r2, #2
    197c:	4313      	orrs	r3, r2
    197e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1980:	78c3      	ldrb	r3, [r0, #3]
    1982:	260c      	movs	r6, #12
    1984:	43b3      	bics	r3, r6
    1986:	2108      	movs	r1, #8
    1988:	430b      	orrs	r3, r1
    198a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    198c:	4b17      	ldr	r3, [pc, #92]	; (19ec <Reset_Handler+0xe8>)
    198e:	7b98      	ldrb	r0, [r3, #14]
    1990:	2530      	movs	r5, #48	; 0x30
    1992:	43a8      	bics	r0, r5
    1994:	1c05      	adds	r5, r0, #0
    1996:	2020      	movs	r0, #32
    1998:	4328      	orrs	r0, r5
    199a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    199c:	7b98      	ldrb	r0, [r3, #14]
    199e:	43b0      	bics	r0, r6
    19a0:	4301      	orrs	r1, r0
    19a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    19a4:	7b99      	ldrb	r1, [r3, #14]
    19a6:	43a1      	bics	r1, r4
    19a8:	430a      	orrs	r2, r1
    19aa:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    19ac:	4a10      	ldr	r2, [pc, #64]	; (19f0 <Reset_Handler+0xec>)
    19ae:	6851      	ldr	r1, [r2, #4]
    19b0:	2380      	movs	r3, #128	; 0x80
    19b2:	430b      	orrs	r3, r1
    19b4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    19b6:	4b0f      	ldr	r3, [pc, #60]	; (19f4 <Reset_Handler+0xf0>)
    19b8:	4798      	blx	r3

        /* Branch to main function */
        main();
    19ba:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <Reset_Handler+0xf4>)
    19bc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    19be:	e7fe      	b.n	19be <Reset_Handler+0xba>
    19c0:	20000000 	.word	0x20000000
    19c4:	00002f04 	.word	0x00002f04
    19c8:	20000070 	.word	0x20000070
    19cc:	200001dc 	.word	0x200001dc
    19d0:	20000070 	.word	0x20000070
    19d4:	20000004 	.word	0x20000004
    19d8:	20000074 	.word	0x20000074
    19dc:	e000ed00 	.word	0xe000ed00
    19e0:	00000000 	.word	0x00000000
    19e4:	41007000 	.word	0x41007000
    19e8:	41005000 	.word	0x41005000
    19ec:	41004800 	.word	0x41004800
    19f0:	41004000 	.word	0x41004000
    19f4:	00001d61 	.word	0x00001d61
    19f8:	00001b1d 	.word	0x00001b1d

000019fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    19fc:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    19fe:	4a06      	ldr	r2, [pc, #24]	; (1a18 <_sbrk+0x1c>)
    1a00:	6812      	ldr	r2, [r2, #0]
    1a02:	2a00      	cmp	r2, #0
    1a04:	d102      	bne.n	1a0c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1a06:	4905      	ldr	r1, [pc, #20]	; (1a1c <_sbrk+0x20>)
    1a08:	4a03      	ldr	r2, [pc, #12]	; (1a18 <_sbrk+0x1c>)
    1a0a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1a0c:	4a02      	ldr	r2, [pc, #8]	; (1a18 <_sbrk+0x1c>)
    1a0e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a10:	18c3      	adds	r3, r0, r3
    1a12:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a14:	4770      	bx	lr
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	2000019c 	.word	0x2000019c
    1a1c:	200021e0 	.word	0x200021e0

00001a20 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1a20:	2001      	movs	r0, #1
    1a22:	4240      	negs	r0, r0
    1a24:	4770      	bx	lr
    1a26:	46c0      	nop			; (mov r8, r8)

00001a28 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a28:	2380      	movs	r3, #128	; 0x80
    1a2a:	019b      	lsls	r3, r3, #6
    1a2c:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a2e:	2000      	movs	r0, #0
    1a30:	4770      	bx	lr
    1a32:	46c0      	nop			; (mov r8, r8)

00001a34 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1a34:	2001      	movs	r0, #1
    1a36:	4770      	bx	lr

00001a38 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1a38:	2000      	movs	r0, #0
    1a3a:	4770      	bx	lr

00001a3c <Neopixel_showColor>:
#define NEOPIXEL_H_

uint16_t numBytes = 3;

void Neopixel_showColor(uint8_t red, uint8_t green, uint8_t blue)
{
    1a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a3e:	464f      	mov	r7, r9
    1a40:	4646      	mov	r6, r8
    1a42:	b4c0      	push	{r6, r7}
    1a44:	b085      	sub	sp, #20
    1a46:	4680      	mov	r8, r0
    1a48:	1c0f      	adds	r7, r1, #0
    1a4a:	1c16      	adds	r6, r2, #0
	//system_interrupt_enter_critical_section(); // Need 100% focus on instruction timing

	volatile uint32_t
	c,    // 24-bit pixel color
	mask; // 8-bit mask
	volatile uint16_t i = numBytes; // Output loop counter
    1a4c:	4b2f      	ldr	r3, [pc, #188]	; (1b0c <Neopixel_showColor+0xd0>)
    1a4e:	881a      	ldrh	r2, [r3, #0]
    1a50:	466b      	mov	r3, sp
    1a52:	80da      	strh	r2, [r3, #6]
	g,              // Current green byte value
	r,              // Current red byte value
	b;              // Current blue byte value

	
		while(i) { // While bytes left... (3 bytes = 1 pixel)
    1a54:	466b      	mov	r3, sp
    1a56:	1d9c      	adds	r4, r3, #6
			i = i-3;      // decrement bytes remaining
			g = green;   // Next green byte value
			r = red;   // Next red byte value
			b = blue;   // Next blue byte value
			c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
			printf("Hexa: %04x\nBin: ", c);
    1a58:	4b2d      	ldr	r3, [pc, #180]	; (1b10 <Neopixel_showColor+0xd4>)
    1a5a:	4699      	mov	r9, r3
	g,              // Current green byte value
	r,              // Current red byte value
	b;              // Current blue byte value

	
		while(i) { // While bytes left... (3 bytes = 1 pixel)
    1a5c:	e04c      	b.n	1af8 <Neopixel_showColor+0xbc>
			mask = 0x800000; // reset the mask
    1a5e:	2380      	movs	r3, #128	; 0x80
    1a60:	041b      	lsls	r3, r3, #16
    1a62:	9302      	str	r3, [sp, #8]
			i = i-3;      // decrement bytes remaining
    1a64:	8823      	ldrh	r3, [r4, #0]
    1a66:	3b03      	subs	r3, #3
    1a68:	b29b      	uxth	r3, r3
    1a6a:	8023      	strh	r3, [r4, #0]
			g = green;   // Next green byte value
    1a6c:	ab01      	add	r3, sp, #4
    1a6e:	701f      	strb	r7, [r3, #0]
			r = red;   // Next red byte value
    1a70:	466a      	mov	r2, sp
    1a72:	4641      	mov	r1, r8
    1a74:	70d1      	strb	r1, [r2, #3]
    1a76:	3203      	adds	r2, #3
			b = blue;   // Next blue byte value
    1a78:	4669      	mov	r1, sp
    1a7a:	708e      	strb	r6, [r1, #2]
    1a7c:	3102      	adds	r1, #2
			c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
    1a7e:	781b      	ldrb	r3, [r3, #0]
    1a80:	7812      	ldrb	r2, [r2, #0]
    1a82:	7809      	ldrb	r1, [r1, #0]
    1a84:	041b      	lsls	r3, r3, #16
    1a86:	0212      	lsls	r2, r2, #8
    1a88:	4313      	orrs	r3, r2
    1a8a:	430b      	orrs	r3, r1
    1a8c:	9303      	str	r3, [sp, #12]
			printf("Hexa: %04x\nBin: ", c);
    1a8e:	9903      	ldr	r1, [sp, #12]
    1a90:	4820      	ldr	r0, [pc, #128]	; (1b14 <Neopixel_showColor+0xd8>)
    1a92:	47c8      	blx	r9
			j = 0;        // reset the 24-bit counter
    1a94:	2200      	movs	r2, #0
    1a96:	466b      	mov	r3, sp
    1a98:	715a      	strb	r2, [r3, #5]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a9a:	481f      	ldr	r0, [pc, #124]	; (1b18 <Neopixel_showColor+0xdc>)
    1a9c:	2180      	movs	r1, #128	; 0x80
    1a9e:	0189      	lsls	r1, r1, #6
				mask >>= 1;
				
				//Delay between each bit
				//asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
				
			} while ( ++j < 24 ); // ... pixel done
    1aa0:	466b      	mov	r3, sp
    1aa2:	1d5a      	adds	r2, r3, #5
			c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
			printf("Hexa: %04x\nBin: ", c);
			j = 0;        // reset the 24-bit counter
			do {
				
				if (c & mask) { // if masked bit is high
    1aa4:	9d03      	ldr	r5, [sp, #12]
    1aa6:	9b02      	ldr	r3, [sp, #8]
    1aa8:	421d      	tst	r5, r3
    1aaa:	d00e      	beq.n	1aca <Neopixel_showColor+0x8e>
    1aac:	6181      	str	r1, [r0, #24]
					// Adafruit on Arduino    (meas. 812ns)
					// This lib on Spark Core (meas. 804ns)
					// This lib on Photon     (meas. 792ns)
					
					//16 MHz
					asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	46c0      	nop			; (mov r8, r8)
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	46c0      	nop			; (mov r8, r8)
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	46c0      	nop			; (mov r8, r8)
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1abe:	6141      	str	r1, [r0, #20]
					// This lib on Spark Core (meas. 446ns)
					// This lib on Photon     (meas. 434ns)
					port_pin_set_output_level(PIN_PA13, false); //LOW
					
					//16 MHz
					asm( "nop;nop;nop;nop;");
    1ac0:	46c0      	nop			; (mov r8, r8)
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	46c0      	nop			; (mov r8, r8)
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	e00d      	b.n	1ae6 <Neopixel_showColor+0xaa>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1aca:	6181      	str	r1, [r0, #24]
					// Adafruit on Arduino    (meas. 312ns)
					// This lib on Spark Core (meas. 318ns)
					// This lib on Photon     (meas. 308ns)
					port_pin_set_output_level(PIN_PA13, true);
					//16 MHz
					asm( "nop;");
    1acc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ace:	6141      	str	r1, [r0, #20]
					// This lib on Spark Core (meas. 944ns)
					// This lib on Photon     (meas. 936ns)
					port_pin_set_output_level(PIN_PA13, false); // LOW
					
					// 16 MHz
					asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ad0:	46c0      	nop			; (mov r8, r8)
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	46c0      	nop			; (mov r8, r8)
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	46c0      	nop			; (mov r8, r8)
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	46c0      	nop			; (mov r8, r8)
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	46c0      	nop			; (mov r8, r8)
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	46c0      	nop			; (mov r8, r8)
					"nop;nop;nop;nop;nop;nop;nop;nop;nop;"
					);
					*/
					//printf("0");
				}
				mask >>= 1;
    1ae6:	9b02      	ldr	r3, [sp, #8]
    1ae8:	085b      	lsrs	r3, r3, #1
    1aea:	9302      	str	r3, [sp, #8]
				
				//Delay between each bit
				//asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
				
			} while ( ++j < 24 ); // ... pixel done
    1aec:	7813      	ldrb	r3, [r2, #0]
    1aee:	3301      	adds	r3, #1
    1af0:	b2db      	uxtb	r3, r3
    1af2:	7013      	strb	r3, [r2, #0]
    1af4:	2b17      	cmp	r3, #23
    1af6:	d9d5      	bls.n	1aa4 <Neopixel_showColor+0x68>
	g,              // Current green byte value
	r,              // Current red byte value
	b;              // Current blue byte value

	
		while(i) { // While bytes left... (3 bytes = 1 pixel)
    1af8:	8823      	ldrh	r3, [r4, #0]
    1afa:	b29b      	uxth	r3, r3
    1afc:	2b00      	cmp	r3, #0
    1afe:	d1ae      	bne.n	1a5e <Neopixel_showColor+0x22>
				
			} while ( ++j < 24 ); // ... pixel done
		} // end while(i) ... no more pixels
	
	//system_interrupt_leave_critical_section();
}
    1b00:	b005      	add	sp, #20
    1b02:	bc0c      	pop	{r2, r3}
    1b04:	4690      	mov	r8, r2
    1b06:	4699      	mov	r9, r3
    1b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	2000000a 	.word	0x2000000a
    1b10:	00001dd1 	.word	0x00001dd1
    1b14:	00002df0 	.word	0x00002df0
    1b18:	41004400 	.word	0x41004400

00001b1c <main>:

}
	
	
int main (void)
{
    1b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1e:	b099      	sub	sp, #100	; 0x64
	system_init();
    1b20:	4b24      	ldr	r3, [pc, #144]	; (1bb4 <main+0x98>)
    1b22:	4798      	blx	r3
	
	sio2host_init();
    1b24:	4b24      	ldr	r3, [pc, #144]	; (1bb8 <main+0x9c>)
    1b26:	4798      	blx	r3
	
	//configure_tc();
	
	delay_init();
    1b28:	4b24      	ldr	r3, [pc, #144]	; (1bbc <main+0xa0>)
    1b2a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b2c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1b2e:	f3bf 8f5f 	dmb	sy
	
	//system_interrupt_enable_global();
	
	cpu_irq_disable();
    1b32:	2200      	movs	r2, #0
    1b34:	4b22      	ldr	r3, [pc, #136]	; (1bc0 <main+0xa4>)
    1b36:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b38:	f3ef 8310 	mrs	r3, PRIMASK
	
	bool inter = false;
	
	inter = system_interrupt_is_global_enabled();
	printf(" Interrups state: %s ", inter?"1":"0");
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d001      	beq.n	1b44 <main+0x28>
    1b40:	4920      	ldr	r1, [pc, #128]	; (1bc4 <main+0xa8>)
    1b42:	e000      	b.n	1b46 <main+0x2a>
    1b44:	4920      	ldr	r1, [pc, #128]	; (1bc8 <main+0xac>)
    1b46:	4821      	ldr	r0, [pc, #132]	; (1bcc <main+0xb0>)
    1b48:	4b21      	ldr	r3, [pc, #132]	; (1bd0 <main+0xb4>)
    1b4a:	4798      	blx	r3
	
	int r0 =  16;
	int g0 = 16;
	int b0 = 16;
	
	int perm[7][3]={{1,0,0},{0,1,0},{0,0,1},{1,1,0},{0,1,1},{1,0,1},{1,1,1}};
    1b4c:	a803      	add	r0, sp, #12
    1b4e:	4921      	ldr	r1, [pc, #132]	; (1bd4 <main+0xb8>)
    1b50:	2254      	movs	r2, #84	; 0x54
    1b52:	4b21      	ldr	r3, [pc, #132]	; (1bd8 <main+0xbc>)
    1b54:	4798      	blx	r3
		
	while (1){
		
		Neopixel_showColor(16*perm[j][0],16*perm[j][1],16*perm[j][2]);
    1b56:	9b03      	ldr	r3, [sp, #12]
    1b58:	0118      	lsls	r0, r3, #4
    1b5a:	b2c0      	uxtb	r0, r0
    1b5c:	9b04      	ldr	r3, [sp, #16]
    1b5e:	9301      	str	r3, [sp, #4]
    1b60:	0119      	lsls	r1, r3, #4
    1b62:	b2c9      	uxtb	r1, r1
    1b64:	9a05      	ldr	r2, [sp, #20]
    1b66:	0112      	lsls	r2, r2, #4
    1b68:	b2d2      	uxtb	r2, r2
    1b6a:	4b1c      	ldr	r3, [pc, #112]	; (1bdc <main+0xc0>)
    1b6c:	4798      	blx	r3
		
		delay_ms(delay);
    1b6e:	20c8      	movs	r0, #200	; 0xc8
    1b70:	4b1b      	ldr	r3, [pc, #108]	; (1be0 <main+0xc4>)
    1b72:	4798      	blx	r3
		
		j++;
    1b74:	2401      	movs	r4, #1
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    1b76:	4f1b      	ldr	r7, [pc, #108]	; (1be4 <main+0xc8>)
	
	int perm[7][3]={{1,0,0},{0,1,0},{0,0,1},{1,1,0},{0,1,1},{1,0,1},{1,1,1}};
		
	while (1){
		
		Neopixel_showColor(16*perm[j][0],16*perm[j][1],16*perm[j][2]);
    1b78:	4e18      	ldr	r6, [pc, #96]	; (1bdc <main+0xc0>)
		
		delay_ms(delay);
    1b7a:	4d19      	ldr	r5, [pc, #100]	; (1be0 <main+0xc4>)
    1b7c:	6a3b      	ldr	r3, [r7, #32]
	
	int perm[7][3]={{1,0,0},{0,1,0},{0,0,1},{1,1,0},{0,1,1},{1,0,1},{1,1,1}};
		
	while (1){
		
		Neopixel_showColor(16*perm[j][0],16*perm[j][1],16*perm[j][2]);
    1b7e:	ab03      	add	r3, sp, #12
    1b80:	0062      	lsls	r2, r4, #1
    1b82:	1911      	adds	r1, r2, r4
    1b84:	0089      	lsls	r1, r1, #2
    1b86:	58c8      	ldr	r0, [r1, r3]
    1b88:	0100      	lsls	r0, r0, #4
    1b8a:	b2c0      	uxtb	r0, r0
    1b8c:	185b      	adds	r3, r3, r1
    1b8e:	685a      	ldr	r2, [r3, #4]
    1b90:	0111      	lsls	r1, r2, #4
    1b92:	b2c9      	uxtb	r1, r1
    1b94:	689a      	ldr	r2, [r3, #8]
    1b96:	0112      	lsls	r2, r2, #4
    1b98:	b2d2      	uxtb	r2, r2
    1b9a:	47b0      	blx	r6
		
		delay_ms(delay);
    1b9c:	20c8      	movs	r0, #200	; 0xc8
    1b9e:	47a8      	blx	r5
		
		j++;
    1ba0:	3401      	adds	r4, #1
		
		if (j>6) j=0;
    1ba2:	2206      	movs	r2, #6
    1ba4:	0fe1      	lsrs	r1, r4, #31
    1ba6:	17d3      	asrs	r3, r2, #31
    1ba8:	42a2      	cmp	r2, r4
    1baa:	414b      	adcs	r3, r1
    1bac:	425b      	negs	r3, r3
    1bae:	401c      	ands	r4, r3
    1bb0:	e7e4      	b.n	1b7c <main+0x60>
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	000018d5 	.word	0x000018d5
    1bb8:	000006b5 	.word	0x000006b5
    1bbc:	00000115 	.word	0x00000115
    1bc0:	20000008 	.word	0x20000008
    1bc4:	00002e2c 	.word	0x00002e2c
    1bc8:	00002e28 	.word	0x00002e28
    1bcc:	00002e30 	.word	0x00002e30
    1bd0:	00001dd1 	.word	0x00001dd1
    1bd4:	00002d9c 	.word	0x00002d9c
    1bd8:	00001dad 	.word	0x00001dad
    1bdc:	00001a3d 	.word	0x00001a3d
    1be0:	00000151 	.word	0x00000151
    1be4:	41004400 	.word	0x41004400

00001be8 <__aeabi_uidiv>:
    1be8:	2200      	movs	r2, #0
    1bea:	0843      	lsrs	r3, r0, #1
    1bec:	428b      	cmp	r3, r1
    1bee:	d374      	bcc.n	1cda <__aeabi_uidiv+0xf2>
    1bf0:	0903      	lsrs	r3, r0, #4
    1bf2:	428b      	cmp	r3, r1
    1bf4:	d35f      	bcc.n	1cb6 <__aeabi_uidiv+0xce>
    1bf6:	0a03      	lsrs	r3, r0, #8
    1bf8:	428b      	cmp	r3, r1
    1bfa:	d344      	bcc.n	1c86 <__aeabi_uidiv+0x9e>
    1bfc:	0b03      	lsrs	r3, r0, #12
    1bfe:	428b      	cmp	r3, r1
    1c00:	d328      	bcc.n	1c54 <__aeabi_uidiv+0x6c>
    1c02:	0c03      	lsrs	r3, r0, #16
    1c04:	428b      	cmp	r3, r1
    1c06:	d30d      	bcc.n	1c24 <__aeabi_uidiv+0x3c>
    1c08:	22ff      	movs	r2, #255	; 0xff
    1c0a:	0209      	lsls	r1, r1, #8
    1c0c:	ba12      	rev	r2, r2
    1c0e:	0c03      	lsrs	r3, r0, #16
    1c10:	428b      	cmp	r3, r1
    1c12:	d302      	bcc.n	1c1a <__aeabi_uidiv+0x32>
    1c14:	1212      	asrs	r2, r2, #8
    1c16:	0209      	lsls	r1, r1, #8
    1c18:	d065      	beq.n	1ce6 <__aeabi_uidiv+0xfe>
    1c1a:	0b03      	lsrs	r3, r0, #12
    1c1c:	428b      	cmp	r3, r1
    1c1e:	d319      	bcc.n	1c54 <__aeabi_uidiv+0x6c>
    1c20:	e000      	b.n	1c24 <__aeabi_uidiv+0x3c>
    1c22:	0a09      	lsrs	r1, r1, #8
    1c24:	0bc3      	lsrs	r3, r0, #15
    1c26:	428b      	cmp	r3, r1
    1c28:	d301      	bcc.n	1c2e <__aeabi_uidiv+0x46>
    1c2a:	03cb      	lsls	r3, r1, #15
    1c2c:	1ac0      	subs	r0, r0, r3
    1c2e:	4152      	adcs	r2, r2
    1c30:	0b83      	lsrs	r3, r0, #14
    1c32:	428b      	cmp	r3, r1
    1c34:	d301      	bcc.n	1c3a <__aeabi_uidiv+0x52>
    1c36:	038b      	lsls	r3, r1, #14
    1c38:	1ac0      	subs	r0, r0, r3
    1c3a:	4152      	adcs	r2, r2
    1c3c:	0b43      	lsrs	r3, r0, #13
    1c3e:	428b      	cmp	r3, r1
    1c40:	d301      	bcc.n	1c46 <__aeabi_uidiv+0x5e>
    1c42:	034b      	lsls	r3, r1, #13
    1c44:	1ac0      	subs	r0, r0, r3
    1c46:	4152      	adcs	r2, r2
    1c48:	0b03      	lsrs	r3, r0, #12
    1c4a:	428b      	cmp	r3, r1
    1c4c:	d301      	bcc.n	1c52 <__aeabi_uidiv+0x6a>
    1c4e:	030b      	lsls	r3, r1, #12
    1c50:	1ac0      	subs	r0, r0, r3
    1c52:	4152      	adcs	r2, r2
    1c54:	0ac3      	lsrs	r3, r0, #11
    1c56:	428b      	cmp	r3, r1
    1c58:	d301      	bcc.n	1c5e <__aeabi_uidiv+0x76>
    1c5a:	02cb      	lsls	r3, r1, #11
    1c5c:	1ac0      	subs	r0, r0, r3
    1c5e:	4152      	adcs	r2, r2
    1c60:	0a83      	lsrs	r3, r0, #10
    1c62:	428b      	cmp	r3, r1
    1c64:	d301      	bcc.n	1c6a <__aeabi_uidiv+0x82>
    1c66:	028b      	lsls	r3, r1, #10
    1c68:	1ac0      	subs	r0, r0, r3
    1c6a:	4152      	adcs	r2, r2
    1c6c:	0a43      	lsrs	r3, r0, #9
    1c6e:	428b      	cmp	r3, r1
    1c70:	d301      	bcc.n	1c76 <__aeabi_uidiv+0x8e>
    1c72:	024b      	lsls	r3, r1, #9
    1c74:	1ac0      	subs	r0, r0, r3
    1c76:	4152      	adcs	r2, r2
    1c78:	0a03      	lsrs	r3, r0, #8
    1c7a:	428b      	cmp	r3, r1
    1c7c:	d301      	bcc.n	1c82 <__aeabi_uidiv+0x9a>
    1c7e:	020b      	lsls	r3, r1, #8
    1c80:	1ac0      	subs	r0, r0, r3
    1c82:	4152      	adcs	r2, r2
    1c84:	d2cd      	bcs.n	1c22 <__aeabi_uidiv+0x3a>
    1c86:	09c3      	lsrs	r3, r0, #7
    1c88:	428b      	cmp	r3, r1
    1c8a:	d301      	bcc.n	1c90 <__aeabi_uidiv+0xa8>
    1c8c:	01cb      	lsls	r3, r1, #7
    1c8e:	1ac0      	subs	r0, r0, r3
    1c90:	4152      	adcs	r2, r2
    1c92:	0983      	lsrs	r3, r0, #6
    1c94:	428b      	cmp	r3, r1
    1c96:	d301      	bcc.n	1c9c <__aeabi_uidiv+0xb4>
    1c98:	018b      	lsls	r3, r1, #6
    1c9a:	1ac0      	subs	r0, r0, r3
    1c9c:	4152      	adcs	r2, r2
    1c9e:	0943      	lsrs	r3, r0, #5
    1ca0:	428b      	cmp	r3, r1
    1ca2:	d301      	bcc.n	1ca8 <__aeabi_uidiv+0xc0>
    1ca4:	014b      	lsls	r3, r1, #5
    1ca6:	1ac0      	subs	r0, r0, r3
    1ca8:	4152      	adcs	r2, r2
    1caa:	0903      	lsrs	r3, r0, #4
    1cac:	428b      	cmp	r3, r1
    1cae:	d301      	bcc.n	1cb4 <__aeabi_uidiv+0xcc>
    1cb0:	010b      	lsls	r3, r1, #4
    1cb2:	1ac0      	subs	r0, r0, r3
    1cb4:	4152      	adcs	r2, r2
    1cb6:	08c3      	lsrs	r3, r0, #3
    1cb8:	428b      	cmp	r3, r1
    1cba:	d301      	bcc.n	1cc0 <__aeabi_uidiv+0xd8>
    1cbc:	00cb      	lsls	r3, r1, #3
    1cbe:	1ac0      	subs	r0, r0, r3
    1cc0:	4152      	adcs	r2, r2
    1cc2:	0883      	lsrs	r3, r0, #2
    1cc4:	428b      	cmp	r3, r1
    1cc6:	d301      	bcc.n	1ccc <__aeabi_uidiv+0xe4>
    1cc8:	008b      	lsls	r3, r1, #2
    1cca:	1ac0      	subs	r0, r0, r3
    1ccc:	4152      	adcs	r2, r2
    1cce:	0843      	lsrs	r3, r0, #1
    1cd0:	428b      	cmp	r3, r1
    1cd2:	d301      	bcc.n	1cd8 <__aeabi_uidiv+0xf0>
    1cd4:	004b      	lsls	r3, r1, #1
    1cd6:	1ac0      	subs	r0, r0, r3
    1cd8:	4152      	adcs	r2, r2
    1cda:	1a41      	subs	r1, r0, r1
    1cdc:	d200      	bcs.n	1ce0 <__aeabi_uidiv+0xf8>
    1cde:	4601      	mov	r1, r0
    1ce0:	4152      	adcs	r2, r2
    1ce2:	4610      	mov	r0, r2
    1ce4:	4770      	bx	lr
    1ce6:	e7ff      	b.n	1ce8 <__aeabi_uidiv+0x100>
    1ce8:	b501      	push	{r0, lr}
    1cea:	2000      	movs	r0, #0
    1cec:	f000 f80c 	bl	1d08 <__aeabi_idiv0>
    1cf0:	bd02      	pop	{r1, pc}
    1cf2:	46c0      	nop			; (mov r8, r8)

00001cf4 <__aeabi_uidivmod>:
    1cf4:	2900      	cmp	r1, #0
    1cf6:	d0f7      	beq.n	1ce8 <__aeabi_uidiv+0x100>
    1cf8:	b503      	push	{r0, r1, lr}
    1cfa:	f7ff ff75 	bl	1be8 <__aeabi_uidiv>
    1cfe:	bc0e      	pop	{r1, r2, r3}
    1d00:	4342      	muls	r2, r0
    1d02:	1a89      	subs	r1, r1, r2
    1d04:	4718      	bx	r3
    1d06:	46c0      	nop			; (mov r8, r8)

00001d08 <__aeabi_idiv0>:
    1d08:	4770      	bx	lr
    1d0a:	46c0      	nop			; (mov r8, r8)

00001d0c <__aeabi_lmul>:
    1d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0e:	464f      	mov	r7, r9
    1d10:	4646      	mov	r6, r8
    1d12:	0405      	lsls	r5, r0, #16
    1d14:	0c2d      	lsrs	r5, r5, #16
    1d16:	1c2c      	adds	r4, r5, #0
    1d18:	b4c0      	push	{r6, r7}
    1d1a:	0417      	lsls	r7, r2, #16
    1d1c:	0c16      	lsrs	r6, r2, #16
    1d1e:	0c3f      	lsrs	r7, r7, #16
    1d20:	4699      	mov	r9, r3
    1d22:	0c03      	lsrs	r3, r0, #16
    1d24:	437c      	muls	r4, r7
    1d26:	4375      	muls	r5, r6
    1d28:	435f      	muls	r7, r3
    1d2a:	4373      	muls	r3, r6
    1d2c:	197d      	adds	r5, r7, r5
    1d2e:	0c26      	lsrs	r6, r4, #16
    1d30:	19ad      	adds	r5, r5, r6
    1d32:	469c      	mov	ip, r3
    1d34:	42af      	cmp	r7, r5
    1d36:	d903      	bls.n	1d40 <__aeabi_lmul+0x34>
    1d38:	2380      	movs	r3, #128	; 0x80
    1d3a:	025b      	lsls	r3, r3, #9
    1d3c:	4698      	mov	r8, r3
    1d3e:	44c4      	add	ip, r8
    1d40:	464b      	mov	r3, r9
    1d42:	4351      	muls	r1, r2
    1d44:	4343      	muls	r3, r0
    1d46:	0424      	lsls	r4, r4, #16
    1d48:	0c2e      	lsrs	r6, r5, #16
    1d4a:	0c24      	lsrs	r4, r4, #16
    1d4c:	042d      	lsls	r5, r5, #16
    1d4e:	4466      	add	r6, ip
    1d50:	192c      	adds	r4, r5, r4
    1d52:	1859      	adds	r1, r3, r1
    1d54:	1989      	adds	r1, r1, r6
    1d56:	1c20      	adds	r0, r4, #0
    1d58:	bc0c      	pop	{r2, r3}
    1d5a:	4690      	mov	r8, r2
    1d5c:	4699      	mov	r9, r3
    1d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d60 <__libc_init_array>:
    1d60:	4b0e      	ldr	r3, [pc, #56]	; (1d9c <__libc_init_array+0x3c>)
    1d62:	b570      	push	{r4, r5, r6, lr}
    1d64:	2500      	movs	r5, #0
    1d66:	1c1e      	adds	r6, r3, #0
    1d68:	4c0d      	ldr	r4, [pc, #52]	; (1da0 <__libc_init_array+0x40>)
    1d6a:	1ae4      	subs	r4, r4, r3
    1d6c:	10a4      	asrs	r4, r4, #2
    1d6e:	42a5      	cmp	r5, r4
    1d70:	d004      	beq.n	1d7c <__libc_init_array+0x1c>
    1d72:	00ab      	lsls	r3, r5, #2
    1d74:	58f3      	ldr	r3, [r6, r3]
    1d76:	4798      	blx	r3
    1d78:	3501      	adds	r5, #1
    1d7a:	e7f8      	b.n	1d6e <__libc_init_array+0xe>
    1d7c:	f001 f8b2 	bl	2ee4 <_init>
    1d80:	4b08      	ldr	r3, [pc, #32]	; (1da4 <__libc_init_array+0x44>)
    1d82:	2500      	movs	r5, #0
    1d84:	1c1e      	adds	r6, r3, #0
    1d86:	4c08      	ldr	r4, [pc, #32]	; (1da8 <__libc_init_array+0x48>)
    1d88:	1ae4      	subs	r4, r4, r3
    1d8a:	10a4      	asrs	r4, r4, #2
    1d8c:	42a5      	cmp	r5, r4
    1d8e:	d004      	beq.n	1d9a <__libc_init_array+0x3a>
    1d90:	00ab      	lsls	r3, r5, #2
    1d92:	58f3      	ldr	r3, [r6, r3]
    1d94:	4798      	blx	r3
    1d96:	3501      	adds	r5, #1
    1d98:	e7f8      	b.n	1d8c <__libc_init_array+0x2c>
    1d9a:	bd70      	pop	{r4, r5, r6, pc}
    1d9c:	00002ef0 	.word	0x00002ef0
    1da0:	00002ef0 	.word	0x00002ef0
    1da4:	00002ef0 	.word	0x00002ef0
    1da8:	00002ef4 	.word	0x00002ef4

00001dac <memcpy>:
    1dac:	2300      	movs	r3, #0
    1dae:	b510      	push	{r4, lr}
    1db0:	4293      	cmp	r3, r2
    1db2:	d003      	beq.n	1dbc <memcpy+0x10>
    1db4:	5ccc      	ldrb	r4, [r1, r3]
    1db6:	54c4      	strb	r4, [r0, r3]
    1db8:	3301      	adds	r3, #1
    1dba:	e7f9      	b.n	1db0 <memcpy+0x4>
    1dbc:	bd10      	pop	{r4, pc}

00001dbe <memset>:
    1dbe:	1c03      	adds	r3, r0, #0
    1dc0:	1882      	adds	r2, r0, r2
    1dc2:	4293      	cmp	r3, r2
    1dc4:	d002      	beq.n	1dcc <memset+0xe>
    1dc6:	7019      	strb	r1, [r3, #0]
    1dc8:	3301      	adds	r3, #1
    1dca:	e7fa      	b.n	1dc2 <memset+0x4>
    1dcc:	4770      	bx	lr
	...

00001dd0 <iprintf>:
    1dd0:	b40f      	push	{r0, r1, r2, r3}
    1dd2:	4b0b      	ldr	r3, [pc, #44]	; (1e00 <iprintf+0x30>)
    1dd4:	b513      	push	{r0, r1, r4, lr}
    1dd6:	681c      	ldr	r4, [r3, #0]
    1dd8:	2c00      	cmp	r4, #0
    1dda:	d005      	beq.n	1de8 <iprintf+0x18>
    1ddc:	69a3      	ldr	r3, [r4, #24]
    1dde:	2b00      	cmp	r3, #0
    1de0:	d102      	bne.n	1de8 <iprintf+0x18>
    1de2:	1c20      	adds	r0, r4, #0
    1de4:	f000 f996 	bl	2114 <__sinit>
    1de8:	ab05      	add	r3, sp, #20
    1dea:	1c20      	adds	r0, r4, #0
    1dec:	68a1      	ldr	r1, [r4, #8]
    1dee:	9a04      	ldr	r2, [sp, #16]
    1df0:	9301      	str	r3, [sp, #4]
    1df2:	f000 faf1 	bl	23d8 <_vfiprintf_r>
    1df6:	bc16      	pop	{r1, r2, r4}
    1df8:	bc08      	pop	{r3}
    1dfa:	b004      	add	sp, #16
    1dfc:	4718      	bx	r3
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	2000006c 	.word	0x2000006c

00001e04 <setbuf>:
    1e04:	b508      	push	{r3, lr}
    1e06:	424a      	negs	r2, r1
    1e08:	414a      	adcs	r2, r1
    1e0a:	2380      	movs	r3, #128	; 0x80
    1e0c:	0052      	lsls	r2, r2, #1
    1e0e:	00db      	lsls	r3, r3, #3
    1e10:	f000 f802 	bl	1e18 <setvbuf>
    1e14:	bd08      	pop	{r3, pc}
	...

00001e18 <setvbuf>:
    1e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e1a:	1c1e      	adds	r6, r3, #0
    1e1c:	4b3c      	ldr	r3, [pc, #240]	; (1f10 <setvbuf+0xf8>)
    1e1e:	1c04      	adds	r4, r0, #0
    1e20:	681d      	ldr	r5, [r3, #0]
    1e22:	1c0f      	adds	r7, r1, #0
    1e24:	9201      	str	r2, [sp, #4]
    1e26:	2d00      	cmp	r5, #0
    1e28:	d005      	beq.n	1e36 <setvbuf+0x1e>
    1e2a:	69ab      	ldr	r3, [r5, #24]
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d102      	bne.n	1e36 <setvbuf+0x1e>
    1e30:	1c28      	adds	r0, r5, #0
    1e32:	f000 f96f 	bl	2114 <__sinit>
    1e36:	4b37      	ldr	r3, [pc, #220]	; (1f14 <setvbuf+0xfc>)
    1e38:	429c      	cmp	r4, r3
    1e3a:	d101      	bne.n	1e40 <setvbuf+0x28>
    1e3c:	686c      	ldr	r4, [r5, #4]
    1e3e:	e008      	b.n	1e52 <setvbuf+0x3a>
    1e40:	4b35      	ldr	r3, [pc, #212]	; (1f18 <setvbuf+0x100>)
    1e42:	429c      	cmp	r4, r3
    1e44:	d101      	bne.n	1e4a <setvbuf+0x32>
    1e46:	68ac      	ldr	r4, [r5, #8]
    1e48:	e003      	b.n	1e52 <setvbuf+0x3a>
    1e4a:	4b34      	ldr	r3, [pc, #208]	; (1f1c <setvbuf+0x104>)
    1e4c:	429c      	cmp	r4, r3
    1e4e:	d100      	bne.n	1e52 <setvbuf+0x3a>
    1e50:	68ec      	ldr	r4, [r5, #12]
    1e52:	9b01      	ldr	r3, [sp, #4]
    1e54:	2b02      	cmp	r3, #2
    1e56:	d858      	bhi.n	1f0a <setvbuf+0xf2>
    1e58:	2e00      	cmp	r6, #0
    1e5a:	db56      	blt.n	1f0a <setvbuf+0xf2>
    1e5c:	1c28      	adds	r0, r5, #0
    1e5e:	1c21      	adds	r1, r4, #0
    1e60:	f000 f8ea 	bl	2038 <_fflush_r>
    1e64:	2300      	movs	r3, #0
    1e66:	6063      	str	r3, [r4, #4]
    1e68:	61a3      	str	r3, [r4, #24]
    1e6a:	89a3      	ldrh	r3, [r4, #12]
    1e6c:	061b      	lsls	r3, r3, #24
    1e6e:	d503      	bpl.n	1e78 <setvbuf+0x60>
    1e70:	1c28      	adds	r0, r5, #0
    1e72:	6921      	ldr	r1, [r4, #16]
    1e74:	f000 f9ea 	bl	224c <_free_r>
    1e78:	2283      	movs	r2, #131	; 0x83
    1e7a:	89a3      	ldrh	r3, [r4, #12]
    1e7c:	4393      	bics	r3, r2
    1e7e:	81a3      	strh	r3, [r4, #12]
    1e80:	9b01      	ldr	r3, [sp, #4]
    1e82:	2b02      	cmp	r3, #2
    1e84:	d013      	beq.n	1eae <setvbuf+0x96>
    1e86:	2f00      	cmp	r7, #0
    1e88:	d125      	bne.n	1ed6 <setvbuf+0xbe>
    1e8a:	2e00      	cmp	r6, #0
    1e8c:	d101      	bne.n	1e92 <setvbuf+0x7a>
    1e8e:	2680      	movs	r6, #128	; 0x80
    1e90:	00f6      	lsls	r6, r6, #3
    1e92:	1c30      	adds	r0, r6, #0
    1e94:	f000 f9d0 	bl	2238 <malloc>
    1e98:	1e07      	subs	r7, r0, #0
    1e9a:	d118      	bne.n	1ece <setvbuf+0xb6>
    1e9c:	2080      	movs	r0, #128	; 0x80
    1e9e:	00c0      	lsls	r0, r0, #3
    1ea0:	f000 f9ca 	bl	2238 <malloc>
    1ea4:	1e07      	subs	r7, r0, #0
    1ea6:	d110      	bne.n	1eca <setvbuf+0xb2>
    1ea8:	2001      	movs	r0, #1
    1eaa:	4240      	negs	r0, r0
    1eac:	e000      	b.n	1eb0 <setvbuf+0x98>
    1eae:	2000      	movs	r0, #0
    1eb0:	2202      	movs	r2, #2
    1eb2:	89a3      	ldrh	r3, [r4, #12]
    1eb4:	4313      	orrs	r3, r2
    1eb6:	81a3      	strh	r3, [r4, #12]
    1eb8:	2300      	movs	r3, #0
    1eba:	60a3      	str	r3, [r4, #8]
    1ebc:	1c23      	adds	r3, r4, #0
    1ebe:	3347      	adds	r3, #71	; 0x47
    1ec0:	6023      	str	r3, [r4, #0]
    1ec2:	6123      	str	r3, [r4, #16]
    1ec4:	2301      	movs	r3, #1
    1ec6:	6163      	str	r3, [r4, #20]
    1ec8:	e021      	b.n	1f0e <setvbuf+0xf6>
    1eca:	2680      	movs	r6, #128	; 0x80
    1ecc:	00f6      	lsls	r6, r6, #3
    1ece:	2280      	movs	r2, #128	; 0x80
    1ed0:	89a3      	ldrh	r3, [r4, #12]
    1ed2:	4313      	orrs	r3, r2
    1ed4:	81a3      	strh	r3, [r4, #12]
    1ed6:	9b01      	ldr	r3, [sp, #4]
    1ed8:	2b01      	cmp	r3, #1
    1eda:	d105      	bne.n	1ee8 <setvbuf+0xd0>
    1edc:	89a3      	ldrh	r3, [r4, #12]
    1ede:	9a01      	ldr	r2, [sp, #4]
    1ee0:	431a      	orrs	r2, r3
    1ee2:	4273      	negs	r3, r6
    1ee4:	81a2      	strh	r2, [r4, #12]
    1ee6:	61a3      	str	r3, [r4, #24]
    1ee8:	4b0d      	ldr	r3, [pc, #52]	; (1f20 <setvbuf+0x108>)
    1eea:	2000      	movs	r0, #0
    1eec:	62ab      	str	r3, [r5, #40]	; 0x28
    1eee:	89a2      	ldrh	r2, [r4, #12]
    1ef0:	6027      	str	r7, [r4, #0]
    1ef2:	6127      	str	r7, [r4, #16]
    1ef4:	6166      	str	r6, [r4, #20]
    1ef6:	0713      	lsls	r3, r2, #28
    1ef8:	d509      	bpl.n	1f0e <setvbuf+0xf6>
    1efa:	2303      	movs	r3, #3
    1efc:	401a      	ands	r2, r3
    1efe:	4253      	negs	r3, r2
    1f00:	4153      	adcs	r3, r2
    1f02:	425b      	negs	r3, r3
    1f04:	401e      	ands	r6, r3
    1f06:	60a6      	str	r6, [r4, #8]
    1f08:	e001      	b.n	1f0e <setvbuf+0xf6>
    1f0a:	2001      	movs	r0, #1
    1f0c:	4240      	negs	r0, r0
    1f0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1f10:	2000006c 	.word	0x2000006c
    1f14:	00002e50 	.word	0x00002e50
    1f18:	00002e70 	.word	0x00002e70
    1f1c:	00002e90 	.word	0x00002e90
    1f20:	00002091 	.word	0x00002091

00001f24 <__sflush_r>:
    1f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1f26:	898a      	ldrh	r2, [r1, #12]
    1f28:	1c05      	adds	r5, r0, #0
    1f2a:	1c0c      	adds	r4, r1, #0
    1f2c:	0713      	lsls	r3, r2, #28
    1f2e:	d45e      	bmi.n	1fee <__sflush_r+0xca>
    1f30:	684b      	ldr	r3, [r1, #4]
    1f32:	2b00      	cmp	r3, #0
    1f34:	dc02      	bgt.n	1f3c <__sflush_r+0x18>
    1f36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1f38:	2b00      	cmp	r3, #0
    1f3a:	dd1a      	ble.n	1f72 <__sflush_r+0x4e>
    1f3c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1f3e:	2f00      	cmp	r7, #0
    1f40:	d017      	beq.n	1f72 <__sflush_r+0x4e>
    1f42:	2300      	movs	r3, #0
    1f44:	682e      	ldr	r6, [r5, #0]
    1f46:	602b      	str	r3, [r5, #0]
    1f48:	2380      	movs	r3, #128	; 0x80
    1f4a:	015b      	lsls	r3, r3, #5
    1f4c:	401a      	ands	r2, r3
    1f4e:	d001      	beq.n	1f54 <__sflush_r+0x30>
    1f50:	6d62      	ldr	r2, [r4, #84]	; 0x54
    1f52:	e015      	b.n	1f80 <__sflush_r+0x5c>
    1f54:	1c28      	adds	r0, r5, #0
    1f56:	6a21      	ldr	r1, [r4, #32]
    1f58:	2301      	movs	r3, #1
    1f5a:	47b8      	blx	r7
    1f5c:	1c02      	adds	r2, r0, #0
    1f5e:	1c43      	adds	r3, r0, #1
    1f60:	d10e      	bne.n	1f80 <__sflush_r+0x5c>
    1f62:	682b      	ldr	r3, [r5, #0]
    1f64:	2b00      	cmp	r3, #0
    1f66:	d00b      	beq.n	1f80 <__sflush_r+0x5c>
    1f68:	2b1d      	cmp	r3, #29
    1f6a:	d001      	beq.n	1f70 <__sflush_r+0x4c>
    1f6c:	2b16      	cmp	r3, #22
    1f6e:	d102      	bne.n	1f76 <__sflush_r+0x52>
    1f70:	602e      	str	r6, [r5, #0]
    1f72:	2000      	movs	r0, #0
    1f74:	e05e      	b.n	2034 <STACK_SIZE+0x34>
    1f76:	2140      	movs	r1, #64	; 0x40
    1f78:	89a3      	ldrh	r3, [r4, #12]
    1f7a:	430b      	orrs	r3, r1
    1f7c:	81a3      	strh	r3, [r4, #12]
    1f7e:	e059      	b.n	2034 <STACK_SIZE+0x34>
    1f80:	89a3      	ldrh	r3, [r4, #12]
    1f82:	075b      	lsls	r3, r3, #29
    1f84:	d506      	bpl.n	1f94 <__sflush_r+0x70>
    1f86:	6863      	ldr	r3, [r4, #4]
    1f88:	1ad2      	subs	r2, r2, r3
    1f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d001      	beq.n	1f94 <__sflush_r+0x70>
    1f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1f92:	1ad2      	subs	r2, r2, r3
    1f94:	2300      	movs	r3, #0
    1f96:	1c28      	adds	r0, r5, #0
    1f98:	6a21      	ldr	r1, [r4, #32]
    1f9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1f9c:	47b8      	blx	r7
    1f9e:	89a3      	ldrh	r3, [r4, #12]
    1fa0:	1c42      	adds	r2, r0, #1
    1fa2:	d106      	bne.n	1fb2 <__sflush_r+0x8e>
    1fa4:	682a      	ldr	r2, [r5, #0]
    1fa6:	2a00      	cmp	r2, #0
    1fa8:	d003      	beq.n	1fb2 <__sflush_r+0x8e>
    1faa:	2a1d      	cmp	r2, #29
    1fac:	d001      	beq.n	1fb2 <__sflush_r+0x8e>
    1fae:	2a16      	cmp	r2, #22
    1fb0:	d119      	bne.n	1fe6 <__sflush_r+0xc2>
    1fb2:	2200      	movs	r2, #0
    1fb4:	6062      	str	r2, [r4, #4]
    1fb6:	6922      	ldr	r2, [r4, #16]
    1fb8:	6022      	str	r2, [r4, #0]
    1fba:	04db      	lsls	r3, r3, #19
    1fbc:	d505      	bpl.n	1fca <__sflush_r+0xa6>
    1fbe:	1c43      	adds	r3, r0, #1
    1fc0:	d102      	bne.n	1fc8 <__sflush_r+0xa4>
    1fc2:	682b      	ldr	r3, [r5, #0]
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	d100      	bne.n	1fca <__sflush_r+0xa6>
    1fc8:	6560      	str	r0, [r4, #84]	; 0x54
    1fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1fcc:	602e      	str	r6, [r5, #0]
    1fce:	2900      	cmp	r1, #0
    1fd0:	d0cf      	beq.n	1f72 <__sflush_r+0x4e>
    1fd2:	1c23      	adds	r3, r4, #0
    1fd4:	3344      	adds	r3, #68	; 0x44
    1fd6:	4299      	cmp	r1, r3
    1fd8:	d002      	beq.n	1fe0 <__sflush_r+0xbc>
    1fda:	1c28      	adds	r0, r5, #0
    1fdc:	f000 f936 	bl	224c <_free_r>
    1fe0:	2000      	movs	r0, #0
    1fe2:	6360      	str	r0, [r4, #52]	; 0x34
    1fe4:	e026      	b.n	2034 <STACK_SIZE+0x34>
    1fe6:	2240      	movs	r2, #64	; 0x40
    1fe8:	4313      	orrs	r3, r2
    1fea:	81a3      	strh	r3, [r4, #12]
    1fec:	e022      	b.n	2034 <STACK_SIZE+0x34>
    1fee:	690f      	ldr	r7, [r1, #16]
    1ff0:	2f00      	cmp	r7, #0
    1ff2:	d0be      	beq.n	1f72 <__sflush_r+0x4e>
    1ff4:	680b      	ldr	r3, [r1, #0]
    1ff6:	600f      	str	r7, [r1, #0]
    1ff8:	1bdb      	subs	r3, r3, r7
    1ffa:	9301      	str	r3, [sp, #4]
    1ffc:	2300      	movs	r3, #0
    1ffe:	0792      	lsls	r2, r2, #30
    2000:	d100      	bne.n	2004 <STACK_SIZE+0x4>
    2002:	694b      	ldr	r3, [r1, #20]
    2004:	60a3      	str	r3, [r4, #8]
    2006:	9b01      	ldr	r3, [sp, #4]
    2008:	2b00      	cmp	r3, #0
    200a:	ddb2      	ble.n	1f72 <__sflush_r+0x4e>
    200c:	1c28      	adds	r0, r5, #0
    200e:	6a21      	ldr	r1, [r4, #32]
    2010:	1c3a      	adds	r2, r7, #0
    2012:	9b01      	ldr	r3, [sp, #4]
    2014:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2016:	47b0      	blx	r6
    2018:	2800      	cmp	r0, #0
    201a:	dc06      	bgt.n	202a <STACK_SIZE+0x2a>
    201c:	2240      	movs	r2, #64	; 0x40
    201e:	2001      	movs	r0, #1
    2020:	89a3      	ldrh	r3, [r4, #12]
    2022:	4240      	negs	r0, r0
    2024:	4313      	orrs	r3, r2
    2026:	81a3      	strh	r3, [r4, #12]
    2028:	e004      	b.n	2034 <STACK_SIZE+0x34>
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	183f      	adds	r7, r7, r0
    202e:	1a1b      	subs	r3, r3, r0
    2030:	9301      	str	r3, [sp, #4]
    2032:	e7e8      	b.n	2006 <STACK_SIZE+0x6>
    2034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002038 <_fflush_r>:
    2038:	b538      	push	{r3, r4, r5, lr}
    203a:	690b      	ldr	r3, [r1, #16]
    203c:	1c05      	adds	r5, r0, #0
    203e:	1c0c      	adds	r4, r1, #0
    2040:	2b00      	cmp	r3, #0
    2042:	d101      	bne.n	2048 <_fflush_r+0x10>
    2044:	2000      	movs	r0, #0
    2046:	e01c      	b.n	2082 <_fflush_r+0x4a>
    2048:	2800      	cmp	r0, #0
    204a:	d004      	beq.n	2056 <_fflush_r+0x1e>
    204c:	6983      	ldr	r3, [r0, #24]
    204e:	2b00      	cmp	r3, #0
    2050:	d101      	bne.n	2056 <_fflush_r+0x1e>
    2052:	f000 f85f 	bl	2114 <__sinit>
    2056:	4b0b      	ldr	r3, [pc, #44]	; (2084 <_fflush_r+0x4c>)
    2058:	429c      	cmp	r4, r3
    205a:	d101      	bne.n	2060 <_fflush_r+0x28>
    205c:	686c      	ldr	r4, [r5, #4]
    205e:	e008      	b.n	2072 <_fflush_r+0x3a>
    2060:	4b09      	ldr	r3, [pc, #36]	; (2088 <_fflush_r+0x50>)
    2062:	429c      	cmp	r4, r3
    2064:	d101      	bne.n	206a <_fflush_r+0x32>
    2066:	68ac      	ldr	r4, [r5, #8]
    2068:	e003      	b.n	2072 <_fflush_r+0x3a>
    206a:	4b08      	ldr	r3, [pc, #32]	; (208c <_fflush_r+0x54>)
    206c:	429c      	cmp	r4, r3
    206e:	d100      	bne.n	2072 <_fflush_r+0x3a>
    2070:	68ec      	ldr	r4, [r5, #12]
    2072:	220c      	movs	r2, #12
    2074:	5ea3      	ldrsh	r3, [r4, r2]
    2076:	2b00      	cmp	r3, #0
    2078:	d0e4      	beq.n	2044 <_fflush_r+0xc>
    207a:	1c28      	adds	r0, r5, #0
    207c:	1c21      	adds	r1, r4, #0
    207e:	f7ff ff51 	bl	1f24 <__sflush_r>
    2082:	bd38      	pop	{r3, r4, r5, pc}
    2084:	00002e50 	.word	0x00002e50
    2088:	00002e70 	.word	0x00002e70
    208c:	00002e90 	.word	0x00002e90

00002090 <_cleanup_r>:
    2090:	b508      	push	{r3, lr}
    2092:	4902      	ldr	r1, [pc, #8]	; (209c <_cleanup_r+0xc>)
    2094:	f000 f8ae 	bl	21f4 <_fwalk_reent>
    2098:	bd08      	pop	{r3, pc}
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	00002039 	.word	0x00002039

000020a0 <std.isra.0>:
    20a0:	2300      	movs	r3, #0
    20a2:	b510      	push	{r4, lr}
    20a4:	1c04      	adds	r4, r0, #0
    20a6:	6003      	str	r3, [r0, #0]
    20a8:	6043      	str	r3, [r0, #4]
    20aa:	6083      	str	r3, [r0, #8]
    20ac:	8181      	strh	r1, [r0, #12]
    20ae:	6643      	str	r3, [r0, #100]	; 0x64
    20b0:	81c2      	strh	r2, [r0, #14]
    20b2:	6103      	str	r3, [r0, #16]
    20b4:	6143      	str	r3, [r0, #20]
    20b6:	6183      	str	r3, [r0, #24]
    20b8:	1c19      	adds	r1, r3, #0
    20ba:	2208      	movs	r2, #8
    20bc:	305c      	adds	r0, #92	; 0x5c
    20be:	f7ff fe7e 	bl	1dbe <memset>
    20c2:	4b05      	ldr	r3, [pc, #20]	; (20d8 <std.isra.0+0x38>)
    20c4:	6224      	str	r4, [r4, #32]
    20c6:	6263      	str	r3, [r4, #36]	; 0x24
    20c8:	4b04      	ldr	r3, [pc, #16]	; (20dc <std.isra.0+0x3c>)
    20ca:	62a3      	str	r3, [r4, #40]	; 0x28
    20cc:	4b04      	ldr	r3, [pc, #16]	; (20e0 <std.isra.0+0x40>)
    20ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    20d0:	4b04      	ldr	r3, [pc, #16]	; (20e4 <std.isra.0+0x44>)
    20d2:	6323      	str	r3, [r4, #48]	; 0x30
    20d4:	bd10      	pop	{r4, pc}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	00002929 	.word	0x00002929
    20dc:	00002951 	.word	0x00002951
    20e0:	00002989 	.word	0x00002989
    20e4:	000029b5 	.word	0x000029b5

000020e8 <__sfmoreglue>:
    20e8:	b570      	push	{r4, r5, r6, lr}
    20ea:	2568      	movs	r5, #104	; 0x68
    20ec:	1e4b      	subs	r3, r1, #1
    20ee:	435d      	muls	r5, r3
    20f0:	1c0e      	adds	r6, r1, #0
    20f2:	1c29      	adds	r1, r5, #0
    20f4:	3174      	adds	r1, #116	; 0x74
    20f6:	f000 f8ef 	bl	22d8 <_malloc_r>
    20fa:	1e04      	subs	r4, r0, #0
    20fc:	d008      	beq.n	2110 <__sfmoreglue+0x28>
    20fe:	2100      	movs	r1, #0
    2100:	1c2a      	adds	r2, r5, #0
    2102:	6001      	str	r1, [r0, #0]
    2104:	6046      	str	r6, [r0, #4]
    2106:	300c      	adds	r0, #12
    2108:	60a0      	str	r0, [r4, #8]
    210a:	3268      	adds	r2, #104	; 0x68
    210c:	f7ff fe57 	bl	1dbe <memset>
    2110:	1c20      	adds	r0, r4, #0
    2112:	bd70      	pop	{r4, r5, r6, pc}

00002114 <__sinit>:
    2114:	6983      	ldr	r3, [r0, #24]
    2116:	b513      	push	{r0, r1, r4, lr}
    2118:	2b00      	cmp	r3, #0
    211a:	d128      	bne.n	216e <__sinit+0x5a>
    211c:	6483      	str	r3, [r0, #72]	; 0x48
    211e:	64c3      	str	r3, [r0, #76]	; 0x4c
    2120:	6503      	str	r3, [r0, #80]	; 0x50
    2122:	4b13      	ldr	r3, [pc, #76]	; (2170 <__sinit+0x5c>)
    2124:	4a13      	ldr	r2, [pc, #76]	; (2174 <__sinit+0x60>)
    2126:	681b      	ldr	r3, [r3, #0]
    2128:	6282      	str	r2, [r0, #40]	; 0x28
    212a:	9301      	str	r3, [sp, #4]
    212c:	4298      	cmp	r0, r3
    212e:	d101      	bne.n	2134 <__sinit+0x20>
    2130:	2301      	movs	r3, #1
    2132:	6183      	str	r3, [r0, #24]
    2134:	1c04      	adds	r4, r0, #0
    2136:	f000 f81f 	bl	2178 <__sfp>
    213a:	6060      	str	r0, [r4, #4]
    213c:	1c20      	adds	r0, r4, #0
    213e:	f000 f81b 	bl	2178 <__sfp>
    2142:	60a0      	str	r0, [r4, #8]
    2144:	1c20      	adds	r0, r4, #0
    2146:	f000 f817 	bl	2178 <__sfp>
    214a:	2104      	movs	r1, #4
    214c:	60e0      	str	r0, [r4, #12]
    214e:	2200      	movs	r2, #0
    2150:	6860      	ldr	r0, [r4, #4]
    2152:	f7ff ffa5 	bl	20a0 <std.isra.0>
    2156:	68a0      	ldr	r0, [r4, #8]
    2158:	2109      	movs	r1, #9
    215a:	2201      	movs	r2, #1
    215c:	f7ff ffa0 	bl	20a0 <std.isra.0>
    2160:	68e0      	ldr	r0, [r4, #12]
    2162:	2112      	movs	r1, #18
    2164:	2202      	movs	r2, #2
    2166:	f7ff ff9b 	bl	20a0 <std.isra.0>
    216a:	2301      	movs	r3, #1
    216c:	61a3      	str	r3, [r4, #24]
    216e:	bd13      	pop	{r0, r1, r4, pc}
    2170:	00002e4c 	.word	0x00002e4c
    2174:	00002091 	.word	0x00002091

00002178 <__sfp>:
    2178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    217a:	4b1d      	ldr	r3, [pc, #116]	; (21f0 <__sfp+0x78>)
    217c:	1c06      	adds	r6, r0, #0
    217e:	681d      	ldr	r5, [r3, #0]
    2180:	69ab      	ldr	r3, [r5, #24]
    2182:	2b00      	cmp	r3, #0
    2184:	d102      	bne.n	218c <__sfp+0x14>
    2186:	1c28      	adds	r0, r5, #0
    2188:	f7ff ffc4 	bl	2114 <__sinit>
    218c:	3548      	adds	r5, #72	; 0x48
    218e:	68ac      	ldr	r4, [r5, #8]
    2190:	686b      	ldr	r3, [r5, #4]
    2192:	3b01      	subs	r3, #1
    2194:	d405      	bmi.n	21a2 <__sfp+0x2a>
    2196:	220c      	movs	r2, #12
    2198:	5ea7      	ldrsh	r7, [r4, r2]
    219a:	2f00      	cmp	r7, #0
    219c:	d010      	beq.n	21c0 <__sfp+0x48>
    219e:	3468      	adds	r4, #104	; 0x68
    21a0:	e7f7      	b.n	2192 <__sfp+0x1a>
    21a2:	682b      	ldr	r3, [r5, #0]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d106      	bne.n	21b6 <__sfp+0x3e>
    21a8:	1c30      	adds	r0, r6, #0
    21aa:	2104      	movs	r1, #4
    21ac:	f7ff ff9c 	bl	20e8 <__sfmoreglue>
    21b0:	6028      	str	r0, [r5, #0]
    21b2:	2800      	cmp	r0, #0
    21b4:	d001      	beq.n	21ba <__sfp+0x42>
    21b6:	682d      	ldr	r5, [r5, #0]
    21b8:	e7e9      	b.n	218e <__sfp+0x16>
    21ba:	230c      	movs	r3, #12
    21bc:	6033      	str	r3, [r6, #0]
    21be:	e016      	b.n	21ee <__sfp+0x76>
    21c0:	2301      	movs	r3, #1
    21c2:	1c20      	adds	r0, r4, #0
    21c4:	425b      	negs	r3, r3
    21c6:	81e3      	strh	r3, [r4, #14]
    21c8:	3302      	adds	r3, #2
    21ca:	81a3      	strh	r3, [r4, #12]
    21cc:	6667      	str	r7, [r4, #100]	; 0x64
    21ce:	6027      	str	r7, [r4, #0]
    21d0:	60a7      	str	r7, [r4, #8]
    21d2:	6067      	str	r7, [r4, #4]
    21d4:	6127      	str	r7, [r4, #16]
    21d6:	6167      	str	r7, [r4, #20]
    21d8:	61a7      	str	r7, [r4, #24]
    21da:	305c      	adds	r0, #92	; 0x5c
    21dc:	1c39      	adds	r1, r7, #0
    21de:	2208      	movs	r2, #8
    21e0:	f7ff fded 	bl	1dbe <memset>
    21e4:	1c20      	adds	r0, r4, #0
    21e6:	6367      	str	r7, [r4, #52]	; 0x34
    21e8:	63a7      	str	r7, [r4, #56]	; 0x38
    21ea:	64a7      	str	r7, [r4, #72]	; 0x48
    21ec:	64e7      	str	r7, [r4, #76]	; 0x4c
    21ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21f0:	00002e4c 	.word	0x00002e4c

000021f4 <_fwalk_reent>:
    21f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21f6:	1c04      	adds	r4, r0, #0
    21f8:	1c07      	adds	r7, r0, #0
    21fa:	2600      	movs	r6, #0
    21fc:	9101      	str	r1, [sp, #4]
    21fe:	3448      	adds	r4, #72	; 0x48
    2200:	2c00      	cmp	r4, #0
    2202:	d016      	beq.n	2232 <_fwalk_reent+0x3e>
    2204:	6863      	ldr	r3, [r4, #4]
    2206:	68a5      	ldr	r5, [r4, #8]
    2208:	9300      	str	r3, [sp, #0]
    220a:	9b00      	ldr	r3, [sp, #0]
    220c:	3b01      	subs	r3, #1
    220e:	9300      	str	r3, [sp, #0]
    2210:	d40d      	bmi.n	222e <_fwalk_reent+0x3a>
    2212:	89ab      	ldrh	r3, [r5, #12]
    2214:	2b01      	cmp	r3, #1
    2216:	d908      	bls.n	222a <_fwalk_reent+0x36>
    2218:	220e      	movs	r2, #14
    221a:	5eab      	ldrsh	r3, [r5, r2]
    221c:	3301      	adds	r3, #1
    221e:	d004      	beq.n	222a <_fwalk_reent+0x36>
    2220:	1c38      	adds	r0, r7, #0
    2222:	1c29      	adds	r1, r5, #0
    2224:	9b01      	ldr	r3, [sp, #4]
    2226:	4798      	blx	r3
    2228:	4306      	orrs	r6, r0
    222a:	3568      	adds	r5, #104	; 0x68
    222c:	e7ed      	b.n	220a <_fwalk_reent+0x16>
    222e:	6824      	ldr	r4, [r4, #0]
    2230:	e7e6      	b.n	2200 <_fwalk_reent+0xc>
    2232:	1c30      	adds	r0, r6, #0
    2234:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002238 <malloc>:
    2238:	b508      	push	{r3, lr}
    223a:	4b03      	ldr	r3, [pc, #12]	; (2248 <malloc+0x10>)
    223c:	1c01      	adds	r1, r0, #0
    223e:	6818      	ldr	r0, [r3, #0]
    2240:	f000 f84a 	bl	22d8 <_malloc_r>
    2244:	bd08      	pop	{r3, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	2000006c 	.word	0x2000006c

0000224c <_free_r>:
    224c:	b530      	push	{r4, r5, lr}
    224e:	2900      	cmp	r1, #0
    2250:	d03e      	beq.n	22d0 <_free_r+0x84>
    2252:	3904      	subs	r1, #4
    2254:	680b      	ldr	r3, [r1, #0]
    2256:	2b00      	cmp	r3, #0
    2258:	da00      	bge.n	225c <_free_r+0x10>
    225a:	18c9      	adds	r1, r1, r3
    225c:	4a1d      	ldr	r2, [pc, #116]	; (22d4 <_free_r+0x88>)
    225e:	6813      	ldr	r3, [r2, #0]
    2260:	1c14      	adds	r4, r2, #0
    2262:	2b00      	cmp	r3, #0
    2264:	d102      	bne.n	226c <_free_r+0x20>
    2266:	604b      	str	r3, [r1, #4]
    2268:	6011      	str	r1, [r2, #0]
    226a:	e031      	b.n	22d0 <_free_r+0x84>
    226c:	4299      	cmp	r1, r3
    226e:	d20d      	bcs.n	228c <_free_r+0x40>
    2270:	6808      	ldr	r0, [r1, #0]
    2272:	180a      	adds	r2, r1, r0
    2274:	429a      	cmp	r2, r3
    2276:	d103      	bne.n	2280 <_free_r+0x34>
    2278:	6813      	ldr	r3, [r2, #0]
    227a:	18c3      	adds	r3, r0, r3
    227c:	600b      	str	r3, [r1, #0]
    227e:	6853      	ldr	r3, [r2, #4]
    2280:	604b      	str	r3, [r1, #4]
    2282:	6021      	str	r1, [r4, #0]
    2284:	e024      	b.n	22d0 <_free_r+0x84>
    2286:	428a      	cmp	r2, r1
    2288:	d803      	bhi.n	2292 <_free_r+0x46>
    228a:	1c13      	adds	r3, r2, #0
    228c:	685a      	ldr	r2, [r3, #4]
    228e:	2a00      	cmp	r2, #0
    2290:	d1f9      	bne.n	2286 <_free_r+0x3a>
    2292:	681d      	ldr	r5, [r3, #0]
    2294:	195c      	adds	r4, r3, r5
    2296:	428c      	cmp	r4, r1
    2298:	d10b      	bne.n	22b2 <_free_r+0x66>
    229a:	6809      	ldr	r1, [r1, #0]
    229c:	1869      	adds	r1, r5, r1
    229e:	1858      	adds	r0, r3, r1
    22a0:	6019      	str	r1, [r3, #0]
    22a2:	4290      	cmp	r0, r2
    22a4:	d114      	bne.n	22d0 <_free_r+0x84>
    22a6:	6810      	ldr	r0, [r2, #0]
    22a8:	6852      	ldr	r2, [r2, #4]
    22aa:	1809      	adds	r1, r1, r0
    22ac:	6019      	str	r1, [r3, #0]
    22ae:	605a      	str	r2, [r3, #4]
    22b0:	e00e      	b.n	22d0 <_free_r+0x84>
    22b2:	428c      	cmp	r4, r1
    22b4:	d902      	bls.n	22bc <_free_r+0x70>
    22b6:	230c      	movs	r3, #12
    22b8:	6003      	str	r3, [r0, #0]
    22ba:	e009      	b.n	22d0 <_free_r+0x84>
    22bc:	6808      	ldr	r0, [r1, #0]
    22be:	180c      	adds	r4, r1, r0
    22c0:	4294      	cmp	r4, r2
    22c2:	d103      	bne.n	22cc <_free_r+0x80>
    22c4:	6814      	ldr	r4, [r2, #0]
    22c6:	6852      	ldr	r2, [r2, #4]
    22c8:	1900      	adds	r0, r0, r4
    22ca:	6008      	str	r0, [r1, #0]
    22cc:	604a      	str	r2, [r1, #4]
    22ce:	6059      	str	r1, [r3, #4]
    22d0:	bd30      	pop	{r4, r5, pc}
    22d2:	46c0      	nop			; (mov r8, r8)
    22d4:	200001a4 	.word	0x200001a4

000022d8 <_malloc_r>:
    22d8:	2303      	movs	r3, #3
    22da:	b570      	push	{r4, r5, r6, lr}
    22dc:	1ccc      	adds	r4, r1, #3
    22de:	439c      	bics	r4, r3
    22e0:	3408      	adds	r4, #8
    22e2:	1c05      	adds	r5, r0, #0
    22e4:	2c0c      	cmp	r4, #12
    22e6:	d201      	bcs.n	22ec <_malloc_r+0x14>
    22e8:	240c      	movs	r4, #12
    22ea:	e005      	b.n	22f8 <_malloc_r+0x20>
    22ec:	2c00      	cmp	r4, #0
    22ee:	da03      	bge.n	22f8 <_malloc_r+0x20>
    22f0:	230c      	movs	r3, #12
    22f2:	2000      	movs	r0, #0
    22f4:	602b      	str	r3, [r5, #0]
    22f6:	e042      	b.n	237e <_malloc_r+0xa6>
    22f8:	428c      	cmp	r4, r1
    22fa:	d3f9      	bcc.n	22f0 <_malloc_r+0x18>
    22fc:	4a20      	ldr	r2, [pc, #128]	; (2380 <_malloc_r+0xa8>)
    22fe:	6813      	ldr	r3, [r2, #0]
    2300:	1c10      	adds	r0, r2, #0
    2302:	1c19      	adds	r1, r3, #0
    2304:	2900      	cmp	r1, #0
    2306:	d013      	beq.n	2330 <_malloc_r+0x58>
    2308:	680a      	ldr	r2, [r1, #0]
    230a:	1b12      	subs	r2, r2, r4
    230c:	d40d      	bmi.n	232a <_malloc_r+0x52>
    230e:	2a0b      	cmp	r2, #11
    2310:	d902      	bls.n	2318 <_malloc_r+0x40>
    2312:	600a      	str	r2, [r1, #0]
    2314:	188b      	adds	r3, r1, r2
    2316:	e01f      	b.n	2358 <_malloc_r+0x80>
    2318:	428b      	cmp	r3, r1
    231a:	d102      	bne.n	2322 <_malloc_r+0x4a>
    231c:	685a      	ldr	r2, [r3, #4]
    231e:	6002      	str	r2, [r0, #0]
    2320:	e01b      	b.n	235a <_malloc_r+0x82>
    2322:	684a      	ldr	r2, [r1, #4]
    2324:	605a      	str	r2, [r3, #4]
    2326:	1c0b      	adds	r3, r1, #0
    2328:	e017      	b.n	235a <_malloc_r+0x82>
    232a:	1c0b      	adds	r3, r1, #0
    232c:	6849      	ldr	r1, [r1, #4]
    232e:	e7e9      	b.n	2304 <_malloc_r+0x2c>
    2330:	4e14      	ldr	r6, [pc, #80]	; (2384 <_malloc_r+0xac>)
    2332:	6833      	ldr	r3, [r6, #0]
    2334:	2b00      	cmp	r3, #0
    2336:	d103      	bne.n	2340 <_malloc_r+0x68>
    2338:	1c28      	adds	r0, r5, #0
    233a:	f000 fae3 	bl	2904 <_sbrk_r>
    233e:	6030      	str	r0, [r6, #0]
    2340:	1c28      	adds	r0, r5, #0
    2342:	1c21      	adds	r1, r4, #0
    2344:	f000 fade 	bl	2904 <_sbrk_r>
    2348:	1c03      	adds	r3, r0, #0
    234a:	1c42      	adds	r2, r0, #1
    234c:	d0d0      	beq.n	22f0 <_malloc_r+0x18>
    234e:	2203      	movs	r2, #3
    2350:	1cc6      	adds	r6, r0, #3
    2352:	4396      	bics	r6, r2
    2354:	4286      	cmp	r6, r0
    2356:	d10a      	bne.n	236e <_malloc_r+0x96>
    2358:	601c      	str	r4, [r3, #0]
    235a:	1c18      	adds	r0, r3, #0
    235c:	2107      	movs	r1, #7
    235e:	300b      	adds	r0, #11
    2360:	1d1a      	adds	r2, r3, #4
    2362:	4388      	bics	r0, r1
    2364:	1a82      	subs	r2, r0, r2
    2366:	d00a      	beq.n	237e <_malloc_r+0xa6>
    2368:	4251      	negs	r1, r2
    236a:	5099      	str	r1, [r3, r2]
    236c:	e007      	b.n	237e <_malloc_r+0xa6>
    236e:	1a31      	subs	r1, r6, r0
    2370:	1c28      	adds	r0, r5, #0
    2372:	f000 fac7 	bl	2904 <_sbrk_r>
    2376:	1c43      	adds	r3, r0, #1
    2378:	d0ba      	beq.n	22f0 <_malloc_r+0x18>
    237a:	1c33      	adds	r3, r6, #0
    237c:	e7ec      	b.n	2358 <_malloc_r+0x80>
    237e:	bd70      	pop	{r4, r5, r6, pc}
    2380:	200001a4 	.word	0x200001a4
    2384:	200001a0 	.word	0x200001a0

00002388 <__sfputc_r>:
    2388:	6893      	ldr	r3, [r2, #8]
    238a:	b510      	push	{r4, lr}
    238c:	3b01      	subs	r3, #1
    238e:	6093      	str	r3, [r2, #8]
    2390:	2b00      	cmp	r3, #0
    2392:	da05      	bge.n	23a0 <__sfputc_r+0x18>
    2394:	6994      	ldr	r4, [r2, #24]
    2396:	42a3      	cmp	r3, r4
    2398:	db08      	blt.n	23ac <__sfputc_r+0x24>
    239a:	b2cb      	uxtb	r3, r1
    239c:	2b0a      	cmp	r3, #10
    239e:	d005      	beq.n	23ac <__sfputc_r+0x24>
    23a0:	6813      	ldr	r3, [r2, #0]
    23a2:	1c58      	adds	r0, r3, #1
    23a4:	6010      	str	r0, [r2, #0]
    23a6:	7019      	strb	r1, [r3, #0]
    23a8:	b2c8      	uxtb	r0, r1
    23aa:	e001      	b.n	23b0 <__sfputc_r+0x28>
    23ac:	f000 fb08 	bl	29c0 <__swbuf_r>
    23b0:	bd10      	pop	{r4, pc}

000023b2 <__sfputs_r>:
    23b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23b4:	1c06      	adds	r6, r0, #0
    23b6:	1c0f      	adds	r7, r1, #0
    23b8:	1c14      	adds	r4, r2, #0
    23ba:	18d5      	adds	r5, r2, r3
    23bc:	42ac      	cmp	r4, r5
    23be:	d008      	beq.n	23d2 <__sfputs_r+0x20>
    23c0:	7821      	ldrb	r1, [r4, #0]
    23c2:	1c30      	adds	r0, r6, #0
    23c4:	1c3a      	adds	r2, r7, #0
    23c6:	f7ff ffdf 	bl	2388 <__sfputc_r>
    23ca:	3401      	adds	r4, #1
    23cc:	1c43      	adds	r3, r0, #1
    23ce:	d1f5      	bne.n	23bc <__sfputs_r+0xa>
    23d0:	e000      	b.n	23d4 <__sfputs_r+0x22>
    23d2:	2000      	movs	r0, #0
    23d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000023d8 <_vfiprintf_r>:
    23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23da:	b09f      	sub	sp, #124	; 0x7c
    23dc:	1c06      	adds	r6, r0, #0
    23de:	1c0f      	adds	r7, r1, #0
    23e0:	9202      	str	r2, [sp, #8]
    23e2:	9305      	str	r3, [sp, #20]
    23e4:	2800      	cmp	r0, #0
    23e6:	d004      	beq.n	23f2 <_vfiprintf_r+0x1a>
    23e8:	6983      	ldr	r3, [r0, #24]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d101      	bne.n	23f2 <_vfiprintf_r+0x1a>
    23ee:	f7ff fe91 	bl	2114 <__sinit>
    23f2:	4b79      	ldr	r3, [pc, #484]	; (25d8 <_vfiprintf_r+0x200>)
    23f4:	429f      	cmp	r7, r3
    23f6:	d101      	bne.n	23fc <_vfiprintf_r+0x24>
    23f8:	6877      	ldr	r7, [r6, #4]
    23fa:	e008      	b.n	240e <_vfiprintf_r+0x36>
    23fc:	4b77      	ldr	r3, [pc, #476]	; (25dc <_vfiprintf_r+0x204>)
    23fe:	429f      	cmp	r7, r3
    2400:	d101      	bne.n	2406 <_vfiprintf_r+0x2e>
    2402:	68b7      	ldr	r7, [r6, #8]
    2404:	e003      	b.n	240e <_vfiprintf_r+0x36>
    2406:	4b76      	ldr	r3, [pc, #472]	; (25e0 <_vfiprintf_r+0x208>)
    2408:	429f      	cmp	r7, r3
    240a:	d100      	bne.n	240e <_vfiprintf_r+0x36>
    240c:	68f7      	ldr	r7, [r6, #12]
    240e:	89bb      	ldrh	r3, [r7, #12]
    2410:	071b      	lsls	r3, r3, #28
    2412:	d50a      	bpl.n	242a <_vfiprintf_r+0x52>
    2414:	693b      	ldr	r3, [r7, #16]
    2416:	2b00      	cmp	r3, #0
    2418:	d007      	beq.n	242a <_vfiprintf_r+0x52>
    241a:	2300      	movs	r3, #0
    241c:	ad06      	add	r5, sp, #24
    241e:	616b      	str	r3, [r5, #20]
    2420:	3320      	adds	r3, #32
    2422:	766b      	strb	r3, [r5, #25]
    2424:	3310      	adds	r3, #16
    2426:	76ab      	strb	r3, [r5, #26]
    2428:	e03d      	b.n	24a6 <_vfiprintf_r+0xce>
    242a:	1c30      	adds	r0, r6, #0
    242c:	1c39      	adds	r1, r7, #0
    242e:	f000 fb33 	bl	2a98 <__swsetup_r>
    2432:	2800      	cmp	r0, #0
    2434:	d0f1      	beq.n	241a <_vfiprintf_r+0x42>
    2436:	2001      	movs	r0, #1
    2438:	4240      	negs	r0, r0
    243a:	e0ca      	b.n	25d2 <_vfiprintf_r+0x1fa>
    243c:	9a05      	ldr	r2, [sp, #20]
    243e:	1d11      	adds	r1, r2, #4
    2440:	6812      	ldr	r2, [r2, #0]
    2442:	9105      	str	r1, [sp, #20]
    2444:	2a00      	cmp	r2, #0
    2446:	db7e      	blt.n	2546 <_vfiprintf_r+0x16e>
    2448:	9209      	str	r2, [sp, #36]	; 0x24
    244a:	3401      	adds	r4, #1
    244c:	7823      	ldrb	r3, [r4, #0]
    244e:	2b2e      	cmp	r3, #46	; 0x2e
    2450:	d100      	bne.n	2454 <_vfiprintf_r+0x7c>
    2452:	e089      	b.n	2568 <_vfiprintf_r+0x190>
    2454:	7821      	ldrb	r1, [r4, #0]
    2456:	4863      	ldr	r0, [pc, #396]	; (25e4 <_vfiprintf_r+0x20c>)
    2458:	2203      	movs	r2, #3
    245a:	f000 fc0f 	bl	2c7c <memchr>
    245e:	2800      	cmp	r0, #0
    2460:	d008      	beq.n	2474 <_vfiprintf_r+0x9c>
    2462:	4b60      	ldr	r3, [pc, #384]	; (25e4 <_vfiprintf_r+0x20c>)
    2464:	3401      	adds	r4, #1
    2466:	1ac0      	subs	r0, r0, r3
    2468:	2340      	movs	r3, #64	; 0x40
    246a:	4083      	lsls	r3, r0
    246c:	1c18      	adds	r0, r3, #0
    246e:	682b      	ldr	r3, [r5, #0]
    2470:	4318      	orrs	r0, r3
    2472:	6028      	str	r0, [r5, #0]
    2474:	7821      	ldrb	r1, [r4, #0]
    2476:	1c63      	adds	r3, r4, #1
    2478:	485b      	ldr	r0, [pc, #364]	; (25e8 <_vfiprintf_r+0x210>)
    247a:	2206      	movs	r2, #6
    247c:	9302      	str	r3, [sp, #8]
    247e:	7629      	strb	r1, [r5, #24]
    2480:	f000 fbfc 	bl	2c7c <memchr>
    2484:	2800      	cmp	r0, #0
    2486:	d100      	bne.n	248a <_vfiprintf_r+0xb2>
    2488:	e091      	b.n	25ae <_vfiprintf_r+0x1d6>
    248a:	4b58      	ldr	r3, [pc, #352]	; (25ec <_vfiprintf_r+0x214>)
    248c:	2b00      	cmp	r3, #0
    248e:	d000      	beq.n	2492 <_vfiprintf_r+0xba>
    2490:	e084      	b.n	259c <_vfiprintf_r+0x1c4>
    2492:	2207      	movs	r2, #7
    2494:	9b05      	ldr	r3, [sp, #20]
    2496:	3307      	adds	r3, #7
    2498:	4393      	bics	r3, r2
    249a:	3308      	adds	r3, #8
    249c:	9305      	str	r3, [sp, #20]
    249e:	696b      	ldr	r3, [r5, #20]
    24a0:	9a03      	ldr	r2, [sp, #12]
    24a2:	189b      	adds	r3, r3, r2
    24a4:	616b      	str	r3, [r5, #20]
    24a6:	9c02      	ldr	r4, [sp, #8]
    24a8:	7823      	ldrb	r3, [r4, #0]
    24aa:	2b00      	cmp	r3, #0
    24ac:	d104      	bne.n	24b8 <_vfiprintf_r+0xe0>
    24ae:	9b02      	ldr	r3, [sp, #8]
    24b0:	1ae3      	subs	r3, r4, r3
    24b2:	9304      	str	r3, [sp, #16]
    24b4:	d011      	beq.n	24da <_vfiprintf_r+0x102>
    24b6:	e003      	b.n	24c0 <_vfiprintf_r+0xe8>
    24b8:	2b25      	cmp	r3, #37	; 0x25
    24ba:	d0f8      	beq.n	24ae <_vfiprintf_r+0xd6>
    24bc:	3401      	adds	r4, #1
    24be:	e7f3      	b.n	24a8 <_vfiprintf_r+0xd0>
    24c0:	9b04      	ldr	r3, [sp, #16]
    24c2:	1c30      	adds	r0, r6, #0
    24c4:	1c39      	adds	r1, r7, #0
    24c6:	9a02      	ldr	r2, [sp, #8]
    24c8:	f7ff ff73 	bl	23b2 <__sfputs_r>
    24cc:	1c43      	adds	r3, r0, #1
    24ce:	d07b      	beq.n	25c8 <_vfiprintf_r+0x1f0>
    24d0:	696a      	ldr	r2, [r5, #20]
    24d2:	9b04      	ldr	r3, [sp, #16]
    24d4:	4694      	mov	ip, r2
    24d6:	4463      	add	r3, ip
    24d8:	616b      	str	r3, [r5, #20]
    24da:	7823      	ldrb	r3, [r4, #0]
    24dc:	2b00      	cmp	r3, #0
    24de:	d073      	beq.n	25c8 <_vfiprintf_r+0x1f0>
    24e0:	2201      	movs	r2, #1
    24e2:	2300      	movs	r3, #0
    24e4:	4252      	negs	r2, r2
    24e6:	606a      	str	r2, [r5, #4]
    24e8:	a902      	add	r1, sp, #8
    24ea:	3254      	adds	r2, #84	; 0x54
    24ec:	1852      	adds	r2, r2, r1
    24ee:	3401      	adds	r4, #1
    24f0:	602b      	str	r3, [r5, #0]
    24f2:	60eb      	str	r3, [r5, #12]
    24f4:	60ab      	str	r3, [r5, #8]
    24f6:	7013      	strb	r3, [r2, #0]
    24f8:	65ab      	str	r3, [r5, #88]	; 0x58
    24fa:	7821      	ldrb	r1, [r4, #0]
    24fc:	483c      	ldr	r0, [pc, #240]	; (25f0 <_vfiprintf_r+0x218>)
    24fe:	2205      	movs	r2, #5
    2500:	f000 fbbc 	bl	2c7c <memchr>
    2504:	2800      	cmp	r0, #0
    2506:	d009      	beq.n	251c <_vfiprintf_r+0x144>
    2508:	4b39      	ldr	r3, [pc, #228]	; (25f0 <_vfiprintf_r+0x218>)
    250a:	3401      	adds	r4, #1
    250c:	1ac0      	subs	r0, r0, r3
    250e:	2301      	movs	r3, #1
    2510:	4083      	lsls	r3, r0
    2512:	1c18      	adds	r0, r3, #0
    2514:	682b      	ldr	r3, [r5, #0]
    2516:	4318      	orrs	r0, r3
    2518:	6028      	str	r0, [r5, #0]
    251a:	e7ee      	b.n	24fa <_vfiprintf_r+0x122>
    251c:	682b      	ldr	r3, [r5, #0]
    251e:	06da      	lsls	r2, r3, #27
    2520:	d504      	bpl.n	252c <_vfiprintf_r+0x154>
    2522:	2253      	movs	r2, #83	; 0x53
    2524:	2120      	movs	r1, #32
    2526:	a802      	add	r0, sp, #8
    2528:	1812      	adds	r2, r2, r0
    252a:	7011      	strb	r1, [r2, #0]
    252c:	071a      	lsls	r2, r3, #28
    252e:	d504      	bpl.n	253a <_vfiprintf_r+0x162>
    2530:	2253      	movs	r2, #83	; 0x53
    2532:	212b      	movs	r1, #43	; 0x2b
    2534:	a802      	add	r0, sp, #8
    2536:	1812      	adds	r2, r2, r0
    2538:	7011      	strb	r1, [r2, #0]
    253a:	7822      	ldrb	r2, [r4, #0]
    253c:	2a2a      	cmp	r2, #42	; 0x2a
    253e:	d100      	bne.n	2542 <_vfiprintf_r+0x16a>
    2540:	e77c      	b.n	243c <_vfiprintf_r+0x64>
    2542:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2544:	e005      	b.n	2552 <_vfiprintf_r+0x17a>
    2546:	4252      	negs	r2, r2
    2548:	60ea      	str	r2, [r5, #12]
    254a:	2202      	movs	r2, #2
    254c:	4313      	orrs	r3, r2
    254e:	602b      	str	r3, [r5, #0]
    2550:	e77b      	b.n	244a <_vfiprintf_r+0x72>
    2552:	7822      	ldrb	r2, [r4, #0]
    2554:	3a30      	subs	r2, #48	; 0x30
    2556:	2a09      	cmp	r2, #9
    2558:	d804      	bhi.n	2564 <_vfiprintf_r+0x18c>
    255a:	210a      	movs	r1, #10
    255c:	434b      	muls	r3, r1
    255e:	3401      	adds	r4, #1
    2560:	189b      	adds	r3, r3, r2
    2562:	e7f6      	b.n	2552 <_vfiprintf_r+0x17a>
    2564:	9309      	str	r3, [sp, #36]	; 0x24
    2566:	e771      	b.n	244c <_vfiprintf_r+0x74>
    2568:	7863      	ldrb	r3, [r4, #1]
    256a:	2b2a      	cmp	r3, #42	; 0x2a
    256c:	d109      	bne.n	2582 <_vfiprintf_r+0x1aa>
    256e:	9b05      	ldr	r3, [sp, #20]
    2570:	3402      	adds	r4, #2
    2572:	1d1a      	adds	r2, r3, #4
    2574:	681b      	ldr	r3, [r3, #0]
    2576:	9205      	str	r2, [sp, #20]
    2578:	2b00      	cmp	r3, #0
    257a:	da0d      	bge.n	2598 <_vfiprintf_r+0x1c0>
    257c:	2301      	movs	r3, #1
    257e:	425b      	negs	r3, r3
    2580:	e00a      	b.n	2598 <_vfiprintf_r+0x1c0>
    2582:	2300      	movs	r3, #0
    2584:	3401      	adds	r4, #1
    2586:	7822      	ldrb	r2, [r4, #0]
    2588:	3a30      	subs	r2, #48	; 0x30
    258a:	2a09      	cmp	r2, #9
    258c:	d804      	bhi.n	2598 <_vfiprintf_r+0x1c0>
    258e:	210a      	movs	r1, #10
    2590:	434b      	muls	r3, r1
    2592:	3401      	adds	r4, #1
    2594:	189b      	adds	r3, r3, r2
    2596:	e7f6      	b.n	2586 <_vfiprintf_r+0x1ae>
    2598:	9307      	str	r3, [sp, #28]
    259a:	e75b      	b.n	2454 <_vfiprintf_r+0x7c>
    259c:	ab05      	add	r3, sp, #20
    259e:	9300      	str	r3, [sp, #0]
    25a0:	1c30      	adds	r0, r6, #0
    25a2:	1c29      	adds	r1, r5, #0
    25a4:	1c3a      	adds	r2, r7, #0
    25a6:	4b13      	ldr	r3, [pc, #76]	; (25f4 <_vfiprintf_r+0x21c>)
    25a8:	e000      	b.n	25ac <_vfiprintf_r+0x1d4>
    25aa:	bf00      	nop
    25ac:	e007      	b.n	25be <_vfiprintf_r+0x1e6>
    25ae:	ab05      	add	r3, sp, #20
    25b0:	9300      	str	r3, [sp, #0]
    25b2:	1c30      	adds	r0, r6, #0
    25b4:	1c29      	adds	r1, r5, #0
    25b6:	1c3a      	adds	r2, r7, #0
    25b8:	4b0e      	ldr	r3, [pc, #56]	; (25f4 <_vfiprintf_r+0x21c>)
    25ba:	f000 f88b 	bl	26d4 <_printf_i>
    25be:	9003      	str	r0, [sp, #12]
    25c0:	9b03      	ldr	r3, [sp, #12]
    25c2:	3301      	adds	r3, #1
    25c4:	d000      	beq.n	25c8 <_vfiprintf_r+0x1f0>
    25c6:	e76a      	b.n	249e <_vfiprintf_r+0xc6>
    25c8:	89bb      	ldrh	r3, [r7, #12]
    25ca:	065b      	lsls	r3, r3, #25
    25cc:	d500      	bpl.n	25d0 <_vfiprintf_r+0x1f8>
    25ce:	e732      	b.n	2436 <_vfiprintf_r+0x5e>
    25d0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    25d2:	b01f      	add	sp, #124	; 0x7c
    25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	00002e50 	.word	0x00002e50
    25dc:	00002e70 	.word	0x00002e70
    25e0:	00002e90 	.word	0x00002e90
    25e4:	00002eb6 	.word	0x00002eb6
    25e8:	00002eba 	.word	0x00002eba
    25ec:	00000000 	.word	0x00000000
    25f0:	00002eb0 	.word	0x00002eb0
    25f4:	000023b3 	.word	0x000023b3

000025f8 <_printf_common>:
    25f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25fa:	1c17      	adds	r7, r2, #0
    25fc:	9301      	str	r3, [sp, #4]
    25fe:	690a      	ldr	r2, [r1, #16]
    2600:	688b      	ldr	r3, [r1, #8]
    2602:	9000      	str	r0, [sp, #0]
    2604:	1c0c      	adds	r4, r1, #0
    2606:	4293      	cmp	r3, r2
    2608:	da00      	bge.n	260c <_printf_common+0x14>
    260a:	1c13      	adds	r3, r2, #0
    260c:	1c22      	adds	r2, r4, #0
    260e:	603b      	str	r3, [r7, #0]
    2610:	3243      	adds	r2, #67	; 0x43
    2612:	7812      	ldrb	r2, [r2, #0]
    2614:	2a00      	cmp	r2, #0
    2616:	d001      	beq.n	261c <_printf_common+0x24>
    2618:	3301      	adds	r3, #1
    261a:	603b      	str	r3, [r7, #0]
    261c:	6823      	ldr	r3, [r4, #0]
    261e:	069b      	lsls	r3, r3, #26
    2620:	d502      	bpl.n	2628 <_printf_common+0x30>
    2622:	683b      	ldr	r3, [r7, #0]
    2624:	3302      	adds	r3, #2
    2626:	603b      	str	r3, [r7, #0]
    2628:	2506      	movs	r5, #6
    262a:	6823      	ldr	r3, [r4, #0]
    262c:	401d      	ands	r5, r3
    262e:	d01e      	beq.n	266e <_printf_common+0x76>
    2630:	1c23      	adds	r3, r4, #0
    2632:	3343      	adds	r3, #67	; 0x43
    2634:	781b      	ldrb	r3, [r3, #0]
    2636:	1e5a      	subs	r2, r3, #1
    2638:	4193      	sbcs	r3, r2
    263a:	6822      	ldr	r2, [r4, #0]
    263c:	0692      	lsls	r2, r2, #26
    263e:	d51c      	bpl.n	267a <_printf_common+0x82>
    2640:	2030      	movs	r0, #48	; 0x30
    2642:	18e1      	adds	r1, r4, r3
    2644:	3140      	adds	r1, #64	; 0x40
    2646:	70c8      	strb	r0, [r1, #3]
    2648:	1c21      	adds	r1, r4, #0
    264a:	1c5a      	adds	r2, r3, #1
    264c:	3145      	adds	r1, #69	; 0x45
    264e:	7809      	ldrb	r1, [r1, #0]
    2650:	18a2      	adds	r2, r4, r2
    2652:	3240      	adds	r2, #64	; 0x40
    2654:	3302      	adds	r3, #2
    2656:	70d1      	strb	r1, [r2, #3]
    2658:	e00f      	b.n	267a <_printf_common+0x82>
    265a:	1c22      	adds	r2, r4, #0
    265c:	2301      	movs	r3, #1
    265e:	9800      	ldr	r0, [sp, #0]
    2660:	9901      	ldr	r1, [sp, #4]
    2662:	3219      	adds	r2, #25
    2664:	9e08      	ldr	r6, [sp, #32]
    2666:	47b0      	blx	r6
    2668:	1c43      	adds	r3, r0, #1
    266a:	d00e      	beq.n	268a <_printf_common+0x92>
    266c:	3501      	adds	r5, #1
    266e:	68e3      	ldr	r3, [r4, #12]
    2670:	683a      	ldr	r2, [r7, #0]
    2672:	1a9b      	subs	r3, r3, r2
    2674:	429d      	cmp	r5, r3
    2676:	dbf0      	blt.n	265a <_printf_common+0x62>
    2678:	e7da      	b.n	2630 <_printf_common+0x38>
    267a:	1c22      	adds	r2, r4, #0
    267c:	9800      	ldr	r0, [sp, #0]
    267e:	9901      	ldr	r1, [sp, #4]
    2680:	3243      	adds	r2, #67	; 0x43
    2682:	9d08      	ldr	r5, [sp, #32]
    2684:	47a8      	blx	r5
    2686:	1c43      	adds	r3, r0, #1
    2688:	d102      	bne.n	2690 <_printf_common+0x98>
    268a:	2001      	movs	r0, #1
    268c:	4240      	negs	r0, r0
    268e:	e020      	b.n	26d2 <_printf_common+0xda>
    2690:	2306      	movs	r3, #6
    2692:	6820      	ldr	r0, [r4, #0]
    2694:	68e1      	ldr	r1, [r4, #12]
    2696:	683a      	ldr	r2, [r7, #0]
    2698:	4003      	ands	r3, r0
    269a:	2500      	movs	r5, #0
    269c:	2b04      	cmp	r3, #4
    269e:	d103      	bne.n	26a8 <_printf_common+0xb0>
    26a0:	1a8d      	subs	r5, r1, r2
    26a2:	43eb      	mvns	r3, r5
    26a4:	17db      	asrs	r3, r3, #31
    26a6:	401d      	ands	r5, r3
    26a8:	68a3      	ldr	r3, [r4, #8]
    26aa:	6922      	ldr	r2, [r4, #16]
    26ac:	4293      	cmp	r3, r2
    26ae:	dd01      	ble.n	26b4 <_printf_common+0xbc>
    26b0:	1a9b      	subs	r3, r3, r2
    26b2:	18ed      	adds	r5, r5, r3
    26b4:	2700      	movs	r7, #0
    26b6:	42af      	cmp	r7, r5
    26b8:	da0a      	bge.n	26d0 <_printf_common+0xd8>
    26ba:	1c22      	adds	r2, r4, #0
    26bc:	2301      	movs	r3, #1
    26be:	9800      	ldr	r0, [sp, #0]
    26c0:	9901      	ldr	r1, [sp, #4]
    26c2:	321a      	adds	r2, #26
    26c4:	9e08      	ldr	r6, [sp, #32]
    26c6:	47b0      	blx	r6
    26c8:	1c43      	adds	r3, r0, #1
    26ca:	d0de      	beq.n	268a <_printf_common+0x92>
    26cc:	3701      	adds	r7, #1
    26ce:	e7f2      	b.n	26b6 <_printf_common+0xbe>
    26d0:	2000      	movs	r0, #0
    26d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000026d4 <_printf_i>:
    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d6:	b08b      	sub	sp, #44	; 0x2c
    26d8:	9206      	str	r2, [sp, #24]
    26da:	1c0a      	adds	r2, r1, #0
    26dc:	3243      	adds	r2, #67	; 0x43
    26de:	9307      	str	r3, [sp, #28]
    26e0:	9005      	str	r0, [sp, #20]
    26e2:	9204      	str	r2, [sp, #16]
    26e4:	7e0a      	ldrb	r2, [r1, #24]
    26e6:	1c0c      	adds	r4, r1, #0
    26e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    26ea:	2a6e      	cmp	r2, #110	; 0x6e
    26ec:	d100      	bne.n	26f0 <_printf_i+0x1c>
    26ee:	e0a8      	b.n	2842 <_printf_i+0x16e>
    26f0:	d811      	bhi.n	2716 <_printf_i+0x42>
    26f2:	2a63      	cmp	r2, #99	; 0x63
    26f4:	d022      	beq.n	273c <_printf_i+0x68>
    26f6:	d809      	bhi.n	270c <_printf_i+0x38>
    26f8:	2a00      	cmp	r2, #0
    26fa:	d100      	bne.n	26fe <_printf_i+0x2a>
    26fc:	e0b2      	b.n	2864 <_printf_i+0x190>
    26fe:	2a58      	cmp	r2, #88	; 0x58
    2700:	d000      	beq.n	2704 <_printf_i+0x30>
    2702:	e0c2      	b.n	288a <_printf_i+0x1b6>
    2704:	3145      	adds	r1, #69	; 0x45
    2706:	700a      	strb	r2, [r1, #0]
    2708:	4a7c      	ldr	r2, [pc, #496]	; (28fc <_printf_i+0x228>)
    270a:	e04f      	b.n	27ac <_printf_i+0xd8>
    270c:	2a64      	cmp	r2, #100	; 0x64
    270e:	d01d      	beq.n	274c <_printf_i+0x78>
    2710:	2a69      	cmp	r2, #105	; 0x69
    2712:	d01b      	beq.n	274c <_printf_i+0x78>
    2714:	e0b9      	b.n	288a <_printf_i+0x1b6>
    2716:	2a73      	cmp	r2, #115	; 0x73
    2718:	d100      	bne.n	271c <_printf_i+0x48>
    271a:	e0a7      	b.n	286c <_printf_i+0x198>
    271c:	d809      	bhi.n	2732 <_printf_i+0x5e>
    271e:	2a6f      	cmp	r2, #111	; 0x6f
    2720:	d029      	beq.n	2776 <_printf_i+0xa2>
    2722:	2a70      	cmp	r2, #112	; 0x70
    2724:	d000      	beq.n	2728 <_printf_i+0x54>
    2726:	e0b0      	b.n	288a <_printf_i+0x1b6>
    2728:	2220      	movs	r2, #32
    272a:	6809      	ldr	r1, [r1, #0]
    272c:	430a      	orrs	r2, r1
    272e:	6022      	str	r2, [r4, #0]
    2730:	e037      	b.n	27a2 <_printf_i+0xce>
    2732:	2a75      	cmp	r2, #117	; 0x75
    2734:	d01f      	beq.n	2776 <_printf_i+0xa2>
    2736:	2a78      	cmp	r2, #120	; 0x78
    2738:	d033      	beq.n	27a2 <_printf_i+0xce>
    273a:	e0a6      	b.n	288a <_printf_i+0x1b6>
    273c:	1c0e      	adds	r6, r1, #0
    273e:	681a      	ldr	r2, [r3, #0]
    2740:	3642      	adds	r6, #66	; 0x42
    2742:	1d11      	adds	r1, r2, #4
    2744:	6019      	str	r1, [r3, #0]
    2746:	6813      	ldr	r3, [r2, #0]
    2748:	7033      	strb	r3, [r6, #0]
    274a:	e0a1      	b.n	2890 <_printf_i+0x1bc>
    274c:	6821      	ldr	r1, [r4, #0]
    274e:	681a      	ldr	r2, [r3, #0]
    2750:	0608      	lsls	r0, r1, #24
    2752:	d406      	bmi.n	2762 <_printf_i+0x8e>
    2754:	0649      	lsls	r1, r1, #25
    2756:	d504      	bpl.n	2762 <_printf_i+0x8e>
    2758:	1d11      	adds	r1, r2, #4
    275a:	6019      	str	r1, [r3, #0]
    275c:	2300      	movs	r3, #0
    275e:	5ed5      	ldrsh	r5, [r2, r3]
    2760:	e002      	b.n	2768 <_printf_i+0x94>
    2762:	1d11      	adds	r1, r2, #4
    2764:	6019      	str	r1, [r3, #0]
    2766:	6815      	ldr	r5, [r2, #0]
    2768:	2d00      	cmp	r5, #0
    276a:	da3b      	bge.n	27e4 <_printf_i+0x110>
    276c:	232d      	movs	r3, #45	; 0x2d
    276e:	9a04      	ldr	r2, [sp, #16]
    2770:	426d      	negs	r5, r5
    2772:	7013      	strb	r3, [r2, #0]
    2774:	e036      	b.n	27e4 <_printf_i+0x110>
    2776:	6821      	ldr	r1, [r4, #0]
    2778:	681a      	ldr	r2, [r3, #0]
    277a:	0608      	lsls	r0, r1, #24
    277c:	d406      	bmi.n	278c <_printf_i+0xb8>
    277e:	0649      	lsls	r1, r1, #25
    2780:	d504      	bpl.n	278c <_printf_i+0xb8>
    2782:	6815      	ldr	r5, [r2, #0]
    2784:	1d11      	adds	r1, r2, #4
    2786:	6019      	str	r1, [r3, #0]
    2788:	b2ad      	uxth	r5, r5
    278a:	e002      	b.n	2792 <_printf_i+0xbe>
    278c:	1d11      	adds	r1, r2, #4
    278e:	6019      	str	r1, [r3, #0]
    2790:	6815      	ldr	r5, [r2, #0]
    2792:	4b5a      	ldr	r3, [pc, #360]	; (28fc <_printf_i+0x228>)
    2794:	7e22      	ldrb	r2, [r4, #24]
    2796:	9303      	str	r3, [sp, #12]
    2798:	270a      	movs	r7, #10
    279a:	2a6f      	cmp	r2, #111	; 0x6f
    279c:	d11d      	bne.n	27da <_printf_i+0x106>
    279e:	2708      	movs	r7, #8
    27a0:	e01b      	b.n	27da <_printf_i+0x106>
    27a2:	1c22      	adds	r2, r4, #0
    27a4:	2178      	movs	r1, #120	; 0x78
    27a6:	3245      	adds	r2, #69	; 0x45
    27a8:	7011      	strb	r1, [r2, #0]
    27aa:	4a55      	ldr	r2, [pc, #340]	; (2900 <_printf_i+0x22c>)
    27ac:	6819      	ldr	r1, [r3, #0]
    27ae:	9203      	str	r2, [sp, #12]
    27b0:	1d08      	adds	r0, r1, #4
    27b2:	6822      	ldr	r2, [r4, #0]
    27b4:	6018      	str	r0, [r3, #0]
    27b6:	680d      	ldr	r5, [r1, #0]
    27b8:	0610      	lsls	r0, r2, #24
    27ba:	d402      	bmi.n	27c2 <_printf_i+0xee>
    27bc:	0650      	lsls	r0, r2, #25
    27be:	d500      	bpl.n	27c2 <_printf_i+0xee>
    27c0:	b2ad      	uxth	r5, r5
    27c2:	07d3      	lsls	r3, r2, #31
    27c4:	d502      	bpl.n	27cc <_printf_i+0xf8>
    27c6:	2320      	movs	r3, #32
    27c8:	431a      	orrs	r2, r3
    27ca:	6022      	str	r2, [r4, #0]
    27cc:	2710      	movs	r7, #16
    27ce:	2d00      	cmp	r5, #0
    27d0:	d103      	bne.n	27da <_printf_i+0x106>
    27d2:	2320      	movs	r3, #32
    27d4:	6822      	ldr	r2, [r4, #0]
    27d6:	439a      	bics	r2, r3
    27d8:	6022      	str	r2, [r4, #0]
    27da:	1c23      	adds	r3, r4, #0
    27dc:	2200      	movs	r2, #0
    27de:	3343      	adds	r3, #67	; 0x43
    27e0:	701a      	strb	r2, [r3, #0]
    27e2:	e002      	b.n	27ea <_printf_i+0x116>
    27e4:	270a      	movs	r7, #10
    27e6:	4b45      	ldr	r3, [pc, #276]	; (28fc <_printf_i+0x228>)
    27e8:	9303      	str	r3, [sp, #12]
    27ea:	6863      	ldr	r3, [r4, #4]
    27ec:	60a3      	str	r3, [r4, #8]
    27ee:	2b00      	cmp	r3, #0
    27f0:	db03      	blt.n	27fa <_printf_i+0x126>
    27f2:	2204      	movs	r2, #4
    27f4:	6821      	ldr	r1, [r4, #0]
    27f6:	4391      	bics	r1, r2
    27f8:	6021      	str	r1, [r4, #0]
    27fa:	2d00      	cmp	r5, #0
    27fc:	d102      	bne.n	2804 <_printf_i+0x130>
    27fe:	9e04      	ldr	r6, [sp, #16]
    2800:	2b00      	cmp	r3, #0
    2802:	d00e      	beq.n	2822 <_printf_i+0x14e>
    2804:	9e04      	ldr	r6, [sp, #16]
    2806:	1c28      	adds	r0, r5, #0
    2808:	1c39      	adds	r1, r7, #0
    280a:	f7ff fa73 	bl	1cf4 <__aeabi_uidivmod>
    280e:	9b03      	ldr	r3, [sp, #12]
    2810:	3e01      	subs	r6, #1
    2812:	5c5b      	ldrb	r3, [r3, r1]
    2814:	1c28      	adds	r0, r5, #0
    2816:	7033      	strb	r3, [r6, #0]
    2818:	1c39      	adds	r1, r7, #0
    281a:	f7ff f9e5 	bl	1be8 <__aeabi_uidiv>
    281e:	1e05      	subs	r5, r0, #0
    2820:	d1f1      	bne.n	2806 <_printf_i+0x132>
    2822:	2f08      	cmp	r7, #8
    2824:	d109      	bne.n	283a <_printf_i+0x166>
    2826:	6823      	ldr	r3, [r4, #0]
    2828:	07db      	lsls	r3, r3, #31
    282a:	d506      	bpl.n	283a <_printf_i+0x166>
    282c:	6863      	ldr	r3, [r4, #4]
    282e:	6922      	ldr	r2, [r4, #16]
    2830:	4293      	cmp	r3, r2
    2832:	dc02      	bgt.n	283a <_printf_i+0x166>
    2834:	2330      	movs	r3, #48	; 0x30
    2836:	3e01      	subs	r6, #1
    2838:	7033      	strb	r3, [r6, #0]
    283a:	9b04      	ldr	r3, [sp, #16]
    283c:	1b9b      	subs	r3, r3, r6
    283e:	6123      	str	r3, [r4, #16]
    2840:	e02b      	b.n	289a <_printf_i+0x1c6>
    2842:	6809      	ldr	r1, [r1, #0]
    2844:	681a      	ldr	r2, [r3, #0]
    2846:	0608      	lsls	r0, r1, #24
    2848:	d407      	bmi.n	285a <_printf_i+0x186>
    284a:	0649      	lsls	r1, r1, #25
    284c:	d505      	bpl.n	285a <_printf_i+0x186>
    284e:	1d11      	adds	r1, r2, #4
    2850:	6019      	str	r1, [r3, #0]
    2852:	6813      	ldr	r3, [r2, #0]
    2854:	8aa2      	ldrh	r2, [r4, #20]
    2856:	801a      	strh	r2, [r3, #0]
    2858:	e004      	b.n	2864 <_printf_i+0x190>
    285a:	1d11      	adds	r1, r2, #4
    285c:	6019      	str	r1, [r3, #0]
    285e:	6813      	ldr	r3, [r2, #0]
    2860:	6962      	ldr	r2, [r4, #20]
    2862:	601a      	str	r2, [r3, #0]
    2864:	2300      	movs	r3, #0
    2866:	9e04      	ldr	r6, [sp, #16]
    2868:	6123      	str	r3, [r4, #16]
    286a:	e016      	b.n	289a <_printf_i+0x1c6>
    286c:	681a      	ldr	r2, [r3, #0]
    286e:	1d11      	adds	r1, r2, #4
    2870:	6019      	str	r1, [r3, #0]
    2872:	6816      	ldr	r6, [r2, #0]
    2874:	2100      	movs	r1, #0
    2876:	1c30      	adds	r0, r6, #0
    2878:	6862      	ldr	r2, [r4, #4]
    287a:	f000 f9ff 	bl	2c7c <memchr>
    287e:	2800      	cmp	r0, #0
    2880:	d001      	beq.n	2886 <_printf_i+0x1b2>
    2882:	1b80      	subs	r0, r0, r6
    2884:	6060      	str	r0, [r4, #4]
    2886:	6863      	ldr	r3, [r4, #4]
    2888:	e003      	b.n	2892 <_printf_i+0x1be>
    288a:	1c26      	adds	r6, r4, #0
    288c:	3642      	adds	r6, #66	; 0x42
    288e:	7032      	strb	r2, [r6, #0]
    2890:	2301      	movs	r3, #1
    2892:	6123      	str	r3, [r4, #16]
    2894:	2300      	movs	r3, #0
    2896:	9a04      	ldr	r2, [sp, #16]
    2898:	7013      	strb	r3, [r2, #0]
    289a:	9b07      	ldr	r3, [sp, #28]
    289c:	9805      	ldr	r0, [sp, #20]
    289e:	9300      	str	r3, [sp, #0]
    28a0:	1c21      	adds	r1, r4, #0
    28a2:	9b06      	ldr	r3, [sp, #24]
    28a4:	aa09      	add	r2, sp, #36	; 0x24
    28a6:	f7ff fea7 	bl	25f8 <_printf_common>
    28aa:	1c43      	adds	r3, r0, #1
    28ac:	d102      	bne.n	28b4 <_printf_i+0x1e0>
    28ae:	2001      	movs	r0, #1
    28b0:	4240      	negs	r0, r0
    28b2:	e021      	b.n	28f8 <_printf_i+0x224>
    28b4:	6923      	ldr	r3, [r4, #16]
    28b6:	9805      	ldr	r0, [sp, #20]
    28b8:	9906      	ldr	r1, [sp, #24]
    28ba:	1c32      	adds	r2, r6, #0
    28bc:	9d07      	ldr	r5, [sp, #28]
    28be:	47a8      	blx	r5
    28c0:	1c43      	adds	r3, r0, #1
    28c2:	d0f4      	beq.n	28ae <_printf_i+0x1da>
    28c4:	6823      	ldr	r3, [r4, #0]
    28c6:	079b      	lsls	r3, r3, #30
    28c8:	d405      	bmi.n	28d6 <_printf_i+0x202>
    28ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28cc:	68e0      	ldr	r0, [r4, #12]
    28ce:	4298      	cmp	r0, r3
    28d0:	da12      	bge.n	28f8 <_printf_i+0x224>
    28d2:	1c18      	adds	r0, r3, #0
    28d4:	e010      	b.n	28f8 <_printf_i+0x224>
    28d6:	2500      	movs	r5, #0
    28d8:	68e3      	ldr	r3, [r4, #12]
    28da:	9a09      	ldr	r2, [sp, #36]	; 0x24
    28dc:	1a9b      	subs	r3, r3, r2
    28de:	429d      	cmp	r5, r3
    28e0:	daf3      	bge.n	28ca <_printf_i+0x1f6>
    28e2:	1c22      	adds	r2, r4, #0
    28e4:	2301      	movs	r3, #1
    28e6:	9805      	ldr	r0, [sp, #20]
    28e8:	9906      	ldr	r1, [sp, #24]
    28ea:	3219      	adds	r2, #25
    28ec:	9e07      	ldr	r6, [sp, #28]
    28ee:	47b0      	blx	r6
    28f0:	1c43      	adds	r3, r0, #1
    28f2:	d0dc      	beq.n	28ae <_printf_i+0x1da>
    28f4:	3501      	adds	r5, #1
    28f6:	e7ef      	b.n	28d8 <_printf_i+0x204>
    28f8:	b00b      	add	sp, #44	; 0x2c
    28fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28fc:	00002ec1 	.word	0x00002ec1
    2900:	00002ed2 	.word	0x00002ed2

00002904 <_sbrk_r>:
    2904:	b538      	push	{r3, r4, r5, lr}
    2906:	2300      	movs	r3, #0
    2908:	4c06      	ldr	r4, [pc, #24]	; (2924 <_sbrk_r+0x20>)
    290a:	1c05      	adds	r5, r0, #0
    290c:	1c08      	adds	r0, r1, #0
    290e:	6023      	str	r3, [r4, #0]
    2910:	f7ff f874 	bl	19fc <_sbrk>
    2914:	1c43      	adds	r3, r0, #1
    2916:	d103      	bne.n	2920 <_sbrk_r+0x1c>
    2918:	6823      	ldr	r3, [r4, #0]
    291a:	2b00      	cmp	r3, #0
    291c:	d000      	beq.n	2920 <_sbrk_r+0x1c>
    291e:	602b      	str	r3, [r5, #0]
    2920:	bd38      	pop	{r3, r4, r5, pc}
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	200001d8 	.word	0x200001d8

00002928 <__sread>:
    2928:	b538      	push	{r3, r4, r5, lr}
    292a:	1c0c      	adds	r4, r1, #0
    292c:	250e      	movs	r5, #14
    292e:	5f49      	ldrsh	r1, [r1, r5]
    2930:	f000 f9b0 	bl	2c94 <_read_r>
    2934:	2800      	cmp	r0, #0
    2936:	db03      	blt.n	2940 <__sread+0x18>
    2938:	6d63      	ldr	r3, [r4, #84]	; 0x54
    293a:	181b      	adds	r3, r3, r0
    293c:	6563      	str	r3, [r4, #84]	; 0x54
    293e:	e003      	b.n	2948 <__sread+0x20>
    2940:	89a2      	ldrh	r2, [r4, #12]
    2942:	4b02      	ldr	r3, [pc, #8]	; (294c <__sread+0x24>)
    2944:	4013      	ands	r3, r2
    2946:	81a3      	strh	r3, [r4, #12]
    2948:	bd38      	pop	{r3, r4, r5, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	ffffefff 	.word	0xffffefff

00002950 <__swrite>:
    2950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2952:	1c1e      	adds	r6, r3, #0
    2954:	898b      	ldrh	r3, [r1, #12]
    2956:	1c05      	adds	r5, r0, #0
    2958:	1c0c      	adds	r4, r1, #0
    295a:	1c17      	adds	r7, r2, #0
    295c:	05db      	lsls	r3, r3, #23
    295e:	d505      	bpl.n	296c <__swrite+0x1c>
    2960:	230e      	movs	r3, #14
    2962:	5ec9      	ldrsh	r1, [r1, r3]
    2964:	2200      	movs	r2, #0
    2966:	2302      	movs	r3, #2
    2968:	f000 f91c 	bl	2ba4 <_lseek_r>
    296c:	89a2      	ldrh	r2, [r4, #12]
    296e:	4b05      	ldr	r3, [pc, #20]	; (2984 <__swrite+0x34>)
    2970:	1c28      	adds	r0, r5, #0
    2972:	4013      	ands	r3, r2
    2974:	81a3      	strh	r3, [r4, #12]
    2976:	1c3a      	adds	r2, r7, #0
    2978:	230e      	movs	r3, #14
    297a:	5ee1      	ldrsh	r1, [r4, r3]
    297c:	1c33      	adds	r3, r6, #0
    297e:	f000 f877 	bl	2a70 <_write_r>
    2982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2984:	ffffefff 	.word	0xffffefff

00002988 <__sseek>:
    2988:	b538      	push	{r3, r4, r5, lr}
    298a:	1c0c      	adds	r4, r1, #0
    298c:	250e      	movs	r5, #14
    298e:	5f49      	ldrsh	r1, [r1, r5]
    2990:	f000 f908 	bl	2ba4 <_lseek_r>
    2994:	89a3      	ldrh	r3, [r4, #12]
    2996:	1c42      	adds	r2, r0, #1
    2998:	d103      	bne.n	29a2 <__sseek+0x1a>
    299a:	4a05      	ldr	r2, [pc, #20]	; (29b0 <__sseek+0x28>)
    299c:	4013      	ands	r3, r2
    299e:	81a3      	strh	r3, [r4, #12]
    29a0:	e004      	b.n	29ac <__sseek+0x24>
    29a2:	2280      	movs	r2, #128	; 0x80
    29a4:	0152      	lsls	r2, r2, #5
    29a6:	4313      	orrs	r3, r2
    29a8:	81a3      	strh	r3, [r4, #12]
    29aa:	6560      	str	r0, [r4, #84]	; 0x54
    29ac:	bd38      	pop	{r3, r4, r5, pc}
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	ffffefff 	.word	0xffffefff

000029b4 <__sclose>:
    29b4:	b508      	push	{r3, lr}
    29b6:	230e      	movs	r3, #14
    29b8:	5ec9      	ldrsh	r1, [r1, r3]
    29ba:	f000 f8e1 	bl	2b80 <_close_r>
    29be:	bd08      	pop	{r3, pc}

000029c0 <__swbuf_r>:
    29c0:	b570      	push	{r4, r5, r6, lr}
    29c2:	1c05      	adds	r5, r0, #0
    29c4:	1c0e      	adds	r6, r1, #0
    29c6:	1c14      	adds	r4, r2, #0
    29c8:	2800      	cmp	r0, #0
    29ca:	d004      	beq.n	29d6 <__swbuf_r+0x16>
    29cc:	6983      	ldr	r3, [r0, #24]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d101      	bne.n	29d6 <__swbuf_r+0x16>
    29d2:	f7ff fb9f 	bl	2114 <__sinit>
    29d6:	4b23      	ldr	r3, [pc, #140]	; (2a64 <__swbuf_r+0xa4>)
    29d8:	429c      	cmp	r4, r3
    29da:	d101      	bne.n	29e0 <__swbuf_r+0x20>
    29dc:	686c      	ldr	r4, [r5, #4]
    29de:	e008      	b.n	29f2 <__swbuf_r+0x32>
    29e0:	4b21      	ldr	r3, [pc, #132]	; (2a68 <__swbuf_r+0xa8>)
    29e2:	429c      	cmp	r4, r3
    29e4:	d101      	bne.n	29ea <__swbuf_r+0x2a>
    29e6:	68ac      	ldr	r4, [r5, #8]
    29e8:	e003      	b.n	29f2 <__swbuf_r+0x32>
    29ea:	4b20      	ldr	r3, [pc, #128]	; (2a6c <__swbuf_r+0xac>)
    29ec:	429c      	cmp	r4, r3
    29ee:	d100      	bne.n	29f2 <__swbuf_r+0x32>
    29f0:	68ec      	ldr	r4, [r5, #12]
    29f2:	69a3      	ldr	r3, [r4, #24]
    29f4:	60a3      	str	r3, [r4, #8]
    29f6:	89a3      	ldrh	r3, [r4, #12]
    29f8:	071b      	lsls	r3, r3, #28
    29fa:	d50a      	bpl.n	2a12 <__swbuf_r+0x52>
    29fc:	6923      	ldr	r3, [r4, #16]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d007      	beq.n	2a12 <__swbuf_r+0x52>
    2a02:	6823      	ldr	r3, [r4, #0]
    2a04:	6922      	ldr	r2, [r4, #16]
    2a06:	b2f6      	uxtb	r6, r6
    2a08:	1a98      	subs	r0, r3, r2
    2a0a:	6963      	ldr	r3, [r4, #20]
    2a0c:	4298      	cmp	r0, r3
    2a0e:	db0f      	blt.n	2a30 <__swbuf_r+0x70>
    2a10:	e008      	b.n	2a24 <__swbuf_r+0x64>
    2a12:	1c28      	adds	r0, r5, #0
    2a14:	1c21      	adds	r1, r4, #0
    2a16:	f000 f83f 	bl	2a98 <__swsetup_r>
    2a1a:	2800      	cmp	r0, #0
    2a1c:	d0f1      	beq.n	2a02 <__swbuf_r+0x42>
    2a1e:	2001      	movs	r0, #1
    2a20:	4240      	negs	r0, r0
    2a22:	e01d      	b.n	2a60 <__swbuf_r+0xa0>
    2a24:	1c28      	adds	r0, r5, #0
    2a26:	1c21      	adds	r1, r4, #0
    2a28:	f7ff fb06 	bl	2038 <_fflush_r>
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d1f6      	bne.n	2a1e <__swbuf_r+0x5e>
    2a30:	68a3      	ldr	r3, [r4, #8]
    2a32:	3001      	adds	r0, #1
    2a34:	3b01      	subs	r3, #1
    2a36:	60a3      	str	r3, [r4, #8]
    2a38:	6823      	ldr	r3, [r4, #0]
    2a3a:	1c5a      	adds	r2, r3, #1
    2a3c:	6022      	str	r2, [r4, #0]
    2a3e:	701e      	strb	r6, [r3, #0]
    2a40:	6963      	ldr	r3, [r4, #20]
    2a42:	4298      	cmp	r0, r3
    2a44:	d005      	beq.n	2a52 <__swbuf_r+0x92>
    2a46:	89a3      	ldrh	r3, [r4, #12]
    2a48:	1c30      	adds	r0, r6, #0
    2a4a:	07db      	lsls	r3, r3, #31
    2a4c:	d508      	bpl.n	2a60 <__swbuf_r+0xa0>
    2a4e:	2e0a      	cmp	r6, #10
    2a50:	d106      	bne.n	2a60 <__swbuf_r+0xa0>
    2a52:	1c28      	adds	r0, r5, #0
    2a54:	1c21      	adds	r1, r4, #0
    2a56:	f7ff faef 	bl	2038 <_fflush_r>
    2a5a:	2800      	cmp	r0, #0
    2a5c:	d1df      	bne.n	2a1e <__swbuf_r+0x5e>
    2a5e:	1c30      	adds	r0, r6, #0
    2a60:	bd70      	pop	{r4, r5, r6, pc}
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	00002e50 	.word	0x00002e50
    2a68:	00002e70 	.word	0x00002e70
    2a6c:	00002e90 	.word	0x00002e90

00002a70 <_write_r>:
    2a70:	b538      	push	{r3, r4, r5, lr}
    2a72:	1c05      	adds	r5, r0, #0
    2a74:	2000      	movs	r0, #0
    2a76:	4c07      	ldr	r4, [pc, #28]	; (2a94 <_write_r+0x24>)
    2a78:	6020      	str	r0, [r4, #0]
    2a7a:	1c08      	adds	r0, r1, #0
    2a7c:	1c11      	adds	r1, r2, #0
    2a7e:	1c1a      	adds	r2, r3, #0
    2a80:	f7fd fd9e 	bl	5c0 <_write>
    2a84:	1c43      	adds	r3, r0, #1
    2a86:	d103      	bne.n	2a90 <_write_r+0x20>
    2a88:	6823      	ldr	r3, [r4, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d000      	beq.n	2a90 <_write_r+0x20>
    2a8e:	602b      	str	r3, [r5, #0]
    2a90:	bd38      	pop	{r3, r4, r5, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	200001d8 	.word	0x200001d8

00002a98 <__swsetup_r>:
    2a98:	4b35      	ldr	r3, [pc, #212]	; (2b70 <__swsetup_r+0xd8>)
    2a9a:	b570      	push	{r4, r5, r6, lr}
    2a9c:	681d      	ldr	r5, [r3, #0]
    2a9e:	1c06      	adds	r6, r0, #0
    2aa0:	1c0c      	adds	r4, r1, #0
    2aa2:	2d00      	cmp	r5, #0
    2aa4:	d005      	beq.n	2ab2 <__swsetup_r+0x1a>
    2aa6:	69ab      	ldr	r3, [r5, #24]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d102      	bne.n	2ab2 <__swsetup_r+0x1a>
    2aac:	1c28      	adds	r0, r5, #0
    2aae:	f7ff fb31 	bl	2114 <__sinit>
    2ab2:	4b30      	ldr	r3, [pc, #192]	; (2b74 <__swsetup_r+0xdc>)
    2ab4:	429c      	cmp	r4, r3
    2ab6:	d101      	bne.n	2abc <__swsetup_r+0x24>
    2ab8:	686c      	ldr	r4, [r5, #4]
    2aba:	e008      	b.n	2ace <__swsetup_r+0x36>
    2abc:	4b2e      	ldr	r3, [pc, #184]	; (2b78 <__swsetup_r+0xe0>)
    2abe:	429c      	cmp	r4, r3
    2ac0:	d101      	bne.n	2ac6 <__swsetup_r+0x2e>
    2ac2:	68ac      	ldr	r4, [r5, #8]
    2ac4:	e003      	b.n	2ace <__swsetup_r+0x36>
    2ac6:	4b2d      	ldr	r3, [pc, #180]	; (2b7c <__swsetup_r+0xe4>)
    2ac8:	429c      	cmp	r4, r3
    2aca:	d100      	bne.n	2ace <__swsetup_r+0x36>
    2acc:	68ec      	ldr	r4, [r5, #12]
    2ace:	89a3      	ldrh	r3, [r4, #12]
    2ad0:	b29a      	uxth	r2, r3
    2ad2:	0711      	lsls	r1, r2, #28
    2ad4:	d423      	bmi.n	2b1e <__swsetup_r+0x86>
    2ad6:	06d1      	lsls	r1, r2, #27
    2ad8:	d407      	bmi.n	2aea <__swsetup_r+0x52>
    2ada:	2209      	movs	r2, #9
    2adc:	2001      	movs	r0, #1
    2ade:	6032      	str	r2, [r6, #0]
    2ae0:	3237      	adds	r2, #55	; 0x37
    2ae2:	4313      	orrs	r3, r2
    2ae4:	81a3      	strh	r3, [r4, #12]
    2ae6:	4240      	negs	r0, r0
    2ae8:	e040      	b.n	2b6c <__swsetup_r+0xd4>
    2aea:	0753      	lsls	r3, r2, #29
    2aec:	d513      	bpl.n	2b16 <__swsetup_r+0x7e>
    2aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2af0:	2900      	cmp	r1, #0
    2af2:	d008      	beq.n	2b06 <__swsetup_r+0x6e>
    2af4:	1c23      	adds	r3, r4, #0
    2af6:	3344      	adds	r3, #68	; 0x44
    2af8:	4299      	cmp	r1, r3
    2afa:	d002      	beq.n	2b02 <__swsetup_r+0x6a>
    2afc:	1c30      	adds	r0, r6, #0
    2afe:	f7ff fba5 	bl	224c <_free_r>
    2b02:	2300      	movs	r3, #0
    2b04:	6363      	str	r3, [r4, #52]	; 0x34
    2b06:	2224      	movs	r2, #36	; 0x24
    2b08:	89a3      	ldrh	r3, [r4, #12]
    2b0a:	4393      	bics	r3, r2
    2b0c:	81a3      	strh	r3, [r4, #12]
    2b0e:	2300      	movs	r3, #0
    2b10:	6063      	str	r3, [r4, #4]
    2b12:	6923      	ldr	r3, [r4, #16]
    2b14:	6023      	str	r3, [r4, #0]
    2b16:	2208      	movs	r2, #8
    2b18:	89a3      	ldrh	r3, [r4, #12]
    2b1a:	4313      	orrs	r3, r2
    2b1c:	81a3      	strh	r3, [r4, #12]
    2b1e:	6923      	ldr	r3, [r4, #16]
    2b20:	2b00      	cmp	r3, #0
    2b22:	d10b      	bne.n	2b3c <__swsetup_r+0xa4>
    2b24:	23a0      	movs	r3, #160	; 0xa0
    2b26:	89a2      	ldrh	r2, [r4, #12]
    2b28:	009b      	lsls	r3, r3, #2
    2b2a:	4013      	ands	r3, r2
    2b2c:	2280      	movs	r2, #128	; 0x80
    2b2e:	0092      	lsls	r2, r2, #2
    2b30:	4293      	cmp	r3, r2
    2b32:	d003      	beq.n	2b3c <__swsetup_r+0xa4>
    2b34:	1c30      	adds	r0, r6, #0
    2b36:	1c21      	adds	r1, r4, #0
    2b38:	f000 f848 	bl	2bcc <__smakebuf_r>
    2b3c:	2301      	movs	r3, #1
    2b3e:	89a2      	ldrh	r2, [r4, #12]
    2b40:	4013      	ands	r3, r2
    2b42:	d005      	beq.n	2b50 <__swsetup_r+0xb8>
    2b44:	2300      	movs	r3, #0
    2b46:	60a3      	str	r3, [r4, #8]
    2b48:	6963      	ldr	r3, [r4, #20]
    2b4a:	425b      	negs	r3, r3
    2b4c:	61a3      	str	r3, [r4, #24]
    2b4e:	e003      	b.n	2b58 <__swsetup_r+0xc0>
    2b50:	0791      	lsls	r1, r2, #30
    2b52:	d400      	bmi.n	2b56 <__swsetup_r+0xbe>
    2b54:	6963      	ldr	r3, [r4, #20]
    2b56:	60a3      	str	r3, [r4, #8]
    2b58:	2000      	movs	r0, #0
    2b5a:	6923      	ldr	r3, [r4, #16]
    2b5c:	4283      	cmp	r3, r0
    2b5e:	d105      	bne.n	2b6c <__swsetup_r+0xd4>
    2b60:	0613      	lsls	r3, r2, #24
    2b62:	d503      	bpl.n	2b6c <__swsetup_r+0xd4>
    2b64:	2340      	movs	r3, #64	; 0x40
    2b66:	431a      	orrs	r2, r3
    2b68:	81a2      	strh	r2, [r4, #12]
    2b6a:	3801      	subs	r0, #1
    2b6c:	bd70      	pop	{r4, r5, r6, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	2000006c 	.word	0x2000006c
    2b74:	00002e50 	.word	0x00002e50
    2b78:	00002e70 	.word	0x00002e70
    2b7c:	00002e90 	.word	0x00002e90

00002b80 <_close_r>:
    2b80:	b538      	push	{r3, r4, r5, lr}
    2b82:	2300      	movs	r3, #0
    2b84:	4c06      	ldr	r4, [pc, #24]	; (2ba0 <_close_r+0x20>)
    2b86:	1c05      	adds	r5, r0, #0
    2b88:	1c08      	adds	r0, r1, #0
    2b8a:	6023      	str	r3, [r4, #0]
    2b8c:	f7fe ff48 	bl	1a20 <_close>
    2b90:	1c43      	adds	r3, r0, #1
    2b92:	d103      	bne.n	2b9c <_close_r+0x1c>
    2b94:	6823      	ldr	r3, [r4, #0]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d000      	beq.n	2b9c <_close_r+0x1c>
    2b9a:	602b      	str	r3, [r5, #0]
    2b9c:	bd38      	pop	{r3, r4, r5, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	200001d8 	.word	0x200001d8

00002ba4 <_lseek_r>:
    2ba4:	b538      	push	{r3, r4, r5, lr}
    2ba6:	1c05      	adds	r5, r0, #0
    2ba8:	2000      	movs	r0, #0
    2baa:	4c07      	ldr	r4, [pc, #28]	; (2bc8 <_lseek_r+0x24>)
    2bac:	6020      	str	r0, [r4, #0]
    2bae:	1c08      	adds	r0, r1, #0
    2bb0:	1c11      	adds	r1, r2, #0
    2bb2:	1c1a      	adds	r2, r3, #0
    2bb4:	f7fe ff40 	bl	1a38 <_lseek>
    2bb8:	1c43      	adds	r3, r0, #1
    2bba:	d103      	bne.n	2bc4 <_lseek_r+0x20>
    2bbc:	6823      	ldr	r3, [r4, #0]
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	d000      	beq.n	2bc4 <_lseek_r+0x20>
    2bc2:	602b      	str	r3, [r5, #0]
    2bc4:	bd38      	pop	{r3, r4, r5, pc}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	200001d8 	.word	0x200001d8

00002bcc <__smakebuf_r>:
    2bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bce:	898b      	ldrh	r3, [r1, #12]
    2bd0:	b091      	sub	sp, #68	; 0x44
    2bd2:	079b      	lsls	r3, r3, #30
    2bd4:	d506      	bpl.n	2be4 <__smakebuf_r+0x18>
    2bd6:	1c0b      	adds	r3, r1, #0
    2bd8:	3347      	adds	r3, #71	; 0x47
    2bda:	600b      	str	r3, [r1, #0]
    2bdc:	610b      	str	r3, [r1, #16]
    2bde:	2301      	movs	r3, #1
    2be0:	614b      	str	r3, [r1, #20]
    2be2:	e045      	b.n	2c70 <__smakebuf_r+0xa4>
    2be4:	1c0c      	adds	r4, r1, #0
    2be6:	230e      	movs	r3, #14
    2be8:	5ec9      	ldrsh	r1, [r1, r3]
    2bea:	1c06      	adds	r6, r0, #0
    2bec:	2900      	cmp	r1, #0
    2bee:	da04      	bge.n	2bfa <__smakebuf_r+0x2e>
    2bf0:	2380      	movs	r3, #128	; 0x80
    2bf2:	89a5      	ldrh	r5, [r4, #12]
    2bf4:	401d      	ands	r5, r3
    2bf6:	d110      	bne.n	2c1a <__smakebuf_r+0x4e>
    2bf8:	e00c      	b.n	2c14 <__smakebuf_r+0x48>
    2bfa:	aa01      	add	r2, sp, #4
    2bfc:	f000 f85e 	bl	2cbc <_fstat_r>
    2c00:	2800      	cmp	r0, #0
    2c02:	dbf5      	blt.n	2bf0 <__smakebuf_r+0x24>
    2c04:	23f0      	movs	r3, #240	; 0xf0
    2c06:	9d02      	ldr	r5, [sp, #8]
    2c08:	021b      	lsls	r3, r3, #8
    2c0a:	401d      	ands	r5, r3
    2c0c:	4b19      	ldr	r3, [pc, #100]	; (2c74 <__smakebuf_r+0xa8>)
    2c0e:	18ed      	adds	r5, r5, r3
    2c10:	426b      	negs	r3, r5
    2c12:	415d      	adcs	r5, r3
    2c14:	2780      	movs	r7, #128	; 0x80
    2c16:	00ff      	lsls	r7, r7, #3
    2c18:	e001      	b.n	2c1e <__smakebuf_r+0x52>
    2c1a:	2500      	movs	r5, #0
    2c1c:	2740      	movs	r7, #64	; 0x40
    2c1e:	1c30      	adds	r0, r6, #0
    2c20:	1c39      	adds	r1, r7, #0
    2c22:	f7ff fb59 	bl	22d8 <_malloc_r>
    2c26:	2800      	cmp	r0, #0
    2c28:	d10c      	bne.n	2c44 <__smakebuf_r+0x78>
    2c2a:	89a3      	ldrh	r3, [r4, #12]
    2c2c:	059a      	lsls	r2, r3, #22
    2c2e:	d41f      	bmi.n	2c70 <__smakebuf_r+0xa4>
    2c30:	2202      	movs	r2, #2
    2c32:	4313      	orrs	r3, r2
    2c34:	81a3      	strh	r3, [r4, #12]
    2c36:	1c23      	adds	r3, r4, #0
    2c38:	3347      	adds	r3, #71	; 0x47
    2c3a:	6023      	str	r3, [r4, #0]
    2c3c:	6123      	str	r3, [r4, #16]
    2c3e:	2301      	movs	r3, #1
    2c40:	6163      	str	r3, [r4, #20]
    2c42:	e015      	b.n	2c70 <__smakebuf_r+0xa4>
    2c44:	2280      	movs	r2, #128	; 0x80
    2c46:	4b0c      	ldr	r3, [pc, #48]	; (2c78 <__smakebuf_r+0xac>)
    2c48:	62b3      	str	r3, [r6, #40]	; 0x28
    2c4a:	89a3      	ldrh	r3, [r4, #12]
    2c4c:	6020      	str	r0, [r4, #0]
    2c4e:	4313      	orrs	r3, r2
    2c50:	81a3      	strh	r3, [r4, #12]
    2c52:	6120      	str	r0, [r4, #16]
    2c54:	6167      	str	r7, [r4, #20]
    2c56:	2d00      	cmp	r5, #0
    2c58:	d00a      	beq.n	2c70 <__smakebuf_r+0xa4>
    2c5a:	230e      	movs	r3, #14
    2c5c:	5ee1      	ldrsh	r1, [r4, r3]
    2c5e:	1c30      	adds	r0, r6, #0
    2c60:	f000 f83e 	bl	2ce0 <_isatty_r>
    2c64:	2800      	cmp	r0, #0
    2c66:	d003      	beq.n	2c70 <__smakebuf_r+0xa4>
    2c68:	2201      	movs	r2, #1
    2c6a:	89a3      	ldrh	r3, [r4, #12]
    2c6c:	4313      	orrs	r3, r2
    2c6e:	81a3      	strh	r3, [r4, #12]
    2c70:	b011      	add	sp, #68	; 0x44
    2c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c74:	ffffe000 	.word	0xffffe000
    2c78:	00002091 	.word	0x00002091

00002c7c <memchr>:
    2c7c:	b2c9      	uxtb	r1, r1
    2c7e:	1882      	adds	r2, r0, r2
    2c80:	4290      	cmp	r0, r2
    2c82:	d004      	beq.n	2c8e <memchr+0x12>
    2c84:	7803      	ldrb	r3, [r0, #0]
    2c86:	428b      	cmp	r3, r1
    2c88:	d002      	beq.n	2c90 <memchr+0x14>
    2c8a:	3001      	adds	r0, #1
    2c8c:	e7f8      	b.n	2c80 <memchr+0x4>
    2c8e:	2000      	movs	r0, #0
    2c90:	4770      	bx	lr
	...

00002c94 <_read_r>:
    2c94:	b538      	push	{r3, r4, r5, lr}
    2c96:	1c05      	adds	r5, r0, #0
    2c98:	2000      	movs	r0, #0
    2c9a:	4c07      	ldr	r4, [pc, #28]	; (2cb8 <_read_r+0x24>)
    2c9c:	6020      	str	r0, [r4, #0]
    2c9e:	1c08      	adds	r0, r1, #0
    2ca0:	1c11      	adds	r1, r2, #0
    2ca2:	1c1a      	adds	r2, r3, #0
    2ca4:	f7fd fc6a 	bl	57c <_read>
    2ca8:	1c43      	adds	r3, r0, #1
    2caa:	d103      	bne.n	2cb4 <_read_r+0x20>
    2cac:	6823      	ldr	r3, [r4, #0]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d000      	beq.n	2cb4 <_read_r+0x20>
    2cb2:	602b      	str	r3, [r5, #0]
    2cb4:	bd38      	pop	{r3, r4, r5, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	200001d8 	.word	0x200001d8

00002cbc <_fstat_r>:
    2cbc:	b538      	push	{r3, r4, r5, lr}
    2cbe:	2300      	movs	r3, #0
    2cc0:	4c06      	ldr	r4, [pc, #24]	; (2cdc <_fstat_r+0x20>)
    2cc2:	1c05      	adds	r5, r0, #0
    2cc4:	1c08      	adds	r0, r1, #0
    2cc6:	1c11      	adds	r1, r2, #0
    2cc8:	6023      	str	r3, [r4, #0]
    2cca:	f7fe fead 	bl	1a28 <_fstat>
    2cce:	1c43      	adds	r3, r0, #1
    2cd0:	d103      	bne.n	2cda <_fstat_r+0x1e>
    2cd2:	6823      	ldr	r3, [r4, #0]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	d000      	beq.n	2cda <_fstat_r+0x1e>
    2cd8:	602b      	str	r3, [r5, #0]
    2cda:	bd38      	pop	{r3, r4, r5, pc}
    2cdc:	200001d8 	.word	0x200001d8

00002ce0 <_isatty_r>:
    2ce0:	b538      	push	{r3, r4, r5, lr}
    2ce2:	2300      	movs	r3, #0
    2ce4:	4c06      	ldr	r4, [pc, #24]	; (2d00 <_isatty_r+0x20>)
    2ce6:	1c05      	adds	r5, r0, #0
    2ce8:	1c08      	adds	r0, r1, #0
    2cea:	6023      	str	r3, [r4, #0]
    2cec:	f7fe fea2 	bl	1a34 <_isatty>
    2cf0:	1c43      	adds	r3, r0, #1
    2cf2:	d103      	bne.n	2cfc <_isatty_r+0x1c>
    2cf4:	6823      	ldr	r3, [r4, #0]
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d000      	beq.n	2cfc <_isatty_r+0x1c>
    2cfa:	602b      	str	r3, [r5, #0]
    2cfc:	bd38      	pop	{r3, r4, r5, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	200001d8 	.word	0x200001d8
    2d04:	42000800 	.word	0x42000800
    2d08:	42000c00 	.word	0x42000c00
    2d0c:	42001000 	.word	0x42001000
    2d10:	42001400 	.word	0x42001400
    2d14:	42001800 	.word	0x42001800
    2d18:	42001c00 	.word	0x42001c00
    2d1c:	0c0b0a09 	.word	0x0c0b0a09
    2d20:	00000e0d 	.word	0x00000e0d

00002d24 <_tcc_intflag>:
    2d24:	00000001 00000002 00000004 00000008     ................
    2d34:	00001000 00002000 00004000 00008000     ..... ...@......
    2d44:	00010000 00020000 00040000 00080000     ................
    2d54:	0000105a 00001056 00001056 000010b6     Z...V...V.......
    2d64:	000010b6 00001070 00001060 00001076     ....p...`...v...
    2d74:	000010a4 00001324 00001304 00001304     ....$...........
    2d84:	00001390 00001316 00001332 00001308     ........2.......
    2d94:	00001340 00001380 00000001 00000000     @...............
	...
    2dac:	00000001 00000000 00000000 00000000     ................
    2dbc:	00000001 00000001 00000001 00000000     ................
    2dcc:	00000000 00000001 00000001 00000001     ................
    2ddc:	00000000 00000001 00000001 00000001     ................
    2dec:	00000001 61786548 3025203a 420a7834     ....Hexa: %04x.B
    2dfc:	203a6e69 00000000 71657246 636e6575     in: ....Frequenc
    2e0c:	25203a79 2d202075 202d2d2d 79747544     y: %u  ---- Duty
    2e1c:	63796320 203a656c 000a7525 00000031      cycle: %u..1...
    2e2c:	00000030 746e4920 75727265 73207370     0... Interrups s
    2e3c:	65746174 7325203a 00000020 00000043     tate: %s ...C...

00002e4c <_global_impure_ptr>:
    2e4c:	2000000c                                ... 

00002e50 <__sf_fake_stdin>:
	...

00002e70 <__sf_fake_stdout>:
	...

00002e90 <__sf_fake_stderr>:
	...
    2eb0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2ec0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2ed0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2ee0:	00006665                                ef..

00002ee4 <_init>:
    2ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2eea:	bc08      	pop	{r3}
    2eec:	469e      	mov	lr, r3
    2eee:	4770      	bx	lr

00002ef0 <__init_array_start>:
    2ef0:	000000dd 	.word	0x000000dd

00002ef4 <_fini>:
    2ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ef6:	46c0      	nop			; (mov r8, r8)
    2ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2efa:	bc08      	pop	{r3}
    2efc:	469e      	mov	lr, r3
    2efe:	4770      	bx	lr

00002f00 <__fini_array_start>:
    2f00:	000000b5 	.word	0x000000b5
