
Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050e4  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000174  20000000  000050e4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000188  20000174  00005258  00010174  2**2
                  ALLOC
  3 .stack        00002004  200002fc  000053e0  00010174  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010174  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001019c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023dcc  00000000  00000000  000101f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e7e  00000000  00000000  00033fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004a96  00000000  00000000  00036e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000548  00000000  00000000  0003b8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000540  00000000  00000000  0003be1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018d0d  00000000  00000000  0003c35f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ca87  00000000  00000000  0005506c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008477a  00000000  00000000  00061af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016e8  00000000  00000000  000e6270  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002300 	.word	0x20002300
       4:	0000193d 	.word	0x0000193d
       8:	00001939 	.word	0x00001939
       c:	00001939 	.word	0x00001939
	...
      2c:	00001939 	.word	0x00001939
	...
      38:	00001939 	.word	0x00001939
      3c:	00001939 	.word	0x00001939
      40:	00001939 	.word	0x00001939
      44:	00001939 	.word	0x00001939
      48:	00001939 	.word	0x00001939
      4c:	00001939 	.word	0x00001939
      50:	00001939 	.word	0x00001939
      54:	00001939 	.word	0x00001939
      58:	00001939 	.word	0x00001939
      5c:	00001939 	.word	0x00001939
      60:	00001939 	.word	0x00001939
      64:	00000eb9 	.word	0x00000eb9
      68:	00000ec9 	.word	0x00000ec9
      6c:	00000ed9 	.word	0x00000ed9
      70:	00000ee9 	.word	0x00000ee9
      74:	00000ef9 	.word	0x00000ef9
      78:	00000f09 	.word	0x00000f09
      7c:	00000f61 	.word	0x00000f61
      80:	00000f71 	.word	0x00000f71
      84:	00000f81 	.word	0x00000f81
      88:	00001939 	.word	0x00001939
      8c:	00001939 	.word	0x00001939
      90:	00001939 	.word	0x00001939
	...
      9c:	00001939 	.word	0x00001939
      a0:	00001939 	.word	0x00001939
      a4:	00000000 	.word	0x00000000
      a8:	00001939 	.word	0x00001939
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	000050e4 	.word	0x000050e4

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	000050e4 	.word	0x000050e4
     108:	20000178 	.word	0x20000178
     10c:	000050e4 	.word	0x000050e4
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
	cycles_per_ms /= 1000;
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
}
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	000016c9 	.word	0x000016c9
     140:	00001e9d 	.word	0x00001e9d
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     150:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_us+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     158:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
	while (n--) {
     15e:	e006      	b.n	16e <delay_cycles_us+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_us+0x1e>
		SysTick->LOAD = n;
     164:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     166:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_us+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_us+0x10>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
	}
}
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000000 	.word	0x20000000
     178:	e000e010 	.word	0xe000e010

0000017c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     17c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <delay_cycles_ms+0x24>)
     180:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     182:	4a08      	ldr	r2, [pc, #32]	; (1a4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     184:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     186:	2180      	movs	r1, #128	; 0x80
     188:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     18a:	e006      	b.n	19a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     18c:	2c00      	cmp	r4, #0
     18e:	d004      	beq.n	19a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     190:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     192:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     194:	6813      	ldr	r3, [r2, #0]
     196:	420b      	tst	r3, r1
     198:	d0fc      	beq.n	194 <delay_cycles_ms+0x18>
     19a:	3801      	subs	r0, #1
     19c:	d2f6      	bcs.n	18c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     19e:	bd30      	pop	{r4, r5, pc}
     1a0:	20000004 	.word	0x20000004
     1a4:	e000e010 	.word	0xe000e010

000001a8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     1a8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1aa:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1ac:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     1ae:	4281      	cmp	r1, r0
     1b0:	d30c      	bcc.n	1cc <_sercom_get_sync_baud_val+0x24>
     1b2:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     1b4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     1b6:	3301      	adds	r3, #1
     1b8:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     1ba:	4288      	cmp	r0, r1
     1bc:	d9fa      	bls.n	1b4 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     1be:	3b01      	subs	r3, #1
     1c0:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1c2:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     1c4:	2bff      	cmp	r3, #255	; 0xff
     1c6:	d801      	bhi.n	1cc <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     1c8:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     1ca:	2400      	movs	r4, #0
	}
}
     1cc:	1c20      	adds	r0, r4, #0
     1ce:	bd10      	pop	{r4, pc}

000001d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1d2:	465f      	mov	r7, fp
     1d4:	4656      	mov	r6, sl
     1d6:	464d      	mov	r5, r9
     1d8:	4644      	mov	r4, r8
     1da:	b4f0      	push	{r4, r5, r6, r7}
     1dc:	b089      	sub	sp, #36	; 0x24
     1de:	1c1c      	adds	r4, r3, #0
     1e0:	ab12      	add	r3, sp, #72	; 0x48
     1e2:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     1e4:	1c06      	adds	r6, r0, #0
     1e6:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1e8:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     1ea:	428e      	cmp	r6, r1
     1ec:	d900      	bls.n	1f0 <_sercom_get_async_baud_val+0x20>
     1ee:	e0c7      	b.n	380 <_sercom_get_async_baud_val+0x1b0>
     1f0:	1c25      	adds	r5, r4, #0
     1f2:	9207      	str	r2, [sp, #28]
     1f4:	1c0c      	adds	r4, r1, #0
     1f6:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     1f8:	2d00      	cmp	r5, #0
     1fa:	d151      	bne.n	2a0 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     1fc:	1c18      	adds	r0, r3, #0
     1fe:	2100      	movs	r1, #0
     200:	2300      	movs	r3, #0
     202:	4d63      	ldr	r5, [pc, #396]	; (390 <_sercom_get_async_baud_val+0x1c0>)
     204:	47a8      	blx	r5
     206:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     208:	1c26      	adds	r6, r4, #0
     20a:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     20c:	2300      	movs	r3, #0
     20e:	2400      	movs	r4, #0
     210:	9302      	str	r3, [sp, #8]
     212:	9403      	str	r4, [sp, #12]
     214:	2200      	movs	r2, #0
     216:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     218:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     21a:	2120      	movs	r1, #32
     21c:	468c      	mov	ip, r1
     21e:	391f      	subs	r1, #31
     220:	9600      	str	r6, [sp, #0]
     222:	9701      	str	r7, [sp, #4]
     224:	2420      	movs	r4, #32
     226:	4264      	negs	r4, r4
     228:	1904      	adds	r4, r0, r4
     22a:	d403      	bmi.n	234 <_sercom_get_async_baud_val+0x64>
     22c:	1c0d      	adds	r5, r1, #0
     22e:	40a5      	lsls	r5, r4
     230:	46a8      	mov	r8, r5
     232:	e004      	b.n	23e <_sercom_get_async_baud_val+0x6e>
     234:	4664      	mov	r4, ip
     236:	1a24      	subs	r4, r4, r0
     238:	1c0d      	adds	r5, r1, #0
     23a:	40e5      	lsrs	r5, r4
     23c:	46a8      	mov	r8, r5
     23e:	1c0c      	adds	r4, r1, #0
     240:	4084      	lsls	r4, r0
     242:	46a1      	mov	r9, r4

		r = r << 1;
     244:	1c14      	adds	r4, r2, #0
     246:	1c1d      	adds	r5, r3, #0
     248:	18a4      	adds	r4, r4, r2
     24a:	415d      	adcs	r5, r3
     24c:	1c22      	adds	r2, r4, #0
     24e:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     250:	465e      	mov	r6, fp
     252:	4647      	mov	r7, r8
     254:	423e      	tst	r6, r7
     256:	d003      	beq.n	260 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     258:	1c0e      	adds	r6, r1, #0
     25a:	4326      	orrs	r6, r4
     25c:	1c32      	adds	r2, r6, #0
     25e:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     260:	9c01      	ldr	r4, [sp, #4]
     262:	429c      	cmp	r4, r3
     264:	d810      	bhi.n	288 <_sercom_get_async_baud_val+0xb8>
     266:	d102      	bne.n	26e <_sercom_get_async_baud_val+0x9e>
     268:	9c00      	ldr	r4, [sp, #0]
     26a:	4294      	cmp	r4, r2
     26c:	d80c      	bhi.n	288 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     26e:	9c00      	ldr	r4, [sp, #0]
     270:	9d01      	ldr	r5, [sp, #4]
     272:	1b12      	subs	r2, r2, r4
     274:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     276:	464d      	mov	r5, r9
     278:	9e02      	ldr	r6, [sp, #8]
     27a:	9f03      	ldr	r7, [sp, #12]
     27c:	4335      	orrs	r5, r6
     27e:	1c3c      	adds	r4, r7, #0
     280:	4646      	mov	r6, r8
     282:	4334      	orrs	r4, r6
     284:	9502      	str	r5, [sp, #8]
     286:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     288:	3801      	subs	r0, #1
     28a:	d2cb      	bcs.n	224 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     28c:	2200      	movs	r2, #0
     28e:	2301      	movs	r3, #1
     290:	9802      	ldr	r0, [sp, #8]
     292:	9903      	ldr	r1, [sp, #12]
     294:	1a12      	subs	r2, r2, r0
     296:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     298:	0c11      	lsrs	r1, r2, #16
     29a:	041b      	lsls	r3, r3, #16
     29c:	4319      	orrs	r1, r3
     29e:	e06c      	b.n	37a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     2a0:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     2a2:	2d01      	cmp	r5, #1
     2a4:	d169      	bne.n	37a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     2a6:	0f61      	lsrs	r1, r4, #29
     2a8:	1c0f      	adds	r7, r1, #0
     2aa:	00e1      	lsls	r1, r4, #3
     2ac:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     2ae:	1c18      	adds	r0, r3, #0
     2b0:	2100      	movs	r1, #0
     2b2:	2300      	movs	r3, #0
     2b4:	4c36      	ldr	r4, [pc, #216]	; (390 <_sercom_get_async_baud_val+0x1c0>)
     2b6:	47a0      	blx	r4
     2b8:	1c04      	adds	r4, r0, #0
     2ba:	1c0d      	adds	r5, r1, #0
     2bc:	2300      	movs	r3, #0
     2be:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     2c0:	3320      	adds	r3, #32
     2c2:	469b      	mov	fp, r3
     2c4:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     2c6:	4663      	mov	r3, ip
     2c8:	9305      	str	r3, [sp, #20]
     2ca:	46b9      	mov	r9, r7
     2cc:	466b      	mov	r3, sp
     2ce:	7d1b      	ldrb	r3, [r3, #20]
     2d0:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     2d2:	2300      	movs	r3, #0
     2d4:	469c      	mov	ip, r3
     2d6:	2000      	movs	r0, #0
     2d8:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     2da:	223f      	movs	r2, #63	; 0x3f
     2dc:	9400      	str	r4, [sp, #0]
     2de:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     2e0:	2320      	movs	r3, #32
     2e2:	425b      	negs	r3, r3
     2e4:	18d3      	adds	r3, r2, r3
     2e6:	d403      	bmi.n	2f0 <_sercom_get_async_baud_val+0x120>
     2e8:	1c34      	adds	r4, r6, #0
     2ea:	409c      	lsls	r4, r3
     2ec:	1c23      	adds	r3, r4, #0
     2ee:	e004      	b.n	2fa <_sercom_get_async_baud_val+0x12a>
     2f0:	465b      	mov	r3, fp
     2f2:	1a9b      	subs	r3, r3, r2
     2f4:	1c34      	adds	r4, r6, #0
     2f6:	40dc      	lsrs	r4, r3
     2f8:	1c23      	adds	r3, r4, #0
     2fa:	1c37      	adds	r7, r6, #0
     2fc:	4097      	lsls	r7, r2

		r = r << 1;
     2fe:	1c04      	adds	r4, r0, #0
     300:	1c0d      	adds	r5, r1, #0
     302:	1824      	adds	r4, r4, r0
     304:	414d      	adcs	r5, r1
     306:	1c20      	adds	r0, r4, #0
     308:	1c29      	adds	r1, r5, #0
     30a:	9002      	str	r0, [sp, #8]
     30c:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     30e:	4644      	mov	r4, r8
     310:	403c      	ands	r4, r7
     312:	46a2      	mov	sl, r4
     314:	464c      	mov	r4, r9
     316:	4023      	ands	r3, r4
     318:	4654      	mov	r4, sl
     31a:	4323      	orrs	r3, r4
     31c:	d005      	beq.n	32a <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     31e:	9b02      	ldr	r3, [sp, #8]
     320:	9c03      	ldr	r4, [sp, #12]
     322:	1c1d      	adds	r5, r3, #0
     324:	4335      	orrs	r5, r6
     326:	1c28      	adds	r0, r5, #0
     328:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     32a:	9b01      	ldr	r3, [sp, #4]
     32c:	428b      	cmp	r3, r1
     32e:	d80a      	bhi.n	346 <_sercom_get_async_baud_val+0x176>
     330:	d102      	bne.n	338 <_sercom_get_async_baud_val+0x168>
     332:	9b00      	ldr	r3, [sp, #0]
     334:	4283      	cmp	r3, r0
     336:	d806      	bhi.n	346 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     338:	9b00      	ldr	r3, [sp, #0]
     33a:	9c01      	ldr	r4, [sp, #4]
     33c:	1ac0      	subs	r0, r0, r3
     33e:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     340:	4663      	mov	r3, ip
     342:	433b      	orrs	r3, r7
     344:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     346:	3a01      	subs	r2, #1
     348:	d2ca      	bcs.n	2e0 <_sercom_get_async_baud_val+0x110>
     34a:	9c00      	ldr	r4, [sp, #0]
     34c:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     34e:	4662      	mov	r2, ip
     350:	9905      	ldr	r1, [sp, #20]
     352:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     354:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     356:	4a0f      	ldr	r2, [pc, #60]	; (394 <_sercom_get_async_baud_val+0x1c4>)
     358:	4293      	cmp	r3, r2
     35a:	d908      	bls.n	36e <_sercom_get_async_baud_val+0x19e>
     35c:	9a06      	ldr	r2, [sp, #24]
     35e:	3201      	adds	r2, #1
     360:	b2d2      	uxtb	r2, r2
     362:	9206      	str	r2, [sp, #24]
     364:	1c0a      	adds	r2, r1, #0
     366:	3201      	adds	r2, #1
     368:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     36a:	2a08      	cmp	r2, #8
     36c:	d1ae      	bne.n	2cc <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     36e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     370:	9a06      	ldr	r2, [sp, #24]
     372:	2a08      	cmp	r2, #8
     374:	d004      	beq.n	380 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     376:	0351      	lsls	r1, r2, #13
     378:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     37a:	9b07      	ldr	r3, [sp, #28]
     37c:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     37e:	2500      	movs	r5, #0
}
     380:	1c28      	adds	r0, r5, #0
     382:	b009      	add	sp, #36	; 0x24
     384:	bc3c      	pop	{r2, r3, r4, r5}
     386:	4690      	mov	r8, r2
     388:	4699      	mov	r9, r3
     38a:	46a2      	mov	sl, r4
     38c:	46ab      	mov	fp, r5
     38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     390:	000021a1 	.word	0x000021a1
     394:	00001fff 	.word	0x00001fff

00000398 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     398:	b510      	push	{r4, lr}
     39a:	b082      	sub	sp, #8
     39c:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     39e:	4b0e      	ldr	r3, [pc, #56]	; (3d8 <sercom_set_gclk_generator+0x40>)
     3a0:	781b      	ldrb	r3, [r3, #0]
     3a2:	2b00      	cmp	r3, #0
     3a4:	d001      	beq.n	3aa <sercom_set_gclk_generator+0x12>
     3a6:	2900      	cmp	r1, #0
     3a8:	d00d      	beq.n	3c6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     3aa:	a901      	add	r1, sp, #4
     3ac:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3ae:	2013      	movs	r0, #19
     3b0:	4b0a      	ldr	r3, [pc, #40]	; (3dc <sercom_set_gclk_generator+0x44>)
     3b2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     3b4:	2013      	movs	r0, #19
     3b6:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <sercom_set_gclk_generator+0x48>)
     3b8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     3ba:	4b07      	ldr	r3, [pc, #28]	; (3d8 <sercom_set_gclk_generator+0x40>)
     3bc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     3be:	2201      	movs	r2, #1
     3c0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     3c2:	2000      	movs	r0, #0
     3c4:	e006      	b.n	3d4 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     3c6:	4b04      	ldr	r3, [pc, #16]	; (3d8 <sercom_set_gclk_generator+0x40>)
     3c8:	785b      	ldrb	r3, [r3, #1]
     3ca:	4283      	cmp	r3, r0
     3cc:	d001      	beq.n	3d2 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3ce:	201d      	movs	r0, #29
     3d0:	e000      	b.n	3d4 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     3d2:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     3d4:	b002      	add	sp, #8
     3d6:	bd10      	pop	{r4, pc}
     3d8:	20000190 	.word	0x20000190
     3dc:	000017e1 	.word	0x000017e1
     3e0:	00001755 	.word	0x00001755

000003e4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3e4:	4b44      	ldr	r3, [pc, #272]	; (4f8 <_sercom_get_default_pad+0x114>)
     3e6:	4298      	cmp	r0, r3
     3e8:	d033      	beq.n	452 <_sercom_get_default_pad+0x6e>
     3ea:	d806      	bhi.n	3fa <_sercom_get_default_pad+0x16>
     3ec:	4b43      	ldr	r3, [pc, #268]	; (4fc <_sercom_get_default_pad+0x118>)
     3ee:	4298      	cmp	r0, r3
     3f0:	d00d      	beq.n	40e <_sercom_get_default_pad+0x2a>
     3f2:	4b43      	ldr	r3, [pc, #268]	; (500 <_sercom_get_default_pad+0x11c>)
     3f4:	4298      	cmp	r0, r3
     3f6:	d01b      	beq.n	430 <_sercom_get_default_pad+0x4c>
     3f8:	e06f      	b.n	4da <_sercom_get_default_pad+0xf6>
     3fa:	4b42      	ldr	r3, [pc, #264]	; (504 <_sercom_get_default_pad+0x120>)
     3fc:	4298      	cmp	r0, r3
     3fe:	d04a      	beq.n	496 <_sercom_get_default_pad+0xb2>
     400:	4b41      	ldr	r3, [pc, #260]	; (508 <_sercom_get_default_pad+0x124>)
     402:	4298      	cmp	r0, r3
     404:	d058      	beq.n	4b8 <_sercom_get_default_pad+0xd4>
     406:	4b41      	ldr	r3, [pc, #260]	; (50c <_sercom_get_default_pad+0x128>)
     408:	4298      	cmp	r0, r3
     40a:	d166      	bne.n	4da <_sercom_get_default_pad+0xf6>
     40c:	e032      	b.n	474 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     40e:	2901      	cmp	r1, #1
     410:	d006      	beq.n	420 <_sercom_get_default_pad+0x3c>
     412:	2900      	cmp	r1, #0
     414:	d063      	beq.n	4de <_sercom_get_default_pad+0xfa>
     416:	2902      	cmp	r1, #2
     418:	d006      	beq.n	428 <_sercom_get_default_pad+0x44>
     41a:	2903      	cmp	r1, #3
     41c:	d006      	beq.n	42c <_sercom_get_default_pad+0x48>
     41e:	e001      	b.n	424 <_sercom_get_default_pad+0x40>
     420:	483b      	ldr	r0, [pc, #236]	; (510 <_sercom_get_default_pad+0x12c>)
     422:	e067      	b.n	4f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     424:	2000      	movs	r0, #0
     426:	e065      	b.n	4f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     428:	483a      	ldr	r0, [pc, #232]	; (514 <_sercom_get_default_pad+0x130>)
     42a:	e063      	b.n	4f4 <_sercom_get_default_pad+0x110>
     42c:	483a      	ldr	r0, [pc, #232]	; (518 <_sercom_get_default_pad+0x134>)
     42e:	e061      	b.n	4f4 <_sercom_get_default_pad+0x110>
     430:	2901      	cmp	r1, #1
     432:	d006      	beq.n	442 <_sercom_get_default_pad+0x5e>
     434:	2900      	cmp	r1, #0
     436:	d054      	beq.n	4e2 <_sercom_get_default_pad+0xfe>
     438:	2902      	cmp	r1, #2
     43a:	d006      	beq.n	44a <_sercom_get_default_pad+0x66>
     43c:	2903      	cmp	r1, #3
     43e:	d006      	beq.n	44e <_sercom_get_default_pad+0x6a>
     440:	e001      	b.n	446 <_sercom_get_default_pad+0x62>
     442:	4836      	ldr	r0, [pc, #216]	; (51c <_sercom_get_default_pad+0x138>)
     444:	e056      	b.n	4f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     446:	2000      	movs	r0, #0
     448:	e054      	b.n	4f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44a:	4835      	ldr	r0, [pc, #212]	; (520 <_sercom_get_default_pad+0x13c>)
     44c:	e052      	b.n	4f4 <_sercom_get_default_pad+0x110>
     44e:	4835      	ldr	r0, [pc, #212]	; (524 <_sercom_get_default_pad+0x140>)
     450:	e050      	b.n	4f4 <_sercom_get_default_pad+0x110>
     452:	2901      	cmp	r1, #1
     454:	d006      	beq.n	464 <_sercom_get_default_pad+0x80>
     456:	2900      	cmp	r1, #0
     458:	d045      	beq.n	4e6 <_sercom_get_default_pad+0x102>
     45a:	2902      	cmp	r1, #2
     45c:	d006      	beq.n	46c <_sercom_get_default_pad+0x88>
     45e:	2903      	cmp	r1, #3
     460:	d006      	beq.n	470 <_sercom_get_default_pad+0x8c>
     462:	e001      	b.n	468 <_sercom_get_default_pad+0x84>
     464:	4830      	ldr	r0, [pc, #192]	; (528 <_sercom_get_default_pad+0x144>)
     466:	e045      	b.n	4f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     468:	2000      	movs	r0, #0
     46a:	e043      	b.n	4f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     46c:	482f      	ldr	r0, [pc, #188]	; (52c <_sercom_get_default_pad+0x148>)
     46e:	e041      	b.n	4f4 <_sercom_get_default_pad+0x110>
     470:	482f      	ldr	r0, [pc, #188]	; (530 <_sercom_get_default_pad+0x14c>)
     472:	e03f      	b.n	4f4 <_sercom_get_default_pad+0x110>
     474:	2901      	cmp	r1, #1
     476:	d006      	beq.n	486 <_sercom_get_default_pad+0xa2>
     478:	2900      	cmp	r1, #0
     47a:	d036      	beq.n	4ea <_sercom_get_default_pad+0x106>
     47c:	2902      	cmp	r1, #2
     47e:	d006      	beq.n	48e <_sercom_get_default_pad+0xaa>
     480:	2903      	cmp	r1, #3
     482:	d006      	beq.n	492 <_sercom_get_default_pad+0xae>
     484:	e001      	b.n	48a <_sercom_get_default_pad+0xa6>
     486:	482b      	ldr	r0, [pc, #172]	; (534 <_sercom_get_default_pad+0x150>)
     488:	e034      	b.n	4f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     48a:	2000      	movs	r0, #0
     48c:	e032      	b.n	4f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48e:	482a      	ldr	r0, [pc, #168]	; (538 <_sercom_get_default_pad+0x154>)
     490:	e030      	b.n	4f4 <_sercom_get_default_pad+0x110>
     492:	482a      	ldr	r0, [pc, #168]	; (53c <_sercom_get_default_pad+0x158>)
     494:	e02e      	b.n	4f4 <_sercom_get_default_pad+0x110>
     496:	2901      	cmp	r1, #1
     498:	d006      	beq.n	4a8 <_sercom_get_default_pad+0xc4>
     49a:	2900      	cmp	r1, #0
     49c:	d027      	beq.n	4ee <_sercom_get_default_pad+0x10a>
     49e:	2902      	cmp	r1, #2
     4a0:	d006      	beq.n	4b0 <_sercom_get_default_pad+0xcc>
     4a2:	2903      	cmp	r1, #3
     4a4:	d006      	beq.n	4b4 <_sercom_get_default_pad+0xd0>
     4a6:	e001      	b.n	4ac <_sercom_get_default_pad+0xc8>
     4a8:	4825      	ldr	r0, [pc, #148]	; (540 <_sercom_get_default_pad+0x15c>)
     4aa:	e023      	b.n	4f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4ac:	2000      	movs	r0, #0
     4ae:	e021      	b.n	4f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4b0:	4824      	ldr	r0, [pc, #144]	; (544 <_sercom_get_default_pad+0x160>)
     4b2:	e01f      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4b4:	4824      	ldr	r0, [pc, #144]	; (548 <_sercom_get_default_pad+0x164>)
     4b6:	e01d      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4b8:	2901      	cmp	r1, #1
     4ba:	d006      	beq.n	4ca <_sercom_get_default_pad+0xe6>
     4bc:	2900      	cmp	r1, #0
     4be:	d018      	beq.n	4f2 <_sercom_get_default_pad+0x10e>
     4c0:	2902      	cmp	r1, #2
     4c2:	d006      	beq.n	4d2 <_sercom_get_default_pad+0xee>
     4c4:	2903      	cmp	r1, #3
     4c6:	d006      	beq.n	4d6 <_sercom_get_default_pad+0xf2>
     4c8:	e001      	b.n	4ce <_sercom_get_default_pad+0xea>
     4ca:	4820      	ldr	r0, [pc, #128]	; (54c <_sercom_get_default_pad+0x168>)
     4cc:	e012      	b.n	4f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4ce:	2000      	movs	r0, #0
     4d0:	e010      	b.n	4f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4d2:	481f      	ldr	r0, [pc, #124]	; (550 <_sercom_get_default_pad+0x16c>)
     4d4:	e00e      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4d6:	481f      	ldr	r0, [pc, #124]	; (554 <_sercom_get_default_pad+0x170>)
     4d8:	e00c      	b.n	4f4 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4da:	2000      	movs	r0, #0
     4dc:	e00a      	b.n	4f4 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4de:	481e      	ldr	r0, [pc, #120]	; (558 <_sercom_get_default_pad+0x174>)
     4e0:	e008      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4e2:	2003      	movs	r0, #3
     4e4:	e006      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4e6:	481d      	ldr	r0, [pc, #116]	; (55c <_sercom_get_default_pad+0x178>)
     4e8:	e004      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4ea:	481d      	ldr	r0, [pc, #116]	; (560 <_sercom_get_default_pad+0x17c>)
     4ec:	e002      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4ee:	481d      	ldr	r0, [pc, #116]	; (564 <_sercom_get_default_pad+0x180>)
     4f0:	e000      	b.n	4f4 <_sercom_get_default_pad+0x110>
     4f2:	481d      	ldr	r0, [pc, #116]	; (568 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     4f4:	4770      	bx	lr
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	42001000 	.word	0x42001000
     4fc:	42000800 	.word	0x42000800
     500:	42000c00 	.word	0x42000c00
     504:	42001800 	.word	0x42001800
     508:	42001c00 	.word	0x42001c00
     50c:	42001400 	.word	0x42001400
     510:	00050003 	.word	0x00050003
     514:	00060003 	.word	0x00060003
     518:	00070003 	.word	0x00070003
     51c:	00010003 	.word	0x00010003
     520:	001e0003 	.word	0x001e0003
     524:	001f0003 	.word	0x001f0003
     528:	000d0002 	.word	0x000d0002
     52c:	000e0002 	.word	0x000e0002
     530:	000f0002 	.word	0x000f0002
     534:	00110003 	.word	0x00110003
     538:	00120003 	.word	0x00120003
     53c:	00130003 	.word	0x00130003
     540:	003f0005 	.word	0x003f0005
     544:	003e0005 	.word	0x003e0005
     548:	00520005 	.word	0x00520005
     54c:	00170003 	.word	0x00170003
     550:	00180003 	.word	0x00180003
     554:	00190003 	.word	0x00190003
     558:	00040003 	.word	0x00040003
     55c:	000c0002 	.word	0x000c0002
     560:	00100003 	.word	0x00100003
     564:	00530005 	.word	0x00530005
     568:	00160003 	.word	0x00160003

0000056c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     56c:	b530      	push	{r4, r5, lr}
     56e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     570:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <_sercom_get_sercom_inst_index+0x38>)
     572:	466a      	mov	r2, sp
     574:	cb32      	ldmia	r3!, {r1, r4, r5}
     576:	c232      	stmia	r2!, {r1, r4, r5}
     578:	cb32      	ldmia	r3!, {r1, r4, r5}
     57a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     57c:	9b00      	ldr	r3, [sp, #0]
     57e:	4283      	cmp	r3, r0
     580:	d006      	beq.n	590 <_sercom_get_sercom_inst_index+0x24>
     582:	2301      	movs	r3, #1
     584:	009a      	lsls	r2, r3, #2
     586:	4669      	mov	r1, sp
     588:	5852      	ldr	r2, [r2, r1]
     58a:	4282      	cmp	r2, r0
     58c:	d103      	bne.n	596 <_sercom_get_sercom_inst_index+0x2a>
     58e:	e000      	b.n	592 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     590:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     592:	b2d8      	uxtb	r0, r3
     594:	e003      	b.n	59e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     596:	3301      	adds	r3, #1
     598:	2b06      	cmp	r3, #6
     59a:	d1f3      	bne.n	584 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     59c:	2000      	movs	r0, #0
}
     59e:	b007      	add	sp, #28
     5a0:	bd30      	pop	{r4, r5, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	00004c94 	.word	0x00004c94

000005a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5aa:	4647      	mov	r7, r8
     5ac:	b480      	push	{r7}
     5ae:	1c0c      	adds	r4, r1, #0
     5b0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     5b2:	2800      	cmp	r0, #0
     5b4:	d110      	bne.n	5d8 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
     5b6:	2a00      	cmp	r2, #0
     5b8:	dd0a      	ble.n	5d0 <_read+0x28>
     5ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     5bc:	4e09      	ldr	r6, [pc, #36]	; (5e4 <_read+0x3c>)
     5be:	4d0a      	ldr	r5, [pc, #40]	; (5e8 <_read+0x40>)
     5c0:	6830      	ldr	r0, [r6, #0]
     5c2:	1c21      	adds	r1, r4, #0
     5c4:	682b      	ldr	r3, [r5, #0]
     5c6:	4798      	blx	r3
		ptr++;
     5c8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     5ca:	42bc      	cmp	r4, r7
     5cc:	d1f8      	bne.n	5c0 <_read+0x18>
     5ce:	e001      	b.n	5d4 <_read+0x2c>
     5d0:	2300      	movs	r3, #0
     5d2:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     5d4:	4640      	mov	r0, r8
     5d6:	e001      	b.n	5dc <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     5d8:	2001      	movs	r0, #1
     5da:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     5dc:	bc04      	pop	{r2}
     5de:	4690      	mov	r8, r2
     5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	200002b8 	.word	0x200002b8
     5e8:	200002b0 	.word	0x200002b0

000005ec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ee:	4647      	mov	r7, r8
     5f0:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     5f2:	3801      	subs	r0, #1
     5f4:	2802      	cmp	r0, #2
     5f6:	d815      	bhi.n	624 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
     5f8:	2a00      	cmp	r2, #0
     5fa:	d010      	beq.n	61e <_write+0x32>
     5fc:	1c15      	adds	r5, r2, #0
     5fe:	1c0e      	adds	r6, r1, #0
     600:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     602:	4b0c      	ldr	r3, [pc, #48]	; (634 <_write+0x48>)
     604:	4698      	mov	r8, r3
     606:	4f0c      	ldr	r7, [pc, #48]	; (638 <_write+0x4c>)
     608:	4643      	mov	r3, r8
     60a:	6818      	ldr	r0, [r3, #0]
     60c:	5d31      	ldrb	r1, [r6, r4]
     60e:	683b      	ldr	r3, [r7, #0]
     610:	4798      	blx	r3
     612:	2800      	cmp	r0, #0
     614:	db09      	blt.n	62a <_write+0x3e>
			return -1;
		}
		++nChars;
     616:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     618:	42a5      	cmp	r5, r4
     61a:	d1f5      	bne.n	608 <_write+0x1c>
     61c:	e000      	b.n	620 <_write+0x34>
     61e:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     620:	1c20      	adds	r0, r4, #0
     622:	e004      	b.n	62e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     624:	2001      	movs	r0, #1
     626:	4240      	negs	r0, r0
     628:	e001      	b.n	62e <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     62a:	2001      	movs	r0, #1
     62c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     62e:	bc04      	pop	{r2}
     630:	4690      	mov	r8, r2
     632:	bdf0      	pop	{r4, r5, r6, r7, pc}
     634:	200002b8 	.word	0x200002b8
     638:	200002b4 	.word	0x200002b4

0000063c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	b082      	sub	sp, #8
     640:	1c05      	adds	r5, r0, #0
     642:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     644:	2200      	movs	r2, #0
     646:	466b      	mov	r3, sp
     648:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     64a:	4c06      	ldr	r4, [pc, #24]	; (664 <usart_serial_getchar+0x28>)
     64c:	1c28      	adds	r0, r5, #0
     64e:	466b      	mov	r3, sp
     650:	1d99      	adds	r1, r3, #6
     652:	47a0      	blx	r4
     654:	2800      	cmp	r0, #0
     656:	d1f9      	bne.n	64c <usart_serial_getchar+0x10>

	*c = temp;
     658:	466b      	mov	r3, sp
     65a:	3306      	adds	r3, #6
     65c:	881b      	ldrh	r3, [r3, #0]
     65e:	7033      	strb	r3, [r6, #0]
}
     660:	b002      	add	sp, #8
     662:	bd70      	pop	{r4, r5, r6, pc}
     664:	00000b95 	.word	0x00000b95

00000668 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     668:	b570      	push	{r4, r5, r6, lr}
     66a:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     66c:	b28c      	uxth	r4, r1
     66e:	4e03      	ldr	r6, [pc, #12]	; (67c <usart_serial_putchar+0x14>)
     670:	1c28      	adds	r0, r5, #0
     672:	1c21      	adds	r1, r4, #0
     674:	47b0      	blx	r6
     676:	2800      	cmp	r0, #0
     678:	d1fa      	bne.n	670 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	00000b69 	.word	0x00000b69

00000680 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     680:	b510      	push	{r4, lr}
     682:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
     684:	466b      	mov	r3, sp
     686:	1ddc      	adds	r4, r3, #7
     688:	4810      	ldr	r0, [pc, #64]	; (6cc <USART_HOST_ISR_VECT+0x4c>)
     68a:	1c21      	adds	r1, r4, #0
     68c:	2201      	movs	r2, #1
     68e:	4b10      	ldr	r3, [pc, #64]	; (6d0 <USART_HOST_ISR_VECT+0x50>)
     690:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     692:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     694:	f3bf 8f5f 	dmb	sy
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     698:	2200      	movs	r2, #0
     69a:	4b0e      	ldr	r3, [pc, #56]	; (6d4 <USART_HOST_ISR_VECT+0x54>)
     69c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     69e:	4b0e      	ldr	r3, [pc, #56]	; (6d8 <USART_HOST_ISR_VECT+0x58>)
     6a0:	781b      	ldrb	r3, [r3, #0]
     6a2:	7821      	ldrb	r1, [r4, #0]
     6a4:	4a0d      	ldr	r2, [pc, #52]	; (6dc <USART_HOST_ISR_VECT+0x5c>)
     6a6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     6a8:	2b9b      	cmp	r3, #155	; 0x9b
     6aa:	d103      	bne.n	6b4 <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     6ac:	2200      	movs	r2, #0
     6ae:	4b0a      	ldr	r3, [pc, #40]	; (6d8 <USART_HOST_ISR_VECT+0x58>)
     6b0:	701a      	strb	r2, [r3, #0]
     6b2:	e002      	b.n	6ba <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
     6b4:	3301      	adds	r3, #1
     6b6:	4a08      	ldr	r2, [pc, #32]	; (6d8 <USART_HOST_ISR_VECT+0x58>)
     6b8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
     6ba:	2201      	movs	r2, #1
     6bc:	4b05      	ldr	r3, [pc, #20]	; (6d4 <USART_HOST_ISR_VECT+0x54>)
     6be:	701a      	strb	r2, [r3, #0]
     6c0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     6c4:	b662      	cpsie	i
}
     6c6:	b002      	add	sp, #8
     6c8:	bd10      	pop	{r4, pc}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	20000230 	.word	0x20000230
     6d0:	00000c0d 	.word	0x00000c0d
     6d4:	20000008 	.word	0x20000008
     6d8:	20000264 	.word	0x20000264
     6dc:	20000194 	.word	0x20000194

000006e0 <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
     6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e2:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6e4:	2380      	movs	r3, #128	; 0x80
     6e6:	05db      	lsls	r3, r3, #23
     6e8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6ea:	2300      	movs	r3, #0
     6ec:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     6ee:	22ff      	movs	r2, #255	; 0xff
     6f0:	4669      	mov	r1, sp
     6f2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     6f4:	2200      	movs	r2, #0
     6f6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     6f8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     6fa:	2401      	movs	r4, #1
     6fc:	2124      	movs	r1, #36	; 0x24
     6fe:	4668      	mov	r0, sp
     700:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     702:	3101      	adds	r1, #1
     704:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     706:	3101      	adds	r1, #1
     708:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     70a:	3101      	adds	r1, #1
     70c:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     70e:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     710:	3105      	adds	r1, #5
     712:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     714:	3101      	adds	r1, #1
     716:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     718:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     71a:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     71c:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     71e:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     720:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     722:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     724:	2313      	movs	r3, #19
     726:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     728:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
     72a:	2380      	movs	r3, #128	; 0x80
     72c:	035b      	lsls	r3, r3, #13
     72e:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
     730:	4b2f      	ldr	r3, [pc, #188]	; (7f0 <sio2host_init+0x110>)
     732:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
     734:	4b2f      	ldr	r3, [pc, #188]	; (7f4 <sio2host_init+0x114>)
     736:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
     738:	2301      	movs	r3, #1
     73a:	425b      	negs	r3, r3
     73c:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
     73e:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
     740:	23e1      	movs	r3, #225	; 0xe1
     742:	025b      	lsls	r3, r3, #9
     744:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     746:	4d2c      	ldr	r5, [pc, #176]	; (7f8 <sio2host_init+0x118>)
     748:	4b2c      	ldr	r3, [pc, #176]	; (7fc <sio2host_init+0x11c>)
     74a:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     74c:	4a2c      	ldr	r2, [pc, #176]	; (800 <sio2host_init+0x120>)
     74e:	4b2d      	ldr	r3, [pc, #180]	; (804 <sio2host_init+0x124>)
     750:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     752:	4a2d      	ldr	r2, [pc, #180]	; (808 <sio2host_init+0x128>)
     754:	4b2d      	ldr	r3, [pc, #180]	; (80c <sio2host_init+0x12c>)
     756:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     758:	1c28      	adds	r0, r5, #0
     75a:	492d      	ldr	r1, [pc, #180]	; (810 <sio2host_init+0x130>)
     75c:	466a      	mov	r2, sp
     75e:	4b2d      	ldr	r3, [pc, #180]	; (814 <sio2host_init+0x134>)
     760:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     762:	4f2d      	ldr	r7, [pc, #180]	; (818 <sio2host_init+0x138>)
     764:	683b      	ldr	r3, [r7, #0]
     766:	6898      	ldr	r0, [r3, #8]
     768:	2100      	movs	r1, #0
     76a:	4e2c      	ldr	r6, [pc, #176]	; (81c <sio2host_init+0x13c>)
     76c:	47b0      	blx	r6
	setbuf(stdin, NULL);
     76e:	683b      	ldr	r3, [r7, #0]
     770:	6858      	ldr	r0, [r3, #4]
     772:	2100      	movs	r1, #0
     774:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     776:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     778:	1c30      	adds	r0, r6, #0
     77a:	4b29      	ldr	r3, [pc, #164]	; (820 <sio2host_init+0x140>)
     77c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     77e:	231f      	movs	r3, #31
     780:	4018      	ands	r0, r3
     782:	4084      	lsls	r4, r0
     784:	4b27      	ldr	r3, [pc, #156]	; (824 <sio2host_init+0x144>)
     786:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     788:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     78a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     78c:	2b00      	cmp	r3, #0
     78e:	d1fc      	bne.n	78a <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     790:	6832      	ldr	r2, [r6, #0]
     792:	3302      	adds	r3, #2
     794:	4313      	orrs	r3, r2
     796:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     798:	4b17      	ldr	r3, [pc, #92]	; (7f8 <sio2host_init+0x118>)
     79a:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     79c:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     79e:	2a00      	cmp	r2, #0
     7a0:	d1fc      	bne.n	79c <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
     7a2:	685a      	ldr	r2, [r3, #4]
     7a4:	2180      	movs	r1, #128	; 0x80
     7a6:	0249      	lsls	r1, r1, #9
     7a8:	430a      	orrs	r2, r1
     7aa:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
     7ac:	2101      	movs	r1, #1
     7ae:	4a12      	ldr	r2, [pc, #72]	; (7f8 <sio2host_init+0x118>)
     7b0:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7b2:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7b4:	2a00      	cmp	r2, #0
     7b6:	d1fc      	bne.n	7b2 <sio2host_init+0xd2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7b8:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7ba:	2a00      	cmp	r2, #0
     7bc:	d1fc      	bne.n	7b8 <sio2host_init+0xd8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     7be:	685a      	ldr	r2, [r3, #4]
     7c0:	2180      	movs	r1, #128	; 0x80
     7c2:	0289      	lsls	r1, r1, #10
     7c4:	430a      	orrs	r2, r1
     7c6:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     7c8:	2101      	movs	r1, #1
     7ca:	4a0b      	ldr	r2, [pc, #44]	; (7f8 <sio2host_init+0x118>)
     7cc:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     7ce:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     7d0:	2a00      	cmp	r2, #0
     7d2:	d1fc      	bne.n	7ce <sio2host_init+0xee>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
     7d4:	2000      	movs	r0, #0
     7d6:	4914      	ldr	r1, [pc, #80]	; (828 <sio2host_init+0x148>)
     7d8:	4b14      	ldr	r3, [pc, #80]	; (82c <sio2host_init+0x14c>)
     7da:	4798      	blx	r3
     7dc:	2204      	movs	r2, #4
     7de:	4b0c      	ldr	r3, [pc, #48]	; (810 <sio2host_init+0x130>)
     7e0:	759a      	strb	r2, [r3, #22]
     7e2:	32fd      	adds	r2, #253	; 0xfd
     7e4:	32ff      	adds	r2, #255	; 0xff
     7e6:	4b0f      	ldr	r3, [pc, #60]	; (824 <sio2host_init+0x144>)
     7e8:	601a      	str	r2, [r3, #0]
}
     7ea:	b011      	add	sp, #68	; 0x44
     7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00040003 	.word	0x00040003
     7f4:	00050003 	.word	0x00050003
     7f8:	20000230 	.word	0x20000230
     7fc:	200002b8 	.word	0x200002b8
     800:	00000669 	.word	0x00000669
     804:	200002b4 	.word	0x200002b4
     808:	0000063d 	.word	0x0000063d
     80c:	200002b0 	.word	0x200002b0
     810:	42000800 	.word	0x42000800
     814:	00000831 	.word	0x00000831
     818:	20000170 	.word	0x20000170
     81c:	00003d95 	.word	0x00003d95
     820:	00000e8d 	.word	0x00000e8d
     824:	e000e100 	.word	0xe000e100
     828:	00000681 	.word	0x00000681
     82c:	00000e51 	.word	0x00000e51

00000830 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     830:	b5f0      	push	{r4, r5, r6, r7, lr}
     832:	465f      	mov	r7, fp
     834:	4656      	mov	r6, sl
     836:	464d      	mov	r5, r9
     838:	4644      	mov	r4, r8
     83a:	b4f0      	push	{r4, r5, r6, r7}
     83c:	b091      	sub	sp, #68	; 0x44
     83e:	1c05      	adds	r5, r0, #0
     840:	1c0c      	adds	r4, r1, #0
     842:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     844:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     846:	1c08      	adds	r0, r1, #0
     848:	4bb9      	ldr	r3, [pc, #740]	; (b30 <usart_init+0x300>)
     84a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     84c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     84e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     850:	07d2      	lsls	r2, r2, #31
     852:	d500      	bpl.n	856 <usart_init+0x26>
     854:	e163      	b.n	b1e <usart_init+0x2ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     856:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     858:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     85a:	0792      	lsls	r2, r2, #30
     85c:	d500      	bpl.n	860 <usart_init+0x30>
     85e:	e15e      	b.n	b1e <usart_init+0x2ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     860:	49b4      	ldr	r1, [pc, #720]	; (b34 <usart_init+0x304>)
     862:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     864:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     866:	3b1b      	subs	r3, #27
     868:	40bb      	lsls	r3, r7
     86a:	4313      	orrs	r3, r2
     86c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     86e:	a90f      	add	r1, sp, #60	; 0x3c
     870:	272d      	movs	r7, #45	; 0x2d
     872:	5df3      	ldrb	r3, [r6, r7]
     874:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     876:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     878:	b2c3      	uxtb	r3, r0
     87a:	9302      	str	r3, [sp, #8]
     87c:	1c18      	adds	r0, r3, #0
     87e:	4bae      	ldr	r3, [pc, #696]	; (b38 <usart_init+0x308>)
     880:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     882:	9802      	ldr	r0, [sp, #8]
     884:	4bad      	ldr	r3, [pc, #692]	; (b3c <usart_init+0x30c>)
     886:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     888:	5df0      	ldrb	r0, [r6, r7]
     88a:	2100      	movs	r1, #0
     88c:	4bac      	ldr	r3, [pc, #688]	; (b40 <usart_init+0x310>)
     88e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     890:	7af3      	ldrb	r3, [r6, #11]
     892:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     894:	2324      	movs	r3, #36	; 0x24
     896:	5cf3      	ldrb	r3, [r6, r3]
     898:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     89a:	2325      	movs	r3, #37	; 0x25
     89c:	5cf3      	ldrb	r3, [r6, r3]
     89e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     8a0:	7ef3      	ldrb	r3, [r6, #27]
     8a2:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     8a4:	7f33      	ldrb	r3, [r6, #28]
     8a6:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a8:	682b      	ldr	r3, [r5, #0]
     8aa:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8ac:	1c18      	adds	r0, r3, #0
     8ae:	4ba0      	ldr	r3, [pc, #640]	; (b30 <usart_init+0x300>)
     8b0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8b2:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     8b4:	2200      	movs	r2, #0
     8b6:	230e      	movs	r3, #14
     8b8:	a906      	add	r1, sp, #24
     8ba:	468c      	mov	ip, r1
     8bc:	4463      	add	r3, ip
     8be:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     8c0:	8a33      	ldrh	r3, [r6, #16]
     8c2:	4699      	mov	r9, r3
     8c4:	2380      	movs	r3, #128	; 0x80
     8c6:	01db      	lsls	r3, r3, #7
     8c8:	4599      	cmp	r9, r3
     8ca:	d019      	beq.n	900 <usart_init+0xd0>
     8cc:	d804      	bhi.n	8d8 <usart_init+0xa8>
     8ce:	2380      	movs	r3, #128	; 0x80
     8d0:	019b      	lsls	r3, r3, #6
     8d2:	4599      	cmp	r9, r3
     8d4:	d00a      	beq.n	8ec <usart_init+0xbc>
     8d6:	e103      	b.n	ae0 <usart_init+0x2b0>
     8d8:	23c0      	movs	r3, #192	; 0xc0
     8da:	01db      	lsls	r3, r3, #7
     8dc:	4599      	cmp	r9, r3
     8de:	d00a      	beq.n	8f6 <usart_init+0xc6>
     8e0:	2380      	movs	r3, #128	; 0x80
     8e2:	021b      	lsls	r3, r3, #8
     8e4:	4599      	cmp	r9, r3
     8e6:	d100      	bne.n	8ea <usart_init+0xba>
     8e8:	e0ff      	b.n	aea <usart_init+0x2ba>
     8ea:	e0f9      	b.n	ae0 <usart_init+0x2b0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8ec:	2310      	movs	r3, #16
     8ee:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8f0:	3b0f      	subs	r3, #15
     8f2:	9307      	str	r3, [sp, #28]
     8f4:	e0fd      	b.n	af2 <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8f6:	2308      	movs	r3, #8
     8f8:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     8fa:	3b07      	subs	r3, #7
     8fc:	9307      	str	r3, [sp, #28]
     8fe:	e0f8      	b.n	af2 <usart_init+0x2c2>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     900:	6833      	ldr	r3, [r6, #0]
     902:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     904:	68f3      	ldr	r3, [r6, #12]
     906:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     908:	6973      	ldr	r3, [r6, #20]
     90a:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     90c:	7e33      	ldrb	r3, [r6, #24]
     90e:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     910:	2326      	movs	r3, #38	; 0x26
     912:	5cf3      	ldrb	r3, [r6, r3]
     914:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     916:	6872      	ldr	r2, [r6, #4]
     918:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     91a:	2a00      	cmp	r2, #0
     91c:	d015      	beq.n	94a <usart_init+0x11a>
     91e:	2380      	movs	r3, #128	; 0x80
     920:	055b      	lsls	r3, r3, #21
     922:	429a      	cmp	r2, r3
     924:	d136      	bne.n	994 <usart_init+0x164>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     926:	2327      	movs	r3, #39	; 0x27
     928:	5cf3      	ldrb	r3, [r6, r3]
     92a:	2b00      	cmp	r3, #0
     92c:	d136      	bne.n	99c <usart_init+0x16c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     92e:	6a33      	ldr	r3, [r6, #32]
     930:	4698      	mov	r8, r3
     932:	b2c0      	uxtb	r0, r0
     934:	4b83      	ldr	r3, [pc, #524]	; (b44 <usart_init+0x314>)
     936:	4798      	blx	r3
     938:	1c01      	adds	r1, r0, #0
     93a:	4640      	mov	r0, r8
     93c:	220e      	movs	r2, #14
     93e:	ab06      	add	r3, sp, #24
     940:	469c      	mov	ip, r3
     942:	4462      	add	r2, ip
     944:	4b80      	ldr	r3, [pc, #512]	; (b48 <usart_init+0x318>)
     946:	4798      	blx	r3
     948:	e025      	b.n	996 <usart_init+0x166>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     94a:	2308      	movs	r3, #8
     94c:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     94e:	2300      	movs	r3, #0
     950:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     952:	2327      	movs	r3, #39	; 0x27
     954:	5cf3      	ldrb	r3, [r6, r3]
     956:	2b00      	cmp	r3, #0
     958:	d00b      	beq.n	972 <usart_init+0x142>
				status_code =
     95a:	4643      	mov	r3, r8
     95c:	9300      	str	r3, [sp, #0]
     95e:	6a30      	ldr	r0, [r6, #32]
     960:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     962:	220e      	movs	r2, #14
     964:	ab06      	add	r3, sp, #24
     966:	469c      	mov	ip, r3
     968:	4462      	add	r2, ip
     96a:	9b07      	ldr	r3, [sp, #28]
     96c:	4f77      	ldr	r7, [pc, #476]	; (b4c <usart_init+0x31c>)
     96e:	47b8      	blx	r7
     970:	e011      	b.n	996 <usart_init+0x166>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     972:	6a33      	ldr	r3, [r6, #32]
     974:	1c1f      	adds	r7, r3, #0
     976:	b2c0      	uxtb	r0, r0
     978:	4b72      	ldr	r3, [pc, #456]	; (b44 <usart_init+0x314>)
     97a:	4798      	blx	r3
     97c:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     97e:	4643      	mov	r3, r8
     980:	9300      	str	r3, [sp, #0]
     982:	1c38      	adds	r0, r7, #0
     984:	220e      	movs	r2, #14
     986:	ab06      	add	r3, sp, #24
     988:	469c      	mov	ip, r3
     98a:	4462      	add	r2, ip
     98c:	9b07      	ldr	r3, [sp, #28]
     98e:	4f6f      	ldr	r7, [pc, #444]	; (b4c <usart_init+0x31c>)
     990:	47b8      	blx	r7
     992:	e000      	b.n	996 <usart_init+0x166>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     994:	2000      	movs	r0, #0
     996:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     998:	d000      	beq.n	99c <usart_init+0x16c>
     99a:	e0c0      	b.n	b1e <usart_init+0x2ee>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     99c:	7e73      	ldrb	r3, [r6, #25]
     99e:	2b00      	cmp	r3, #0
     9a0:	d002      	beq.n	9a8 <usart_init+0x178>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     9a2:	7eb3      	ldrb	r3, [r6, #26]
     9a4:	4652      	mov	r2, sl
     9a6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9a8:	682a      	ldr	r2, [r5, #0]
     9aa:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9ac:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9ae:	2b00      	cmp	r3, #0
     9b0:	d1fc      	bne.n	9ac <usart_init+0x17c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     9b2:	330e      	adds	r3, #14
     9b4:	aa06      	add	r2, sp, #24
     9b6:	4694      	mov	ip, r2
     9b8:	4463      	add	r3, ip
     9ba:	881b      	ldrh	r3, [r3, #0]
     9bc:	4652      	mov	r2, sl
     9be:	8193      	strh	r3, [r2, #12]
     9c0:	9b02      	ldr	r3, [sp, #8]
     9c2:	465a      	mov	r2, fp
     9c4:	4313      	orrs	r3, r2
     9c6:	9a03      	ldr	r2, [sp, #12]
     9c8:	4313      	orrs	r3, r2
     9ca:	433b      	orrs	r3, r7
     9cc:	464a      	mov	r2, r9
     9ce:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9d0:	9a04      	ldr	r2, [sp, #16]
     9d2:	0212      	lsls	r2, r2, #8
     9d4:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9d6:	9a05      	ldr	r2, [sp, #20]
     9d8:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     9da:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     9dc:	2327      	movs	r3, #39	; 0x27
     9de:	5cf3      	ldrb	r3, [r6, r3]
     9e0:	2b00      	cmp	r3, #0
     9e2:	d101      	bne.n	9e8 <usart_init+0x1b8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     9e4:	3304      	adds	r3, #4
     9e6:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9e8:	7f33      	ldrb	r3, [r6, #28]
     9ea:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     9ec:	7e72      	ldrb	r2, [r6, #25]
     9ee:	0293      	lsls	r3, r2, #10
     9f0:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9f2:	7f72      	ldrb	r2, [r6, #29]
     9f4:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     9f6:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9f8:	2224      	movs	r2, #36	; 0x24
     9fa:	5cb2      	ldrb	r2, [r6, r2]
     9fc:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     9fe:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     a00:	2225      	movs	r2, #37	; 0x25
     a02:	5cb2      	ldrb	r2, [r6, r2]
     a04:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a06:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     a08:	7af1      	ldrb	r1, [r6, #11]
     a0a:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     a0c:	8933      	ldrh	r3, [r6, #8]
     a0e:	2bff      	cmp	r3, #255	; 0xff
     a10:	d004      	beq.n	a1c <usart_init+0x1ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a12:	2280      	movs	r2, #128	; 0x80
     a14:	0452      	lsls	r2, r2, #17
     a16:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     a18:	4319      	orrs	r1, r3
     a1a:	e005      	b.n	a28 <usart_init+0x1f8>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     a1c:	7ef3      	ldrb	r3, [r6, #27]
     a1e:	2b00      	cmp	r3, #0
     a20:	d002      	beq.n	a28 <usart_init+0x1f8>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     a22:	2380      	movs	r3, #128	; 0x80
     a24:	04db      	lsls	r3, r3, #19
     a26:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a28:	232c      	movs	r3, #44	; 0x2c
     a2a:	5cf3      	ldrb	r3, [r6, r3]
     a2c:	2b00      	cmp	r3, #0
     a2e:	d103      	bne.n	a38 <usart_init+0x208>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a30:	4b47      	ldr	r3, [pc, #284]	; (b50 <usart_init+0x320>)
     a32:	789b      	ldrb	r3, [r3, #2]
     a34:	079b      	lsls	r3, r3, #30
     a36:	d501      	bpl.n	a3c <usart_init+0x20c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a38:	2380      	movs	r3, #128	; 0x80
     a3a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a3c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a3e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a40:	2b00      	cmp	r3, #0
     a42:	d1fc      	bne.n	a3e <usart_init+0x20e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     a44:	4653      	mov	r3, sl
     a46:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a48:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a4a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a4c:	2b00      	cmp	r3, #0
     a4e:	d1fc      	bne.n	a4a <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     a50:	4653      	mov	r3, sl
     a52:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a54:	ab0e      	add	r3, sp, #56	; 0x38
     a56:	2280      	movs	r2, #128	; 0x80
     a58:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a5a:	2200      	movs	r2, #0
     a5c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a5e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a60:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     a62:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a64:	930a      	str	r3, [sp, #40]	; 0x28
     a66:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a68:	930b      	str	r3, [sp, #44]	; 0x2c
     a6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a6c:	930c      	str	r3, [sp, #48]	; 0x30
     a6e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a70:	9302      	str	r3, [sp, #8]
     a72:	930d      	str	r3, [sp, #52]	; 0x34
     a74:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a76:	ae0e      	add	r6, sp, #56	; 0x38
     a78:	b2f9      	uxtb	r1, r7
     a7a:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a7c:	aa0a      	add	r2, sp, #40	; 0x28
     a7e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     a80:	2800      	cmp	r0, #0
     a82:	d102      	bne.n	a8a <usart_init+0x25a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a84:	1c20      	adds	r0, r4, #0
     a86:	4b33      	ldr	r3, [pc, #204]	; (b54 <usart_init+0x324>)
     a88:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     a8a:	1c43      	adds	r3, r0, #1
     a8c:	d005      	beq.n	a9a <usart_init+0x26a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a8e:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a90:	0c00      	lsrs	r0, r0, #16
     a92:	b2c0      	uxtb	r0, r0
     a94:	1c31      	adds	r1, r6, #0
     a96:	4b30      	ldr	r3, [pc, #192]	; (b58 <usart_init+0x328>)
     a98:	4798      	blx	r3
     a9a:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a9c:	2f04      	cmp	r7, #4
     a9e:	d1eb      	bne.n	a78 <usart_init+0x248>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     aa0:	2300      	movs	r3, #0
     aa2:	60eb      	str	r3, [r5, #12]
     aa4:	612b      	str	r3, [r5, #16]
     aa6:	616b      	str	r3, [r5, #20]
     aa8:	61ab      	str	r3, [r5, #24]
     aaa:	61eb      	str	r3, [r5, #28]
     aac:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     aae:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     ab0:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     ab2:	2200      	movs	r2, #0
     ab4:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     ab6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     ab8:	3330      	adds	r3, #48	; 0x30
     aba:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     abc:	3301      	adds	r3, #1
     abe:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ac0:	3301      	adds	r3, #1
     ac2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ac4:	3301      	adds	r3, #1
     ac6:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ac8:	6828      	ldr	r0, [r5, #0]
     aca:	4b19      	ldr	r3, [pc, #100]	; (b30 <usart_init+0x300>)
     acc:	4798      	blx	r3
     ace:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     ad0:	4922      	ldr	r1, [pc, #136]	; (b5c <usart_init+0x32c>)
     ad2:	4b23      	ldr	r3, [pc, #140]	; (b60 <usart_init+0x330>)
     ad4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ad6:	00a4      	lsls	r4, r4, #2
     ad8:	4b22      	ldr	r3, [pc, #136]	; (b64 <usart_init+0x334>)
     ada:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     adc:	2300      	movs	r3, #0
     ade:	e01e      	b.n	b1e <usart_init+0x2ee>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     ae0:	2310      	movs	r3, #16
     ae2:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ae4:	2300      	movs	r3, #0
     ae6:	9307      	str	r3, [sp, #28]
     ae8:	e003      	b.n	af2 <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     aea:	2303      	movs	r3, #3
     aec:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     aee:	2300      	movs	r3, #0
     af0:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     af2:	6833      	ldr	r3, [r6, #0]
     af4:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     af6:	68f3      	ldr	r3, [r6, #12]
     af8:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     afa:	6973      	ldr	r3, [r6, #20]
     afc:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     afe:	7e33      	ldrb	r3, [r6, #24]
     b00:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     b02:	2326      	movs	r3, #38	; 0x26
     b04:	5cf3      	ldrb	r3, [r6, r3]
     b06:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     b08:	6872      	ldr	r2, [r6, #4]
     b0a:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     b0c:	2a00      	cmp	r2, #0
     b0e:	d100      	bne.n	b12 <usart_init+0x2e2>
     b10:	e71f      	b.n	952 <usart_init+0x122>
     b12:	2380      	movs	r3, #128	; 0x80
     b14:	055b      	lsls	r3, r3, #21
     b16:	429a      	cmp	r2, r3
     b18:	d100      	bne.n	b1c <usart_init+0x2ec>
     b1a:	e704      	b.n	926 <usart_init+0xf6>
     b1c:	e73e      	b.n	99c <usart_init+0x16c>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b1e:	1c18      	adds	r0, r3, #0
     b20:	b011      	add	sp, #68	; 0x44
     b22:	bc3c      	pop	{r2, r3, r4, r5}
     b24:	4690      	mov	r8, r2
     b26:	4699      	mov	r9, r3
     b28:	46a2      	mov	sl, r4
     b2a:	46ab      	mov	fp, r5
     b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	0000056d 	.word	0x0000056d
     b34:	40000400 	.word	0x40000400
     b38:	000017e1 	.word	0x000017e1
     b3c:	00001755 	.word	0x00001755
     b40:	00000399 	.word	0x00000399
     b44:	000017fd 	.word	0x000017fd
     b48:	000001a9 	.word	0x000001a9
     b4c:	000001d1 	.word	0x000001d1
     b50:	41002000 	.word	0x41002000
     b54:	000003e5 	.word	0x000003e5
     b58:	000018d9 	.word	0x000018d9
     b5c:	00000cad 	.word	0x00000cad
     b60:	00000e51 	.word	0x00000e51
     b64:	200002bc 	.word	0x200002bc

00000b68 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     b68:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b6a:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b6c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     b6e:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b70:	2c00      	cmp	r4, #0
     b72:	d00d      	beq.n	b90 <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b74:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     b76:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     b78:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     b7a:	2800      	cmp	r0, #0
     b7c:	d108      	bne.n	b90 <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b7e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b80:	2a00      	cmp	r2, #0
     b82:	d1fc      	bne.n	b7e <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     b84:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b86:	2102      	movs	r1, #2
     b88:	7e1a      	ldrb	r2, [r3, #24]
     b8a:	420a      	tst	r2, r1
     b8c:	d0fc      	beq.n	b88 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     b8e:	2200      	movs	r2, #0
}
     b90:	1c10      	adds	r0, r2, #0
     b92:	bd10      	pop	{r4, pc}

00000b94 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     b94:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b96:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b98:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     b9a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b9c:	2a00      	cmp	r2, #0
     b9e:	d033      	beq.n	c08 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     ba0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     ba2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     ba4:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     ba6:	2a00      	cmp	r2, #0
     ba8:	d12e      	bne.n	c08 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     baa:	7e22      	ldrb	r2, [r4, #24]
     bac:	0752      	lsls	r2, r2, #29
     bae:	d52b      	bpl.n	c08 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     bb0:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     bb2:	2b00      	cmp	r3, #0
     bb4:	d1fc      	bne.n	bb0 <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     bb6:	8b63      	ldrh	r3, [r4, #26]
     bb8:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     bba:	069a      	lsls	r2, r3, #26
     bbc:	d021      	beq.n	c02 <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     bbe:	079a      	lsls	r2, r3, #30
     bc0:	d503      	bpl.n	bca <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     bc2:	2302      	movs	r3, #2
     bc4:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     bc6:	3318      	adds	r3, #24
     bc8:	e01e      	b.n	c08 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     bca:	075a      	lsls	r2, r3, #29
     bcc:	d503      	bpl.n	bd6 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     bce:	2304      	movs	r3, #4
     bd0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     bd2:	331a      	adds	r3, #26
     bd4:	e018      	b.n	c08 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bd6:	07da      	lsls	r2, r3, #31
     bd8:	d503      	bpl.n	be2 <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bda:	2301      	movs	r3, #1
     bdc:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     bde:	3312      	adds	r3, #18
     be0:	e012      	b.n	c08 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     be2:	06da      	lsls	r2, r3, #27
     be4:	d505      	bpl.n	bf2 <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     be6:	8b62      	ldrh	r2, [r4, #26]
     be8:	2310      	movs	r3, #16
     bea:	4313      	orrs	r3, r2
     bec:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     bee:	2342      	movs	r3, #66	; 0x42
     bf0:	e00a      	b.n	c08 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     bf2:	069b      	lsls	r3, r3, #26
     bf4:	d505      	bpl.n	c02 <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     bf6:	8b62      	ldrh	r2, [r4, #26]
     bf8:	2320      	movs	r3, #32
     bfa:	4313      	orrs	r3, r2
     bfc:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     bfe:	2341      	movs	r3, #65	; 0x41
     c00:	e002      	b.n	c08 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     c02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     c04:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     c06:	2300      	movs	r3, #0
}
     c08:	1c18      	adds	r0, r3, #0
     c0a:	bd10      	pop	{r4, pc}

00000c0c <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c0e:	4657      	mov	r7, sl
     c10:	464e      	mov	r6, r9
     c12:	b4c0      	push	{r6, r7}
     c14:	b083      	sub	sp, #12
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     c16:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     c18:	2a00      	cmp	r2, #0
     c1a:	d03c      	beq.n	c96 <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     c1c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     c1e:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     c20:	2c00      	cmp	r4, #0
     c22:	d038      	beq.n	c96 <usart_read_buffer_wait+0x8a>
     c24:	468a      	mov	sl, r1
     c26:	4681      	mov	r9, r0
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c28:	6805      	ldr	r5, [r0, #0]
     c2a:	1c17      	adds	r7, r2, #0
     c2c:	2600      	movs	r6, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     c2e:	2404      	movs	r4, #4
     c30:	e02c      	b.n	c8c <usart_read_buffer_wait+0x80>
     c32:	7e2a      	ldrb	r2, [r5, #24]
     c34:	4222      	tst	r2, r4
     c36:	d104      	bne.n	c42 <usart_read_buffer_wait+0x36>
				break;
			} else if (i == USART_TIMEOUT) {
     c38:	2b01      	cmp	r3, #1
     c3a:	d023      	beq.n	c84 <usart_read_buffer_wait+0x78>
     c3c:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     c3e:	2b00      	cmp	r3, #0
     c40:	d1f7      	bne.n	c32 <usart_read_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
     c42:	466b      	mov	r3, sp
     c44:	1d99      	adds	r1, r3, #6
     c46:	2300      	movs	r3, #0
     c48:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
     c4a:	4648      	mov	r0, r9
     c4c:	4b15      	ldr	r3, [pc, #84]	; (ca4 <usart_read_buffer_wait+0x98>)
     c4e:	4798      	blx	r3

		if (retval != STATUS_OK) {
     c50:	2800      	cmp	r0, #0
     c52:	d119      	bne.n	c88 <usart_read_buffer_wait+0x7c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     c54:	1c73      	adds	r3, r6, #1
     c56:	b299      	uxth	r1, r3
     c58:	466b      	mov	r3, sp
     c5a:	3306      	adds	r3, #6
     c5c:	881b      	ldrh	r3, [r3, #0]
     c5e:	4652      	mov	r2, sl
     c60:	5593      	strb	r3, [r2, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c62:	464a      	mov	r2, r9
     c64:	7952      	ldrb	r2, [r2, #5]
     c66:	2a01      	cmp	r2, #1
     c68:	d105      	bne.n	c76 <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
     c6a:	1cb2      	adds	r2, r6, #2
     c6c:	b296      	uxth	r6, r2
     c6e:	0a1b      	lsrs	r3, r3, #8
     c70:	4652      	mov	r2, sl
     c72:	5453      	strb	r3, [r2, r1]
     c74:	e000      	b.n	c78 <usart_read_buffer_wait+0x6c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     c76:	1c0e      	adds	r6, r1, #0
     c78:	1e7a      	subs	r2, r7, #1
     c7a:	b297      	uxth	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
     c7c:	2f00      	cmp	r7, #0
     c7e:	d105      	bne.n	c8c <usart_read_buffer_wait+0x80>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
     c80:	2300      	movs	r3, #0
     c82:	e008      	b.n	c96 <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     c84:	2312      	movs	r3, #18
     c86:	e006      	b.n	c96 <usart_read_buffer_wait+0x8a>
		}

		enum status_code retval;
		uint16_t received_data = 0;

		retval = usart_read_wait(module, &received_data);
     c88:	1c03      	adds	r3, r0, #0
     c8a:	e004      	b.n	c96 <usart_read_buffer_wait+0x8a>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     c8c:	7e2b      	ldrb	r3, [r5, #24]
     c8e:	4223      	tst	r3, r4
     c90:	d1d7      	bne.n	c42 <usart_read_buffer_wait+0x36>
     c92:	4b05      	ldr	r3, [pc, #20]	; (ca8 <usart_read_buffer_wait+0x9c>)
     c94:	e7cd      	b.n	c32 <usart_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     c96:	1c18      	adds	r0, r3, #0
     c98:	b003      	add	sp, #12
     c9a:	bc0c      	pop	{r2, r3}
     c9c:	4691      	mov	r9, r2
     c9e:	469a      	mov	sl, r3
     ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	00000b95 	.word	0x00000b95
     ca8:	0000ffff 	.word	0x0000ffff

00000cac <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     cae:	0080      	lsls	r0, r0, #2
     cb0:	4b65      	ldr	r3, [pc, #404]	; (e48 <_usart_interrupt_handler+0x19c>)
     cb2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     cb4:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cb6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     cb8:	2b00      	cmp	r3, #0
     cba:	d1fc      	bne.n	cb6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     cbc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     cbe:	7da6      	ldrb	r6, [r4, #22]
     cc0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     cc2:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     cc4:	5ceb      	ldrb	r3, [r5, r3]
     cc6:	2230      	movs	r2, #48	; 0x30
     cc8:	5caf      	ldrb	r7, [r5, r2]
     cca:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     ccc:	07f3      	lsls	r3, r6, #31
     cce:	d522      	bpl.n	d16 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     cd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cd2:	b29b      	uxth	r3, r3
     cd4:	2b00      	cmp	r3, #0
     cd6:	d01c      	beq.n	d12 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     cda:	7813      	ldrb	r3, [r2, #0]
     cdc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     cde:	1c51      	adds	r1, r2, #1
     ce0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ce2:	7969      	ldrb	r1, [r5, #5]
     ce4:	2901      	cmp	r1, #1
     ce6:	d001      	beq.n	cec <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     ce8:	b29b      	uxth	r3, r3
     cea:	e004      	b.n	cf6 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     cec:	7851      	ldrb	r1, [r2, #1]
     cee:	0209      	lsls	r1, r1, #8
     cf0:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     cf2:	3202      	adds	r2, #2
     cf4:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     cf6:	05db      	lsls	r3, r3, #23
     cf8:	0ddb      	lsrs	r3, r3, #23
     cfa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     cfc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cfe:	3b01      	subs	r3, #1
     d00:	b29b      	uxth	r3, r3
     d02:	85eb      	strh	r3, [r5, #46]	; 0x2e
     d04:	2b00      	cmp	r3, #0
     d06:	d106      	bne.n	d16 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d08:	3301      	adds	r3, #1
     d0a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     d0c:	3301      	adds	r3, #1
     d0e:	75a3      	strb	r3, [r4, #22]
     d10:	e001      	b.n	d16 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     d12:	2301      	movs	r3, #1
     d14:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     d16:	07b3      	lsls	r3, r6, #30
     d18:	d509      	bpl.n	d2e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     d1a:	2302      	movs	r3, #2
     d1c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     d1e:	2200      	movs	r2, #0
     d20:	3331      	adds	r3, #49	; 0x31
     d22:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     d24:	07fb      	lsls	r3, r7, #31
     d26:	d502      	bpl.n	d2e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d28:	1c28      	adds	r0, r5, #0
     d2a:	68eb      	ldr	r3, [r5, #12]
     d2c:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     d2e:	0773      	lsls	r3, r6, #29
     d30:	d56a      	bpl.n	e08 <_usart_interrupt_handler+0x15c>

		if (module->remaining_rx_buffer_length) {
     d32:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d34:	b29b      	uxth	r3, r3
     d36:	2b00      	cmp	r3, #0
     d38:	d064      	beq.n	e04 <_usart_interrupt_handler+0x158>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d3a:	8b63      	ldrh	r3, [r4, #26]
     d3c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     d3e:	071a      	lsls	r2, r3, #28
     d40:	d402      	bmi.n	d48 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d42:	223f      	movs	r2, #63	; 0x3f
     d44:	4013      	ands	r3, r2
     d46:	e001      	b.n	d4c <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     d48:	2237      	movs	r2, #55	; 0x37
     d4a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     d4c:	2b00      	cmp	r3, #0
     d4e:	d037      	beq.n	dc0 <_usart_interrupt_handler+0x114>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d50:	079a      	lsls	r2, r3, #30
     d52:	d507      	bpl.n	d64 <_usart_interrupt_handler+0xb8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d54:	221a      	movs	r2, #26
     d56:	2332      	movs	r3, #50	; 0x32
     d58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     d5a:	8b62      	ldrh	r2, [r4, #26]
     d5c:	3b30      	subs	r3, #48	; 0x30
     d5e:	4313      	orrs	r3, r2
     d60:	8363      	strh	r3, [r4, #26]
     d62:	e027      	b.n	db4 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d64:	075a      	lsls	r2, r3, #29
     d66:	d507      	bpl.n	d78 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     d68:	221e      	movs	r2, #30
     d6a:	2332      	movs	r3, #50	; 0x32
     d6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     d6e:	8b62      	ldrh	r2, [r4, #26]
     d70:	3b2e      	subs	r3, #46	; 0x2e
     d72:	4313      	orrs	r3, r2
     d74:	8363      	strh	r3, [r4, #26]
     d76:	e01d      	b.n	db4 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d78:	07da      	lsls	r2, r3, #31
     d7a:	d507      	bpl.n	d8c <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     d7c:	2213      	movs	r2, #19
     d7e:	2332      	movs	r3, #50	; 0x32
     d80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     d82:	8b62      	ldrh	r2, [r4, #26]
     d84:	3b31      	subs	r3, #49	; 0x31
     d86:	4313      	orrs	r3, r2
     d88:	8363      	strh	r3, [r4, #26]
     d8a:	e013      	b.n	db4 <_usart_interrupt_handler+0x108>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     d8c:	06da      	lsls	r2, r3, #27
     d8e:	d507      	bpl.n	da0 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     d90:	2242      	movs	r2, #66	; 0x42
     d92:	2332      	movs	r3, #50	; 0x32
     d94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     d96:	8b62      	ldrh	r2, [r4, #26]
     d98:	3b22      	subs	r3, #34	; 0x22
     d9a:	4313      	orrs	r3, r2
     d9c:	8363      	strh	r3, [r4, #26]
     d9e:	e009      	b.n	db4 <_usart_interrupt_handler+0x108>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     da0:	2220      	movs	r2, #32
     da2:	421a      	tst	r2, r3
     da4:	d006      	beq.n	db4 <_usart_interrupt_handler+0x108>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     da6:	3221      	adds	r2, #33	; 0x21
     da8:	2332      	movs	r3, #50	; 0x32
     daa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     dac:	8b62      	ldrh	r2, [r4, #26]
     dae:	3b12      	subs	r3, #18
     db0:	4313      	orrs	r3, r2
     db2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     db4:	077b      	lsls	r3, r7, #29
     db6:	d527      	bpl.n	e08 <_usart_interrupt_handler+0x15c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     db8:	1c28      	adds	r0, r5, #0
     dba:	696b      	ldr	r3, [r5, #20]
     dbc:	4798      	blx	r3
     dbe:	e023      	b.n	e08 <_usart_interrupt_handler+0x15c>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     dc0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     dc2:	05db      	lsls	r3, r3, #23
     dc4:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     dc6:	b2da      	uxtb	r2, r3
     dc8:	6a69      	ldr	r1, [r5, #36]	; 0x24
     dca:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     dcc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     dce:	1c51      	adds	r1, r2, #1
     dd0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     dd2:	7969      	ldrb	r1, [r5, #5]
     dd4:	2901      	cmp	r1, #1
     dd6:	d104      	bne.n	de2 <_usart_interrupt_handler+0x136>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     dd8:	0a1b      	lsrs	r3, r3, #8
     dda:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     ddc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     dde:	3301      	adds	r3, #1
     de0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     de2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     de4:	3b01      	subs	r3, #1
     de6:	b29b      	uxth	r3, r3
     de8:	85ab      	strh	r3, [r5, #44]	; 0x2c
     dea:	2b00      	cmp	r3, #0
     dec:	d10c      	bne.n	e08 <_usart_interrupt_handler+0x15c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     dee:	3304      	adds	r3, #4
     df0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     df2:	2200      	movs	r2, #0
     df4:	332e      	adds	r3, #46	; 0x2e
     df6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     df8:	07bb      	lsls	r3, r7, #30
     dfa:	d505      	bpl.n	e08 <_usart_interrupt_handler+0x15c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     dfc:	1c28      	adds	r0, r5, #0
     dfe:	692b      	ldr	r3, [r5, #16]
     e00:	4798      	blx	r3
     e02:	e001      	b.n	e08 <_usart_interrupt_handler+0x15c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     e04:	2304      	movs	r3, #4
     e06:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     e08:	06f3      	lsls	r3, r6, #27
     e0a:	d507      	bpl.n	e1c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     e0c:	2310      	movs	r3, #16
     e0e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     e10:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     e12:	06fb      	lsls	r3, r7, #27
     e14:	d502      	bpl.n	e1c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     e16:	1c28      	adds	r0, r5, #0
     e18:	69eb      	ldr	r3, [r5, #28]
     e1a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     e1c:	06b3      	lsls	r3, r6, #26
     e1e:	d507      	bpl.n	e30 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     e20:	2320      	movs	r3, #32
     e22:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     e24:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     e26:	073b      	lsls	r3, r7, #28
     e28:	d502      	bpl.n	e30 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     e2a:	1c28      	adds	r0, r5, #0
     e2c:	69ab      	ldr	r3, [r5, #24]
     e2e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     e30:	0733      	lsls	r3, r6, #28
     e32:	d507      	bpl.n	e44 <_usart_interrupt_handler+0x198>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     e34:	2308      	movs	r3, #8
     e36:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     e38:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     e3a:	06bb      	lsls	r3, r7, #26
     e3c:	d502      	bpl.n	e44 <_usart_interrupt_handler+0x198>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     e3e:	6a2b      	ldr	r3, [r5, #32]
     e40:	1c28      	adds	r0, r5, #0
     e42:	4798      	blx	r3
		}
	}
#endif
}
     e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	200002bc 	.word	0x200002bc

00000e4c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     e4c:	4770      	bx	lr
     e4e:	46c0      	nop			; (mov r8, r8)

00000e50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     e50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     e52:	4b0a      	ldr	r3, [pc, #40]	; (e7c <_sercom_set_handler+0x2c>)
     e54:	781b      	ldrb	r3, [r3, #0]
     e56:	2b00      	cmp	r3, #0
     e58:	d10c      	bne.n	e74 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e5a:	4f09      	ldr	r7, [pc, #36]	; (e80 <_sercom_set_handler+0x30>)
     e5c:	4e09      	ldr	r6, [pc, #36]	; (e84 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     e5e:	4d0a      	ldr	r5, [pc, #40]	; (e88 <_sercom_set_handler+0x38>)
     e60:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e62:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e64:	195a      	adds	r2, r3, r5
     e66:	6014      	str	r4, [r2, #0]
     e68:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e6a:	2b18      	cmp	r3, #24
     e6c:	d1f9      	bne.n	e62 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     e6e:	2201      	movs	r2, #1
     e70:	4b02      	ldr	r3, [pc, #8]	; (e7c <_sercom_set_handler+0x2c>)
     e72:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e74:	0080      	lsls	r0, r0, #2
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <_sercom_set_handler+0x30>)
     e78:	50c1      	str	r1, [r0, r3]
}
     e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e7c:	20000265 	.word	0x20000265
     e80:	20000268 	.word	0x20000268
     e84:	00000e4d 	.word	0x00000e4d
     e88:	200002bc 	.word	0x200002bc

00000e8c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e8c:	b510      	push	{r4, lr}
     e8e:	b082      	sub	sp, #8
     e90:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e92:	4668      	mov	r0, sp
     e94:	4905      	ldr	r1, [pc, #20]	; (eac <_sercom_get_interrupt_vector+0x20>)
     e96:	2206      	movs	r2, #6
     e98:	4b05      	ldr	r3, [pc, #20]	; (eb0 <_sercom_get_interrupt_vector+0x24>)
     e9a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e9c:	1c20      	adds	r0, r4, #0
     e9e:	4b05      	ldr	r3, [pc, #20]	; (eb4 <_sercom_get_interrupt_vector+0x28>)
     ea0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ea2:	466b      	mov	r3, sp
     ea4:	5618      	ldrsb	r0, [r3, r0]
}
     ea6:	b002      	add	sp, #8
     ea8:	bd10      	pop	{r4, pc}
     eaa:	46c0      	nop			; (mov r8, r8)
     eac:	00004cac 	.word	0x00004cac
     eb0:	00003d3d 	.word	0x00003d3d
     eb4:	0000056d 	.word	0x0000056d

00000eb8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     eb8:	b508      	push	{r3, lr}
     eba:	4b02      	ldr	r3, [pc, #8]	; (ec4 <SERCOM0_Handler+0xc>)
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	2000      	movs	r0, #0
     ec0:	4798      	blx	r3
     ec2:	bd08      	pop	{r3, pc}
     ec4:	20000268 	.word	0x20000268

00000ec8 <SERCOM1_Handler>:
     ec8:	b508      	push	{r3, lr}
     eca:	4b02      	ldr	r3, [pc, #8]	; (ed4 <SERCOM1_Handler+0xc>)
     ecc:	685b      	ldr	r3, [r3, #4]
     ece:	2001      	movs	r0, #1
     ed0:	4798      	blx	r3
     ed2:	bd08      	pop	{r3, pc}
     ed4:	20000268 	.word	0x20000268

00000ed8 <SERCOM2_Handler>:
     ed8:	b508      	push	{r3, lr}
     eda:	4b02      	ldr	r3, [pc, #8]	; (ee4 <SERCOM2_Handler+0xc>)
     edc:	689b      	ldr	r3, [r3, #8]
     ede:	2002      	movs	r0, #2
     ee0:	4798      	blx	r3
     ee2:	bd08      	pop	{r3, pc}
     ee4:	20000268 	.word	0x20000268

00000ee8 <SERCOM3_Handler>:
     ee8:	b508      	push	{r3, lr}
     eea:	4b02      	ldr	r3, [pc, #8]	; (ef4 <SERCOM3_Handler+0xc>)
     eec:	68db      	ldr	r3, [r3, #12]
     eee:	2003      	movs	r0, #3
     ef0:	4798      	blx	r3
     ef2:	bd08      	pop	{r3, pc}
     ef4:	20000268 	.word	0x20000268

00000ef8 <SERCOM4_Handler>:
     ef8:	b508      	push	{r3, lr}
     efa:	4b02      	ldr	r3, [pc, #8]	; (f04 <SERCOM4_Handler+0xc>)
     efc:	691b      	ldr	r3, [r3, #16]
     efe:	2004      	movs	r0, #4
     f00:	4798      	blx	r3
     f02:	bd08      	pop	{r3, pc}
     f04:	20000268 	.word	0x20000268

00000f08 <SERCOM5_Handler>:
     f08:	b508      	push	{r3, lr}
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <SERCOM5_Handler+0xc>)
     f0c:	695b      	ldr	r3, [r3, #20]
     f0e:	2005      	movs	r0, #5
     f10:	4798      	blx	r3
     f12:	bd08      	pop	{r3, pc}
     f14:	20000268 	.word	0x20000268

00000f18 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     f18:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1a:	4647      	mov	r7, r8
     f1c:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     f1e:	0080      	lsls	r0, r0, #2
     f20:	4b0d      	ldr	r3, [pc, #52]	; (f58 <_tcc_interrupt_handler+0x40>)
     f22:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     f24:	683b      	ldr	r3, [r7, #0]
     f26:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     f2a:	401e      	ands	r6, r3
     f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f2e:	401e      	ands	r6, r3
     f30:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     f32:	4b0a      	ldr	r3, [pc, #40]	; (f5c <_tcc_interrupt_handler+0x44>)
     f34:	4698      	mov	r8, r3
     f36:	4643      	mov	r3, r8
     f38:	58e5      	ldr	r5, [r4, r3]
     f3a:	422e      	tst	r6, r5
     f3c:	d005      	beq.n	f4a <_tcc_interrupt_handler+0x32>
     f3e:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     f40:	685b      	ldr	r3, [r3, #4]
     f42:	1c38      	adds	r0, r7, #0
     f44:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     f46:	683b      	ldr	r3, [r7, #0]
     f48:	62dd      	str	r5, [r3, #44]	; 0x2c
     f4a:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     f4c:	2c30      	cmp	r4, #48	; 0x30
     f4e:	d1f2      	bne.n	f36 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     f50:	bc04      	pop	{r2}
     f52:	4690      	mov	r8, r2
     f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	200002d4 	.word	0x200002d4
     f5c:	00004cb4 	.word	0x00004cb4

00000f60 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     f60:	b508      	push	{r3, lr}
     f62:	2000      	movs	r0, #0
     f64:	4b01      	ldr	r3, [pc, #4]	; (f6c <TCC0_Handler+0xc>)
     f66:	4798      	blx	r3
     f68:	bd08      	pop	{r3, pc}
     f6a:	46c0      	nop			; (mov r8, r8)
     f6c:	00000f19 	.word	0x00000f19

00000f70 <TCC1_Handler>:
     f70:	b508      	push	{r3, lr}
     f72:	2001      	movs	r0, #1
     f74:	4b01      	ldr	r3, [pc, #4]	; (f7c <TCC1_Handler+0xc>)
     f76:	4798      	blx	r3
     f78:	bd08      	pop	{r3, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00000f19 	.word	0x00000f19

00000f80 <TCC2_Handler>:
     f80:	b508      	push	{r3, lr}
     f82:	2002      	movs	r0, #2
     f84:	4b01      	ldr	r3, [pc, #4]	; (f8c <TCC2_Handler+0xc>)
     f86:	4798      	blx	r3
     f88:	bd08      	pop	{r3, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	00000f19 	.word	0x00000f19

00000f90 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f90:	4b0c      	ldr	r3, [pc, #48]	; (fc4 <cpu_irq_enter_critical+0x34>)
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	2b00      	cmp	r3, #0
     f96:	d110      	bne.n	fba <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f98:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f9c:	2b00      	cmp	r3, #0
     f9e:	d109      	bne.n	fb4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     fa0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     fa2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     fa6:	2200      	movs	r2, #0
     fa8:	4b07      	ldr	r3, [pc, #28]	; (fc8 <cpu_irq_enter_critical+0x38>)
     faa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     fac:	3201      	adds	r2, #1
     fae:	4b07      	ldr	r3, [pc, #28]	; (fcc <cpu_irq_enter_critical+0x3c>)
     fb0:	701a      	strb	r2, [r3, #0]
     fb2:	e002      	b.n	fba <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     fb4:	2200      	movs	r2, #0
     fb6:	4b05      	ldr	r3, [pc, #20]	; (fcc <cpu_irq_enter_critical+0x3c>)
     fb8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     fba:	4a02      	ldr	r2, [pc, #8]	; (fc4 <cpu_irq_enter_critical+0x34>)
     fbc:	6813      	ldr	r3, [r2, #0]
     fbe:	3301      	adds	r3, #1
     fc0:	6013      	str	r3, [r2, #0]
}
     fc2:	4770      	bx	lr
     fc4:	20000280 	.word	0x20000280
     fc8:	20000008 	.word	0x20000008
     fcc:	20000284 	.word	0x20000284

00000fd0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     fd0:	4b08      	ldr	r3, [pc, #32]	; (ff4 <cpu_irq_leave_critical+0x24>)
     fd2:	681a      	ldr	r2, [r3, #0]
     fd4:	3a01      	subs	r2, #1
     fd6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	2b00      	cmp	r3, #0
     fdc:	d109      	bne.n	ff2 <cpu_irq_leave_critical+0x22>
     fde:	4b06      	ldr	r3, [pc, #24]	; (ff8 <cpu_irq_leave_critical+0x28>)
     fe0:	781b      	ldrb	r3, [r3, #0]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d005      	beq.n	ff2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fe6:	2201      	movs	r2, #1
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <cpu_irq_leave_critical+0x2c>)
     fea:	701a      	strb	r2, [r3, #0]
     fec:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     ff0:	b662      	cpsie	i
	}
}
     ff2:	4770      	bx	lr
     ff4:	20000280 	.word	0x20000280
     ff8:	20000284 	.word	0x20000284
     ffc:	20000008 	.word	0x20000008

00001000 <system_board_init>:




void system_board_init(void)
{
    1000:	b5f0      	push	{r4, r5, r6, r7, lr}
    1002:	4647      	mov	r7, r8
    1004:	b480      	push	{r7}
    1006:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1008:	ac01      	add	r4, sp, #4
    100a:	2601      	movs	r6, #1
    100c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    100e:	2300      	movs	r3, #0
    1010:	4698      	mov	r8, r3
    1012:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1014:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1016:	2013      	movs	r0, #19
    1018:	1c21      	adds	r1, r4, #0
    101a:	4d0e      	ldr	r5, [pc, #56]	; (1054 <system_board_init+0x54>)
    101c:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    101e:	4f0e      	ldr	r7, [pc, #56]	; (1058 <system_board_init+0x58>)
    1020:	2380      	movs	r3, #128	; 0x80
    1022:	031b      	lsls	r3, r3, #12
    1024:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure Neopixel control output */
	
	port_pin_set_config(neo_PIN, &pin_conf);
    1026:	2010      	movs	r0, #16
    1028:	1c21      	adds	r1, r4, #0
    102a:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    102c:	2380      	movs	r3, #128	; 0x80
    102e:	025b      	lsls	r3, r3, #9
    1030:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(neo_PIN, false);
	
	/* Configure buzzer control output */
	
	port_pin_set_config(buzzer_PIN, &pin_conf);
    1032:	2017      	movs	r0, #23
    1034:	1c21      	adds	r1, r4, #0
    1036:	47a8      	blx	r5
    1038:	2380      	movs	r3, #128	; 0x80
    103a:	041b      	lsls	r3, r3, #16
    103c:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(buzzer_PIN, false);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    103e:	4643      	mov	r3, r8
    1040:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1042:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1044:	201c      	movs	r0, #28
    1046:	1c21      	adds	r1, r4, #0
    1048:	47a8      	blx	r5
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
    104a:	b002      	add	sp, #8
    104c:	bc04      	pop	{r2}
    104e:	4690      	mov	r8, r2
    1050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	0000105d 	.word	0x0000105d
    1058:	41004400 	.word	0x41004400

0000105c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    105c:	b500      	push	{lr}
    105e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1060:	ab01      	add	r3, sp, #4
    1062:	2280      	movs	r2, #128	; 0x80
    1064:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1066:	780a      	ldrb	r2, [r1, #0]
    1068:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    106a:	784a      	ldrb	r2, [r1, #1]
    106c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    106e:	788a      	ldrb	r2, [r1, #2]
    1070:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1072:	1c19      	adds	r1, r3, #0
    1074:	4b01      	ldr	r3, [pc, #4]	; (107c <port_pin_set_config+0x20>)
    1076:	4798      	blx	r3
}
    1078:	b003      	add	sp, #12
    107a:	bd00      	pop	{pc}
    107c:	000018d9 	.word	0x000018d9

00001080 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1080:	b508      	push	{r3, lr}
	switch (clock_source) {
    1082:	2808      	cmp	r0, #8
    1084:	d803      	bhi.n	108e <system_clock_source_get_hz+0xe>
    1086:	0080      	lsls	r0, r0, #2
    1088:	4b1b      	ldr	r3, [pc, #108]	; (10f8 <system_clock_source_get_hz+0x78>)
    108a:	581b      	ldr	r3, [r3, r0]
    108c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    108e:	2000      	movs	r0, #0
    1090:	e031      	b.n	10f6 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1092:	4b1a      	ldr	r3, [pc, #104]	; (10fc <system_clock_source_get_hz+0x7c>)
    1094:	6918      	ldr	r0, [r3, #16]
    1096:	e02e      	b.n	10f6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1098:	4b19      	ldr	r3, [pc, #100]	; (1100 <system_clock_source_get_hz+0x80>)
    109a:	6a18      	ldr	r0, [r3, #32]
    109c:	0580      	lsls	r0, r0, #22
    109e:	0f80      	lsrs	r0, r0, #30
    10a0:	4b18      	ldr	r3, [pc, #96]	; (1104 <system_clock_source_get_hz+0x84>)
    10a2:	40c3      	lsrs	r3, r0
    10a4:	1c18      	adds	r0, r3, #0
    10a6:	e026      	b.n	10f6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    10a8:	4b14      	ldr	r3, [pc, #80]	; (10fc <system_clock_source_get_hz+0x7c>)
    10aa:	6958      	ldr	r0, [r3, #20]
    10ac:	e023      	b.n	10f6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    10ae:	4b13      	ldr	r3, [pc, #76]	; (10fc <system_clock_source_get_hz+0x7c>)
    10b0:	681b      	ldr	r3, [r3, #0]
    10b2:	2002      	movs	r0, #2
    10b4:	4018      	ands	r0, r3
    10b6:	d01e      	beq.n	10f6 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10b8:	4911      	ldr	r1, [pc, #68]	; (1100 <system_clock_source_get_hz+0x80>)
    10ba:	2210      	movs	r2, #16
    10bc:	68cb      	ldr	r3, [r1, #12]
    10be:	421a      	tst	r2, r3
    10c0:	d0fc      	beq.n	10bc <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    10c2:	4b0e      	ldr	r3, [pc, #56]	; (10fc <system_clock_source_get_hz+0x7c>)
    10c4:	681b      	ldr	r3, [r3, #0]
    10c6:	075b      	lsls	r3, r3, #29
    10c8:	d514      	bpl.n	10f4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10ca:	2000      	movs	r0, #0
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <system_clock_source_get_hz+0x88>)
    10ce:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <system_clock_source_get_hz+0x7c>)
    10d2:	689b      	ldr	r3, [r3, #8]
    10d4:	041b      	lsls	r3, r3, #16
    10d6:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10d8:	4358      	muls	r0, r3
    10da:	e00c      	b.n	10f6 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10dc:	2350      	movs	r3, #80	; 0x50
    10de:	4a08      	ldr	r2, [pc, #32]	; (1100 <system_clock_source_get_hz+0x80>)
    10e0:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    10e2:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10e4:	075b      	lsls	r3, r3, #29
    10e6:	d506      	bpl.n	10f6 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    10e8:	4b04      	ldr	r3, [pc, #16]	; (10fc <system_clock_source_get_hz+0x7c>)
    10ea:	68d8      	ldr	r0, [r3, #12]
    10ec:	e003      	b.n	10f6 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    10ee:	2080      	movs	r0, #128	; 0x80
    10f0:	0200      	lsls	r0, r0, #8
    10f2:	e000      	b.n	10f6 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    10f4:	4805      	ldr	r0, [pc, #20]	; (110c <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    10f6:	bd08      	pop	{r3, pc}
    10f8:	00004ce4 	.word	0x00004ce4
    10fc:	20000288 	.word	0x20000288
    1100:	40000800 	.word	0x40000800
    1104:	007a1200 	.word	0x007a1200
    1108:	000017fd 	.word	0x000017fd
    110c:	02dc6c00 	.word	0x02dc6c00

00001110 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1110:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1112:	4c0c      	ldr	r4, [pc, #48]	; (1144 <system_clock_source_osc8m_set_config+0x34>)
    1114:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1116:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1118:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    111a:	7842      	ldrb	r2, [r0, #1]
    111c:	2001      	movs	r0, #1
    111e:	4002      	ands	r2, r0
    1120:	0192      	lsls	r2, r2, #6
    1122:	2640      	movs	r6, #64	; 0x40
    1124:	43b3      	bics	r3, r6
    1126:	4313      	orrs	r3, r2
    1128:	1c02      	adds	r2, r0, #0
    112a:	402a      	ands	r2, r5
    112c:	01d2      	lsls	r2, r2, #7
    112e:	307f      	adds	r0, #127	; 0x7f
    1130:	4383      	bics	r3, r0
    1132:	4313      	orrs	r3, r2
    1134:	2203      	movs	r2, #3
    1136:	400a      	ands	r2, r1
    1138:	0212      	lsls	r2, r2, #8
    113a:	4903      	ldr	r1, [pc, #12]	; (1148 <system_clock_source_osc8m_set_config+0x38>)
    113c:	400b      	ands	r3, r1
    113e:	4313      	orrs	r3, r2
    1140:	6223      	str	r3, [r4, #32]
}
    1142:	bd70      	pop	{r4, r5, r6, pc}
    1144:	40000800 	.word	0x40000800
    1148:	fffffcff 	.word	0xfffffcff

0000114c <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    114c:	b5f0      	push	{r4, r5, r6, r7, lr}
    114e:	4657      	mov	r7, sl
    1150:	464e      	mov	r6, r9
    1152:	4645      	mov	r5, r8
    1154:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1156:	4e1c      	ldr	r6, [pc, #112]	; (11c8 <system_clock_source_osc32k_set_config+0x7c>)
    1158:	69b3      	ldr	r3, [r6, #24]
    115a:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    115c:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    115e:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1160:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1162:	78c3      	ldrb	r3, [r0, #3]
    1164:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    1166:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1168:	7883      	ldrb	r3, [r0, #2]
    116a:	2001      	movs	r0, #1
    116c:	4003      	ands	r3, r0
    116e:	009b      	lsls	r3, r3, #2
    1170:	469a      	mov	sl, r3
    1172:	2204      	movs	r2, #4
    1174:	4690      	mov	r8, r2
    1176:	4662      	mov	r2, ip
    1178:	4643      	mov	r3, r8
    117a:	439a      	bics	r2, r3
    117c:	1c13      	adds	r3, r2, #0
    117e:	4652      	mov	r2, sl
    1180:	431a      	orrs	r2, r3
    1182:	1c13      	adds	r3, r2, #0
    1184:	4001      	ands	r1, r0
    1186:	00c9      	lsls	r1, r1, #3
    1188:	2208      	movs	r2, #8
    118a:	4393      	bics	r3, r2
    118c:	430b      	orrs	r3, r1
    118e:	464a      	mov	r2, r9
    1190:	4002      	ands	r2, r0
    1192:	0192      	lsls	r2, r2, #6
    1194:	2140      	movs	r1, #64	; 0x40
    1196:	438b      	bics	r3, r1
    1198:	4313      	orrs	r3, r2
    119a:	4007      	ands	r7, r0
    119c:	01ff      	lsls	r7, r7, #7
    119e:	2280      	movs	r2, #128	; 0x80
    11a0:	4393      	bics	r3, r2
    11a2:	433b      	orrs	r3, r7
    11a4:	3a79      	subs	r2, #121	; 0x79
    11a6:	4015      	ands	r5, r2
    11a8:	022d      	lsls	r5, r5, #8
    11aa:	4f08      	ldr	r7, [pc, #32]	; (11cc <system_clock_source_osc32k_set_config+0x80>)
    11ac:	403b      	ands	r3, r7
    11ae:	432b      	orrs	r3, r5
    11b0:	4004      	ands	r4, r0
    11b2:	0320      	lsls	r0, r4, #12
    11b4:	4c06      	ldr	r4, [pc, #24]	; (11d0 <system_clock_source_osc32k_set_config+0x84>)
    11b6:	401c      	ands	r4, r3
    11b8:	4304      	orrs	r4, r0
    11ba:	61b4      	str	r4, [r6, #24]
}
    11bc:	bc1c      	pop	{r2, r3, r4}
    11be:	4690      	mov	r8, r2
    11c0:	4699      	mov	r9, r3
    11c2:	46a2      	mov	sl, r4
    11c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	40000800 	.word	0x40000800
    11cc:	fffff8ff 	.word	0xfffff8ff
    11d0:	ffffefff 	.word	0xffffefff

000011d4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    11d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11d6:	465f      	mov	r7, fp
    11d8:	4656      	mov	r6, sl
    11da:	464d      	mov	r5, r9
    11dc:	4644      	mov	r4, r8
    11de:	b4f0      	push	{r4, r5, r6, r7}
    11e0:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    11e2:	4e2e      	ldr	r6, [pc, #184]	; (129c <system_clock_source_xosc32k_set_config+0xc8>)
    11e4:	8ab3      	ldrh	r3, [r6, #20]
    11e6:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    11e8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    11ea:	7803      	ldrb	r3, [r0, #0]
    11ec:	425a      	negs	r2, r3
    11ee:	415a      	adcs	r2, r3
    11f0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    11f2:	7883      	ldrb	r3, [r0, #2]
    11f4:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    11f6:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    11f8:	7902      	ldrb	r2, [r0, #4]
    11fa:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    11fc:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    11fe:	7b02      	ldrb	r2, [r0, #12]
    1200:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1202:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1204:	6882      	ldr	r2, [r0, #8]
    1206:	4826      	ldr	r0, [pc, #152]	; (12a0 <system_clock_source_xosc32k_set_config+0xcc>)
    1208:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    120a:	2001      	movs	r0, #1
    120c:	464a      	mov	r2, r9
    120e:	0092      	lsls	r2, r2, #2
    1210:	4691      	mov	r9, r2
    1212:	2204      	movs	r2, #4
    1214:	4692      	mov	sl, r2
    1216:	4662      	mov	r2, ip
    1218:	4651      	mov	r1, sl
    121a:	438a      	bics	r2, r1
    121c:	4694      	mov	ip, r2
    121e:	464a      	mov	r2, r9
    1220:	4661      	mov	r1, ip
    1222:	430a      	orrs	r2, r1
    1224:	4694      	mov	ip, r2
    1226:	4642      	mov	r2, r8
    1228:	4002      	ands	r2, r0
    122a:	00d2      	lsls	r2, r2, #3
    122c:	4690      	mov	r8, r2
    122e:	2208      	movs	r2, #8
    1230:	4691      	mov	r9, r2
    1232:	4662      	mov	r2, ip
    1234:	4649      	mov	r1, r9
    1236:	438a      	bics	r2, r1
    1238:	4694      	mov	ip, r2
    123a:	4642      	mov	r2, r8
    123c:	4661      	mov	r1, ip
    123e:	430a      	orrs	r2, r1
    1240:	4694      	mov	ip, r2
    1242:	4003      	ands	r3, r0
    1244:	011b      	lsls	r3, r3, #4
    1246:	2210      	movs	r2, #16
    1248:	4690      	mov	r8, r2
    124a:	4662      	mov	r2, ip
    124c:	4641      	mov	r1, r8
    124e:	438a      	bics	r2, r1
    1250:	4313      	orrs	r3, r2
    1252:	4659      	mov	r1, fp
    1254:	4001      	ands	r1, r0
    1256:	0149      	lsls	r1, r1, #5
    1258:	2220      	movs	r2, #32
    125a:	4393      	bics	r3, r2
    125c:	430b      	orrs	r3, r1
    125e:	9a01      	ldr	r2, [sp, #4]
    1260:	4002      	ands	r2, r0
    1262:	0192      	lsls	r2, r2, #6
    1264:	2140      	movs	r1, #64	; 0x40
    1266:	438b      	bics	r3, r1
    1268:	4313      	orrs	r3, r2
    126a:	4007      	ands	r7, r0
    126c:	01ff      	lsls	r7, r7, #7
    126e:	2280      	movs	r2, #128	; 0x80
    1270:	4393      	bics	r3, r2
    1272:	433b      	orrs	r3, r7
    1274:	3a79      	subs	r2, #121	; 0x79
    1276:	4015      	ands	r5, r2
    1278:	022d      	lsls	r5, r5, #8
    127a:	4f0a      	ldr	r7, [pc, #40]	; (12a4 <system_clock_source_xosc32k_set_config+0xd0>)
    127c:	403b      	ands	r3, r7
    127e:	432b      	orrs	r3, r5
    1280:	4004      	ands	r4, r0
    1282:	0320      	lsls	r0, r4, #12
    1284:	4c08      	ldr	r4, [pc, #32]	; (12a8 <system_clock_source_xosc32k_set_config+0xd4>)
    1286:	401c      	ands	r4, r3
    1288:	4304      	orrs	r4, r0
    128a:	82b4      	strh	r4, [r6, #20]
}
    128c:	b003      	add	sp, #12
    128e:	bc3c      	pop	{r2, r3, r4, r5}
    1290:	4690      	mov	r8, r2
    1292:	4699      	mov	r9, r3
    1294:	46a2      	mov	sl, r4
    1296:	46ab      	mov	fp, r5
    1298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	40000800 	.word	0x40000800
    12a0:	20000288 	.word	0x20000288
    12a4:	fffff8ff 	.word	0xfffff8ff
    12a8:	ffffefff 	.word	0xffffefff

000012ac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    12ac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12ae:	7a03      	ldrb	r3, [r0, #8]
    12b0:	069b      	lsls	r3, r3, #26
    12b2:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12b4:	8943      	ldrh	r3, [r0, #10]
    12b6:	059b      	lsls	r3, r3, #22
    12b8:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12ba:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    12bc:	4c19      	ldr	r4, [pc, #100]	; (1324 <system_clock_source_dfll_set_config+0x78>)
    12be:	6063      	str	r3, [r4, #4]
    12c0:	8881      	ldrh	r1, [r0, #4]
    12c2:	8843      	ldrh	r3, [r0, #2]
    12c4:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    12c6:	79c3      	ldrb	r3, [r0, #7]
    12c8:	7982      	ldrb	r2, [r0, #6]
    12ca:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    12cc:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12ce:	7842      	ldrb	r2, [r0, #1]
    12d0:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    12d2:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    12d4:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12d6:	7803      	ldrb	r3, [r0, #0]
    12d8:	2b04      	cmp	r3, #4
    12da:	d10f      	bne.n	12fc <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12dc:	7b03      	ldrb	r3, [r0, #12]
    12de:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12e0:	8a02      	ldrh	r2, [r0, #16]
    12e2:	4313      	orrs	r3, r2
    12e4:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12e6:	89c3      	ldrh	r3, [r0, #14]
    12e8:	041b      	lsls	r3, r3, #16
    12ea:	4a0f      	ldr	r2, [pc, #60]	; (1328 <system_clock_source_dfll_set_config+0x7c>)
    12ec:	4013      	ands	r3, r2
    12ee:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    12f0:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    12f2:	6821      	ldr	r1, [r4, #0]
    12f4:	2304      	movs	r3, #4
    12f6:	430b      	orrs	r3, r1
    12f8:	6023      	str	r3, [r4, #0]
    12fa:	e011      	b.n	1320 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12fc:	2b20      	cmp	r3, #32
    12fe:	d10f      	bne.n	1320 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1300:	7b03      	ldrb	r3, [r0, #12]
    1302:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1304:	8a02      	ldrh	r2, [r0, #16]
    1306:	4313      	orrs	r3, r2
    1308:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    130a:	89c3      	ldrh	r3, [r0, #14]
    130c:	041b      	lsls	r3, r3, #16
    130e:	4a06      	ldr	r2, [pc, #24]	; (1328 <system_clock_source_dfll_set_config+0x7c>)
    1310:	4013      	ands	r3, r2
    1312:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1314:	4a03      	ldr	r2, [pc, #12]	; (1324 <system_clock_source_dfll_set_config+0x78>)
    1316:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1318:	6813      	ldr	r3, [r2, #0]
    131a:	4904      	ldr	r1, [pc, #16]	; (132c <system_clock_source_dfll_set_config+0x80>)
    131c:	430b      	orrs	r3, r1
    131e:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1320:	bd10      	pop	{r4, pc}
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	20000288 	.word	0x20000288
    1328:	03ff0000 	.word	0x03ff0000
    132c:	00000424 	.word	0x00000424

00001330 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1330:	2808      	cmp	r0, #8
    1332:	d803      	bhi.n	133c <system_clock_source_enable+0xc>
    1334:	0080      	lsls	r0, r0, #2
    1336:	4b25      	ldr	r3, [pc, #148]	; (13cc <system_clock_source_enable+0x9c>)
    1338:	581b      	ldr	r3, [r3, r0]
    133a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    133c:	2017      	movs	r0, #23
    133e:	e044      	b.n	13ca <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1340:	4a23      	ldr	r2, [pc, #140]	; (13d0 <system_clock_source_enable+0xa0>)
    1342:	6a11      	ldr	r1, [r2, #32]
    1344:	2302      	movs	r3, #2
    1346:	430b      	orrs	r3, r1
    1348:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    134a:	2000      	movs	r0, #0
    134c:	e03d      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    134e:	4a20      	ldr	r2, [pc, #128]	; (13d0 <system_clock_source_enable+0xa0>)
    1350:	6991      	ldr	r1, [r2, #24]
    1352:	2302      	movs	r3, #2
    1354:	430b      	orrs	r3, r1
    1356:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1358:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    135a:	e036      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    135c:	4a1c      	ldr	r2, [pc, #112]	; (13d0 <system_clock_source_enable+0xa0>)
    135e:	8a11      	ldrh	r1, [r2, #16]
    1360:	2302      	movs	r3, #2
    1362:	430b      	orrs	r3, r1
    1364:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1366:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1368:	e02f      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    136a:	4a19      	ldr	r2, [pc, #100]	; (13d0 <system_clock_source_enable+0xa0>)
    136c:	8a91      	ldrh	r1, [r2, #20]
    136e:	2302      	movs	r3, #2
    1370:	430b      	orrs	r3, r1
    1372:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1374:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1376:	e028      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1378:	4916      	ldr	r1, [pc, #88]	; (13d4 <system_clock_source_enable+0xa4>)
    137a:	680b      	ldr	r3, [r1, #0]
    137c:	2202      	movs	r2, #2
    137e:	4313      	orrs	r3, r2
    1380:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1382:	4b13      	ldr	r3, [pc, #76]	; (13d0 <system_clock_source_enable+0xa0>)
    1384:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1386:	1c19      	adds	r1, r3, #0
    1388:	320e      	adds	r2, #14
    138a:	68cb      	ldr	r3, [r1, #12]
    138c:	421a      	tst	r2, r3
    138e:	d0fc      	beq.n	138a <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1390:	4a10      	ldr	r2, [pc, #64]	; (13d4 <system_clock_source_enable+0xa4>)
    1392:	6891      	ldr	r1, [r2, #8]
    1394:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <system_clock_source_enable+0xa0>)
    1396:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1398:	6852      	ldr	r2, [r2, #4]
    139a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    139c:	2200      	movs	r2, #0
    139e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13a0:	1c19      	adds	r1, r3, #0
    13a2:	3210      	adds	r2, #16
    13a4:	68cb      	ldr	r3, [r1, #12]
    13a6:	421a      	tst	r2, r3
    13a8:	d0fc      	beq.n	13a4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13aa:	4b0a      	ldr	r3, [pc, #40]	; (13d4 <system_clock_source_enable+0xa4>)
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	b29b      	uxth	r3, r3
    13b0:	4a07      	ldr	r2, [pc, #28]	; (13d0 <system_clock_source_enable+0xa0>)
    13b2:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13b4:	2000      	movs	r0, #0
    13b6:	e008      	b.n	13ca <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13b8:	4905      	ldr	r1, [pc, #20]	; (13d0 <system_clock_source_enable+0xa0>)
    13ba:	2244      	movs	r2, #68	; 0x44
    13bc:	5c88      	ldrb	r0, [r1, r2]
    13be:	2302      	movs	r3, #2
    13c0:	4303      	orrs	r3, r0
    13c2:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13c4:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    13c6:	e000      	b.n	13ca <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    13c8:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    13ca:	4770      	bx	lr
    13cc:	00004d08 	.word	0x00004d08
    13d0:	40000800 	.word	0x40000800
    13d4:	20000288 	.word	0x20000288

000013d8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	464f      	mov	r7, r9
    13dc:	4646      	mov	r6, r8
    13de:	b4c0      	push	{r6, r7}
    13e0:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13e2:	22c2      	movs	r2, #194	; 0xc2
    13e4:	00d2      	lsls	r2, r2, #3
    13e6:	4b61      	ldr	r3, [pc, #388]	; (156c <system_clock_init+0x194>)
    13e8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13ea:	4961      	ldr	r1, [pc, #388]	; (1570 <system_clock_init+0x198>)
    13ec:	684b      	ldr	r3, [r1, #4]
    13ee:	221e      	movs	r2, #30
    13f0:	4393      	bics	r3, r2
    13f2:	3a1a      	subs	r2, #26
    13f4:	4313      	orrs	r3, r2
    13f6:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    13f8:	ab01      	add	r3, sp, #4
    13fa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13fc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13fe:	4d5d      	ldr	r5, [pc, #372]	; (1574 <system_clock_init+0x19c>)
    1400:	b2e0      	uxtb	r0, r4
    1402:	a901      	add	r1, sp, #4
    1404:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1406:	3401      	adds	r4, #1
    1408:	2c25      	cmp	r4, #37	; 0x25
    140a:	d1f9      	bne.n	1400 <system_clock_init+0x28>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    140c:	a80c      	add	r0, sp, #48	; 0x30
    140e:	2300      	movs	r3, #0
    1410:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1412:	2280      	movs	r2, #128	; 0x80
    1414:	0212      	lsls	r2, r2, #8
    1416:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1418:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    141a:	2201      	movs	r2, #1
    141c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    141e:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1420:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1422:	2106      	movs	r1, #6
    1424:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1426:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1428:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    142a:	4b53      	ldr	r3, [pc, #332]	; (1578 <system_clock_init+0x1a0>)
    142c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    142e:	2005      	movs	r0, #5
    1430:	4b52      	ldr	r3, [pc, #328]	; (157c <system_clock_init+0x1a4>)
    1432:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1434:	494d      	ldr	r1, [pc, #308]	; (156c <system_clock_init+0x194>)
    1436:	2202      	movs	r2, #2
    1438:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    143a:	421a      	tst	r2, r3
    143c:	d0fc      	beq.n	1438 <system_clock_init+0x60>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    143e:	494b      	ldr	r1, [pc, #300]	; (156c <system_clock_init+0x194>)
    1440:	8a8a      	ldrh	r2, [r1, #20]
    1442:	2380      	movs	r3, #128	; 0x80
    1444:	4313      	orrs	r3, r2
    1446:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1448:	4d4d      	ldr	r5, [pc, #308]	; (1580 <system_clock_init+0x1a8>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    144a:	682b      	ldr	r3, [r5, #0]
    144c:	04db      	lsls	r3, r3, #19
    144e:	0e5b      	lsrs	r3, r3, #25
    1450:	041a      	lsls	r2, r3, #16
    1452:	6988      	ldr	r0, [r1, #24]
    1454:	4b4b      	ldr	r3, [pc, #300]	; (1584 <system_clock_init+0x1ac>)
    1456:	4003      	ands	r3, r0
    1458:	4313      	orrs	r3, r2
    145a:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    145c:	a80a      	add	r0, sp, #40	; 0x28
    145e:	2301      	movs	r3, #1
    1460:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    1462:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    1464:	2400      	movs	r4, #0
    1466:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    1468:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    146a:	3306      	adds	r3, #6
    146c:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    146e:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1470:	4b45      	ldr	r3, [pc, #276]	; (1588 <system_clock_init+0x1b0>)
    1472:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    1474:	2004      	movs	r0, #4
    1476:	4b41      	ldr	r3, [pc, #260]	; (157c <system_clock_init+0x1a4>)
    1478:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    147a:	ab05      	add	r3, sp, #20
    147c:	2200      	movs	r2, #0
    147e:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1480:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1482:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1484:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    1486:	213f      	movs	r1, #63	; 0x3f
    1488:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    148a:	393b      	subs	r1, #59	; 0x3b
    148c:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    148e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1490:	682b      	ldr	r3, [r5, #0]
    1492:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1494:	2b3f      	cmp	r3, #63	; 0x3f
    1496:	d100      	bne.n	149a <system_clock_init+0xc2>
		coarse = 0x1f;
    1498:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    149a:	a805      	add	r0, sp, #20
    149c:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    149e:	23b7      	movs	r3, #183	; 0xb7
    14a0:	00db      	lsls	r3, r3, #3
    14a2:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    14a4:	2307      	movs	r3, #7
    14a6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    14a8:	3338      	adds	r3, #56	; 0x38
    14aa:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    14ac:	4b37      	ldr	r3, [pc, #220]	; (158c <system_clock_init+0x1b4>)
    14ae:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    14b0:	a804      	add	r0, sp, #16
    14b2:	2500      	movs	r5, #0
    14b4:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    14b6:	2601      	movs	r6, #1
    14b8:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    14ba:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    14bc:	4b34      	ldr	r3, [pc, #208]	; (1590 <system_clock_init+0x1b8>)
    14be:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    14c0:	2006      	movs	r0, #6
    14c2:	4b2e      	ldr	r3, [pc, #184]	; (157c <system_clock_init+0x1a4>)
    14c4:	4699      	mov	r9, r3
    14c6:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    14c8:	4b32      	ldr	r3, [pc, #200]	; (1594 <system_clock_init+0x1bc>)
    14ca:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    14cc:	ac01      	add	r4, sp, #4
    14ce:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    14d0:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    14d2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14d4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    14d6:	2305      	movs	r3, #5
    14d8:	7023      	strb	r3, [r4, #0]
    14da:	2001      	movs	r0, #1
    14dc:	1c21      	adds	r1, r4, #0
    14de:	4b2e      	ldr	r3, [pc, #184]	; (1598 <system_clock_init+0x1c0>)
    14e0:	4698      	mov	r8, r3
    14e2:	4798      	blx	r3
    14e4:	2001      	movs	r0, #1
    14e6:	4f2d      	ldr	r7, [pc, #180]	; (159c <system_clock_init+0x1c4>)
    14e8:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    14ea:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    14ec:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14ee:	7265      	strb	r5, [r4, #9]
    14f0:	2304      	movs	r3, #4
    14f2:	7023      	strb	r3, [r4, #0]
    14f4:	331c      	adds	r3, #28
    14f6:	6063      	str	r3, [r4, #4]
    14f8:	2002      	movs	r0, #2
    14fa:	1c21      	adds	r1, r4, #0
    14fc:	47c0      	blx	r8
    14fe:	2002      	movs	r0, #2
    1500:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1502:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1504:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1506:	2306      	movs	r3, #6
    1508:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    150a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    150c:	7265      	strb	r5, [r4, #9]
    150e:	2003      	movs	r0, #3
    1510:	1c21      	adds	r1, r4, #0
    1512:	47c0      	blx	r8
    1514:	2003      	movs	r0, #3
    1516:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1518:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    151a:	2000      	movs	r0, #0
    151c:	1c21      	adds	r1, r4, #0
    151e:	4b15      	ldr	r3, [pc, #84]	; (1574 <system_clock_init+0x19c>)
    1520:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1522:	2000      	movs	r0, #0
    1524:	4b1e      	ldr	r3, [pc, #120]	; (15a0 <system_clock_init+0x1c8>)
    1526:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1528:	2007      	movs	r0, #7
    152a:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    152c:	490f      	ldr	r1, [pc, #60]	; (156c <system_clock_init+0x194>)
    152e:	22d0      	movs	r2, #208	; 0xd0
    1530:	68cb      	ldr	r3, [r1, #12]
    1532:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1534:	2bd0      	cmp	r3, #208	; 0xd0
    1536:	d1fb      	bne.n	1530 <system_clock_init+0x158>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1538:	4a1a      	ldr	r2, [pc, #104]	; (15a4 <system_clock_init+0x1cc>)
    153a:	2300      	movs	r3, #0
    153c:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    153e:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1540:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1542:	72d3      	strb	r3, [r2, #11]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1544:	a901      	add	r1, sp, #4
    1546:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1548:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    154a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    154c:	3307      	adds	r3, #7
    154e:	700b      	strb	r3, [r1, #0]
    1550:	3b04      	subs	r3, #4
    1552:	604b      	str	r3, [r1, #4]
    1554:	2000      	movs	r0, #0
    1556:	4b10      	ldr	r3, [pc, #64]	; (1598 <system_clock_init+0x1c0>)
    1558:	4798      	blx	r3
    155a:	2000      	movs	r0, #0
    155c:	4b0f      	ldr	r3, [pc, #60]	; (159c <system_clock_init+0x1c4>)
    155e:	4798      	blx	r3
#endif
}
    1560:	b011      	add	sp, #68	; 0x44
    1562:	bc0c      	pop	{r2, r3}
    1564:	4690      	mov	r8, r2
    1566:	4699      	mov	r9, r3
    1568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	40000800 	.word	0x40000800
    1570:	41004000 	.word	0x41004000
    1574:	000017e1 	.word	0x000017e1
    1578:	000011d5 	.word	0x000011d5
    157c:	00001331 	.word	0x00001331
    1580:	00806024 	.word	0x00806024
    1584:	ff80ffff 	.word	0xff80ffff
    1588:	0000114d 	.word	0x0000114d
    158c:	000012ad 	.word	0x000012ad
    1590:	00001111 	.word	0x00001111
    1594:	000015a9 	.word	0x000015a9
    1598:	000015cd 	.word	0x000015cd
    159c:	00001685 	.word	0x00001685
    15a0:	00001755 	.word	0x00001755
    15a4:	40000400 	.word	0x40000400

000015a8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    15a8:	4a06      	ldr	r2, [pc, #24]	; (15c4 <system_gclk_init+0x1c>)
    15aa:	6991      	ldr	r1, [r2, #24]
    15ac:	2308      	movs	r3, #8
    15ae:	430b      	orrs	r3, r1
    15b0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    15b2:	2201      	movs	r2, #1
    15b4:	4b04      	ldr	r3, [pc, #16]	; (15c8 <system_gclk_init+0x20>)
    15b6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    15b8:	1c19      	adds	r1, r3, #0
    15ba:	780b      	ldrb	r3, [r1, #0]
    15bc:	4213      	tst	r3, r2
    15be:	d1fc      	bne.n	15ba <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    15c0:	4770      	bx	lr
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	40000400 	.word	0x40000400
    15c8:	40000c00 	.word	0x40000c00

000015cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    15d0:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    15d2:	780d      	ldrb	r5, [r1, #0]
    15d4:	022d      	lsls	r5, r5, #8
    15d6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    15d8:	784b      	ldrb	r3, [r1, #1]
    15da:	2b00      	cmp	r3, #0
    15dc:	d002      	beq.n	15e4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    15de:	2380      	movs	r3, #128	; 0x80
    15e0:	02db      	lsls	r3, r3, #11
    15e2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    15e4:	7a4b      	ldrb	r3, [r1, #9]
    15e6:	2b00      	cmp	r3, #0
    15e8:	d002      	beq.n	15f0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	031b      	lsls	r3, r3, #12
    15ee:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    15f0:	6848      	ldr	r0, [r1, #4]
    15f2:	2801      	cmp	r0, #1
    15f4:	d918      	bls.n	1628 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    15f6:	1e43      	subs	r3, r0, #1
    15f8:	4218      	tst	r0, r3
    15fa:	d110      	bne.n	161e <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    15fc:	2802      	cmp	r0, #2
    15fe:	d906      	bls.n	160e <system_gclk_gen_set_config+0x42>
    1600:	2302      	movs	r3, #2
    1602:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1604:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1606:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1608:	4298      	cmp	r0, r3
    160a:	d8fb      	bhi.n	1604 <system_gclk_gen_set_config+0x38>
    160c:	e000      	b.n	1610 <system_gclk_gen_set_config+0x44>
    160e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1610:	0212      	lsls	r2, r2, #8
    1612:	4332      	orrs	r2, r6
    1614:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1616:	2380      	movs	r3, #128	; 0x80
    1618:	035b      	lsls	r3, r3, #13
    161a:	431d      	orrs	r5, r3
    161c:	e004      	b.n	1628 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    161e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1620:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1622:	2380      	movs	r3, #128	; 0x80
    1624:	029b      	lsls	r3, r3, #10
    1626:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1628:	7a0b      	ldrb	r3, [r1, #8]
    162a:	2b00      	cmp	r3, #0
    162c:	d002      	beq.n	1634 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    162e:	2380      	movs	r3, #128	; 0x80
    1630:	039b      	lsls	r3, r3, #14
    1632:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1634:	4a0f      	ldr	r2, [pc, #60]	; (1674 <system_gclk_gen_set_config+0xa8>)
    1636:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1638:	b25b      	sxtb	r3, r3
    163a:	2b00      	cmp	r3, #0
    163c:	dbfb      	blt.n	1636 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    163e:	4b0e      	ldr	r3, [pc, #56]	; (1678 <system_gclk_gen_set_config+0xac>)
    1640:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1642:	4b0e      	ldr	r3, [pc, #56]	; (167c <system_gclk_gen_set_config+0xb0>)
    1644:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1646:	4a0b      	ldr	r2, [pc, #44]	; (1674 <system_gclk_gen_set_config+0xa8>)
    1648:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    164a:	b25b      	sxtb	r3, r3
    164c:	2b00      	cmp	r3, #0
    164e:	dbfb      	blt.n	1648 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1650:	4b08      	ldr	r3, [pc, #32]	; (1674 <system_gclk_gen_set_config+0xa8>)
    1652:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1654:	1c1a      	adds	r2, r3, #0
    1656:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1658:	b25b      	sxtb	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	dbfb      	blt.n	1656 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    165e:	4a05      	ldr	r2, [pc, #20]	; (1674 <system_gclk_gen_set_config+0xa8>)
    1660:	6851      	ldr	r1, [r2, #4]
    1662:	2380      	movs	r3, #128	; 0x80
    1664:	025b      	lsls	r3, r3, #9
    1666:	400b      	ands	r3, r1
    1668:	431d      	orrs	r5, r3
    166a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    166c:	4b04      	ldr	r3, [pc, #16]	; (1680 <system_gclk_gen_set_config+0xb4>)
    166e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1670:	bd70      	pop	{r4, r5, r6, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	40000c00 	.word	0x40000c00
    1678:	00000f91 	.word	0x00000f91
    167c:	40000c08 	.word	0x40000c08
    1680:	00000fd1 	.word	0x00000fd1

00001684 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1684:	b510      	push	{r4, lr}
    1686:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1688:	4a0b      	ldr	r2, [pc, #44]	; (16b8 <system_gclk_gen_enable+0x34>)
    168a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    168c:	b25b      	sxtb	r3, r3
    168e:	2b00      	cmp	r3, #0
    1690:	dbfb      	blt.n	168a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1692:	4b0a      	ldr	r3, [pc, #40]	; (16bc <system_gclk_gen_enable+0x38>)
    1694:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <system_gclk_gen_enable+0x3c>)
    1698:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    169a:	4a07      	ldr	r2, [pc, #28]	; (16b8 <system_gclk_gen_enable+0x34>)
    169c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    169e:	b25b      	sxtb	r3, r3
    16a0:	2b00      	cmp	r3, #0
    16a2:	dbfb      	blt.n	169c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    16a4:	4a04      	ldr	r2, [pc, #16]	; (16b8 <system_gclk_gen_enable+0x34>)
    16a6:	6853      	ldr	r3, [r2, #4]
    16a8:	2180      	movs	r1, #128	; 0x80
    16aa:	0249      	lsls	r1, r1, #9
    16ac:	430b      	orrs	r3, r1
    16ae:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16b0:	4b04      	ldr	r3, [pc, #16]	; (16c4 <system_gclk_gen_enable+0x40>)
    16b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16b4:	bd10      	pop	{r4, pc}
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	40000c00 	.word	0x40000c00
    16bc:	00000f91 	.word	0x00000f91
    16c0:	40000c04 	.word	0x40000c04
    16c4:	00000fd1 	.word	0x00000fd1

000016c8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    16c8:	b570      	push	{r4, r5, r6, lr}
    16ca:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16cc:	4a1a      	ldr	r2, [pc, #104]	; (1738 <system_gclk_gen_get_hz+0x70>)
    16ce:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    16d0:	b25b      	sxtb	r3, r3
    16d2:	2b00      	cmp	r3, #0
    16d4:	dbfb      	blt.n	16ce <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16d6:	4b19      	ldr	r3, [pc, #100]	; (173c <system_gclk_gen_get_hz+0x74>)
    16d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16da:	4b19      	ldr	r3, [pc, #100]	; (1740 <system_gclk_gen_get_hz+0x78>)
    16dc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16de:	4a16      	ldr	r2, [pc, #88]	; (1738 <system_gclk_gen_get_hz+0x70>)
    16e0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    16e2:	b25b      	sxtb	r3, r3
    16e4:	2b00      	cmp	r3, #0
    16e6:	dbfb      	blt.n	16e0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    16e8:	4e13      	ldr	r6, [pc, #76]	; (1738 <system_gclk_gen_get_hz+0x70>)
    16ea:	6870      	ldr	r0, [r6, #4]
    16ec:	04c0      	lsls	r0, r0, #19
    16ee:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    16f0:	4b14      	ldr	r3, [pc, #80]	; (1744 <system_gclk_gen_get_hz+0x7c>)
    16f2:	4798      	blx	r3
    16f4:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16f6:	4b12      	ldr	r3, [pc, #72]	; (1740 <system_gclk_gen_get_hz+0x78>)
    16f8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    16fa:	6876      	ldr	r6, [r6, #4]
    16fc:	02f6      	lsls	r6, r6, #11
    16fe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1700:	4b11      	ldr	r3, [pc, #68]	; (1748 <system_gclk_gen_get_hz+0x80>)
    1702:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1704:	4a0c      	ldr	r2, [pc, #48]	; (1738 <system_gclk_gen_get_hz+0x70>)
    1706:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1708:	b25b      	sxtb	r3, r3
    170a:	2b00      	cmp	r3, #0
    170c:	dbfb      	blt.n	1706 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    170e:	4b0a      	ldr	r3, [pc, #40]	; (1738 <system_gclk_gen_get_hz+0x70>)
    1710:	689c      	ldr	r4, [r3, #8]
    1712:	0a24      	lsrs	r4, r4, #8
    1714:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1716:	4b0d      	ldr	r3, [pc, #52]	; (174c <system_gclk_gen_get_hz+0x84>)
    1718:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    171a:	2e00      	cmp	r6, #0
    171c:	d107      	bne.n	172e <system_gclk_gen_get_hz+0x66>
    171e:	2c01      	cmp	r4, #1
    1720:	d907      	bls.n	1732 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1722:	1c28      	adds	r0, r5, #0
    1724:	1c21      	adds	r1, r4, #0
    1726:	4b0a      	ldr	r3, [pc, #40]	; (1750 <system_gclk_gen_get_hz+0x88>)
    1728:	4798      	blx	r3
    172a:	1c05      	adds	r5, r0, #0
    172c:	e001      	b.n	1732 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    172e:	3401      	adds	r4, #1
    1730:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1732:	1c28      	adds	r0, r5, #0
    1734:	bd70      	pop	{r4, r5, r6, pc}
    1736:	46c0      	nop			; (mov r8, r8)
    1738:	40000c00 	.word	0x40000c00
    173c:	00000f91 	.word	0x00000f91
    1740:	40000c04 	.word	0x40000c04
    1744:	00001081 	.word	0x00001081
    1748:	40000c08 	.word	0x40000c08
    174c:	00000fd1 	.word	0x00000fd1
    1750:	00001e9d 	.word	0x00001e9d

00001754 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1754:	b510      	push	{r4, lr}
    1756:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1758:	4b06      	ldr	r3, [pc, #24]	; (1774 <system_gclk_chan_enable+0x20>)
    175a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    175c:	4b06      	ldr	r3, [pc, #24]	; (1778 <system_gclk_chan_enable+0x24>)
    175e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1760:	4a06      	ldr	r2, [pc, #24]	; (177c <system_gclk_chan_enable+0x28>)
    1762:	8851      	ldrh	r1, [r2, #2]
    1764:	2380      	movs	r3, #128	; 0x80
    1766:	01db      	lsls	r3, r3, #7
    1768:	430b      	orrs	r3, r1
    176a:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    176c:	4b04      	ldr	r3, [pc, #16]	; (1780 <system_gclk_chan_enable+0x2c>)
    176e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1770:	bd10      	pop	{r4, pc}
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	00000f91 	.word	0x00000f91
    1778:	40000c02 	.word	0x40000c02
    177c:	40000c00 	.word	0x40000c00
    1780:	00000fd1 	.word	0x00000fd1

00001784 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1784:	b510      	push	{r4, lr}
    1786:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1788:	4b0f      	ldr	r3, [pc, #60]	; (17c8 <system_gclk_chan_disable+0x44>)
    178a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    178c:	4b0f      	ldr	r3, [pc, #60]	; (17cc <system_gclk_chan_disable+0x48>)
    178e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1790:	4b0f      	ldr	r3, [pc, #60]	; (17d0 <system_gclk_chan_disable+0x4c>)
    1792:	885a      	ldrh	r2, [r3, #2]
    1794:	0512      	lsls	r2, r2, #20
    1796:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1798:	8859      	ldrh	r1, [r3, #2]
    179a:	4a0e      	ldr	r2, [pc, #56]	; (17d4 <system_gclk_chan_disable+0x50>)
    179c:	400a      	ands	r2, r1
    179e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    17a0:	8859      	ldrh	r1, [r3, #2]
    17a2:	4a0d      	ldr	r2, [pc, #52]	; (17d8 <system_gclk_chan_disable+0x54>)
    17a4:	400a      	ands	r2, r1
    17a6:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    17a8:	1c19      	adds	r1, r3, #0
    17aa:	2280      	movs	r2, #128	; 0x80
    17ac:	01d2      	lsls	r2, r2, #7
    17ae:	884b      	ldrh	r3, [r1, #2]
    17b0:	4213      	tst	r3, r2
    17b2:	d1fc      	bne.n	17ae <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    17b4:	4906      	ldr	r1, [pc, #24]	; (17d0 <system_gclk_chan_disable+0x4c>)
    17b6:	0202      	lsls	r2, r0, #8
    17b8:	8848      	ldrh	r0, [r1, #2]
    17ba:	4b06      	ldr	r3, [pc, #24]	; (17d4 <system_gclk_chan_disable+0x50>)
    17bc:	4003      	ands	r3, r0
    17be:	4313      	orrs	r3, r2
    17c0:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    17c2:	4b06      	ldr	r3, [pc, #24]	; (17dc <system_gclk_chan_disable+0x58>)
    17c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    17c6:	bd10      	pop	{r4, pc}
    17c8:	00000f91 	.word	0x00000f91
    17cc:	40000c02 	.word	0x40000c02
    17d0:	40000c00 	.word	0x40000c00
    17d4:	fffff0ff 	.word	0xfffff0ff
    17d8:	ffffbfff 	.word	0xffffbfff
    17dc:	00000fd1 	.word	0x00000fd1

000017e0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    17e0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    17e2:	780c      	ldrb	r4, [r1, #0]
    17e4:	0224      	lsls	r4, r4, #8
    17e6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    17e8:	4b02      	ldr	r3, [pc, #8]	; (17f4 <system_gclk_chan_set_config+0x14>)
    17ea:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    17ec:	b2a4      	uxth	r4, r4
    17ee:	4b02      	ldr	r3, [pc, #8]	; (17f8 <system_gclk_chan_set_config+0x18>)
    17f0:	805c      	strh	r4, [r3, #2]
}
    17f2:	bd10      	pop	{r4, pc}
    17f4:	00001785 	.word	0x00001785
    17f8:	40000c00 	.word	0x40000c00

000017fc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    17fc:	b510      	push	{r4, lr}
    17fe:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <system_gclk_chan_get_hz+0x20>)
    1802:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1804:	4b06      	ldr	r3, [pc, #24]	; (1820 <system_gclk_chan_get_hz+0x24>)
    1806:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1808:	4b06      	ldr	r3, [pc, #24]	; (1824 <system_gclk_chan_get_hz+0x28>)
    180a:	885c      	ldrh	r4, [r3, #2]
    180c:	0524      	lsls	r4, r4, #20
    180e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1810:	4b05      	ldr	r3, [pc, #20]	; (1828 <system_gclk_chan_get_hz+0x2c>)
    1812:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1814:	1c20      	adds	r0, r4, #0
    1816:	4b05      	ldr	r3, [pc, #20]	; (182c <system_gclk_chan_get_hz+0x30>)
    1818:	4798      	blx	r3
}
    181a:	bd10      	pop	{r4, pc}
    181c:	00000f91 	.word	0x00000f91
    1820:	40000c02 	.word	0x40000c02
    1824:	40000c00 	.word	0x40000c00
    1828:	00000fd1 	.word	0x00000fd1
    182c:	000016c9 	.word	0x000016c9

00001830 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1830:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1832:	78d3      	ldrb	r3, [r2, #3]
    1834:	2b00      	cmp	r3, #0
    1836:	d11e      	bne.n	1876 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1838:	7814      	ldrb	r4, [r2, #0]
    183a:	2c80      	cmp	r4, #128	; 0x80
    183c:	d004      	beq.n	1848 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    183e:	0624      	lsls	r4, r4, #24
    1840:	2380      	movs	r3, #128	; 0x80
    1842:	025b      	lsls	r3, r3, #9
    1844:	431c      	orrs	r4, r3
    1846:	e000      	b.n	184a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1848:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    184a:	7853      	ldrb	r3, [r2, #1]
    184c:	2502      	movs	r5, #2
    184e:	43ab      	bics	r3, r5
    1850:	d10a      	bne.n	1868 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1852:	7893      	ldrb	r3, [r2, #2]
    1854:	2b00      	cmp	r3, #0
    1856:	d103      	bne.n	1860 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1858:	2380      	movs	r3, #128	; 0x80
    185a:	029b      	lsls	r3, r3, #10
    185c:	431c      	orrs	r4, r3
    185e:	e002      	b.n	1866 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1860:	23c0      	movs	r3, #192	; 0xc0
    1862:	02db      	lsls	r3, r3, #11
    1864:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1866:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1868:	7853      	ldrb	r3, [r2, #1]
    186a:	3b01      	subs	r3, #1
    186c:	2b01      	cmp	r3, #1
    186e:	d812      	bhi.n	1896 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1870:	4b18      	ldr	r3, [pc, #96]	; (18d4 <_system_pinmux_config+0xa4>)
    1872:	401c      	ands	r4, r3
    1874:	e00f      	b.n	1896 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1876:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1878:	040b      	lsls	r3, r1, #16
    187a:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    187c:	24a0      	movs	r4, #160	; 0xa0
    187e:	05e4      	lsls	r4, r4, #23
    1880:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1882:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1884:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1886:	24d0      	movs	r4, #208	; 0xd0
    1888:	0624      	lsls	r4, r4, #24
    188a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    188c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    188e:	78d3      	ldrb	r3, [r2, #3]
    1890:	2b00      	cmp	r3, #0
    1892:	d018      	beq.n	18c6 <_system_pinmux_config+0x96>
    1894:	e01c      	b.n	18d0 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1896:	040b      	lsls	r3, r1, #16
    1898:	0c1b      	lsrs	r3, r3, #16
    189a:	25a0      	movs	r5, #160	; 0xa0
    189c:	05ed      	lsls	r5, r5, #23
    189e:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    18a0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    18a2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    18a4:	0c0b      	lsrs	r3, r1, #16
    18a6:	25d0      	movs	r5, #208	; 0xd0
    18a8:	062d      	lsls	r5, r5, #24
    18aa:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    18ac:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    18ae:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    18b0:	78d3      	ldrb	r3, [r2, #3]
    18b2:	2b00      	cmp	r3, #0
    18b4:	d10c      	bne.n	18d0 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    18b6:	0363      	lsls	r3, r4, #13
    18b8:	d505      	bpl.n	18c6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    18ba:	7893      	ldrb	r3, [r2, #2]
    18bc:	2b01      	cmp	r3, #1
    18be:	d101      	bne.n	18c4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    18c0:	6181      	str	r1, [r0, #24]
    18c2:	e000      	b.n	18c6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    18c4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    18c6:	7853      	ldrb	r3, [r2, #1]
    18c8:	3b01      	subs	r3, #1
    18ca:	2b01      	cmp	r3, #1
    18cc:	d800      	bhi.n	18d0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    18ce:	6081      	str	r1, [r0, #8]
		}
	}
}
    18d0:	bd30      	pop	{r4, r5, pc}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	fffbffff 	.word	0xfffbffff

000018d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    18d8:	b508      	push	{r3, lr}
    18da:	1c03      	adds	r3, r0, #0
    18dc:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    18de:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    18e0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    18e2:	2900      	cmp	r1, #0
    18e4:	d104      	bne.n	18f0 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    18e6:	0958      	lsrs	r0, r3, #5
    18e8:	01c0      	lsls	r0, r0, #7
    18ea:	4905      	ldr	r1, [pc, #20]	; (1900 <system_pinmux_pin_set_config+0x28>)
    18ec:	468c      	mov	ip, r1
    18ee:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    18f0:	211f      	movs	r1, #31
    18f2:	400b      	ands	r3, r1
    18f4:	391e      	subs	r1, #30
    18f6:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    18f8:	4b02      	ldr	r3, [pc, #8]	; (1904 <system_pinmux_pin_set_config+0x2c>)
    18fa:	4798      	blx	r3
}
    18fc:	bd08      	pop	{r3, pc}
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	41004400 	.word	0x41004400
    1904:	00001831 	.word	0x00001831

00001908 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1908:	4770      	bx	lr
    190a:	46c0      	nop			; (mov r8, r8)

0000190c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    190c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    190e:	4b05      	ldr	r3, [pc, #20]	; (1924 <system_init+0x18>)
    1910:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1912:	4b05      	ldr	r3, [pc, #20]	; (1928 <system_init+0x1c>)
    1914:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1916:	4b05      	ldr	r3, [pc, #20]	; (192c <system_init+0x20>)
    1918:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    191a:	4b05      	ldr	r3, [pc, #20]	; (1930 <system_init+0x24>)
    191c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    191e:	4b05      	ldr	r3, [pc, #20]	; (1934 <system_init+0x28>)
    1920:	4798      	blx	r3
}
    1922:	bd08      	pop	{r3, pc}
    1924:	000013d9 	.word	0x000013d9
    1928:	00001001 	.word	0x00001001
    192c:	00001909 	.word	0x00001909
    1930:	00001909 	.word	0x00001909
    1934:	00001909 	.word	0x00001909

00001938 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1938:	e7fe      	b.n	1938 <Dummy_Handler>
    193a:	46c0      	nop			; (mov r8, r8)

0000193c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    193c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    193e:	4b2e      	ldr	r3, [pc, #184]	; (19f8 <Reset_Handler+0xbc>)
    1940:	4a2e      	ldr	r2, [pc, #184]	; (19fc <Reset_Handler+0xc0>)
    1942:	429a      	cmp	r2, r3
    1944:	d003      	beq.n	194e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1946:	4b2e      	ldr	r3, [pc, #184]	; (1a00 <Reset_Handler+0xc4>)
    1948:	4a2b      	ldr	r2, [pc, #172]	; (19f8 <Reset_Handler+0xbc>)
    194a:	429a      	cmp	r2, r3
    194c:	d304      	bcc.n	1958 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    194e:	4b2d      	ldr	r3, [pc, #180]	; (1a04 <Reset_Handler+0xc8>)
    1950:	4a2d      	ldr	r2, [pc, #180]	; (1a08 <Reset_Handler+0xcc>)
    1952:	429a      	cmp	r2, r3
    1954:	d310      	bcc.n	1978 <Reset_Handler+0x3c>
    1956:	e01e      	b.n	1996 <Reset_Handler+0x5a>
    1958:	4a2c      	ldr	r2, [pc, #176]	; (1a0c <Reset_Handler+0xd0>)
    195a:	4b29      	ldr	r3, [pc, #164]	; (1a00 <Reset_Handler+0xc4>)
    195c:	3303      	adds	r3, #3
    195e:	1a9b      	subs	r3, r3, r2
    1960:	089b      	lsrs	r3, r3, #2
    1962:	3301      	adds	r3, #1
    1964:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1966:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1968:	4823      	ldr	r0, [pc, #140]	; (19f8 <Reset_Handler+0xbc>)
    196a:	4924      	ldr	r1, [pc, #144]	; (19fc <Reset_Handler+0xc0>)
    196c:	588c      	ldr	r4, [r1, r2]
    196e:	5084      	str	r4, [r0, r2]
    1970:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1972:	429a      	cmp	r2, r3
    1974:	d1fa      	bne.n	196c <Reset_Handler+0x30>
    1976:	e7ea      	b.n	194e <Reset_Handler+0x12>
    1978:	4a25      	ldr	r2, [pc, #148]	; (1a10 <Reset_Handler+0xd4>)
    197a:	4b22      	ldr	r3, [pc, #136]	; (1a04 <Reset_Handler+0xc8>)
    197c:	3303      	adds	r3, #3
    197e:	1a9b      	subs	r3, r3, r2
    1980:	089b      	lsrs	r3, r3, #2
    1982:	3301      	adds	r3, #1
    1984:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1986:	2200      	movs	r2, #0
                *pDest++ = 0;
    1988:	481f      	ldr	r0, [pc, #124]	; (1a08 <Reset_Handler+0xcc>)
    198a:	2100      	movs	r1, #0
    198c:	1814      	adds	r4, r2, r0
    198e:	6021      	str	r1, [r4, #0]
    1990:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1992:	429a      	cmp	r2, r3
    1994:	d1fa      	bne.n	198c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1996:	4a1f      	ldr	r2, [pc, #124]	; (1a14 <Reset_Handler+0xd8>)
    1998:	21ff      	movs	r1, #255	; 0xff
    199a:	4b1f      	ldr	r3, [pc, #124]	; (1a18 <Reset_Handler+0xdc>)
    199c:	438b      	bics	r3, r1
    199e:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    19a0:	39fd      	subs	r1, #253	; 0xfd
    19a2:	2390      	movs	r3, #144	; 0x90
    19a4:	005b      	lsls	r3, r3, #1
    19a6:	4a1d      	ldr	r2, [pc, #116]	; (1a1c <Reset_Handler+0xe0>)
    19a8:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    19aa:	481d      	ldr	r0, [pc, #116]	; (1a20 <Reset_Handler+0xe4>)
    19ac:	78c3      	ldrb	r3, [r0, #3]
    19ae:	2403      	movs	r4, #3
    19b0:	43a3      	bics	r3, r4
    19b2:	2202      	movs	r2, #2
    19b4:	4313      	orrs	r3, r2
    19b6:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    19b8:	78c3      	ldrb	r3, [r0, #3]
    19ba:	260c      	movs	r6, #12
    19bc:	43b3      	bics	r3, r6
    19be:	2108      	movs	r1, #8
    19c0:	430b      	orrs	r3, r1
    19c2:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    19c4:	4b17      	ldr	r3, [pc, #92]	; (1a24 <Reset_Handler+0xe8>)
    19c6:	7b98      	ldrb	r0, [r3, #14]
    19c8:	2530      	movs	r5, #48	; 0x30
    19ca:	43a8      	bics	r0, r5
    19cc:	1c05      	adds	r5, r0, #0
    19ce:	2020      	movs	r0, #32
    19d0:	4328      	orrs	r0, r5
    19d2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    19d4:	7b98      	ldrb	r0, [r3, #14]
    19d6:	43b0      	bics	r0, r6
    19d8:	4301      	orrs	r1, r0
    19da:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    19dc:	7b99      	ldrb	r1, [r3, #14]
    19de:	43a1      	bics	r1, r4
    19e0:	430a      	orrs	r2, r1
    19e2:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    19e4:	4a10      	ldr	r2, [pc, #64]	; (1a28 <Reset_Handler+0xec>)
    19e6:	6851      	ldr	r1, [r2, #4]
    19e8:	2380      	movs	r3, #128	; 0x80
    19ea:	430b      	orrs	r3, r1
    19ec:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    19ee:	4b0f      	ldr	r3, [pc, #60]	; (1a2c <Reset_Handler+0xf0>)
    19f0:	4798      	blx	r3

        /* Branch to main function */
        main();
    19f2:	4b0f      	ldr	r3, [pc, #60]	; (1a30 <Reset_Handler+0xf4>)
    19f4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    19f6:	e7fe      	b.n	19f6 <Reset_Handler+0xba>
    19f8:	20000000 	.word	0x20000000
    19fc:	000050e4 	.word	0x000050e4
    1a00:	20000174 	.word	0x20000174
    1a04:	200002fc 	.word	0x200002fc
    1a08:	20000174 	.word	0x20000174
    1a0c:	20000004 	.word	0x20000004
    1a10:	20000178 	.word	0x20000178
    1a14:	e000ed00 	.word	0xe000ed00
    1a18:	00000000 	.word	0x00000000
    1a1c:	41007000 	.word	0x41007000
    1a20:	41005000 	.word	0x41005000
    1a24:	41004800 	.word	0x41004800
    1a28:	41004000 	.word	0x41004000
    1a2c:	00003cf1 	.word	0x00003cf1
    1a30:	00001e1d 	.word	0x00001e1d

00001a34 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1a34:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a36:	4a06      	ldr	r2, [pc, #24]	; (1a50 <_sbrk+0x1c>)
    1a38:	6812      	ldr	r2, [r2, #0]
    1a3a:	2a00      	cmp	r2, #0
    1a3c:	d102      	bne.n	1a44 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    1a3e:	4905      	ldr	r1, [pc, #20]	; (1a54 <_sbrk+0x20>)
    1a40:	4a03      	ldr	r2, [pc, #12]	; (1a50 <_sbrk+0x1c>)
    1a42:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    1a44:	4a02      	ldr	r2, [pc, #8]	; (1a50 <_sbrk+0x1c>)
    1a46:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a48:	18c3      	adds	r3, r0, r3
    1a4a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a4c:	4770      	bx	lr
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	200002a0 	.word	0x200002a0
    1a54:	20002300 	.word	0x20002300

00001a58 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1a58:	2001      	movs	r0, #1
    1a5a:	4240      	negs	r0, r0
    1a5c:	4770      	bx	lr
    1a5e:	46c0      	nop			; (mov r8, r8)

00001a60 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a60:	2380      	movs	r3, #128	; 0x80
    1a62:	019b      	lsls	r3, r3, #6
    1a64:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a66:	2000      	movs	r0, #0
    1a68:	4770      	bx	lr
    1a6a:	46c0      	nop			; (mov r8, r8)

00001a6c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1a6c:	2001      	movs	r0, #1
    1a6e:	4770      	bx	lr

00001a70 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1a70:	2000      	movs	r0, #0
    1a72:	4770      	bx	lr

00001a74 <tone>:

char * song =(char *)"MissionImp:d=16,o=6,b=95:32d,32d#,32d,32d#,32d,32d#,32d,32d#,32d,32d,32d#,32e,32f,32f#,32g,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,g,8p,g,8p,a#,p,c7,p,g,8p,g,8p,f,p,f#,p,a#,g,2d,32p,a#,g,2c#,32p,a#,g,2c,a#5,8c,2p,32p,a#5,g5,2f#,32p,a#5,g5,2f,32p,a#5,g5,2e,d#,8d";

//Tone function receiving output pin, frequency in Hz and duration of tone in mS
void tone(uint32_t pin, uint32_t frequency, uint32_t duration)
{
    1a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a76:	464f      	mov	r7, r9
    1a78:	4646      	mov	r6, r8
    1a7a:	b4c0      	push	{r6, r7}
    1a7c:	b085      	sub	sp, #20
    1a7e:	1c15      	adds	r5, r2, #0
	int ret = (1/(2*1.756*((float) frequency)))*1000000;
    1a80:	1c08      	adds	r0, r1, #0
    1a82:	4b23      	ldr	r3, [pc, #140]	; (1b10 <tone+0x9c>)
    1a84:	4798      	blx	r3
    1a86:	4b23      	ldr	r3, [pc, #140]	; (1b14 <tone+0xa0>)
    1a88:	4798      	blx	r3
    1a8a:	4e23      	ldr	r6, [pc, #140]	; (1b18 <tone+0xa4>)
    1a8c:	4a23      	ldr	r2, [pc, #140]	; (1b1c <tone+0xa8>)
    1a8e:	4b24      	ldr	r3, [pc, #144]	; (1b20 <tone+0xac>)
    1a90:	47b0      	blx	r6
    1a92:	1c02      	adds	r2, r0, #0
    1a94:	1c0b      	adds	r3, r1, #0
    1a96:	4c23      	ldr	r4, [pc, #140]	; (1b24 <tone+0xb0>)
    1a98:	2000      	movs	r0, #0
    1a9a:	4923      	ldr	r1, [pc, #140]	; (1b28 <tone+0xb4>)
    1a9c:	47a0      	blx	r4
    1a9e:	2200      	movs	r2, #0
    1aa0:	4b22      	ldr	r3, [pc, #136]	; (1b2c <tone+0xb8>)
    1aa2:	47b0      	blx	r6
    1aa4:	4f22      	ldr	r7, [pc, #136]	; (1b30 <tone+0xbc>)
    1aa6:	47b8      	blx	r7
    1aa8:	9001      	str	r0, [sp, #4]
	
	int n = duration/(2*ret/1000.0);
    1aaa:	1c28      	adds	r0, r5, #0
    1aac:	4b21      	ldr	r3, [pc, #132]	; (1b34 <tone+0xc0>)
    1aae:	4798      	blx	r3
    1ab0:	9002      	str	r0, [sp, #8]
    1ab2:	9103      	str	r1, [sp, #12]
    1ab4:	9b01      	ldr	r3, [sp, #4]
    1ab6:	0058      	lsls	r0, r3, #1
    1ab8:	4d1f      	ldr	r5, [pc, #124]	; (1b38 <tone+0xc4>)
    1aba:	47a8      	blx	r5
    1abc:	2200      	movs	r2, #0
    1abe:	4b1f      	ldr	r3, [pc, #124]	; (1b3c <tone+0xc8>)
    1ac0:	47a0      	blx	r4
    1ac2:	1c02      	adds	r2, r0, #0
    1ac4:	1c0b      	adds	r3, r1, #0
    1ac6:	9802      	ldr	r0, [sp, #8]
    1ac8:	9903      	ldr	r1, [sp, #12]
    1aca:	47a0      	blx	r4
    1acc:	47b8      	blx	r7
    1ace:	1c04      	adds	r4, r0, #0
	n = n - (int) (0.44*n);
    1ad0:	47a8      	blx	r5
    1ad2:	4a1b      	ldr	r2, [pc, #108]	; (1b40 <tone+0xcc>)
    1ad4:	4b1b      	ldr	r3, [pc, #108]	; (1b44 <tone+0xd0>)
    1ad6:	47b0      	blx	r6
    1ad8:	47b8      	blx	r7
    1ada:	1a23      	subs	r3, r4, r0
    1adc:	4698      	mov	r8, r3
	if(DEBUG) printf("Playing frequency: %d Hz with delay %u uS, %d veces\n", frequency, 2*(unsigned) ret, n );
	
	
	for(int i = 0; i < n ; i++)
    1ade:	2b00      	cmp	r3, #0
    1ae0:	dd10      	ble.n	1b04 <tone+0x90>
    1ae2:	2400      	movs	r4, #0
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ae4:	4f18      	ldr	r7, [pc, #96]	; (1b48 <tone+0xd4>)
    1ae6:	2380      	movs	r3, #128	; 0x80
    1ae8:	041b      	lsls	r3, r3, #16
    1aea:	4699      	mov	r9, r3
    1aec:	1c1e      	adds	r6, r3, #0
    1aee:	61be      	str	r6, [r7, #24]
	{
		port_pin_set_output_level(buzzer_PIN, true);
		delay_us(ret);
    1af0:	9801      	ldr	r0, [sp, #4]
    1af2:	4d16      	ldr	r5, [pc, #88]	; (1b4c <tone+0xd8>)
    1af4:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1af6:	464b      	mov	r3, r9
    1af8:	617b      	str	r3, [r7, #20]
		port_pin_set_output_level(buzzer_PIN, false);
		delay_us(ret);	
    1afa:	9801      	ldr	r0, [sp, #4]
    1afc:	47a8      	blx	r5
	int n = duration/(2*ret/1000.0);
	n = n - (int) (0.44*n);
	if(DEBUG) printf("Playing frequency: %d Hz with delay %u uS, %d veces\n", frequency, 2*(unsigned) ret, n );
	
	
	for(int i = 0; i < n ; i++)
    1afe:	3401      	adds	r4, #1
    1b00:	4544      	cmp	r4, r8
    1b02:	d1f4      	bne.n	1aee <tone+0x7a>
		delay_us(ret);
		port_pin_set_output_level(buzzer_PIN, false);
		delay_us(ret);	
	}
	
}
    1b04:	b005      	add	sp, #20
    1b06:	bc0c      	pop	{r2, r3}
    1b08:	4690      	mov	r8, r2
    1b0a:	4699      	mov	r9, r3
    1b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	00002561 	.word	0x00002561
    1b14:	00003905 	.word	0x00003905
    1b18:	00003289 	.word	0x00003289
    1b1c:	74bc6a7f 	.word	0x74bc6a7f
    1b20:	400c1893 	.word	0x400c1893
    1b24:	00002c41 	.word	0x00002c41
    1b28:	3ff00000 	.word	0x3ff00000
    1b2c:	412e8480 	.word	0x412e8480
    1b30:	000037bd 	.word	0x000037bd
    1b34:	000038a1 	.word	0x000038a1
    1b38:	00003829 	.word	0x00003829
    1b3c:	408f4000 	.word	0x408f4000
    1b40:	c28f5c29 	.word	0xc28f5c29
    1b44:	3fdc28f5 	.word	0x3fdc28f5
    1b48:	41004400 	.word	0x41004400
    1b4c:	00000151 	.word	0x00000151

00001b50 <begin_rtttl>:
//byte?
bool songStarts = false;
char *songPtr;

void begin_rtttl(char *p)
{
    1b50:	b570      	push	{r4, r5, r6, lr}
	// Absolutely no error checking in here

	// format: d=N,o=N,b=NNN:
	// find the start (skip name, etc)

	while(*p != ':') p++;    // ignore name
    1b52:	7803      	ldrb	r3, [r0, #0]
    1b54:	2b3a      	cmp	r3, #58	; 0x3a
    1b56:	d003      	beq.n	1b60 <begin_rtttl+0x10>
    1b58:	3001      	adds	r0, #1
    1b5a:	7803      	ldrb	r3, [r0, #0]
    1b5c:	2b3a      	cmp	r3, #58	; 0x3a
    1b5e:	d1fb      	bne.n	1b58 <begin_rtttl+0x8>
	p++;                     // skip ':'

	// get default duration
	if(*p == 'd')
    1b60:	7843      	ldrb	r3, [r0, #1]
    1b62:	2b64      	cmp	r3, #100	; 0x64
    1b64:	d001      	beq.n	1b6a <begin_rtttl+0x1a>

	// format: d=N,o=N,b=NNN:
	// find the start (skip name, etc)

	while(*p != ':') p++;    // ignore name
	p++;                     // skip ':'
    1b66:	1c44      	adds	r4, r0, #1
    1b68:	e01e      	b.n	1ba8 <begin_rtttl+0x58>

	// get default duration
	if(*p == 'd')
	{
		p++; p++;              // skip "d="
    1b6a:	1cc4      	adds	r4, r0, #3
		num = 0;
    1b6c:	2200      	movs	r2, #0
    1b6e:	4b2c      	ldr	r3, [pc, #176]	; (1c20 <begin_rtttl+0xd0>)
    1b70:	601a      	str	r2, [r3, #0]
		while(isdigit(*p))
    1b72:	4b2c      	ldr	r3, [pc, #176]	; (1c24 <begin_rtttl+0xd4>)
    1b74:	681d      	ldr	r5, [r3, #0]
    1b76:	78c2      	ldrb	r2, [r0, #3]
    1b78:	18ab      	adds	r3, r5, r2
    1b7a:	785b      	ldrb	r3, [r3, #1]
    1b7c:	075b      	lsls	r3, r3, #29
    1b7e:	d512      	bpl.n	1ba6 <begin_rtttl+0x56>
		{
			num = (num * 10) + (*p++ - '0');
    1b80:	4927      	ldr	r1, [pc, #156]	; (1c20 <begin_rtttl+0xd0>)
	// get default duration
	if(*p == 'd')
	{
		p++; p++;              // skip "d="
		num = 0;
		while(isdigit(*p))
    1b82:	2604      	movs	r6, #4
		{
			num = (num * 10) + (*p++ - '0');
    1b84:	3401      	adds	r4, #1
    1b86:	680b      	ldr	r3, [r1, #0]
    1b88:	0098      	lsls	r0, r3, #2
    1b8a:	18c3      	adds	r3, r0, r3
    1b8c:	005b      	lsls	r3, r3, #1
    1b8e:	3a30      	subs	r2, #48	; 0x30
    1b90:	189b      	adds	r3, r3, r2
    1b92:	600b      	str	r3, [r1, #0]
	// get default duration
	if(*p == 'd')
	{
		p++; p++;              // skip "d="
		num = 0;
		while(isdigit(*p))
    1b94:	7822      	ldrb	r2, [r4, #0]
    1b96:	18a8      	adds	r0, r5, r2
    1b98:	7840      	ldrb	r0, [r0, #1]
    1b9a:	4206      	tst	r6, r0
    1b9c:	d1f2      	bne.n	1b84 <begin_rtttl+0x34>
		{
			num = (num * 10) + (*p++ - '0');
		}
		if(num > 0) default_dur = num;
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	dd01      	ble.n	1ba6 <begin_rtttl+0x56>
    1ba2:	4a21      	ldr	r2, [pc, #132]	; (1c28 <begin_rtttl+0xd8>)
    1ba4:	7013      	strb	r3, [r2, #0]
		p++;                   // skip comma
    1ba6:	3401      	adds	r4, #1

	if(DEBUG) { printf("Default duration: %d\n", default_dur); }
		

	// get default octave
	if(*p == 'o')
    1ba8:	7823      	ldrb	r3, [r4, #0]
    1baa:	2b6f      	cmp	r3, #111	; 0x6f
    1bac:	d10a      	bne.n	1bc4 <begin_rtttl+0x74>
	{
		p++; p++;              // skip "o="
		num = *p++ - '0';
    1bae:	78a3      	ldrb	r3, [r4, #2]
    1bb0:	1c1a      	adds	r2, r3, #0
    1bb2:	3a30      	subs	r2, #48	; 0x30
    1bb4:	491a      	ldr	r1, [pc, #104]	; (1c20 <begin_rtttl+0xd0>)
    1bb6:	600a      	str	r2, [r1, #0]
		if(num >= 3 && num <=7) default_oct = num;
    1bb8:	3b33      	subs	r3, #51	; 0x33
    1bba:	2b04      	cmp	r3, #4
    1bbc:	d801      	bhi.n	1bc2 <begin_rtttl+0x72>
    1bbe:	4b1b      	ldr	r3, [pc, #108]	; (1c2c <begin_rtttl+0xdc>)
    1bc0:	701a      	strb	r2, [r3, #0]
		p++;                   // skip comma
    1bc2:	3404      	adds	r4, #4
	}

	if(DEBUG) { printf("Default oct: %d\n", default_oct); }

	// get BPM
	if(*p == 'b')
    1bc4:	7823      	ldrb	r3, [r4, #0]
    1bc6:	2b62      	cmp	r3, #98	; 0x62
    1bc8:	d11e      	bne.n	1c08 <begin_rtttl+0xb8>
	{
		p++; p++;              // skip "b="
    1bca:	1ca1      	adds	r1, r4, #2
		num = 0;
    1bcc:	2200      	movs	r2, #0
    1bce:	4b14      	ldr	r3, [pc, #80]	; (1c20 <begin_rtttl+0xd0>)
    1bd0:	601a      	str	r2, [r3, #0]
		while(isdigit(*p))
    1bd2:	4b14      	ldr	r3, [pc, #80]	; (1c24 <begin_rtttl+0xd4>)
    1bd4:	681d      	ldr	r5, [r3, #0]
    1bd6:	78a3      	ldrb	r3, [r4, #2]
    1bd8:	18ea      	adds	r2, r5, r3
    1bda:	7852      	ldrb	r2, [r2, #1]
    1bdc:	0752      	lsls	r2, r2, #29
    1bde:	d50e      	bpl.n	1bfe <begin_rtttl+0xae>
		{
			num = (num * 10) + (*p++ - '0');
    1be0:	480f      	ldr	r0, [pc, #60]	; (1c20 <begin_rtttl+0xd0>)
	// get BPM
	if(*p == 'b')
	{
		p++; p++;              // skip "b="
		num = 0;
		while(isdigit(*p))
    1be2:	2604      	movs	r6, #4
		{
			num = (num * 10) + (*p++ - '0');
    1be4:	3101      	adds	r1, #1
    1be6:	6802      	ldr	r2, [r0, #0]
    1be8:	0094      	lsls	r4, r2, #2
    1bea:	18a2      	adds	r2, r4, r2
    1bec:	0052      	lsls	r2, r2, #1
    1bee:	3b30      	subs	r3, #48	; 0x30
    1bf0:	18d3      	adds	r3, r2, r3
    1bf2:	6003      	str	r3, [r0, #0]
	// get BPM
	if(*p == 'b')
	{
		p++; p++;              // skip "b="
		num = 0;
		while(isdigit(*p))
    1bf4:	780b      	ldrb	r3, [r1, #0]
    1bf6:	18ea      	adds	r2, r5, r3
    1bf8:	7852      	ldrb	r2, [r2, #1]
    1bfa:	4216      	tst	r6, r2
    1bfc:	d1f2      	bne.n	1be4 <begin_rtttl+0x94>
		{
			num = (num * 10) + (*p++ - '0');
		}
		bpm = num;
    1bfe:	4b08      	ldr	r3, [pc, #32]	; (1c20 <begin_rtttl+0xd0>)
    1c00:	681a      	ldr	r2, [r3, #0]
    1c02:	4b0b      	ldr	r3, [pc, #44]	; (1c30 <begin_rtttl+0xe0>)
    1c04:	601a      	str	r2, [r3, #0]
		p++;                   // skip colon
    1c06:	1c4c      	adds	r4, r1, #1
	}

	if(DEBUG) { printf("bpm: %d\n", bpm); }

	// BPM usually expresses the number of quarter notes per minute
	wholenote = (60 * 1000L / bpm) * 2;  // this is the time for whole note (in milliseconds)
    1c08:	480a      	ldr	r0, [pc, #40]	; (1c34 <begin_rtttl+0xe4>)
    1c0a:	4b09      	ldr	r3, [pc, #36]	; (1c30 <begin_rtttl+0xe0>)
    1c0c:	6819      	ldr	r1, [r3, #0]
    1c0e:	4b0a      	ldr	r3, [pc, #40]	; (1c38 <begin_rtttl+0xe8>)
    1c10:	4798      	blx	r3
    1c12:	0040      	lsls	r0, r0, #1
    1c14:	4b09      	ldr	r3, [pc, #36]	; (1c3c <begin_rtttl+0xec>)
    1c16:	6018      	str	r0, [r3, #0]

	if(DEBUG) { printf("Wholenote: %ld\n", wholenote); }
	
	// Save current song pointer...
	songPtr = p;
    1c18:	4b09      	ldr	r3, [pc, #36]	; (1c40 <begin_rtttl+0xf0>)
    1c1a:	601c      	str	r4, [r3, #0]
}
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	200002e4 	.word	0x200002e4
    1c24:	2000010c 	.word	0x2000010c
    1c28:	20000009 	.word	0x20000009
    1c2c:	2000000a 	.word	0x2000000a
    1c30:	20000104 	.word	0x20000104
    1c34:	0000ea60 	.word	0x0000ea60
    1c38:	00001fbd 	.word	0x00001fbd
    1c3c:	200002e8 	.word	0x200002e8
    1c40:	200002f0 	.word	0x200002f0

00001c44 <next_rtttl>:

bool next_rtttl() {
    1c44:	b570      	push	{r4, r5, r6, lr}

	char *p = songPtr;
    1c46:	4b5d      	ldr	r3, [pc, #372]	; (1dbc <next_rtttl+0x178>)
    1c48:	681c      	ldr	r4, [r3, #0]
	// if notes remain, play next note
	if(*p)
    1c4a:	7823      	ldrb	r3, [r4, #0]
		}
		
		return 1; // note played successfully.
	}
	else {
		return 0; // all done
    1c4c:	2000      	movs	r0, #0

bool next_rtttl() {

	char *p = songPtr;
	// if notes remain, play next note
	if(*p)
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d100      	bne.n	1c54 <next_rtttl+0x10>
    1c52:	e0b2      	b.n	1dba <next_rtttl+0x176>
	{
		// first, get note duration, if available
		num = 0;
    1c54:	2200      	movs	r2, #0
    1c56:	4b5a      	ldr	r3, [pc, #360]	; (1dc0 <next_rtttl+0x17c>)
    1c58:	601a      	str	r2, [r3, #0]
		while(isdigit(*p))
    1c5a:	4b5a      	ldr	r3, [pc, #360]	; (1dc4 <next_rtttl+0x180>)
    1c5c:	681d      	ldr	r5, [r3, #0]
    1c5e:	7821      	ldrb	r1, [r4, #0]
    1c60:	186b      	adds	r3, r5, r1
    1c62:	785b      	ldrb	r3, [r3, #1]
    1c64:	075b      	lsls	r3, r3, #29
    1c66:	d518      	bpl.n	1c9a <next_rtttl+0x56>
		{
			num = (num * 10) + (*p++ - '0');
    1c68:	4a55      	ldr	r2, [pc, #340]	; (1dc0 <next_rtttl+0x17c>)
	// if notes remain, play next note
	if(*p)
	{
		// first, get note duration, if available
		num = 0;
		while(isdigit(*p))
    1c6a:	2604      	movs	r6, #4
		{
			num = (num * 10) + (*p++ - '0');
    1c6c:	3401      	adds	r4, #1
    1c6e:	6813      	ldr	r3, [r2, #0]
    1c70:	0098      	lsls	r0, r3, #2
    1c72:	18c3      	adds	r3, r0, r3
    1c74:	005b      	lsls	r3, r3, #1
    1c76:	3930      	subs	r1, #48	; 0x30
    1c78:	185b      	adds	r3, r3, r1
    1c7a:	6013      	str	r3, [r2, #0]
	// if notes remain, play next note
	if(*p)
	{
		// first, get note duration, if available
		num = 0;
		while(isdigit(*p))
    1c7c:	7821      	ldrb	r1, [r4, #0]
    1c7e:	1868      	adds	r0, r5, r1
    1c80:	7840      	ldrb	r0, [r0, #1]
    1c82:	4206      	tst	r6, r0
    1c84:	d1f2      	bne.n	1c6c <next_rtttl+0x28>
		{
			num = (num * 10) + (*p++ - '0');
		}
		
		if(num) duration = wholenote / num;
    1c86:	2b00      	cmp	r3, #0
    1c88:	d007      	beq.n	1c9a <next_rtttl+0x56>
    1c8a:	4a4f      	ldr	r2, [pc, #316]	; (1dc8 <next_rtttl+0x184>)
    1c8c:	6810      	ldr	r0, [r2, #0]
    1c8e:	1c19      	adds	r1, r3, #0
    1c90:	4b4e      	ldr	r3, [pc, #312]	; (1dcc <next_rtttl+0x188>)
    1c92:	4798      	blx	r3
    1c94:	4b4e      	ldr	r3, [pc, #312]	; (1dd0 <next_rtttl+0x18c>)
    1c96:	6018      	str	r0, [r3, #0]
    1c98:	e007      	b.n	1caa <next_rtttl+0x66>
		else duration = wholenote / default_dur;  // we will need to check if we are a dotted note after
    1c9a:	4b4e      	ldr	r3, [pc, #312]	; (1dd4 <next_rtttl+0x190>)
    1c9c:	7819      	ldrb	r1, [r3, #0]
    1c9e:	4b4a      	ldr	r3, [pc, #296]	; (1dc8 <next_rtttl+0x184>)
    1ca0:	6818      	ldr	r0, [r3, #0]
    1ca2:	4b4a      	ldr	r3, [pc, #296]	; (1dcc <next_rtttl+0x188>)
    1ca4:	4798      	blx	r3
    1ca6:	4b4a      	ldr	r3, [pc, #296]	; (1dd0 <next_rtttl+0x18c>)
    1ca8:	6018      	str	r0, [r3, #0]

		// now get the note
		note = 0;
    1caa:	2200      	movs	r2, #0
    1cac:	4b4a      	ldr	r3, [pc, #296]	; (1dd8 <next_rtttl+0x194>)
    1cae:	701a      	strb	r2, [r3, #0]

		switch(*p)
    1cb0:	7823      	ldrb	r3, [r4, #0]
    1cb2:	3b61      	subs	r3, #97	; 0x61
    1cb4:	b2da      	uxtb	r2, r3
    1cb6:	2a06      	cmp	r2, #6
    1cb8:	d81e      	bhi.n	1cf8 <next_rtttl+0xb4>
    1cba:	0093      	lsls	r3, r2, #2
    1cbc:	4a47      	ldr	r2, [pc, #284]	; (1ddc <next_rtttl+0x198>)
    1cbe:	58d3      	ldr	r3, [r2, r3]
    1cc0:	469f      	mov	pc, r3
		{
			case 'c':
			note = 1;
    1cc2:	2201      	movs	r2, #1
    1cc4:	4b44      	ldr	r3, [pc, #272]	; (1dd8 <next_rtttl+0x194>)
    1cc6:	701a      	strb	r2, [r3, #0]
			break;
    1cc8:	e016      	b.n	1cf8 <next_rtttl+0xb4>
			case 'd':
			note = 3;
    1cca:	2203      	movs	r2, #3
    1ccc:	4b42      	ldr	r3, [pc, #264]	; (1dd8 <next_rtttl+0x194>)
    1cce:	701a      	strb	r2, [r3, #0]
			break;
    1cd0:	e012      	b.n	1cf8 <next_rtttl+0xb4>
			case 'e':
			note = 5;
    1cd2:	2205      	movs	r2, #5
    1cd4:	4b40      	ldr	r3, [pc, #256]	; (1dd8 <next_rtttl+0x194>)
    1cd6:	701a      	strb	r2, [r3, #0]
			break;
    1cd8:	e00e      	b.n	1cf8 <next_rtttl+0xb4>
			case 'f':
			note = 6;
    1cda:	2206      	movs	r2, #6
    1cdc:	4b3e      	ldr	r3, [pc, #248]	; (1dd8 <next_rtttl+0x194>)
    1cde:	701a      	strb	r2, [r3, #0]
			break;
    1ce0:	e00a      	b.n	1cf8 <next_rtttl+0xb4>
			case 'g':
			note = 8;
    1ce2:	2208      	movs	r2, #8
    1ce4:	4b3c      	ldr	r3, [pc, #240]	; (1dd8 <next_rtttl+0x194>)
    1ce6:	701a      	strb	r2, [r3, #0]
			break;
    1ce8:	e006      	b.n	1cf8 <next_rtttl+0xb4>
			case 'a':
			note = 10;
    1cea:	220a      	movs	r2, #10
    1cec:	4b3a      	ldr	r3, [pc, #232]	; (1dd8 <next_rtttl+0x194>)
    1cee:	701a      	strb	r2, [r3, #0]
			break;
    1cf0:	e002      	b.n	1cf8 <next_rtttl+0xb4>
			case 'b':
			note = 12;
    1cf2:	220c      	movs	r2, #12
    1cf4:	4b38      	ldr	r3, [pc, #224]	; (1dd8 <next_rtttl+0x194>)
    1cf6:	701a      	strb	r2, [r3, #0]
			note = 0;
		}
		p++;

		// now, get optional '#' sharp
		if(*p == '#')
    1cf8:	7863      	ldrb	r3, [r4, #1]
    1cfa:	2b23      	cmp	r3, #35	; 0x23
    1cfc:	d001      	beq.n	1d02 <next_rtttl+0xbe>
			break;
			case 'p':
			default:
			note = 0;
		}
		p++;
    1cfe:	3401      	adds	r4, #1
    1d00:	e004      	b.n	1d0c <next_rtttl+0xc8>

		// now, get optional '#' sharp
		if(*p == '#')
		{
			note++;
    1d02:	4a35      	ldr	r2, [pc, #212]	; (1dd8 <next_rtttl+0x194>)
    1d04:	7813      	ldrb	r3, [r2, #0]
    1d06:	3301      	adds	r3, #1
    1d08:	7013      	strb	r3, [r2, #0]
			p++;
    1d0a:	3402      	adds	r4, #2
		}

		// now, get optional '.' dotted note
		if(*p == '.')
    1d0c:	7823      	ldrb	r3, [r4, #0]
    1d0e:	2b2e      	cmp	r3, #46	; 0x2e
    1d10:	d107      	bne.n	1d22 <next_rtttl+0xde>
		{
			duration += duration/2;
    1d12:	492f      	ldr	r1, [pc, #188]	; (1dd0 <next_rtttl+0x18c>)
    1d14:	680a      	ldr	r2, [r1, #0]
    1d16:	0fd3      	lsrs	r3, r2, #31
    1d18:	189b      	adds	r3, r3, r2
    1d1a:	105b      	asrs	r3, r3, #1
    1d1c:	18d3      	adds	r3, r2, r3
    1d1e:	600b      	str	r3, [r1, #0]
			p++;
    1d20:	3401      	adds	r4, #1
		}
		
		// now, get scale
		if(isdigit(*p))
    1d22:	7823      	ldrb	r3, [r4, #0]
    1d24:	18ed      	adds	r5, r5, r3
    1d26:	786a      	ldrb	r2, [r5, #1]
    1d28:	0752      	lsls	r2, r2, #29
    1d2a:	d504      	bpl.n	1d36 <next_rtttl+0xf2>
		{
			scale = *p - '0';
    1d2c:	3b30      	subs	r3, #48	; 0x30
    1d2e:	4a2c      	ldr	r2, [pc, #176]	; (1de0 <next_rtttl+0x19c>)
    1d30:	7013      	strb	r3, [r2, #0]
			p++;
    1d32:	3401      	adds	r4, #1
    1d34:	e003      	b.n	1d3e <next_rtttl+0xfa>
		}
		else
		{
			scale = default_oct;
    1d36:	4b2b      	ldr	r3, [pc, #172]	; (1de4 <next_rtttl+0x1a0>)
    1d38:	781a      	ldrb	r2, [r3, #0]
    1d3a:	4b29      	ldr	r3, [pc, #164]	; (1de0 <next_rtttl+0x19c>)
    1d3c:	701a      	strb	r2, [r3, #0]
		}

		scale += OCTAVE_OFFSET;
    1d3e:	4b28      	ldr	r3, [pc, #160]	; (1de0 <next_rtttl+0x19c>)
    1d40:	781a      	ldrb	r2, [r3, #0]

		if(*p == ',')
    1d42:	7823      	ldrb	r3, [r4, #0]
		p++;       // skip comma for next note (or we may be at the end)
    1d44:	3b2c      	subs	r3, #44	; 0x2c
    1d46:	4258      	negs	r0, r3
    1d48:	4158      	adcs	r0, r3
    1d4a:	1824      	adds	r4, r4, r0

		// Save current song pointer...
		songPtr = p;
    1d4c:	4b1b      	ldr	r3, [pc, #108]	; (1dbc <next_rtttl+0x178>)
    1d4e:	601c      	str	r4, [r3, #0]

		// now play the note
		if(note)
    1d50:	4b21      	ldr	r3, [pc, #132]	; (1dd8 <next_rtttl+0x194>)
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d02b      	beq.n	1db0 <next_rtttl+0x16c>
				Serial1.print(notes[(scale - lowest_oct) * 12 + note], 10);
				Serial1.print(") ");
				Serial1.println(duration, 10);
			}
			*/
			float frequency = (1000000.0)/(2.0*notes[(scale - lowest_oct) * 12 + note]);
    1d58:	4923      	ldr	r1, [pc, #140]	; (1de8 <next_rtttl+0x1a4>)
    1d5a:	7809      	ldrb	r1, [r1, #0]
    1d5c:	1a52      	subs	r2, r2, r1
    1d5e:	0051      	lsls	r1, r2, #1
    1d60:	188a      	adds	r2, r1, r2
    1d62:	0092      	lsls	r2, r2, #2
    1d64:	18d2      	adds	r2, r2, r3
    1d66:	0092      	lsls	r2, r2, #2
    1d68:	4c20      	ldr	r4, [pc, #128]	; (1dec <next_rtttl+0x1a8>)
    1d6a:	4b21      	ldr	r3, [pc, #132]	; (1df0 <next_rtttl+0x1ac>)
    1d6c:	58d0      	ldr	r0, [r2, r3]
    1d6e:	47a0      	blx	r4
    1d70:	1c02      	adds	r2, r0, #0
    1d72:	1c0b      	adds	r3, r1, #0
    1d74:	4d1f      	ldr	r5, [pc, #124]	; (1df4 <next_rtttl+0x1b0>)
    1d76:	47a8      	blx	r5
    1d78:	1c02      	adds	r2, r0, #0
    1d7a:	1c0b      	adds	r3, r1, #0
    1d7c:	2000      	movs	r0, #0
    1d7e:	491e      	ldr	r1, [pc, #120]	; (1df8 <next_rtttl+0x1b4>)
    1d80:	4d1e      	ldr	r5, [pc, #120]	; (1dfc <next_rtttl+0x1b8>)
    1d82:	47a8      	blx	r5
    1d84:	4b1e      	ldr	r3, [pc, #120]	; (1e00 <next_rtttl+0x1bc>)
    1d86:	4798      	blx	r3
			
			if(DEBUG) printf("Freq: %u, duration: %u\n", (uint32_t) frequency, (uint32_t) duration);
			
			//Serial.printf("Frequency: %f\n", frequency);
			tone(buzzer_PIN, (uint32_t) frequency, (uint32_t) duration);
    1d88:	4b1e      	ldr	r3, [pc, #120]	; (1e04 <next_rtttl+0x1c0>)
    1d8a:	4798      	blx	r3
    1d8c:	1c01      	adds	r1, r0, #0
    1d8e:	4d10      	ldr	r5, [pc, #64]	; (1dd0 <next_rtttl+0x18c>)
    1d90:	2017      	movs	r0, #23
    1d92:	682a      	ldr	r2, [r5, #0]
    1d94:	4b1c      	ldr	r3, [pc, #112]	; (1e08 <next_rtttl+0x1c4>)
    1d96:	4798      	blx	r3

			// to distinguish the notes, set a minimum time between them.
			// the note's duration + 30% seems to work well:
			int pauseBetweenNotes = duration * 0.5;//1.30;
    1d98:	6828      	ldr	r0, [r5, #0]
    1d9a:	47a0      	blx	r4
    1d9c:	2200      	movs	r2, #0
    1d9e:	4b1b      	ldr	r3, [pc, #108]	; (1e0c <next_rtttl+0x1c8>)
    1da0:	4c1b      	ldr	r4, [pc, #108]	; (1e10 <next_rtttl+0x1cc>)
    1da2:	47a0      	blx	r4
    1da4:	4b1b      	ldr	r3, [pc, #108]	; (1e14 <next_rtttl+0x1d0>)
    1da6:	4798      	blx	r3
			delay_ms(pauseBetweenNotes);
    1da8:	4b1b      	ldr	r3, [pc, #108]	; (1e18 <next_rtttl+0x1d4>)
    1daa:	4798      	blx	r3
			}
			*/
			delay_ms(duration);
		}
		
		return 1; // note played successfully.
    1dac:	2001      	movs	r0, #1
    1dae:	e004      	b.n	1dba <next_rtttl+0x176>
			if(DEBUG) {
				Serial1.print("Pausing: ");
				Serial1.println(duration, 10);
			}
			*/
			delay_ms(duration);
    1db0:	4b07      	ldr	r3, [pc, #28]	; (1dd0 <next_rtttl+0x18c>)
    1db2:	6818      	ldr	r0, [r3, #0]
    1db4:	4b18      	ldr	r3, [pc, #96]	; (1e18 <next_rtttl+0x1d4>)
    1db6:	4798      	blx	r3
		}
		
		return 1; // note played successfully.
    1db8:	2001      	movs	r0, #1
	}
	else {
		return 0; // all done
	}
}
    1dba:	bd70      	pop	{r4, r5, r6, pc}
    1dbc:	200002f0 	.word	0x200002f0
    1dc0:	200002e4 	.word	0x200002e4
    1dc4:	2000010c 	.word	0x2000010c
    1dc8:	200002e8 	.word	0x200002e8
    1dcc:	00001fbd 	.word	0x00001fbd
    1dd0:	200002e0 	.word	0x200002e0
    1dd4:	20000009 	.word	0x20000009
    1dd8:	200002ec 	.word	0x200002ec
    1ddc:	00004d2c 	.word	0x00004d2c
    1de0:	200002f4 	.word	0x200002f4
    1de4:	2000000a 	.word	0x2000000a
    1de8:	20000100 	.word	0x20000100
    1dec:	00003829 	.word	0x00003829
    1df0:	2000000c 	.word	0x2000000c
    1df4:	000025f1 	.word	0x000025f1
    1df8:	412e8480 	.word	0x412e8480
    1dfc:	00002c41 	.word	0x00002c41
    1e00:	000039ad 	.word	0x000039ad
    1e04:	000021f5 	.word	0x000021f5
    1e08:	00001a75 	.word	0x00001a75
    1e0c:	3fe00000 	.word	0x3fe00000
    1e10:	00003289 	.word	0x00003289
    1e14:	000037bd 	.word	0x000037bd
    1e18:	0000017d 	.word	0x0000017d

00001e1c <main>:
#include "neopixel.h"
#include "buzzer.h"
	
	
int main (void)
{
    1e1c:	b570      	push	{r4, r5, r6, lr}
	system_init();
    1e1e:	4b13      	ldr	r3, [pc, #76]	; (1e6c <main+0x50>)
    1e20:	4798      	blx	r3
	
	sio2host_init();
    1e22:	4b13      	ldr	r3, [pc, #76]	; (1e70 <main+0x54>)
    1e24:	4798      	blx	r3
	
	//configure_tc();
	
	delay_init();
    1e26:	4b13      	ldr	r3, [pc, #76]	; (1e74 <main+0x58>)
    1e28:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e2a:	f3ef 8310 	mrs	r3, PRIMASK
	
	//system_interrupt_enable_global();
	//cpu_irq_disable();
	bool inter;
	inter = system_interrupt_is_global_enabled();
	printf(" Interrups state: %s\n", inter?"1":"0");
    1e2e:	4912      	ldr	r1, [pc, #72]	; (1e78 <main+0x5c>)
    1e30:	2b00      	cmp	r3, #0
    1e32:	d000      	beq.n	1e36 <main+0x1a>
    1e34:	4911      	ldr	r1, [pc, #68]	; (1e7c <main+0x60>)
    1e36:	4812      	ldr	r0, [pc, #72]	; (1e80 <main+0x64>)
    1e38:	4b12      	ldr	r3, [pc, #72]	; (1e84 <main+0x68>)
    1e3a:	4798      	blx	r3
	*/	
	
	
	while(1)
	{	
	 if(!songStarts)
    1e3c:	4d12      	ldr	r5, [pc, #72]	; (1e88 <main+0x6c>)
	 { // Start song
		 //digitalWrite(blueLED,HIGH); // Light the onboard Blue LEDwhile the song plays
		 songStarts = true;
    1e3e:	1c2c      	adds	r4, r5, #0
		 //begin_rtttl(songs[random(sizeof(songs)/sizeof(char *))]);
		 begin_rtttl(song);
    1e40:	4e12      	ldr	r6, [pc, #72]	; (1e8c <main+0x70>)
	*/	
	
	
	while(1)
	{	
	 if(!songStarts)
    1e42:	782b      	ldrb	r3, [r5, #0]
    1e44:	2b00      	cmp	r3, #0
    1e46:	d104      	bne.n	1e52 <main+0x36>
	 { // Start song
		 //digitalWrite(blueLED,HIGH); // Light the onboard Blue LEDwhile the song plays
		 songStarts = true;
    1e48:	3301      	adds	r3, #1
    1e4a:	7023      	strb	r3, [r4, #0]
		 //begin_rtttl(songs[random(sizeof(songs)/sizeof(char *))]);
		 begin_rtttl(song);
    1e4c:	6830      	ldr	r0, [r6, #0]
    1e4e:	4b10      	ldr	r3, [pc, #64]	; (1e90 <main+0x74>)
    1e50:	4798      	blx	r3
	 }
	 
	 if (!next_rtttl())
    1e52:	4b10      	ldr	r3, [pc, #64]	; (1e94 <main+0x78>)
    1e54:	4798      	blx	r3
    1e56:	2800      	cmp	r0, #0
    1e58:	d1f3      	bne.n	1e42 <main+0x26>
	 { // Play next note
		 //digitalWrite(blueLED,LOW); // Turn off the onboard Blue LED.
		 songStarts = false;
    1e5a:	2200      	movs	r2, #0
    1e5c:	4b0a      	ldr	r3, [pc, #40]	; (1e88 <main+0x6c>)
    1e5e:	701a      	strb	r2, [r3, #0]
		 if(DEBUG) printf("Done!");
		 delay_ms(200);
    1e60:	30c8      	adds	r0, #200	; 0xc8
    1e62:	4b0d      	ldr	r3, [pc, #52]	; (1e98 <main+0x7c>)
    1e64:	4798      	blx	r3
	
	

	
	
}
    1e66:	2000      	movs	r0, #0
    1e68:	bd70      	pop	{r4, r5, r6, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	0000190d 	.word	0x0000190d
    1e70:	000006e1 	.word	0x000006e1
    1e74:	00000115 	.word	0x00000115
    1e78:	00004d80 	.word	0x00004d80
    1e7c:	00004d84 	.word	0x00004d84
    1e80:	00004d88 	.word	0x00004d88
    1e84:	00003d61 	.word	0x00003d61
    1e88:	200002a4 	.word	0x200002a4
    1e8c:	20000108 	.word	0x20000108
    1e90:	00001b51 	.word	0x00001b51
    1e94:	00001c45 	.word	0x00001c45
    1e98:	0000017d 	.word	0x0000017d

00001e9c <__aeabi_uidiv>:
    1e9c:	2200      	movs	r2, #0
    1e9e:	0843      	lsrs	r3, r0, #1
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d374      	bcc.n	1f8e <__aeabi_uidiv+0xf2>
    1ea4:	0903      	lsrs	r3, r0, #4
    1ea6:	428b      	cmp	r3, r1
    1ea8:	d35f      	bcc.n	1f6a <__aeabi_uidiv+0xce>
    1eaa:	0a03      	lsrs	r3, r0, #8
    1eac:	428b      	cmp	r3, r1
    1eae:	d344      	bcc.n	1f3a <__aeabi_uidiv+0x9e>
    1eb0:	0b03      	lsrs	r3, r0, #12
    1eb2:	428b      	cmp	r3, r1
    1eb4:	d328      	bcc.n	1f08 <__aeabi_uidiv+0x6c>
    1eb6:	0c03      	lsrs	r3, r0, #16
    1eb8:	428b      	cmp	r3, r1
    1eba:	d30d      	bcc.n	1ed8 <__aeabi_uidiv+0x3c>
    1ebc:	22ff      	movs	r2, #255	; 0xff
    1ebe:	0209      	lsls	r1, r1, #8
    1ec0:	ba12      	rev	r2, r2
    1ec2:	0c03      	lsrs	r3, r0, #16
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d302      	bcc.n	1ece <__aeabi_uidiv+0x32>
    1ec8:	1212      	asrs	r2, r2, #8
    1eca:	0209      	lsls	r1, r1, #8
    1ecc:	d065      	beq.n	1f9a <__aeabi_uidiv+0xfe>
    1ece:	0b03      	lsrs	r3, r0, #12
    1ed0:	428b      	cmp	r3, r1
    1ed2:	d319      	bcc.n	1f08 <__aeabi_uidiv+0x6c>
    1ed4:	e000      	b.n	1ed8 <__aeabi_uidiv+0x3c>
    1ed6:	0a09      	lsrs	r1, r1, #8
    1ed8:	0bc3      	lsrs	r3, r0, #15
    1eda:	428b      	cmp	r3, r1
    1edc:	d301      	bcc.n	1ee2 <__aeabi_uidiv+0x46>
    1ede:	03cb      	lsls	r3, r1, #15
    1ee0:	1ac0      	subs	r0, r0, r3
    1ee2:	4152      	adcs	r2, r2
    1ee4:	0b83      	lsrs	r3, r0, #14
    1ee6:	428b      	cmp	r3, r1
    1ee8:	d301      	bcc.n	1eee <__aeabi_uidiv+0x52>
    1eea:	038b      	lsls	r3, r1, #14
    1eec:	1ac0      	subs	r0, r0, r3
    1eee:	4152      	adcs	r2, r2
    1ef0:	0b43      	lsrs	r3, r0, #13
    1ef2:	428b      	cmp	r3, r1
    1ef4:	d301      	bcc.n	1efa <__aeabi_uidiv+0x5e>
    1ef6:	034b      	lsls	r3, r1, #13
    1ef8:	1ac0      	subs	r0, r0, r3
    1efa:	4152      	adcs	r2, r2
    1efc:	0b03      	lsrs	r3, r0, #12
    1efe:	428b      	cmp	r3, r1
    1f00:	d301      	bcc.n	1f06 <__aeabi_uidiv+0x6a>
    1f02:	030b      	lsls	r3, r1, #12
    1f04:	1ac0      	subs	r0, r0, r3
    1f06:	4152      	adcs	r2, r2
    1f08:	0ac3      	lsrs	r3, r0, #11
    1f0a:	428b      	cmp	r3, r1
    1f0c:	d301      	bcc.n	1f12 <__aeabi_uidiv+0x76>
    1f0e:	02cb      	lsls	r3, r1, #11
    1f10:	1ac0      	subs	r0, r0, r3
    1f12:	4152      	adcs	r2, r2
    1f14:	0a83      	lsrs	r3, r0, #10
    1f16:	428b      	cmp	r3, r1
    1f18:	d301      	bcc.n	1f1e <__aeabi_uidiv+0x82>
    1f1a:	028b      	lsls	r3, r1, #10
    1f1c:	1ac0      	subs	r0, r0, r3
    1f1e:	4152      	adcs	r2, r2
    1f20:	0a43      	lsrs	r3, r0, #9
    1f22:	428b      	cmp	r3, r1
    1f24:	d301      	bcc.n	1f2a <__aeabi_uidiv+0x8e>
    1f26:	024b      	lsls	r3, r1, #9
    1f28:	1ac0      	subs	r0, r0, r3
    1f2a:	4152      	adcs	r2, r2
    1f2c:	0a03      	lsrs	r3, r0, #8
    1f2e:	428b      	cmp	r3, r1
    1f30:	d301      	bcc.n	1f36 <__aeabi_uidiv+0x9a>
    1f32:	020b      	lsls	r3, r1, #8
    1f34:	1ac0      	subs	r0, r0, r3
    1f36:	4152      	adcs	r2, r2
    1f38:	d2cd      	bcs.n	1ed6 <__aeabi_uidiv+0x3a>
    1f3a:	09c3      	lsrs	r3, r0, #7
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d301      	bcc.n	1f44 <__aeabi_uidiv+0xa8>
    1f40:	01cb      	lsls	r3, r1, #7
    1f42:	1ac0      	subs	r0, r0, r3
    1f44:	4152      	adcs	r2, r2
    1f46:	0983      	lsrs	r3, r0, #6
    1f48:	428b      	cmp	r3, r1
    1f4a:	d301      	bcc.n	1f50 <__aeabi_uidiv+0xb4>
    1f4c:	018b      	lsls	r3, r1, #6
    1f4e:	1ac0      	subs	r0, r0, r3
    1f50:	4152      	adcs	r2, r2
    1f52:	0943      	lsrs	r3, r0, #5
    1f54:	428b      	cmp	r3, r1
    1f56:	d301      	bcc.n	1f5c <__aeabi_uidiv+0xc0>
    1f58:	014b      	lsls	r3, r1, #5
    1f5a:	1ac0      	subs	r0, r0, r3
    1f5c:	4152      	adcs	r2, r2
    1f5e:	0903      	lsrs	r3, r0, #4
    1f60:	428b      	cmp	r3, r1
    1f62:	d301      	bcc.n	1f68 <__aeabi_uidiv+0xcc>
    1f64:	010b      	lsls	r3, r1, #4
    1f66:	1ac0      	subs	r0, r0, r3
    1f68:	4152      	adcs	r2, r2
    1f6a:	08c3      	lsrs	r3, r0, #3
    1f6c:	428b      	cmp	r3, r1
    1f6e:	d301      	bcc.n	1f74 <__aeabi_uidiv+0xd8>
    1f70:	00cb      	lsls	r3, r1, #3
    1f72:	1ac0      	subs	r0, r0, r3
    1f74:	4152      	adcs	r2, r2
    1f76:	0883      	lsrs	r3, r0, #2
    1f78:	428b      	cmp	r3, r1
    1f7a:	d301      	bcc.n	1f80 <__aeabi_uidiv+0xe4>
    1f7c:	008b      	lsls	r3, r1, #2
    1f7e:	1ac0      	subs	r0, r0, r3
    1f80:	4152      	adcs	r2, r2
    1f82:	0843      	lsrs	r3, r0, #1
    1f84:	428b      	cmp	r3, r1
    1f86:	d301      	bcc.n	1f8c <__aeabi_uidiv+0xf0>
    1f88:	004b      	lsls	r3, r1, #1
    1f8a:	1ac0      	subs	r0, r0, r3
    1f8c:	4152      	adcs	r2, r2
    1f8e:	1a41      	subs	r1, r0, r1
    1f90:	d200      	bcs.n	1f94 <__aeabi_uidiv+0xf8>
    1f92:	4601      	mov	r1, r0
    1f94:	4152      	adcs	r2, r2
    1f96:	4610      	mov	r0, r2
    1f98:	4770      	bx	lr
    1f9a:	e7ff      	b.n	1f9c <__aeabi_uidiv+0x100>
    1f9c:	b501      	push	{r0, lr}
    1f9e:	2000      	movs	r0, #0
    1fa0:	f000 f8fc 	bl	219c <__aeabi_idiv0>
    1fa4:	bd02      	pop	{r1, pc}
    1fa6:	46c0      	nop			; (mov r8, r8)

00001fa8 <__aeabi_uidivmod>:
    1fa8:	2900      	cmp	r1, #0
    1faa:	d0f7      	beq.n	1f9c <__aeabi_uidiv+0x100>
    1fac:	b503      	push	{r0, r1, lr}
    1fae:	f7ff ff75 	bl	1e9c <__aeabi_uidiv>
    1fb2:	bc0e      	pop	{r1, r2, r3}
    1fb4:	4342      	muls	r2, r0
    1fb6:	1a89      	subs	r1, r1, r2
    1fb8:	4718      	bx	r3
    1fba:	46c0      	nop			; (mov r8, r8)

00001fbc <__aeabi_idiv>:
    1fbc:	4603      	mov	r3, r0
    1fbe:	430b      	orrs	r3, r1
    1fc0:	d47f      	bmi.n	20c2 <STACK_SIZE+0xc2>
    1fc2:	2200      	movs	r2, #0
    1fc4:	0843      	lsrs	r3, r0, #1
    1fc6:	428b      	cmp	r3, r1
    1fc8:	d374      	bcc.n	20b4 <STACK_SIZE+0xb4>
    1fca:	0903      	lsrs	r3, r0, #4
    1fcc:	428b      	cmp	r3, r1
    1fce:	d35f      	bcc.n	2090 <STACK_SIZE+0x90>
    1fd0:	0a03      	lsrs	r3, r0, #8
    1fd2:	428b      	cmp	r3, r1
    1fd4:	d344      	bcc.n	2060 <STACK_SIZE+0x60>
    1fd6:	0b03      	lsrs	r3, r0, #12
    1fd8:	428b      	cmp	r3, r1
    1fda:	d328      	bcc.n	202e <STACK_SIZE+0x2e>
    1fdc:	0c03      	lsrs	r3, r0, #16
    1fde:	428b      	cmp	r3, r1
    1fe0:	d30d      	bcc.n	1ffe <__aeabi_idiv+0x42>
    1fe2:	22ff      	movs	r2, #255	; 0xff
    1fe4:	0209      	lsls	r1, r1, #8
    1fe6:	ba12      	rev	r2, r2
    1fe8:	0c03      	lsrs	r3, r0, #16
    1fea:	428b      	cmp	r3, r1
    1fec:	d302      	bcc.n	1ff4 <__aeabi_idiv+0x38>
    1fee:	1212      	asrs	r2, r2, #8
    1ff0:	0209      	lsls	r1, r1, #8
    1ff2:	d065      	beq.n	20c0 <STACK_SIZE+0xc0>
    1ff4:	0b03      	lsrs	r3, r0, #12
    1ff6:	428b      	cmp	r3, r1
    1ff8:	d319      	bcc.n	202e <STACK_SIZE+0x2e>
    1ffa:	e000      	b.n	1ffe <__aeabi_idiv+0x42>
    1ffc:	0a09      	lsrs	r1, r1, #8
    1ffe:	0bc3      	lsrs	r3, r0, #15
    2000:	428b      	cmp	r3, r1
    2002:	d301      	bcc.n	2008 <STACK_SIZE+0x8>
    2004:	03cb      	lsls	r3, r1, #15
    2006:	1ac0      	subs	r0, r0, r3
    2008:	4152      	adcs	r2, r2
    200a:	0b83      	lsrs	r3, r0, #14
    200c:	428b      	cmp	r3, r1
    200e:	d301      	bcc.n	2014 <STACK_SIZE+0x14>
    2010:	038b      	lsls	r3, r1, #14
    2012:	1ac0      	subs	r0, r0, r3
    2014:	4152      	adcs	r2, r2
    2016:	0b43      	lsrs	r3, r0, #13
    2018:	428b      	cmp	r3, r1
    201a:	d301      	bcc.n	2020 <STACK_SIZE+0x20>
    201c:	034b      	lsls	r3, r1, #13
    201e:	1ac0      	subs	r0, r0, r3
    2020:	4152      	adcs	r2, r2
    2022:	0b03      	lsrs	r3, r0, #12
    2024:	428b      	cmp	r3, r1
    2026:	d301      	bcc.n	202c <STACK_SIZE+0x2c>
    2028:	030b      	lsls	r3, r1, #12
    202a:	1ac0      	subs	r0, r0, r3
    202c:	4152      	adcs	r2, r2
    202e:	0ac3      	lsrs	r3, r0, #11
    2030:	428b      	cmp	r3, r1
    2032:	d301      	bcc.n	2038 <STACK_SIZE+0x38>
    2034:	02cb      	lsls	r3, r1, #11
    2036:	1ac0      	subs	r0, r0, r3
    2038:	4152      	adcs	r2, r2
    203a:	0a83      	lsrs	r3, r0, #10
    203c:	428b      	cmp	r3, r1
    203e:	d301      	bcc.n	2044 <STACK_SIZE+0x44>
    2040:	028b      	lsls	r3, r1, #10
    2042:	1ac0      	subs	r0, r0, r3
    2044:	4152      	adcs	r2, r2
    2046:	0a43      	lsrs	r3, r0, #9
    2048:	428b      	cmp	r3, r1
    204a:	d301      	bcc.n	2050 <STACK_SIZE+0x50>
    204c:	024b      	lsls	r3, r1, #9
    204e:	1ac0      	subs	r0, r0, r3
    2050:	4152      	adcs	r2, r2
    2052:	0a03      	lsrs	r3, r0, #8
    2054:	428b      	cmp	r3, r1
    2056:	d301      	bcc.n	205c <STACK_SIZE+0x5c>
    2058:	020b      	lsls	r3, r1, #8
    205a:	1ac0      	subs	r0, r0, r3
    205c:	4152      	adcs	r2, r2
    205e:	d2cd      	bcs.n	1ffc <__aeabi_idiv+0x40>
    2060:	09c3      	lsrs	r3, r0, #7
    2062:	428b      	cmp	r3, r1
    2064:	d301      	bcc.n	206a <STACK_SIZE+0x6a>
    2066:	01cb      	lsls	r3, r1, #7
    2068:	1ac0      	subs	r0, r0, r3
    206a:	4152      	adcs	r2, r2
    206c:	0983      	lsrs	r3, r0, #6
    206e:	428b      	cmp	r3, r1
    2070:	d301      	bcc.n	2076 <STACK_SIZE+0x76>
    2072:	018b      	lsls	r3, r1, #6
    2074:	1ac0      	subs	r0, r0, r3
    2076:	4152      	adcs	r2, r2
    2078:	0943      	lsrs	r3, r0, #5
    207a:	428b      	cmp	r3, r1
    207c:	d301      	bcc.n	2082 <STACK_SIZE+0x82>
    207e:	014b      	lsls	r3, r1, #5
    2080:	1ac0      	subs	r0, r0, r3
    2082:	4152      	adcs	r2, r2
    2084:	0903      	lsrs	r3, r0, #4
    2086:	428b      	cmp	r3, r1
    2088:	d301      	bcc.n	208e <STACK_SIZE+0x8e>
    208a:	010b      	lsls	r3, r1, #4
    208c:	1ac0      	subs	r0, r0, r3
    208e:	4152      	adcs	r2, r2
    2090:	08c3      	lsrs	r3, r0, #3
    2092:	428b      	cmp	r3, r1
    2094:	d301      	bcc.n	209a <STACK_SIZE+0x9a>
    2096:	00cb      	lsls	r3, r1, #3
    2098:	1ac0      	subs	r0, r0, r3
    209a:	4152      	adcs	r2, r2
    209c:	0883      	lsrs	r3, r0, #2
    209e:	428b      	cmp	r3, r1
    20a0:	d301      	bcc.n	20a6 <STACK_SIZE+0xa6>
    20a2:	008b      	lsls	r3, r1, #2
    20a4:	1ac0      	subs	r0, r0, r3
    20a6:	4152      	adcs	r2, r2
    20a8:	0843      	lsrs	r3, r0, #1
    20aa:	428b      	cmp	r3, r1
    20ac:	d301      	bcc.n	20b2 <STACK_SIZE+0xb2>
    20ae:	004b      	lsls	r3, r1, #1
    20b0:	1ac0      	subs	r0, r0, r3
    20b2:	4152      	adcs	r2, r2
    20b4:	1a41      	subs	r1, r0, r1
    20b6:	d200      	bcs.n	20ba <STACK_SIZE+0xba>
    20b8:	4601      	mov	r1, r0
    20ba:	4152      	adcs	r2, r2
    20bc:	4610      	mov	r0, r2
    20be:	4770      	bx	lr
    20c0:	e05d      	b.n	217e <STACK_SIZE+0x17e>
    20c2:	0fca      	lsrs	r2, r1, #31
    20c4:	d000      	beq.n	20c8 <STACK_SIZE+0xc8>
    20c6:	4249      	negs	r1, r1
    20c8:	1003      	asrs	r3, r0, #32
    20ca:	d300      	bcc.n	20ce <STACK_SIZE+0xce>
    20cc:	4240      	negs	r0, r0
    20ce:	4053      	eors	r3, r2
    20d0:	2200      	movs	r2, #0
    20d2:	469c      	mov	ip, r3
    20d4:	0903      	lsrs	r3, r0, #4
    20d6:	428b      	cmp	r3, r1
    20d8:	d32d      	bcc.n	2136 <STACK_SIZE+0x136>
    20da:	0a03      	lsrs	r3, r0, #8
    20dc:	428b      	cmp	r3, r1
    20de:	d312      	bcc.n	2106 <STACK_SIZE+0x106>
    20e0:	22fc      	movs	r2, #252	; 0xfc
    20e2:	0189      	lsls	r1, r1, #6
    20e4:	ba12      	rev	r2, r2
    20e6:	0a03      	lsrs	r3, r0, #8
    20e8:	428b      	cmp	r3, r1
    20ea:	d30c      	bcc.n	2106 <STACK_SIZE+0x106>
    20ec:	0189      	lsls	r1, r1, #6
    20ee:	1192      	asrs	r2, r2, #6
    20f0:	428b      	cmp	r3, r1
    20f2:	d308      	bcc.n	2106 <STACK_SIZE+0x106>
    20f4:	0189      	lsls	r1, r1, #6
    20f6:	1192      	asrs	r2, r2, #6
    20f8:	428b      	cmp	r3, r1
    20fa:	d304      	bcc.n	2106 <STACK_SIZE+0x106>
    20fc:	0189      	lsls	r1, r1, #6
    20fe:	d03a      	beq.n	2176 <STACK_SIZE+0x176>
    2100:	1192      	asrs	r2, r2, #6
    2102:	e000      	b.n	2106 <STACK_SIZE+0x106>
    2104:	0989      	lsrs	r1, r1, #6
    2106:	09c3      	lsrs	r3, r0, #7
    2108:	428b      	cmp	r3, r1
    210a:	d301      	bcc.n	2110 <STACK_SIZE+0x110>
    210c:	01cb      	lsls	r3, r1, #7
    210e:	1ac0      	subs	r0, r0, r3
    2110:	4152      	adcs	r2, r2
    2112:	0983      	lsrs	r3, r0, #6
    2114:	428b      	cmp	r3, r1
    2116:	d301      	bcc.n	211c <STACK_SIZE+0x11c>
    2118:	018b      	lsls	r3, r1, #6
    211a:	1ac0      	subs	r0, r0, r3
    211c:	4152      	adcs	r2, r2
    211e:	0943      	lsrs	r3, r0, #5
    2120:	428b      	cmp	r3, r1
    2122:	d301      	bcc.n	2128 <STACK_SIZE+0x128>
    2124:	014b      	lsls	r3, r1, #5
    2126:	1ac0      	subs	r0, r0, r3
    2128:	4152      	adcs	r2, r2
    212a:	0903      	lsrs	r3, r0, #4
    212c:	428b      	cmp	r3, r1
    212e:	d301      	bcc.n	2134 <STACK_SIZE+0x134>
    2130:	010b      	lsls	r3, r1, #4
    2132:	1ac0      	subs	r0, r0, r3
    2134:	4152      	adcs	r2, r2
    2136:	08c3      	lsrs	r3, r0, #3
    2138:	428b      	cmp	r3, r1
    213a:	d301      	bcc.n	2140 <STACK_SIZE+0x140>
    213c:	00cb      	lsls	r3, r1, #3
    213e:	1ac0      	subs	r0, r0, r3
    2140:	4152      	adcs	r2, r2
    2142:	0883      	lsrs	r3, r0, #2
    2144:	428b      	cmp	r3, r1
    2146:	d301      	bcc.n	214c <STACK_SIZE+0x14c>
    2148:	008b      	lsls	r3, r1, #2
    214a:	1ac0      	subs	r0, r0, r3
    214c:	4152      	adcs	r2, r2
    214e:	d2d9      	bcs.n	2104 <STACK_SIZE+0x104>
    2150:	0843      	lsrs	r3, r0, #1
    2152:	428b      	cmp	r3, r1
    2154:	d301      	bcc.n	215a <STACK_SIZE+0x15a>
    2156:	004b      	lsls	r3, r1, #1
    2158:	1ac0      	subs	r0, r0, r3
    215a:	4152      	adcs	r2, r2
    215c:	1a41      	subs	r1, r0, r1
    215e:	d200      	bcs.n	2162 <STACK_SIZE+0x162>
    2160:	4601      	mov	r1, r0
    2162:	4663      	mov	r3, ip
    2164:	4152      	adcs	r2, r2
    2166:	105b      	asrs	r3, r3, #1
    2168:	4610      	mov	r0, r2
    216a:	d301      	bcc.n	2170 <STACK_SIZE+0x170>
    216c:	4240      	negs	r0, r0
    216e:	2b00      	cmp	r3, #0
    2170:	d500      	bpl.n	2174 <STACK_SIZE+0x174>
    2172:	4249      	negs	r1, r1
    2174:	4770      	bx	lr
    2176:	4663      	mov	r3, ip
    2178:	105b      	asrs	r3, r3, #1
    217a:	d300      	bcc.n	217e <STACK_SIZE+0x17e>
    217c:	4240      	negs	r0, r0
    217e:	b501      	push	{r0, lr}
    2180:	2000      	movs	r0, #0
    2182:	f000 f80b 	bl	219c <__aeabi_idiv0>
    2186:	bd02      	pop	{r1, pc}

00002188 <__aeabi_idivmod>:
    2188:	2900      	cmp	r1, #0
    218a:	d0f8      	beq.n	217e <STACK_SIZE+0x17e>
    218c:	b503      	push	{r0, r1, lr}
    218e:	f7ff ff15 	bl	1fbc <__aeabi_idiv>
    2192:	bc0e      	pop	{r1, r2, r3}
    2194:	4342      	muls	r2, r0
    2196:	1a89      	subs	r1, r1, r2
    2198:	4718      	bx	r3
    219a:	46c0      	nop			; (mov r8, r8)

0000219c <__aeabi_idiv0>:
    219c:	4770      	bx	lr
    219e:	46c0      	nop			; (mov r8, r8)

000021a0 <__aeabi_lmul>:
    21a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21a2:	464f      	mov	r7, r9
    21a4:	4646      	mov	r6, r8
    21a6:	0405      	lsls	r5, r0, #16
    21a8:	0c2d      	lsrs	r5, r5, #16
    21aa:	1c2c      	adds	r4, r5, #0
    21ac:	b4c0      	push	{r6, r7}
    21ae:	0417      	lsls	r7, r2, #16
    21b0:	0c16      	lsrs	r6, r2, #16
    21b2:	0c3f      	lsrs	r7, r7, #16
    21b4:	4699      	mov	r9, r3
    21b6:	0c03      	lsrs	r3, r0, #16
    21b8:	437c      	muls	r4, r7
    21ba:	4375      	muls	r5, r6
    21bc:	435f      	muls	r7, r3
    21be:	4373      	muls	r3, r6
    21c0:	197d      	adds	r5, r7, r5
    21c2:	0c26      	lsrs	r6, r4, #16
    21c4:	19ad      	adds	r5, r5, r6
    21c6:	469c      	mov	ip, r3
    21c8:	42af      	cmp	r7, r5
    21ca:	d903      	bls.n	21d4 <__aeabi_lmul+0x34>
    21cc:	2380      	movs	r3, #128	; 0x80
    21ce:	025b      	lsls	r3, r3, #9
    21d0:	4698      	mov	r8, r3
    21d2:	44c4      	add	ip, r8
    21d4:	464b      	mov	r3, r9
    21d6:	4351      	muls	r1, r2
    21d8:	4343      	muls	r3, r0
    21da:	0424      	lsls	r4, r4, #16
    21dc:	0c2e      	lsrs	r6, r5, #16
    21de:	0c24      	lsrs	r4, r4, #16
    21e0:	042d      	lsls	r5, r5, #16
    21e2:	4466      	add	r6, ip
    21e4:	192c      	adds	r4, r5, r4
    21e6:	1859      	adds	r1, r3, r1
    21e8:	1989      	adds	r1, r1, r6
    21ea:	1c20      	adds	r0, r4, #0
    21ec:	bc0c      	pop	{r2, r3}
    21ee:	4690      	mov	r8, r2
    21f0:	4699      	mov	r9, r3
    21f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000021f4 <__aeabi_f2uiz>:
    21f4:	219e      	movs	r1, #158	; 0x9e
    21f6:	b510      	push	{r4, lr}
    21f8:	05c9      	lsls	r1, r1, #23
    21fa:	1c04      	adds	r4, r0, #0
    21fc:	f001 fc96 	bl	3b2c <__aeabi_fcmpge>
    2200:	2800      	cmp	r0, #0
    2202:	d103      	bne.n	220c <__aeabi_f2uiz+0x18>
    2204:	1c20      	adds	r0, r4, #0
    2206:	f000 f98b 	bl	2520 <__aeabi_f2iz>
    220a:	bd10      	pop	{r4, pc}
    220c:	219e      	movs	r1, #158	; 0x9e
    220e:	1c20      	adds	r0, r4, #0
    2210:	05c9      	lsls	r1, r1, #23
    2212:	f000 f807 	bl	2224 <__aeabi_fsub>
    2216:	f000 f983 	bl	2520 <__aeabi_f2iz>
    221a:	2380      	movs	r3, #128	; 0x80
    221c:	061b      	lsls	r3, r3, #24
    221e:	469c      	mov	ip, r3
    2220:	4460      	add	r0, ip
    2222:	e7f2      	b.n	220a <__aeabi_f2uiz+0x16>

00002224 <__aeabi_fsub>:
    2224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2226:	004a      	lsls	r2, r1, #1
    2228:	0243      	lsls	r3, r0, #9
    222a:	0044      	lsls	r4, r0, #1
    222c:	024d      	lsls	r5, r1, #9
    222e:	0fc0      	lsrs	r0, r0, #31
    2230:	0e24      	lsrs	r4, r4, #24
    2232:	1c06      	adds	r6, r0, #0
    2234:	099b      	lsrs	r3, r3, #6
    2236:	0e12      	lsrs	r2, r2, #24
    2238:	0fc9      	lsrs	r1, r1, #31
    223a:	09ad      	lsrs	r5, r5, #6
    223c:	2aff      	cmp	r2, #255	; 0xff
    223e:	d100      	bne.n	2242 <__aeabi_fsub+0x1e>
    2240:	e075      	b.n	232e <__aeabi_fsub+0x10a>
    2242:	2701      	movs	r7, #1
    2244:	4079      	eors	r1, r7
    2246:	4288      	cmp	r0, r1
    2248:	d050      	beq.n	22ec <__aeabi_fsub+0xc8>
    224a:	1aa0      	subs	r0, r4, r2
    224c:	2800      	cmp	r0, #0
    224e:	dc00      	bgt.n	2252 <__aeabi_fsub+0x2e>
    2250:	e08f      	b.n	2372 <__aeabi_fsub+0x14e>
    2252:	2a00      	cmp	r2, #0
    2254:	d11e      	bne.n	2294 <__aeabi_fsub+0x70>
    2256:	2d00      	cmp	r5, #0
    2258:	d000      	beq.n	225c <__aeabi_fsub+0x38>
    225a:	e075      	b.n	2348 <__aeabi_fsub+0x124>
    225c:	075a      	lsls	r2, r3, #29
    225e:	d004      	beq.n	226a <__aeabi_fsub+0x46>
    2260:	220f      	movs	r2, #15
    2262:	401a      	ands	r2, r3
    2264:	2a04      	cmp	r2, #4
    2266:	d000      	beq.n	226a <__aeabi_fsub+0x46>
    2268:	3304      	adds	r3, #4
    226a:	2280      	movs	r2, #128	; 0x80
    226c:	2001      	movs	r0, #1
    226e:	04d2      	lsls	r2, r2, #19
    2270:	401a      	ands	r2, r3
    2272:	4030      	ands	r0, r6
    2274:	2a00      	cmp	r2, #0
    2276:	d032      	beq.n	22de <__aeabi_fsub+0xba>
    2278:	3401      	adds	r4, #1
    227a:	2cff      	cmp	r4, #255	; 0xff
    227c:	d100      	bne.n	2280 <__aeabi_fsub+0x5c>
    227e:	e084      	b.n	238a <__aeabi_fsub+0x166>
    2280:	019b      	lsls	r3, r3, #6
    2282:	0a5b      	lsrs	r3, r3, #9
    2284:	b2e4      	uxtb	r4, r4
    2286:	025b      	lsls	r3, r3, #9
    2288:	05e4      	lsls	r4, r4, #23
    228a:	0a5b      	lsrs	r3, r3, #9
    228c:	4323      	orrs	r3, r4
    228e:	07c0      	lsls	r0, r0, #31
    2290:	4318      	orrs	r0, r3
    2292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2294:	2cff      	cmp	r4, #255	; 0xff
    2296:	d0e1      	beq.n	225c <__aeabi_fsub+0x38>
    2298:	2280      	movs	r2, #128	; 0x80
    229a:	04d2      	lsls	r2, r2, #19
    229c:	4315      	orrs	r5, r2
    229e:	281b      	cmp	r0, #27
    22a0:	dd7a      	ble.n	2398 <__aeabi_fsub+0x174>
    22a2:	2501      	movs	r5, #1
    22a4:	1b5b      	subs	r3, r3, r5
    22a6:	015a      	lsls	r2, r3, #5
    22a8:	d55d      	bpl.n	2366 <__aeabi_fsub+0x142>
    22aa:	019b      	lsls	r3, r3, #6
    22ac:	099f      	lsrs	r7, r3, #6
    22ae:	1c38      	adds	r0, r7, #0
    22b0:	f001 fc46 	bl	3b40 <__clzsi2>
    22b4:	3805      	subs	r0, #5
    22b6:	4087      	lsls	r7, r0
    22b8:	4284      	cmp	r4, r0
    22ba:	dc69      	bgt.n	2390 <__aeabi_fsub+0x16c>
    22bc:	1b00      	subs	r0, r0, r4
    22be:	241f      	movs	r4, #31
    22c0:	1c3a      	adds	r2, r7, #0
    22c2:	1c43      	adds	r3, r0, #1
    22c4:	1a20      	subs	r0, r4, r0
    22c6:	40da      	lsrs	r2, r3
    22c8:	4087      	lsls	r7, r0
    22ca:	1c13      	adds	r3, r2, #0
    22cc:	1e7c      	subs	r4, r7, #1
    22ce:	41a7      	sbcs	r7, r4
    22d0:	2400      	movs	r4, #0
    22d2:	433b      	orrs	r3, r7
    22d4:	e7c2      	b.n	225c <__aeabi_fsub+0x38>
    22d6:	1e13      	subs	r3, r2, #0
    22d8:	d145      	bne.n	2366 <__aeabi_fsub+0x142>
    22da:	2300      	movs	r3, #0
    22dc:	2000      	movs	r0, #0
    22de:	08db      	lsrs	r3, r3, #3
    22e0:	2cff      	cmp	r4, #255	; 0xff
    22e2:	d028      	beq.n	2336 <__aeabi_fsub+0x112>
    22e4:	025b      	lsls	r3, r3, #9
    22e6:	0a5b      	lsrs	r3, r3, #9
    22e8:	b2e4      	uxtb	r4, r4
    22ea:	e7cc      	b.n	2286 <__aeabi_fsub+0x62>
    22ec:	1aa1      	subs	r1, r4, r2
    22ee:	2900      	cmp	r1, #0
    22f0:	dd5b      	ble.n	23aa <__aeabi_fsub+0x186>
    22f2:	2a00      	cmp	r2, #0
    22f4:	d02e      	beq.n	2354 <__aeabi_fsub+0x130>
    22f6:	2cff      	cmp	r4, #255	; 0xff
    22f8:	d0b0      	beq.n	225c <__aeabi_fsub+0x38>
    22fa:	2280      	movs	r2, #128	; 0x80
    22fc:	04d2      	lsls	r2, r2, #19
    22fe:	4315      	orrs	r5, r2
    2300:	291b      	cmp	r1, #27
    2302:	dc74      	bgt.n	23ee <__aeabi_fsub+0x1ca>
    2304:	1c2f      	adds	r7, r5, #0
    2306:	2220      	movs	r2, #32
    2308:	40cf      	lsrs	r7, r1
    230a:	1a51      	subs	r1, r2, r1
    230c:	408d      	lsls	r5, r1
    230e:	1e69      	subs	r1, r5, #1
    2310:	418d      	sbcs	r5, r1
    2312:	433d      	orrs	r5, r7
    2314:	195b      	adds	r3, r3, r5
    2316:	015a      	lsls	r2, r3, #5
    2318:	d525      	bpl.n	2366 <__aeabi_fsub+0x142>
    231a:	3401      	adds	r4, #1
    231c:	2cff      	cmp	r4, #255	; 0xff
    231e:	d074      	beq.n	240a <__aeabi_fsub+0x1e6>
    2320:	2101      	movs	r1, #1
    2322:	4a7e      	ldr	r2, [pc, #504]	; (251c <__aeabi_fsub+0x2f8>)
    2324:	4019      	ands	r1, r3
    2326:	4013      	ands	r3, r2
    2328:	085b      	lsrs	r3, r3, #1
    232a:	430b      	orrs	r3, r1
    232c:	e796      	b.n	225c <__aeabi_fsub+0x38>
    232e:	2d00      	cmp	r5, #0
    2330:	d000      	beq.n	2334 <__aeabi_fsub+0x110>
    2332:	e788      	b.n	2246 <__aeabi_fsub+0x22>
    2334:	e785      	b.n	2242 <__aeabi_fsub+0x1e>
    2336:	2b00      	cmp	r3, #0
    2338:	d027      	beq.n	238a <__aeabi_fsub+0x166>
    233a:	2280      	movs	r2, #128	; 0x80
    233c:	03d2      	lsls	r2, r2, #15
    233e:	4313      	orrs	r3, r2
    2340:	025b      	lsls	r3, r3, #9
    2342:	0a5b      	lsrs	r3, r3, #9
    2344:	24ff      	movs	r4, #255	; 0xff
    2346:	e79e      	b.n	2286 <__aeabi_fsub+0x62>
    2348:	3801      	subs	r0, #1
    234a:	2800      	cmp	r0, #0
    234c:	d0aa      	beq.n	22a4 <__aeabi_fsub+0x80>
    234e:	2cff      	cmp	r4, #255	; 0xff
    2350:	d1a5      	bne.n	229e <__aeabi_fsub+0x7a>
    2352:	e783      	b.n	225c <__aeabi_fsub+0x38>
    2354:	2d00      	cmp	r5, #0
    2356:	d100      	bne.n	235a <__aeabi_fsub+0x136>
    2358:	e780      	b.n	225c <__aeabi_fsub+0x38>
    235a:	3901      	subs	r1, #1
    235c:	2900      	cmp	r1, #0
    235e:	d0d9      	beq.n	2314 <__aeabi_fsub+0xf0>
    2360:	2cff      	cmp	r4, #255	; 0xff
    2362:	d1cd      	bne.n	2300 <__aeabi_fsub+0xdc>
    2364:	e77a      	b.n	225c <__aeabi_fsub+0x38>
    2366:	075a      	lsls	r2, r3, #29
    2368:	d000      	beq.n	236c <__aeabi_fsub+0x148>
    236a:	e779      	b.n	2260 <__aeabi_fsub+0x3c>
    236c:	2001      	movs	r0, #1
    236e:	4030      	ands	r0, r6
    2370:	e7b5      	b.n	22de <__aeabi_fsub+0xba>
    2372:	2800      	cmp	r0, #0
    2374:	d125      	bne.n	23c2 <__aeabi_fsub+0x19e>
    2376:	1c62      	adds	r2, r4, #1
    2378:	b2d2      	uxtb	r2, r2
    237a:	2a01      	cmp	r2, #1
    237c:	dd55      	ble.n	242a <__aeabi_fsub+0x206>
    237e:	1b5f      	subs	r7, r3, r5
    2380:	017a      	lsls	r2, r7, #5
    2382:	d52d      	bpl.n	23e0 <__aeabi_fsub+0x1bc>
    2384:	1aef      	subs	r7, r5, r3
    2386:	1c0e      	adds	r6, r1, #0
    2388:	e791      	b.n	22ae <__aeabi_fsub+0x8a>
    238a:	24ff      	movs	r4, #255	; 0xff
    238c:	2300      	movs	r3, #0
    238e:	e77a      	b.n	2286 <__aeabi_fsub+0x62>
    2390:	4b62      	ldr	r3, [pc, #392]	; (251c <__aeabi_fsub+0x2f8>)
    2392:	1a24      	subs	r4, r4, r0
    2394:	403b      	ands	r3, r7
    2396:	e761      	b.n	225c <__aeabi_fsub+0x38>
    2398:	1c29      	adds	r1, r5, #0
    239a:	2220      	movs	r2, #32
    239c:	40c1      	lsrs	r1, r0
    239e:	1a10      	subs	r0, r2, r0
    23a0:	4085      	lsls	r5, r0
    23a2:	1e68      	subs	r0, r5, #1
    23a4:	4185      	sbcs	r5, r0
    23a6:	430d      	orrs	r5, r1
    23a8:	e77c      	b.n	22a4 <__aeabi_fsub+0x80>
    23aa:	2900      	cmp	r1, #0
    23ac:	d146      	bne.n	243c <__aeabi_fsub+0x218>
    23ae:	1c62      	adds	r2, r4, #1
    23b0:	b2d1      	uxtb	r1, r2
    23b2:	2901      	cmp	r1, #1
    23b4:	dd2b      	ble.n	240e <__aeabi_fsub+0x1ea>
    23b6:	2aff      	cmp	r2, #255	; 0xff
    23b8:	d026      	beq.n	2408 <__aeabi_fsub+0x1e4>
    23ba:	18eb      	adds	r3, r5, r3
    23bc:	085b      	lsrs	r3, r3, #1
    23be:	1c14      	adds	r4, r2, #0
    23c0:	e74c      	b.n	225c <__aeabi_fsub+0x38>
    23c2:	2c00      	cmp	r4, #0
    23c4:	d015      	beq.n	23f2 <__aeabi_fsub+0x1ce>
    23c6:	2aff      	cmp	r2, #255	; 0xff
    23c8:	d01a      	beq.n	2400 <__aeabi_fsub+0x1dc>
    23ca:	2480      	movs	r4, #128	; 0x80
    23cc:	04e4      	lsls	r4, r4, #19
    23ce:	4240      	negs	r0, r0
    23d0:	4323      	orrs	r3, r4
    23d2:	281b      	cmp	r0, #27
    23d4:	dd4d      	ble.n	2472 <__aeabi_fsub+0x24e>
    23d6:	2301      	movs	r3, #1
    23d8:	1aeb      	subs	r3, r5, r3
    23da:	1c14      	adds	r4, r2, #0
    23dc:	1c0e      	adds	r6, r1, #0
    23de:	e762      	b.n	22a6 <__aeabi_fsub+0x82>
    23e0:	2f00      	cmp	r7, #0
    23e2:	d000      	beq.n	23e6 <__aeabi_fsub+0x1c2>
    23e4:	e763      	b.n	22ae <__aeabi_fsub+0x8a>
    23e6:	2300      	movs	r3, #0
    23e8:	2000      	movs	r0, #0
    23ea:	2400      	movs	r4, #0
    23ec:	e777      	b.n	22de <__aeabi_fsub+0xba>
    23ee:	2501      	movs	r5, #1
    23f0:	e790      	b.n	2314 <__aeabi_fsub+0xf0>
    23f2:	2b00      	cmp	r3, #0
    23f4:	d039      	beq.n	246a <__aeabi_fsub+0x246>
    23f6:	43c0      	mvns	r0, r0
    23f8:	2800      	cmp	r0, #0
    23fa:	d0ed      	beq.n	23d8 <__aeabi_fsub+0x1b4>
    23fc:	2aff      	cmp	r2, #255	; 0xff
    23fe:	d1e8      	bne.n	23d2 <__aeabi_fsub+0x1ae>
    2400:	1c2b      	adds	r3, r5, #0
    2402:	24ff      	movs	r4, #255	; 0xff
    2404:	1c0e      	adds	r6, r1, #0
    2406:	e729      	b.n	225c <__aeabi_fsub+0x38>
    2408:	24ff      	movs	r4, #255	; 0xff
    240a:	2300      	movs	r3, #0
    240c:	e767      	b.n	22de <__aeabi_fsub+0xba>
    240e:	2c00      	cmp	r4, #0
    2410:	d15a      	bne.n	24c8 <__aeabi_fsub+0x2a4>
    2412:	2b00      	cmp	r3, #0
    2414:	d07f      	beq.n	2516 <__aeabi_fsub+0x2f2>
    2416:	2d00      	cmp	r5, #0
    2418:	d100      	bne.n	241c <__aeabi_fsub+0x1f8>
    241a:	e71f      	b.n	225c <__aeabi_fsub+0x38>
    241c:	195b      	adds	r3, r3, r5
    241e:	015a      	lsls	r2, r3, #5
    2420:	d5a1      	bpl.n	2366 <__aeabi_fsub+0x142>
    2422:	4a3e      	ldr	r2, [pc, #248]	; (251c <__aeabi_fsub+0x2f8>)
    2424:	3401      	adds	r4, #1
    2426:	4013      	ands	r3, r2
    2428:	e718      	b.n	225c <__aeabi_fsub+0x38>
    242a:	2c00      	cmp	r4, #0
    242c:	d115      	bne.n	245a <__aeabi_fsub+0x236>
    242e:	2b00      	cmp	r3, #0
    2430:	d12f      	bne.n	2492 <__aeabi_fsub+0x26e>
    2432:	2d00      	cmp	r5, #0
    2434:	d05e      	beq.n	24f4 <__aeabi_fsub+0x2d0>
    2436:	1c2b      	adds	r3, r5, #0
    2438:	1c0e      	adds	r6, r1, #0
    243a:	e70f      	b.n	225c <__aeabi_fsub+0x38>
    243c:	2c00      	cmp	r4, #0
    243e:	d121      	bne.n	2484 <__aeabi_fsub+0x260>
    2440:	2b00      	cmp	r3, #0
    2442:	d054      	beq.n	24ee <__aeabi_fsub+0x2ca>
    2444:	43c9      	mvns	r1, r1
    2446:	2900      	cmp	r1, #0
    2448:	d004      	beq.n	2454 <__aeabi_fsub+0x230>
    244a:	2aff      	cmp	r2, #255	; 0xff
    244c:	d04c      	beq.n	24e8 <__aeabi_fsub+0x2c4>
    244e:	291b      	cmp	r1, #27
    2450:	dd58      	ble.n	2504 <__aeabi_fsub+0x2e0>
    2452:	2301      	movs	r3, #1
    2454:	195b      	adds	r3, r3, r5
    2456:	1c14      	adds	r4, r2, #0
    2458:	e75d      	b.n	2316 <__aeabi_fsub+0xf2>
    245a:	2b00      	cmp	r3, #0
    245c:	d123      	bne.n	24a6 <__aeabi_fsub+0x282>
    245e:	2d00      	cmp	r5, #0
    2460:	d04b      	beq.n	24fa <__aeabi_fsub+0x2d6>
    2462:	1c2b      	adds	r3, r5, #0
    2464:	1c0e      	adds	r6, r1, #0
    2466:	24ff      	movs	r4, #255	; 0xff
    2468:	e6f8      	b.n	225c <__aeabi_fsub+0x38>
    246a:	1c2b      	adds	r3, r5, #0
    246c:	1c14      	adds	r4, r2, #0
    246e:	1c0e      	adds	r6, r1, #0
    2470:	e6f4      	b.n	225c <__aeabi_fsub+0x38>
    2472:	1c1e      	adds	r6, r3, #0
    2474:	2420      	movs	r4, #32
    2476:	40c6      	lsrs	r6, r0
    2478:	1a20      	subs	r0, r4, r0
    247a:	4083      	lsls	r3, r0
    247c:	1e58      	subs	r0, r3, #1
    247e:	4183      	sbcs	r3, r0
    2480:	4333      	orrs	r3, r6
    2482:	e7a9      	b.n	23d8 <__aeabi_fsub+0x1b4>
    2484:	2aff      	cmp	r2, #255	; 0xff
    2486:	d02f      	beq.n	24e8 <__aeabi_fsub+0x2c4>
    2488:	2480      	movs	r4, #128	; 0x80
    248a:	04e4      	lsls	r4, r4, #19
    248c:	4249      	negs	r1, r1
    248e:	4323      	orrs	r3, r4
    2490:	e7dd      	b.n	244e <__aeabi_fsub+0x22a>
    2492:	2d00      	cmp	r5, #0
    2494:	d100      	bne.n	2498 <__aeabi_fsub+0x274>
    2496:	e6e1      	b.n	225c <__aeabi_fsub+0x38>
    2498:	1b5a      	subs	r2, r3, r5
    249a:	0150      	lsls	r0, r2, #5
    249c:	d400      	bmi.n	24a0 <__aeabi_fsub+0x27c>
    249e:	e71a      	b.n	22d6 <__aeabi_fsub+0xb2>
    24a0:	1aeb      	subs	r3, r5, r3
    24a2:	1c0e      	adds	r6, r1, #0
    24a4:	e6da      	b.n	225c <__aeabi_fsub+0x38>
    24a6:	24ff      	movs	r4, #255	; 0xff
    24a8:	2d00      	cmp	r5, #0
    24aa:	d100      	bne.n	24ae <__aeabi_fsub+0x28a>
    24ac:	e6d6      	b.n	225c <__aeabi_fsub+0x38>
    24ae:	2280      	movs	r2, #128	; 0x80
    24b0:	08db      	lsrs	r3, r3, #3
    24b2:	03d2      	lsls	r2, r2, #15
    24b4:	4213      	tst	r3, r2
    24b6:	d004      	beq.n	24c2 <__aeabi_fsub+0x29e>
    24b8:	08ed      	lsrs	r5, r5, #3
    24ba:	4215      	tst	r5, r2
    24bc:	d101      	bne.n	24c2 <__aeabi_fsub+0x29e>
    24be:	1c2b      	adds	r3, r5, #0
    24c0:	1c0e      	adds	r6, r1, #0
    24c2:	00db      	lsls	r3, r3, #3
    24c4:	24ff      	movs	r4, #255	; 0xff
    24c6:	e6c9      	b.n	225c <__aeabi_fsub+0x38>
    24c8:	2b00      	cmp	r3, #0
    24ca:	d00d      	beq.n	24e8 <__aeabi_fsub+0x2c4>
    24cc:	24ff      	movs	r4, #255	; 0xff
    24ce:	2d00      	cmp	r5, #0
    24d0:	d100      	bne.n	24d4 <__aeabi_fsub+0x2b0>
    24d2:	e6c3      	b.n	225c <__aeabi_fsub+0x38>
    24d4:	2280      	movs	r2, #128	; 0x80
    24d6:	08db      	lsrs	r3, r3, #3
    24d8:	03d2      	lsls	r2, r2, #15
    24da:	4213      	tst	r3, r2
    24dc:	d0f1      	beq.n	24c2 <__aeabi_fsub+0x29e>
    24de:	08ed      	lsrs	r5, r5, #3
    24e0:	4215      	tst	r5, r2
    24e2:	d1ee      	bne.n	24c2 <__aeabi_fsub+0x29e>
    24e4:	1c2b      	adds	r3, r5, #0
    24e6:	e7ec      	b.n	24c2 <__aeabi_fsub+0x29e>
    24e8:	1c2b      	adds	r3, r5, #0
    24ea:	24ff      	movs	r4, #255	; 0xff
    24ec:	e6b6      	b.n	225c <__aeabi_fsub+0x38>
    24ee:	1c2b      	adds	r3, r5, #0
    24f0:	1c14      	adds	r4, r2, #0
    24f2:	e6b3      	b.n	225c <__aeabi_fsub+0x38>
    24f4:	1c23      	adds	r3, r4, #0
    24f6:	2000      	movs	r0, #0
    24f8:	e6f1      	b.n	22de <__aeabi_fsub+0xba>
    24fa:	2380      	movs	r3, #128	; 0x80
    24fc:	2000      	movs	r0, #0
    24fe:	049b      	lsls	r3, r3, #18
    2500:	24ff      	movs	r4, #255	; 0xff
    2502:	e6ec      	b.n	22de <__aeabi_fsub+0xba>
    2504:	1c1f      	adds	r7, r3, #0
    2506:	2420      	movs	r4, #32
    2508:	40cf      	lsrs	r7, r1
    250a:	1a61      	subs	r1, r4, r1
    250c:	408b      	lsls	r3, r1
    250e:	1e59      	subs	r1, r3, #1
    2510:	418b      	sbcs	r3, r1
    2512:	433b      	orrs	r3, r7
    2514:	e79e      	b.n	2454 <__aeabi_fsub+0x230>
    2516:	1c2b      	adds	r3, r5, #0
    2518:	e6a0      	b.n	225c <__aeabi_fsub+0x38>
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	fbffffff 	.word	0xfbffffff

00002520 <__aeabi_f2iz>:
    2520:	0242      	lsls	r2, r0, #9
    2522:	0a51      	lsrs	r1, r2, #9
    2524:	0042      	lsls	r2, r0, #1
    2526:	0fc3      	lsrs	r3, r0, #31
    2528:	0e12      	lsrs	r2, r2, #24
    252a:	2000      	movs	r0, #0
    252c:	2a7e      	cmp	r2, #126	; 0x7e
    252e:	dd0d      	ble.n	254c <__aeabi_f2iz+0x2c>
    2530:	2a9d      	cmp	r2, #157	; 0x9d
    2532:	dc0c      	bgt.n	254e <__aeabi_f2iz+0x2e>
    2534:	2080      	movs	r0, #128	; 0x80
    2536:	0400      	lsls	r0, r0, #16
    2538:	4301      	orrs	r1, r0
    253a:	2a95      	cmp	r2, #149	; 0x95
    253c:	dc0a      	bgt.n	2554 <__aeabi_f2iz+0x34>
    253e:	2096      	movs	r0, #150	; 0x96
    2540:	1a82      	subs	r2, r0, r2
    2542:	40d1      	lsrs	r1, r2
    2544:	1c0a      	adds	r2, r1, #0
    2546:	4258      	negs	r0, r3
    2548:	4042      	eors	r2, r0
    254a:	18d0      	adds	r0, r2, r3
    254c:	4770      	bx	lr
    254e:	4a03      	ldr	r2, [pc, #12]	; (255c <__aeabi_f2iz+0x3c>)
    2550:	1898      	adds	r0, r3, r2
    2552:	e7fb      	b.n	254c <__aeabi_f2iz+0x2c>
    2554:	3a96      	subs	r2, #150	; 0x96
    2556:	4091      	lsls	r1, r2
    2558:	1c0a      	adds	r2, r1, #0
    255a:	e7f4      	b.n	2546 <__aeabi_f2iz+0x26>
    255c:	7fffffff 	.word	0x7fffffff

00002560 <__aeabi_ui2f>:
    2560:	b510      	push	{r4, lr}
    2562:	1e04      	subs	r4, r0, #0
    2564:	d035      	beq.n	25d2 <__aeabi_ui2f+0x72>
    2566:	f001 faeb 	bl	3b40 <__clzsi2>
    256a:	219e      	movs	r1, #158	; 0x9e
    256c:	1a09      	subs	r1, r1, r0
    256e:	2996      	cmp	r1, #150	; 0x96
    2570:	dc09      	bgt.n	2586 <__aeabi_ui2f+0x26>
    2572:	2808      	cmp	r0, #8
    2574:	dd30      	ble.n	25d8 <__aeabi_ui2f+0x78>
    2576:	1c02      	adds	r2, r0, #0
    2578:	1c23      	adds	r3, r4, #0
    257a:	3a08      	subs	r2, #8
    257c:	4093      	lsls	r3, r2
    257e:	025b      	lsls	r3, r3, #9
    2580:	0a5b      	lsrs	r3, r3, #9
    2582:	b2c8      	uxtb	r0, r1
    2584:	e020      	b.n	25c8 <__aeabi_ui2f+0x68>
    2586:	2999      	cmp	r1, #153	; 0x99
    2588:	dd0c      	ble.n	25a4 <__aeabi_ui2f+0x44>
    258a:	2205      	movs	r2, #5
    258c:	1c23      	adds	r3, r4, #0
    258e:	1a12      	subs	r2, r2, r0
    2590:	40d3      	lsrs	r3, r2
    2592:	1c1a      	adds	r2, r3, #0
    2594:	1c03      	adds	r3, r0, #0
    2596:	331b      	adds	r3, #27
    2598:	409c      	lsls	r4, r3
    259a:	1c23      	adds	r3, r4, #0
    259c:	1e5c      	subs	r4, r3, #1
    259e:	41a3      	sbcs	r3, r4
    25a0:	4313      	orrs	r3, r2
    25a2:	1c1c      	adds	r4, r3, #0
    25a4:	2805      	cmp	r0, #5
    25a6:	dd01      	ble.n	25ac <__aeabi_ui2f+0x4c>
    25a8:	1f43      	subs	r3, r0, #5
    25aa:	409c      	lsls	r4, r3
    25ac:	4b0f      	ldr	r3, [pc, #60]	; (25ec <__aeabi_ui2f+0x8c>)
    25ae:	4023      	ands	r3, r4
    25b0:	0762      	lsls	r2, r4, #29
    25b2:	d004      	beq.n	25be <__aeabi_ui2f+0x5e>
    25b4:	220f      	movs	r2, #15
    25b6:	4014      	ands	r4, r2
    25b8:	2c04      	cmp	r4, #4
    25ba:	d000      	beq.n	25be <__aeabi_ui2f+0x5e>
    25bc:	3304      	adds	r3, #4
    25be:	015a      	lsls	r2, r3, #5
    25c0:	d40e      	bmi.n	25e0 <__aeabi_ui2f+0x80>
    25c2:	019b      	lsls	r3, r3, #6
    25c4:	0a5b      	lsrs	r3, r3, #9
    25c6:	b2c8      	uxtb	r0, r1
    25c8:	025b      	lsls	r3, r3, #9
    25ca:	0a5b      	lsrs	r3, r3, #9
    25cc:	05c0      	lsls	r0, r0, #23
    25ce:	4318      	orrs	r0, r3
    25d0:	bd10      	pop	{r4, pc}
    25d2:	2000      	movs	r0, #0
    25d4:	2300      	movs	r3, #0
    25d6:	e7f7      	b.n	25c8 <__aeabi_ui2f+0x68>
    25d8:	0263      	lsls	r3, r4, #9
    25da:	0a5b      	lsrs	r3, r3, #9
    25dc:	b2c8      	uxtb	r0, r1
    25de:	e7f3      	b.n	25c8 <__aeabi_ui2f+0x68>
    25e0:	219f      	movs	r1, #159	; 0x9f
    25e2:	4a02      	ldr	r2, [pc, #8]	; (25ec <__aeabi_ui2f+0x8c>)
    25e4:	1a09      	subs	r1, r1, r0
    25e6:	4013      	ands	r3, r2
    25e8:	e7eb      	b.n	25c2 <__aeabi_ui2f+0x62>
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	fbffffff 	.word	0xfbffffff

000025f0 <__aeabi_dadd>:
    25f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25f2:	4645      	mov	r5, r8
    25f4:	4657      	mov	r7, sl
    25f6:	464e      	mov	r6, r9
    25f8:	4694      	mov	ip, r2
    25fa:	004c      	lsls	r4, r1, #1
    25fc:	030a      	lsls	r2, r1, #12
    25fe:	0fc9      	lsrs	r1, r1, #31
    2600:	b4e0      	push	{r5, r6, r7}
    2602:	4688      	mov	r8, r1
    2604:	1c0e      	adds	r6, r1, #0
    2606:	0319      	lsls	r1, r3, #12
    2608:	0f47      	lsrs	r7, r0, #29
    260a:	00c5      	lsls	r5, r0, #3
    260c:	0a48      	lsrs	r0, r1, #9
    260e:	4661      	mov	r1, ip
    2610:	0f49      	lsrs	r1, r1, #29
    2612:	4301      	orrs	r1, r0
    2614:	4660      	mov	r0, ip
    2616:	0a52      	lsrs	r2, r2, #9
    2618:	4317      	orrs	r7, r2
    261a:	00c0      	lsls	r0, r0, #3
    261c:	005a      	lsls	r2, r3, #1
    261e:	0d64      	lsrs	r4, r4, #21
    2620:	0d52      	lsrs	r2, r2, #21
    2622:	0fdb      	lsrs	r3, r3, #31
    2624:	4684      	mov	ip, r0
    2626:	4598      	cmp	r8, r3
    2628:	d100      	bne.n	262c <__aeabi_dadd+0x3c>
    262a:	e0a7      	b.n	277c <__aeabi_dadd+0x18c>
    262c:	1aa0      	subs	r0, r4, r2
    262e:	2800      	cmp	r0, #0
    2630:	dc00      	bgt.n	2634 <__aeabi_dadd+0x44>
    2632:	e101      	b.n	2838 <__aeabi_dadd+0x248>
    2634:	2a00      	cmp	r2, #0
    2636:	d13d      	bne.n	26b4 <__aeabi_dadd+0xc4>
    2638:	4663      	mov	r3, ip
    263a:	430b      	orrs	r3, r1
    263c:	d000      	beq.n	2640 <__aeabi_dadd+0x50>
    263e:	e0d4      	b.n	27ea <__aeabi_dadd+0x1fa>
    2640:	076b      	lsls	r3, r5, #29
    2642:	d100      	bne.n	2646 <__aeabi_dadd+0x56>
    2644:	e088      	b.n	2758 <__aeabi_dadd+0x168>
    2646:	230f      	movs	r3, #15
    2648:	402b      	ands	r3, r5
    264a:	2b04      	cmp	r3, #4
    264c:	d100      	bne.n	2650 <__aeabi_dadd+0x60>
    264e:	e083      	b.n	2758 <__aeabi_dadd+0x168>
    2650:	1d2a      	adds	r2, r5, #4
    2652:	42aa      	cmp	r2, r5
    2654:	41ad      	sbcs	r5, r5
    2656:	2380      	movs	r3, #128	; 0x80
    2658:	426d      	negs	r5, r5
    265a:	197f      	adds	r7, r7, r5
    265c:	041b      	lsls	r3, r3, #16
    265e:	403b      	ands	r3, r7
    2660:	4646      	mov	r6, r8
    2662:	1c15      	adds	r5, r2, #0
    2664:	2b00      	cmp	r3, #0
    2666:	d100      	bne.n	266a <__aeabi_dadd+0x7a>
    2668:	e07c      	b.n	2764 <__aeabi_dadd+0x174>
    266a:	4bcc      	ldr	r3, [pc, #816]	; (299c <__aeabi_dadd+0x3ac>)
    266c:	3401      	adds	r4, #1
    266e:	429c      	cmp	r4, r3
    2670:	d100      	bne.n	2674 <__aeabi_dadd+0x84>
    2672:	e0fd      	b.n	2870 <__aeabi_dadd+0x280>
    2674:	1c3a      	adds	r2, r7, #0
    2676:	4bca      	ldr	r3, [pc, #808]	; (29a0 <__aeabi_dadd+0x3b0>)
    2678:	08ed      	lsrs	r5, r5, #3
    267a:	401a      	ands	r2, r3
    267c:	0750      	lsls	r0, r2, #29
    267e:	0564      	lsls	r4, r4, #21
    2680:	0252      	lsls	r2, r2, #9
    2682:	4305      	orrs	r5, r0
    2684:	0b12      	lsrs	r2, r2, #12
    2686:	0d64      	lsrs	r4, r4, #21
    2688:	2100      	movs	r1, #0
    268a:	0312      	lsls	r2, r2, #12
    268c:	0d0b      	lsrs	r3, r1, #20
    268e:	051b      	lsls	r3, r3, #20
    2690:	0564      	lsls	r4, r4, #21
    2692:	0b12      	lsrs	r2, r2, #12
    2694:	431a      	orrs	r2, r3
    2696:	0863      	lsrs	r3, r4, #1
    2698:	4cc2      	ldr	r4, [pc, #776]	; (29a4 <__aeabi_dadd+0x3b4>)
    269a:	07f6      	lsls	r6, r6, #31
    269c:	4014      	ands	r4, r2
    269e:	431c      	orrs	r4, r3
    26a0:	0064      	lsls	r4, r4, #1
    26a2:	0864      	lsrs	r4, r4, #1
    26a4:	4334      	orrs	r4, r6
    26a6:	1c28      	adds	r0, r5, #0
    26a8:	1c21      	adds	r1, r4, #0
    26aa:	bc1c      	pop	{r2, r3, r4}
    26ac:	4690      	mov	r8, r2
    26ae:	4699      	mov	r9, r3
    26b0:	46a2      	mov	sl, r4
    26b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26b4:	4bb9      	ldr	r3, [pc, #740]	; (299c <__aeabi_dadd+0x3ac>)
    26b6:	429c      	cmp	r4, r3
    26b8:	d0c2      	beq.n	2640 <__aeabi_dadd+0x50>
    26ba:	2380      	movs	r3, #128	; 0x80
    26bc:	041b      	lsls	r3, r3, #16
    26be:	4319      	orrs	r1, r3
    26c0:	2838      	cmp	r0, #56	; 0x38
    26c2:	dd00      	ble.n	26c6 <__aeabi_dadd+0xd6>
    26c4:	e0ec      	b.n	28a0 <__aeabi_dadd+0x2b0>
    26c6:	281f      	cmp	r0, #31
    26c8:	dd00      	ble.n	26cc <__aeabi_dadd+0xdc>
    26ca:	e121      	b.n	2910 <__aeabi_dadd+0x320>
    26cc:	2220      	movs	r2, #32
    26ce:	1c0e      	adds	r6, r1, #0
    26d0:	4663      	mov	r3, ip
    26d2:	1a12      	subs	r2, r2, r0
    26d4:	4096      	lsls	r6, r2
    26d6:	40c3      	lsrs	r3, r0
    26d8:	4333      	orrs	r3, r6
    26da:	4666      	mov	r6, ip
    26dc:	4096      	lsls	r6, r2
    26de:	1c32      	adds	r2, r6, #0
    26e0:	1e56      	subs	r6, r2, #1
    26e2:	41b2      	sbcs	r2, r6
    26e4:	4313      	orrs	r3, r2
    26e6:	1c0a      	adds	r2, r1, #0
    26e8:	40c2      	lsrs	r2, r0
    26ea:	1aeb      	subs	r3, r5, r3
    26ec:	429d      	cmp	r5, r3
    26ee:	41b6      	sbcs	r6, r6
    26f0:	1c1d      	adds	r5, r3, #0
    26f2:	1aba      	subs	r2, r7, r2
    26f4:	4276      	negs	r6, r6
    26f6:	1b97      	subs	r7, r2, r6
    26f8:	023b      	lsls	r3, r7, #8
    26fa:	d400      	bmi.n	26fe <__aeabi_dadd+0x10e>
    26fc:	e097      	b.n	282e <__aeabi_dadd+0x23e>
    26fe:	027a      	lsls	r2, r7, #9
    2700:	0a56      	lsrs	r6, r2, #9
    2702:	2e00      	cmp	r6, #0
    2704:	d100      	bne.n	2708 <__aeabi_dadd+0x118>
    2706:	e0b6      	b.n	2876 <__aeabi_dadd+0x286>
    2708:	1c30      	adds	r0, r6, #0
    270a:	f001 fa19 	bl	3b40 <__clzsi2>
    270e:	1c03      	adds	r3, r0, #0
    2710:	3b08      	subs	r3, #8
    2712:	2b1f      	cmp	r3, #31
    2714:	dd00      	ble.n	2718 <__aeabi_dadd+0x128>
    2716:	e0b7      	b.n	2888 <__aeabi_dadd+0x298>
    2718:	409e      	lsls	r6, r3
    271a:	1c37      	adds	r7, r6, #0
    271c:	2628      	movs	r6, #40	; 0x28
    271e:	1c2a      	adds	r2, r5, #0
    2720:	1a36      	subs	r6, r6, r0
    2722:	40f2      	lsrs	r2, r6
    2724:	1c16      	adds	r6, r2, #0
    2726:	409d      	lsls	r5, r3
    2728:	433e      	orrs	r6, r7
    272a:	429c      	cmp	r4, r3
    272c:	dd00      	ble.n	2730 <__aeabi_dadd+0x140>
    272e:	e0b2      	b.n	2896 <__aeabi_dadd+0x2a6>
    2730:	1b1c      	subs	r4, r3, r4
    2732:	1c62      	adds	r2, r4, #1
    2734:	2a1f      	cmp	r2, #31
    2736:	dd00      	ble.n	273a <__aeabi_dadd+0x14a>
    2738:	e0d8      	b.n	28ec <__aeabi_dadd+0x2fc>
    273a:	231f      	movs	r3, #31
    273c:	1c29      	adds	r1, r5, #0
    273e:	1b1c      	subs	r4, r3, r4
    2740:	1c33      	adds	r3, r6, #0
    2742:	40a5      	lsls	r5, r4
    2744:	40a3      	lsls	r3, r4
    2746:	40d1      	lsrs	r1, r2
    2748:	1e6c      	subs	r4, r5, #1
    274a:	41a5      	sbcs	r5, r4
    274c:	40d6      	lsrs	r6, r2
    274e:	4319      	orrs	r1, r3
    2750:	430d      	orrs	r5, r1
    2752:	1c37      	adds	r7, r6, #0
    2754:	2400      	movs	r4, #0
    2756:	e773      	b.n	2640 <__aeabi_dadd+0x50>
    2758:	2380      	movs	r3, #128	; 0x80
    275a:	041b      	lsls	r3, r3, #16
    275c:	403b      	ands	r3, r7
    275e:	4646      	mov	r6, r8
    2760:	d000      	beq.n	2764 <__aeabi_dadd+0x174>
    2762:	e782      	b.n	266a <__aeabi_dadd+0x7a>
    2764:	4b8d      	ldr	r3, [pc, #564]	; (299c <__aeabi_dadd+0x3ac>)
    2766:	08ed      	lsrs	r5, r5, #3
    2768:	0778      	lsls	r0, r7, #29
    276a:	4305      	orrs	r5, r0
    276c:	08fa      	lsrs	r2, r7, #3
    276e:	429c      	cmp	r4, r3
    2770:	d032      	beq.n	27d8 <__aeabi_dadd+0x1e8>
    2772:	0312      	lsls	r2, r2, #12
    2774:	0564      	lsls	r4, r4, #21
    2776:	0b12      	lsrs	r2, r2, #12
    2778:	0d64      	lsrs	r4, r4, #21
    277a:	e785      	b.n	2688 <__aeabi_dadd+0x98>
    277c:	1aa3      	subs	r3, r4, r2
    277e:	2b00      	cmp	r3, #0
    2780:	dc00      	bgt.n	2784 <__aeabi_dadd+0x194>
    2782:	e094      	b.n	28ae <__aeabi_dadd+0x2be>
    2784:	2a00      	cmp	r2, #0
    2786:	d03c      	beq.n	2802 <__aeabi_dadd+0x212>
    2788:	4a84      	ldr	r2, [pc, #528]	; (299c <__aeabi_dadd+0x3ac>)
    278a:	4294      	cmp	r4, r2
    278c:	d100      	bne.n	2790 <__aeabi_dadd+0x1a0>
    278e:	e757      	b.n	2640 <__aeabi_dadd+0x50>
    2790:	2280      	movs	r2, #128	; 0x80
    2792:	0412      	lsls	r2, r2, #16
    2794:	4311      	orrs	r1, r2
    2796:	2b38      	cmp	r3, #56	; 0x38
    2798:	dc00      	bgt.n	279c <__aeabi_dadd+0x1ac>
    279a:	e105      	b.n	29a8 <__aeabi_dadd+0x3b8>
    279c:	4663      	mov	r3, ip
    279e:	4319      	orrs	r1, r3
    27a0:	1e48      	subs	r0, r1, #1
    27a2:	4181      	sbcs	r1, r0
    27a4:	2200      	movs	r2, #0
    27a6:	b2c8      	uxtb	r0, r1
    27a8:	1940      	adds	r0, r0, r5
    27aa:	42a8      	cmp	r0, r5
    27ac:	419b      	sbcs	r3, r3
    27ae:	1c05      	adds	r5, r0, #0
    27b0:	19d2      	adds	r2, r2, r7
    27b2:	425b      	negs	r3, r3
    27b4:	18d7      	adds	r7, r2, r3
    27b6:	023b      	lsls	r3, r7, #8
    27b8:	d539      	bpl.n	282e <__aeabi_dadd+0x23e>
    27ba:	4b78      	ldr	r3, [pc, #480]	; (299c <__aeabi_dadd+0x3ac>)
    27bc:	3401      	adds	r4, #1
    27be:	429c      	cmp	r4, r3
    27c0:	d100      	bne.n	27c4 <__aeabi_dadd+0x1d4>
    27c2:	e14c      	b.n	2a5e <__aeabi_dadd+0x46e>
    27c4:	2001      	movs	r0, #1
    27c6:	4a76      	ldr	r2, [pc, #472]	; (29a0 <__aeabi_dadd+0x3b0>)
    27c8:	086b      	lsrs	r3, r5, #1
    27ca:	403a      	ands	r2, r7
    27cc:	4028      	ands	r0, r5
    27ce:	4318      	orrs	r0, r3
    27d0:	07d5      	lsls	r5, r2, #31
    27d2:	4305      	orrs	r5, r0
    27d4:	0857      	lsrs	r7, r2, #1
    27d6:	e733      	b.n	2640 <__aeabi_dadd+0x50>
    27d8:	1c2b      	adds	r3, r5, #0
    27da:	4313      	orrs	r3, r2
    27dc:	d048      	beq.n	2870 <__aeabi_dadd+0x280>
    27de:	2380      	movs	r3, #128	; 0x80
    27e0:	031b      	lsls	r3, r3, #12
    27e2:	431a      	orrs	r2, r3
    27e4:	0312      	lsls	r2, r2, #12
    27e6:	0b12      	lsrs	r2, r2, #12
    27e8:	e74e      	b.n	2688 <__aeabi_dadd+0x98>
    27ea:	3801      	subs	r0, #1
    27ec:	2800      	cmp	r0, #0
    27ee:	d178      	bne.n	28e2 <__aeabi_dadd+0x2f2>
    27f0:	4663      	mov	r3, ip
    27f2:	1aee      	subs	r6, r5, r3
    27f4:	42b5      	cmp	r5, r6
    27f6:	419b      	sbcs	r3, r3
    27f8:	1a7a      	subs	r2, r7, r1
    27fa:	425b      	negs	r3, r3
    27fc:	1ad7      	subs	r7, r2, r3
    27fe:	1c35      	adds	r5, r6, #0
    2800:	e77a      	b.n	26f8 <__aeabi_dadd+0x108>
    2802:	1c02      	adds	r2, r0, #0
    2804:	430a      	orrs	r2, r1
    2806:	d100      	bne.n	280a <__aeabi_dadd+0x21a>
    2808:	e71a      	b.n	2640 <__aeabi_dadd+0x50>
    280a:	3b01      	subs	r3, #1
    280c:	2b00      	cmp	r3, #0
    280e:	d000      	beq.n	2812 <__aeabi_dadd+0x222>
    2810:	e0f2      	b.n	29f8 <__aeabi_dadd+0x408>
    2812:	1940      	adds	r0, r0, r5
    2814:	42a8      	cmp	r0, r5
    2816:	419b      	sbcs	r3, r3
    2818:	19ca      	adds	r2, r1, r7
    281a:	425b      	negs	r3, r3
    281c:	18d7      	adds	r7, r2, r3
    281e:	1c05      	adds	r5, r0, #0
    2820:	e7c9      	b.n	27b6 <__aeabi_dadd+0x1c6>
    2822:	1c13      	adds	r3, r2, #0
    2824:	4333      	orrs	r3, r6
    2826:	d100      	bne.n	282a <__aeabi_dadd+0x23a>
    2828:	e118      	b.n	2a5c <__aeabi_dadd+0x46c>
    282a:	1c17      	adds	r7, r2, #0
    282c:	1c35      	adds	r5, r6, #0
    282e:	4646      	mov	r6, r8
    2830:	076b      	lsls	r3, r5, #29
    2832:	d000      	beq.n	2836 <__aeabi_dadd+0x246>
    2834:	e707      	b.n	2646 <__aeabi_dadd+0x56>
    2836:	e795      	b.n	2764 <__aeabi_dadd+0x174>
    2838:	2800      	cmp	r0, #0
    283a:	d17a      	bne.n	2932 <__aeabi_dadd+0x342>
    283c:	1c62      	adds	r2, r4, #1
    283e:	0552      	lsls	r2, r2, #21
    2840:	0d52      	lsrs	r2, r2, #21
    2842:	2a01      	cmp	r2, #1
    2844:	dc00      	bgt.n	2848 <__aeabi_dadd+0x258>
    2846:	e0fb      	b.n	2a40 <__aeabi_dadd+0x450>
    2848:	4662      	mov	r2, ip
    284a:	1aaa      	subs	r2, r5, r2
    284c:	4295      	cmp	r5, r2
    284e:	41b6      	sbcs	r6, r6
    2850:	4691      	mov	r9, r2
    2852:	1a78      	subs	r0, r7, r1
    2854:	4272      	negs	r2, r6
    2856:	1a86      	subs	r6, r0, r2
    2858:	0232      	lsls	r2, r6, #8
    285a:	d400      	bmi.n	285e <__aeabi_dadd+0x26e>
    285c:	e093      	b.n	2986 <__aeabi_dadd+0x396>
    285e:	4662      	mov	r2, ip
    2860:	1b55      	subs	r5, r2, r5
    2862:	45ac      	cmp	ip, r5
    2864:	4180      	sbcs	r0, r0
    2866:	1bcf      	subs	r7, r1, r7
    2868:	4240      	negs	r0, r0
    286a:	1a3e      	subs	r6, r7, r0
    286c:	4698      	mov	r8, r3
    286e:	e748      	b.n	2702 <__aeabi_dadd+0x112>
    2870:	2200      	movs	r2, #0
    2872:	2500      	movs	r5, #0
    2874:	e708      	b.n	2688 <__aeabi_dadd+0x98>
    2876:	1c28      	adds	r0, r5, #0
    2878:	f001 f962 	bl	3b40 <__clzsi2>
    287c:	3020      	adds	r0, #32
    287e:	1c03      	adds	r3, r0, #0
    2880:	3b08      	subs	r3, #8
    2882:	2b1f      	cmp	r3, #31
    2884:	dc00      	bgt.n	2888 <__aeabi_dadd+0x298>
    2886:	e747      	b.n	2718 <__aeabi_dadd+0x128>
    2888:	3828      	subs	r0, #40	; 0x28
    288a:	4085      	lsls	r5, r0
    288c:	1c2e      	adds	r6, r5, #0
    288e:	2500      	movs	r5, #0
    2890:	429c      	cmp	r4, r3
    2892:	dc00      	bgt.n	2896 <__aeabi_dadd+0x2a6>
    2894:	e74c      	b.n	2730 <__aeabi_dadd+0x140>
    2896:	4a42      	ldr	r2, [pc, #264]	; (29a0 <__aeabi_dadd+0x3b0>)
    2898:	1ae4      	subs	r4, r4, r3
    289a:	4016      	ands	r6, r2
    289c:	1c37      	adds	r7, r6, #0
    289e:	e6cf      	b.n	2640 <__aeabi_dadd+0x50>
    28a0:	4663      	mov	r3, ip
    28a2:	4319      	orrs	r1, r3
    28a4:	1e4b      	subs	r3, r1, #1
    28a6:	4199      	sbcs	r1, r3
    28a8:	2200      	movs	r2, #0
    28aa:	b2cb      	uxtb	r3, r1
    28ac:	e71d      	b.n	26ea <__aeabi_dadd+0xfa>
    28ae:	2b00      	cmp	r3, #0
    28b0:	d000      	beq.n	28b4 <__aeabi_dadd+0x2c4>
    28b2:	e0f2      	b.n	2a9a <__aeabi_dadd+0x4aa>
    28b4:	1c60      	adds	r0, r4, #1
    28b6:	0543      	lsls	r3, r0, #21
    28b8:	0d5b      	lsrs	r3, r3, #21
    28ba:	2b01      	cmp	r3, #1
    28bc:	dc00      	bgt.n	28c0 <__aeabi_dadd+0x2d0>
    28be:	e0a4      	b.n	2a0a <__aeabi_dadd+0x41a>
    28c0:	4b36      	ldr	r3, [pc, #216]	; (299c <__aeabi_dadd+0x3ac>)
    28c2:	4298      	cmp	r0, r3
    28c4:	d100      	bne.n	28c8 <__aeabi_dadd+0x2d8>
    28c6:	e121      	b.n	2b0c <__aeabi_dadd+0x51c>
    28c8:	4663      	mov	r3, ip
    28ca:	195c      	adds	r4, r3, r5
    28cc:	42ac      	cmp	r4, r5
    28ce:	419b      	sbcs	r3, r3
    28d0:	19cf      	adds	r7, r1, r7
    28d2:	425b      	negs	r3, r3
    28d4:	18fa      	adds	r2, r7, r3
    28d6:	0864      	lsrs	r4, r4, #1
    28d8:	07d5      	lsls	r5, r2, #31
    28da:	4325      	orrs	r5, r4
    28dc:	0857      	lsrs	r7, r2, #1
    28de:	1c04      	adds	r4, r0, #0
    28e0:	e6ae      	b.n	2640 <__aeabi_dadd+0x50>
    28e2:	4b2e      	ldr	r3, [pc, #184]	; (299c <__aeabi_dadd+0x3ac>)
    28e4:	429c      	cmp	r4, r3
    28e6:	d000      	beq.n	28ea <__aeabi_dadd+0x2fa>
    28e8:	e6ea      	b.n	26c0 <__aeabi_dadd+0xd0>
    28ea:	e6a9      	b.n	2640 <__aeabi_dadd+0x50>
    28ec:	1c21      	adds	r1, r4, #0
    28ee:	1c33      	adds	r3, r6, #0
    28f0:	391f      	subs	r1, #31
    28f2:	40cb      	lsrs	r3, r1
    28f4:	1c19      	adds	r1, r3, #0
    28f6:	2a20      	cmp	r2, #32
    28f8:	d100      	bne.n	28fc <__aeabi_dadd+0x30c>
    28fa:	e082      	b.n	2a02 <__aeabi_dadd+0x412>
    28fc:	233f      	movs	r3, #63	; 0x3f
    28fe:	1b1c      	subs	r4, r3, r4
    2900:	40a6      	lsls	r6, r4
    2902:	4335      	orrs	r5, r6
    2904:	1e6e      	subs	r6, r5, #1
    2906:	41b5      	sbcs	r5, r6
    2908:	2700      	movs	r7, #0
    290a:	430d      	orrs	r5, r1
    290c:	2400      	movs	r4, #0
    290e:	e78e      	b.n	282e <__aeabi_dadd+0x23e>
    2910:	1c03      	adds	r3, r0, #0
    2912:	1c0e      	adds	r6, r1, #0
    2914:	3b20      	subs	r3, #32
    2916:	40de      	lsrs	r6, r3
    2918:	2820      	cmp	r0, #32
    291a:	d074      	beq.n	2a06 <__aeabi_dadd+0x416>
    291c:	2340      	movs	r3, #64	; 0x40
    291e:	1a1b      	subs	r3, r3, r0
    2920:	4099      	lsls	r1, r3
    2922:	1c0b      	adds	r3, r1, #0
    2924:	4662      	mov	r2, ip
    2926:	4313      	orrs	r3, r2
    2928:	1e59      	subs	r1, r3, #1
    292a:	418b      	sbcs	r3, r1
    292c:	2200      	movs	r2, #0
    292e:	4333      	orrs	r3, r6
    2930:	e6db      	b.n	26ea <__aeabi_dadd+0xfa>
    2932:	2c00      	cmp	r4, #0
    2934:	d050      	beq.n	29d8 <__aeabi_dadd+0x3e8>
    2936:	4c19      	ldr	r4, [pc, #100]	; (299c <__aeabi_dadd+0x3ac>)
    2938:	42a2      	cmp	r2, r4
    293a:	d100      	bne.n	293e <__aeabi_dadd+0x34e>
    293c:	e0a8      	b.n	2a90 <__aeabi_dadd+0x4a0>
    293e:	2480      	movs	r4, #128	; 0x80
    2940:	0424      	lsls	r4, r4, #16
    2942:	4240      	negs	r0, r0
    2944:	4327      	orrs	r7, r4
    2946:	2838      	cmp	r0, #56	; 0x38
    2948:	dd00      	ble.n	294c <__aeabi_dadd+0x35c>
    294a:	e0d9      	b.n	2b00 <__aeabi_dadd+0x510>
    294c:	281f      	cmp	r0, #31
    294e:	dd00      	ble.n	2952 <__aeabi_dadd+0x362>
    2950:	e139      	b.n	2bc6 <__aeabi_dadd+0x5d6>
    2952:	2420      	movs	r4, #32
    2954:	1c3e      	adds	r6, r7, #0
    2956:	1a24      	subs	r4, r4, r0
    2958:	40a6      	lsls	r6, r4
    295a:	46b0      	mov	r8, r6
    295c:	1c2e      	adds	r6, r5, #0
    295e:	46a1      	mov	r9, r4
    2960:	40c6      	lsrs	r6, r0
    2962:	4644      	mov	r4, r8
    2964:	4326      	orrs	r6, r4
    2966:	464c      	mov	r4, r9
    2968:	40a5      	lsls	r5, r4
    296a:	1e6c      	subs	r4, r5, #1
    296c:	41a5      	sbcs	r5, r4
    296e:	40c7      	lsrs	r7, r0
    2970:	4335      	orrs	r5, r6
    2972:	4660      	mov	r0, ip
    2974:	1b45      	subs	r5, r0, r5
    2976:	1bcf      	subs	r7, r1, r7
    2978:	45ac      	cmp	ip, r5
    297a:	4189      	sbcs	r1, r1
    297c:	4249      	negs	r1, r1
    297e:	1a7f      	subs	r7, r7, r1
    2980:	1c14      	adds	r4, r2, #0
    2982:	4698      	mov	r8, r3
    2984:	e6b8      	b.n	26f8 <__aeabi_dadd+0x108>
    2986:	464b      	mov	r3, r9
    2988:	464d      	mov	r5, r9
    298a:	4333      	orrs	r3, r6
    298c:	d000      	beq.n	2990 <__aeabi_dadd+0x3a0>
    298e:	e6b8      	b.n	2702 <__aeabi_dadd+0x112>
    2990:	2600      	movs	r6, #0
    2992:	2700      	movs	r7, #0
    2994:	2400      	movs	r4, #0
    2996:	2500      	movs	r5, #0
    2998:	e6e4      	b.n	2764 <__aeabi_dadd+0x174>
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	000007ff 	.word	0x000007ff
    29a0:	ff7fffff 	.word	0xff7fffff
    29a4:	800fffff 	.word	0x800fffff
    29a8:	2b1f      	cmp	r3, #31
    29aa:	dc5b      	bgt.n	2a64 <__aeabi_dadd+0x474>
    29ac:	2220      	movs	r2, #32
    29ae:	1c08      	adds	r0, r1, #0
    29b0:	1ad2      	subs	r2, r2, r3
    29b2:	4090      	lsls	r0, r2
    29b4:	4681      	mov	r9, r0
    29b6:	4660      	mov	r0, ip
    29b8:	4692      	mov	sl, r2
    29ba:	40d8      	lsrs	r0, r3
    29bc:	464a      	mov	r2, r9
    29be:	4310      	orrs	r0, r2
    29c0:	4681      	mov	r9, r0
    29c2:	4652      	mov	r2, sl
    29c4:	4660      	mov	r0, ip
    29c6:	4090      	lsls	r0, r2
    29c8:	1c02      	adds	r2, r0, #0
    29ca:	1e50      	subs	r0, r2, #1
    29cc:	4182      	sbcs	r2, r0
    29ce:	4648      	mov	r0, r9
    29d0:	4310      	orrs	r0, r2
    29d2:	1c0a      	adds	r2, r1, #0
    29d4:	40da      	lsrs	r2, r3
    29d6:	e6e7      	b.n	27a8 <__aeabi_dadd+0x1b8>
    29d8:	1c3c      	adds	r4, r7, #0
    29da:	432c      	orrs	r4, r5
    29dc:	d058      	beq.n	2a90 <__aeabi_dadd+0x4a0>
    29de:	43c0      	mvns	r0, r0
    29e0:	2800      	cmp	r0, #0
    29e2:	d151      	bne.n	2a88 <__aeabi_dadd+0x498>
    29e4:	4660      	mov	r0, ip
    29e6:	1b45      	subs	r5, r0, r5
    29e8:	45ac      	cmp	ip, r5
    29ea:	4180      	sbcs	r0, r0
    29ec:	1bcf      	subs	r7, r1, r7
    29ee:	4240      	negs	r0, r0
    29f0:	1a3f      	subs	r7, r7, r0
    29f2:	1c14      	adds	r4, r2, #0
    29f4:	4698      	mov	r8, r3
    29f6:	e67f      	b.n	26f8 <__aeabi_dadd+0x108>
    29f8:	4a8f      	ldr	r2, [pc, #572]	; (2c38 <__aeabi_dadd+0x648>)
    29fa:	4294      	cmp	r4, r2
    29fc:	d000      	beq.n	2a00 <__aeabi_dadd+0x410>
    29fe:	e6ca      	b.n	2796 <__aeabi_dadd+0x1a6>
    2a00:	e61e      	b.n	2640 <__aeabi_dadd+0x50>
    2a02:	2600      	movs	r6, #0
    2a04:	e77d      	b.n	2902 <__aeabi_dadd+0x312>
    2a06:	2300      	movs	r3, #0
    2a08:	e78c      	b.n	2924 <__aeabi_dadd+0x334>
    2a0a:	1c3b      	adds	r3, r7, #0
    2a0c:	432b      	orrs	r3, r5
    2a0e:	2c00      	cmp	r4, #0
    2a10:	d000      	beq.n	2a14 <__aeabi_dadd+0x424>
    2a12:	e0bd      	b.n	2b90 <__aeabi_dadd+0x5a0>
    2a14:	2b00      	cmp	r3, #0
    2a16:	d100      	bne.n	2a1a <__aeabi_dadd+0x42a>
    2a18:	e0f5      	b.n	2c06 <__aeabi_dadd+0x616>
    2a1a:	4663      	mov	r3, ip
    2a1c:	430b      	orrs	r3, r1
    2a1e:	d100      	bne.n	2a22 <__aeabi_dadd+0x432>
    2a20:	e60e      	b.n	2640 <__aeabi_dadd+0x50>
    2a22:	4663      	mov	r3, ip
    2a24:	195b      	adds	r3, r3, r5
    2a26:	42ab      	cmp	r3, r5
    2a28:	4180      	sbcs	r0, r0
    2a2a:	19ca      	adds	r2, r1, r7
    2a2c:	4240      	negs	r0, r0
    2a2e:	1817      	adds	r7, r2, r0
    2a30:	023a      	lsls	r2, r7, #8
    2a32:	d400      	bmi.n	2a36 <__aeabi_dadd+0x446>
    2a34:	e0fc      	b.n	2c30 <__aeabi_dadd+0x640>
    2a36:	4a81      	ldr	r2, [pc, #516]	; (2c3c <__aeabi_dadd+0x64c>)
    2a38:	1c1d      	adds	r5, r3, #0
    2a3a:	4017      	ands	r7, r2
    2a3c:	3401      	adds	r4, #1
    2a3e:	e5ff      	b.n	2640 <__aeabi_dadd+0x50>
    2a40:	1c3a      	adds	r2, r7, #0
    2a42:	432a      	orrs	r2, r5
    2a44:	2c00      	cmp	r4, #0
    2a46:	d151      	bne.n	2aec <__aeabi_dadd+0x4fc>
    2a48:	2a00      	cmp	r2, #0
    2a4a:	d000      	beq.n	2a4e <__aeabi_dadd+0x45e>
    2a4c:	e085      	b.n	2b5a <__aeabi_dadd+0x56a>
    2a4e:	4662      	mov	r2, ip
    2a50:	430a      	orrs	r2, r1
    2a52:	d003      	beq.n	2a5c <__aeabi_dadd+0x46c>
    2a54:	1c0f      	adds	r7, r1, #0
    2a56:	4665      	mov	r5, ip
    2a58:	4698      	mov	r8, r3
    2a5a:	e5f1      	b.n	2640 <__aeabi_dadd+0x50>
    2a5c:	2600      	movs	r6, #0
    2a5e:	2700      	movs	r7, #0
    2a60:	2500      	movs	r5, #0
    2a62:	e67f      	b.n	2764 <__aeabi_dadd+0x174>
    2a64:	1c18      	adds	r0, r3, #0
    2a66:	1c0a      	adds	r2, r1, #0
    2a68:	3820      	subs	r0, #32
    2a6a:	40c2      	lsrs	r2, r0
    2a6c:	2b20      	cmp	r3, #32
    2a6e:	d100      	bne.n	2a72 <__aeabi_dadd+0x482>
    2a70:	e0a7      	b.n	2bc2 <__aeabi_dadd+0x5d2>
    2a72:	2040      	movs	r0, #64	; 0x40
    2a74:	1ac0      	subs	r0, r0, r3
    2a76:	4081      	lsls	r1, r0
    2a78:	1c08      	adds	r0, r1, #0
    2a7a:	4663      	mov	r3, ip
    2a7c:	4318      	orrs	r0, r3
    2a7e:	1e41      	subs	r1, r0, #1
    2a80:	4188      	sbcs	r0, r1
    2a82:	4310      	orrs	r0, r2
    2a84:	2200      	movs	r2, #0
    2a86:	e68f      	b.n	27a8 <__aeabi_dadd+0x1b8>
    2a88:	4c6b      	ldr	r4, [pc, #428]	; (2c38 <__aeabi_dadd+0x648>)
    2a8a:	42a2      	cmp	r2, r4
    2a8c:	d000      	beq.n	2a90 <__aeabi_dadd+0x4a0>
    2a8e:	e75a      	b.n	2946 <__aeabi_dadd+0x356>
    2a90:	1c0f      	adds	r7, r1, #0
    2a92:	4665      	mov	r5, ip
    2a94:	1c14      	adds	r4, r2, #0
    2a96:	4698      	mov	r8, r3
    2a98:	e5d2      	b.n	2640 <__aeabi_dadd+0x50>
    2a9a:	2c00      	cmp	r4, #0
    2a9c:	d13a      	bne.n	2b14 <__aeabi_dadd+0x524>
    2a9e:	1c38      	adds	r0, r7, #0
    2aa0:	4328      	orrs	r0, r5
    2aa2:	d071      	beq.n	2b88 <__aeabi_dadd+0x598>
    2aa4:	43db      	mvns	r3, r3
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d018      	beq.n	2adc <__aeabi_dadd+0x4ec>
    2aaa:	4863      	ldr	r0, [pc, #396]	; (2c38 <__aeabi_dadd+0x648>)
    2aac:	4282      	cmp	r2, r0
    2aae:	d06b      	beq.n	2b88 <__aeabi_dadd+0x598>
    2ab0:	2b38      	cmp	r3, #56	; 0x38
    2ab2:	dd00      	ble.n	2ab6 <__aeabi_dadd+0x4c6>
    2ab4:	e09d      	b.n	2bf2 <__aeabi_dadd+0x602>
    2ab6:	2b1f      	cmp	r3, #31
    2ab8:	dd00      	ble.n	2abc <__aeabi_dadd+0x4cc>
    2aba:	e0a7      	b.n	2c0c <__aeabi_dadd+0x61c>
    2abc:	2020      	movs	r0, #32
    2abe:	1c3c      	adds	r4, r7, #0
    2ac0:	1ac0      	subs	r0, r0, r3
    2ac2:	4084      	lsls	r4, r0
    2ac4:	46a1      	mov	r9, r4
    2ac6:	1c2c      	adds	r4, r5, #0
    2ac8:	4682      	mov	sl, r0
    2aca:	40dc      	lsrs	r4, r3
    2acc:	4648      	mov	r0, r9
    2ace:	4304      	orrs	r4, r0
    2ad0:	4650      	mov	r0, sl
    2ad2:	4085      	lsls	r5, r0
    2ad4:	1e68      	subs	r0, r5, #1
    2ad6:	4185      	sbcs	r5, r0
    2ad8:	40df      	lsrs	r7, r3
    2ada:	4325      	orrs	r5, r4
    2adc:	4465      	add	r5, ip
    2ade:	4565      	cmp	r5, ip
    2ae0:	419b      	sbcs	r3, r3
    2ae2:	187f      	adds	r7, r7, r1
    2ae4:	425b      	negs	r3, r3
    2ae6:	18ff      	adds	r7, r7, r3
    2ae8:	1c14      	adds	r4, r2, #0
    2aea:	e664      	b.n	27b6 <__aeabi_dadd+0x1c6>
    2aec:	2a00      	cmp	r2, #0
    2aee:	d119      	bne.n	2b24 <__aeabi_dadd+0x534>
    2af0:	4662      	mov	r2, ip
    2af2:	430a      	orrs	r2, r1
    2af4:	d077      	beq.n	2be6 <__aeabi_dadd+0x5f6>
    2af6:	1c0f      	adds	r7, r1, #0
    2af8:	4665      	mov	r5, ip
    2afa:	4698      	mov	r8, r3
    2afc:	4c4e      	ldr	r4, [pc, #312]	; (2c38 <__aeabi_dadd+0x648>)
    2afe:	e59f      	b.n	2640 <__aeabi_dadd+0x50>
    2b00:	433d      	orrs	r5, r7
    2b02:	1e6f      	subs	r7, r5, #1
    2b04:	41bd      	sbcs	r5, r7
    2b06:	2700      	movs	r7, #0
    2b08:	b2ed      	uxtb	r5, r5
    2b0a:	e732      	b.n	2972 <__aeabi_dadd+0x382>
    2b0c:	1c04      	adds	r4, r0, #0
    2b0e:	2700      	movs	r7, #0
    2b10:	2500      	movs	r5, #0
    2b12:	e627      	b.n	2764 <__aeabi_dadd+0x174>
    2b14:	4848      	ldr	r0, [pc, #288]	; (2c38 <__aeabi_dadd+0x648>)
    2b16:	4282      	cmp	r2, r0
    2b18:	d036      	beq.n	2b88 <__aeabi_dadd+0x598>
    2b1a:	2080      	movs	r0, #128	; 0x80
    2b1c:	0400      	lsls	r0, r0, #16
    2b1e:	425b      	negs	r3, r3
    2b20:	4307      	orrs	r7, r0
    2b22:	e7c5      	b.n	2ab0 <__aeabi_dadd+0x4c0>
    2b24:	4662      	mov	r2, ip
    2b26:	430a      	orrs	r2, r1
    2b28:	d049      	beq.n	2bbe <__aeabi_dadd+0x5ce>
    2b2a:	2480      	movs	r4, #128	; 0x80
    2b2c:	08ed      	lsrs	r5, r5, #3
    2b2e:	0778      	lsls	r0, r7, #29
    2b30:	08fa      	lsrs	r2, r7, #3
    2b32:	0324      	lsls	r4, r4, #12
    2b34:	4328      	orrs	r0, r5
    2b36:	4222      	tst	r2, r4
    2b38:	d009      	beq.n	2b4e <__aeabi_dadd+0x55e>
    2b3a:	08ce      	lsrs	r6, r1, #3
    2b3c:	4226      	tst	r6, r4
    2b3e:	d106      	bne.n	2b4e <__aeabi_dadd+0x55e>
    2b40:	4662      	mov	r2, ip
    2b42:	074f      	lsls	r7, r1, #29
    2b44:	1c38      	adds	r0, r7, #0
    2b46:	08d2      	lsrs	r2, r2, #3
    2b48:	4310      	orrs	r0, r2
    2b4a:	4698      	mov	r8, r3
    2b4c:	1c32      	adds	r2, r6, #0
    2b4e:	00d2      	lsls	r2, r2, #3
    2b50:	0f47      	lsrs	r7, r0, #29
    2b52:	4317      	orrs	r7, r2
    2b54:	00c5      	lsls	r5, r0, #3
    2b56:	4c38      	ldr	r4, [pc, #224]	; (2c38 <__aeabi_dadd+0x648>)
    2b58:	e572      	b.n	2640 <__aeabi_dadd+0x50>
    2b5a:	4662      	mov	r2, ip
    2b5c:	430a      	orrs	r2, r1
    2b5e:	d100      	bne.n	2b62 <__aeabi_dadd+0x572>
    2b60:	e56e      	b.n	2640 <__aeabi_dadd+0x50>
    2b62:	4662      	mov	r2, ip
    2b64:	1aae      	subs	r6, r5, r2
    2b66:	42b5      	cmp	r5, r6
    2b68:	4192      	sbcs	r2, r2
    2b6a:	1a78      	subs	r0, r7, r1
    2b6c:	4252      	negs	r2, r2
    2b6e:	1a82      	subs	r2, r0, r2
    2b70:	0210      	lsls	r0, r2, #8
    2b72:	d400      	bmi.n	2b76 <__aeabi_dadd+0x586>
    2b74:	e655      	b.n	2822 <__aeabi_dadd+0x232>
    2b76:	4662      	mov	r2, ip
    2b78:	1b55      	subs	r5, r2, r5
    2b7a:	45ac      	cmp	ip, r5
    2b7c:	4180      	sbcs	r0, r0
    2b7e:	1bca      	subs	r2, r1, r7
    2b80:	4240      	negs	r0, r0
    2b82:	1a17      	subs	r7, r2, r0
    2b84:	4698      	mov	r8, r3
    2b86:	e55b      	b.n	2640 <__aeabi_dadd+0x50>
    2b88:	1c0f      	adds	r7, r1, #0
    2b8a:	4665      	mov	r5, ip
    2b8c:	1c14      	adds	r4, r2, #0
    2b8e:	e557      	b.n	2640 <__aeabi_dadd+0x50>
    2b90:	2b00      	cmp	r3, #0
    2b92:	d034      	beq.n	2bfe <__aeabi_dadd+0x60e>
    2b94:	4663      	mov	r3, ip
    2b96:	430b      	orrs	r3, r1
    2b98:	d011      	beq.n	2bbe <__aeabi_dadd+0x5ce>
    2b9a:	2480      	movs	r4, #128	; 0x80
    2b9c:	08ed      	lsrs	r5, r5, #3
    2b9e:	0778      	lsls	r0, r7, #29
    2ba0:	08fa      	lsrs	r2, r7, #3
    2ba2:	0324      	lsls	r4, r4, #12
    2ba4:	4328      	orrs	r0, r5
    2ba6:	4222      	tst	r2, r4
    2ba8:	d0d1      	beq.n	2b4e <__aeabi_dadd+0x55e>
    2baa:	08cb      	lsrs	r3, r1, #3
    2bac:	4223      	tst	r3, r4
    2bae:	d1ce      	bne.n	2b4e <__aeabi_dadd+0x55e>
    2bb0:	4662      	mov	r2, ip
    2bb2:	074f      	lsls	r7, r1, #29
    2bb4:	1c38      	adds	r0, r7, #0
    2bb6:	08d2      	lsrs	r2, r2, #3
    2bb8:	4310      	orrs	r0, r2
    2bba:	1c1a      	adds	r2, r3, #0
    2bbc:	e7c7      	b.n	2b4e <__aeabi_dadd+0x55e>
    2bbe:	4c1e      	ldr	r4, [pc, #120]	; (2c38 <__aeabi_dadd+0x648>)
    2bc0:	e53e      	b.n	2640 <__aeabi_dadd+0x50>
    2bc2:	2000      	movs	r0, #0
    2bc4:	e759      	b.n	2a7a <__aeabi_dadd+0x48a>
    2bc6:	1c04      	adds	r4, r0, #0
    2bc8:	1c3e      	adds	r6, r7, #0
    2bca:	3c20      	subs	r4, #32
    2bcc:	40e6      	lsrs	r6, r4
    2bce:	1c34      	adds	r4, r6, #0
    2bd0:	2820      	cmp	r0, #32
    2bd2:	d02b      	beq.n	2c2c <__aeabi_dadd+0x63c>
    2bd4:	2640      	movs	r6, #64	; 0x40
    2bd6:	1a30      	subs	r0, r6, r0
    2bd8:	4087      	lsls	r7, r0
    2bda:	433d      	orrs	r5, r7
    2bdc:	1e6f      	subs	r7, r5, #1
    2bde:	41bd      	sbcs	r5, r7
    2be0:	2700      	movs	r7, #0
    2be2:	4325      	orrs	r5, r4
    2be4:	e6c5      	b.n	2972 <__aeabi_dadd+0x382>
    2be6:	2780      	movs	r7, #128	; 0x80
    2be8:	2600      	movs	r6, #0
    2bea:	03ff      	lsls	r7, r7, #15
    2bec:	4c12      	ldr	r4, [pc, #72]	; (2c38 <__aeabi_dadd+0x648>)
    2bee:	2500      	movs	r5, #0
    2bf0:	e5b8      	b.n	2764 <__aeabi_dadd+0x174>
    2bf2:	433d      	orrs	r5, r7
    2bf4:	1e6f      	subs	r7, r5, #1
    2bf6:	41bd      	sbcs	r5, r7
    2bf8:	2700      	movs	r7, #0
    2bfa:	b2ed      	uxtb	r5, r5
    2bfc:	e76e      	b.n	2adc <__aeabi_dadd+0x4ec>
    2bfe:	1c0f      	adds	r7, r1, #0
    2c00:	4665      	mov	r5, ip
    2c02:	4c0d      	ldr	r4, [pc, #52]	; (2c38 <__aeabi_dadd+0x648>)
    2c04:	e51c      	b.n	2640 <__aeabi_dadd+0x50>
    2c06:	1c0f      	adds	r7, r1, #0
    2c08:	4665      	mov	r5, ip
    2c0a:	e519      	b.n	2640 <__aeabi_dadd+0x50>
    2c0c:	1c1c      	adds	r4, r3, #0
    2c0e:	1c38      	adds	r0, r7, #0
    2c10:	3c20      	subs	r4, #32
    2c12:	40e0      	lsrs	r0, r4
    2c14:	1c04      	adds	r4, r0, #0
    2c16:	2b20      	cmp	r3, #32
    2c18:	d00c      	beq.n	2c34 <__aeabi_dadd+0x644>
    2c1a:	2040      	movs	r0, #64	; 0x40
    2c1c:	1ac3      	subs	r3, r0, r3
    2c1e:	409f      	lsls	r7, r3
    2c20:	433d      	orrs	r5, r7
    2c22:	1e6f      	subs	r7, r5, #1
    2c24:	41bd      	sbcs	r5, r7
    2c26:	2700      	movs	r7, #0
    2c28:	4325      	orrs	r5, r4
    2c2a:	e757      	b.n	2adc <__aeabi_dadd+0x4ec>
    2c2c:	2700      	movs	r7, #0
    2c2e:	e7d4      	b.n	2bda <__aeabi_dadd+0x5ea>
    2c30:	1c1d      	adds	r5, r3, #0
    2c32:	e5fc      	b.n	282e <__aeabi_dadd+0x23e>
    2c34:	2700      	movs	r7, #0
    2c36:	e7f3      	b.n	2c20 <__aeabi_dadd+0x630>
    2c38:	000007ff 	.word	0x000007ff
    2c3c:	ff7fffff 	.word	0xff7fffff

00002c40 <__aeabi_ddiv>:
    2c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c42:	465f      	mov	r7, fp
    2c44:	4656      	mov	r6, sl
    2c46:	464d      	mov	r5, r9
    2c48:	4644      	mov	r4, r8
    2c4a:	b4f0      	push	{r4, r5, r6, r7}
    2c4c:	030f      	lsls	r7, r1, #12
    2c4e:	b087      	sub	sp, #28
    2c50:	4698      	mov	r8, r3
    2c52:	004d      	lsls	r5, r1, #1
    2c54:	0b3b      	lsrs	r3, r7, #12
    2c56:	0fcc      	lsrs	r4, r1, #31
    2c58:	1c06      	adds	r6, r0, #0
    2c5a:	4692      	mov	sl, r2
    2c5c:	4681      	mov	r9, r0
    2c5e:	469b      	mov	fp, r3
    2c60:	0d6d      	lsrs	r5, r5, #21
    2c62:	9401      	str	r4, [sp, #4]
    2c64:	d06b      	beq.n	2d3e <__aeabi_ddiv+0xfe>
    2c66:	4b66      	ldr	r3, [pc, #408]	; (2e00 <__aeabi_ddiv+0x1c0>)
    2c68:	429d      	cmp	r5, r3
    2c6a:	d035      	beq.n	2cd8 <__aeabi_ddiv+0x98>
    2c6c:	2780      	movs	r7, #128	; 0x80
    2c6e:	465b      	mov	r3, fp
    2c70:	037f      	lsls	r7, r7, #13
    2c72:	431f      	orrs	r7, r3
    2c74:	00f3      	lsls	r3, r6, #3
    2c76:	4699      	mov	r9, r3
    2c78:	4b62      	ldr	r3, [pc, #392]	; (2e04 <__aeabi_ddiv+0x1c4>)
    2c7a:	00ff      	lsls	r7, r7, #3
    2c7c:	0f40      	lsrs	r0, r0, #29
    2c7e:	469c      	mov	ip, r3
    2c80:	4307      	orrs	r7, r0
    2c82:	2300      	movs	r3, #0
    2c84:	46bb      	mov	fp, r7
    2c86:	2600      	movs	r6, #0
    2c88:	4465      	add	r5, ip
    2c8a:	9300      	str	r3, [sp, #0]
    2c8c:	4642      	mov	r2, r8
    2c8e:	0317      	lsls	r7, r2, #12
    2c90:	0050      	lsls	r0, r2, #1
    2c92:	0fd2      	lsrs	r2, r2, #31
    2c94:	4653      	mov	r3, sl
    2c96:	0b3f      	lsrs	r7, r7, #12
    2c98:	0d40      	lsrs	r0, r0, #21
    2c9a:	4690      	mov	r8, r2
    2c9c:	d100      	bne.n	2ca0 <__aeabi_ddiv+0x60>
    2c9e:	e072      	b.n	2d86 <__aeabi_ddiv+0x146>
    2ca0:	4a57      	ldr	r2, [pc, #348]	; (2e00 <__aeabi_ddiv+0x1c0>)
    2ca2:	4290      	cmp	r0, r2
    2ca4:	d067      	beq.n	2d76 <__aeabi_ddiv+0x136>
    2ca6:	2380      	movs	r3, #128	; 0x80
    2ca8:	035b      	lsls	r3, r3, #13
    2caa:	431f      	orrs	r7, r3
    2cac:	4653      	mov	r3, sl
    2cae:	4a55      	ldr	r2, [pc, #340]	; (2e04 <__aeabi_ddiv+0x1c4>)
    2cb0:	0f5b      	lsrs	r3, r3, #29
    2cb2:	00ff      	lsls	r7, r7, #3
    2cb4:	431f      	orrs	r7, r3
    2cb6:	4694      	mov	ip, r2
    2cb8:	4653      	mov	r3, sl
    2cba:	2100      	movs	r1, #0
    2cbc:	00db      	lsls	r3, r3, #3
    2cbe:	4460      	add	r0, ip
    2cc0:	4642      	mov	r2, r8
    2cc2:	4062      	eors	r2, r4
    2cc4:	4692      	mov	sl, r2
    2cc6:	1a2d      	subs	r5, r5, r0
    2cc8:	430e      	orrs	r6, r1
    2cca:	2e0f      	cmp	r6, #15
    2ccc:	d900      	bls.n	2cd0 <__aeabi_ddiv+0x90>
    2cce:	e0a1      	b.n	2e14 <__aeabi_ddiv+0x1d4>
    2cd0:	484d      	ldr	r0, [pc, #308]	; (2e08 <__aeabi_ddiv+0x1c8>)
    2cd2:	00b6      	lsls	r6, r6, #2
    2cd4:	5980      	ldr	r0, [r0, r6]
    2cd6:	4687      	mov	pc, r0
    2cd8:	465b      	mov	r3, fp
    2cda:	431e      	orrs	r6, r3
    2cdc:	d000      	beq.n	2ce0 <__aeabi_ddiv+0xa0>
    2cde:	e076      	b.n	2dce <__aeabi_ddiv+0x18e>
    2ce0:	2300      	movs	r3, #0
    2ce2:	469b      	mov	fp, r3
    2ce4:	4699      	mov	r9, r3
    2ce6:	3302      	adds	r3, #2
    2ce8:	2608      	movs	r6, #8
    2cea:	9300      	str	r3, [sp, #0]
    2cec:	e7ce      	b.n	2c8c <__aeabi_ddiv+0x4c>
    2cee:	4699      	mov	r9, r3
    2cf0:	4643      	mov	r3, r8
    2cf2:	46bb      	mov	fp, r7
    2cf4:	9301      	str	r3, [sp, #4]
    2cf6:	9100      	str	r1, [sp, #0]
    2cf8:	9b00      	ldr	r3, [sp, #0]
    2cfa:	2b02      	cmp	r3, #2
    2cfc:	d16b      	bne.n	2dd6 <__aeabi_ddiv+0x196>
    2cfe:	9b01      	ldr	r3, [sp, #4]
    2d00:	469a      	mov	sl, r3
    2d02:	2100      	movs	r1, #0
    2d04:	4653      	mov	r3, sl
    2d06:	2201      	movs	r2, #1
    2d08:	2700      	movs	r7, #0
    2d0a:	4689      	mov	r9, r1
    2d0c:	401a      	ands	r2, r3
    2d0e:	4b3c      	ldr	r3, [pc, #240]	; (2e00 <__aeabi_ddiv+0x1c0>)
    2d10:	2100      	movs	r1, #0
    2d12:	033f      	lsls	r7, r7, #12
    2d14:	0d0c      	lsrs	r4, r1, #20
    2d16:	0524      	lsls	r4, r4, #20
    2d18:	0b3f      	lsrs	r7, r7, #12
    2d1a:	4327      	orrs	r7, r4
    2d1c:	4c3b      	ldr	r4, [pc, #236]	; (2e0c <__aeabi_ddiv+0x1cc>)
    2d1e:	051b      	lsls	r3, r3, #20
    2d20:	4027      	ands	r7, r4
    2d22:	431f      	orrs	r7, r3
    2d24:	007f      	lsls	r7, r7, #1
    2d26:	07d2      	lsls	r2, r2, #31
    2d28:	087f      	lsrs	r7, r7, #1
    2d2a:	4317      	orrs	r7, r2
    2d2c:	4648      	mov	r0, r9
    2d2e:	1c39      	adds	r1, r7, #0
    2d30:	b007      	add	sp, #28
    2d32:	bc3c      	pop	{r2, r3, r4, r5}
    2d34:	4690      	mov	r8, r2
    2d36:	4699      	mov	r9, r3
    2d38:	46a2      	mov	sl, r4
    2d3a:	46ab      	mov	fp, r5
    2d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d3e:	4303      	orrs	r3, r0
    2d40:	d03e      	beq.n	2dc0 <__aeabi_ddiv+0x180>
    2d42:	465b      	mov	r3, fp
    2d44:	2b00      	cmp	r3, #0
    2d46:	d100      	bne.n	2d4a <__aeabi_ddiv+0x10a>
    2d48:	e19c      	b.n	3084 <__aeabi_ddiv+0x444>
    2d4a:	4658      	mov	r0, fp
    2d4c:	f000 fef8 	bl	3b40 <__clzsi2>
    2d50:	2328      	movs	r3, #40	; 0x28
    2d52:	1c31      	adds	r1, r6, #0
    2d54:	1a1b      	subs	r3, r3, r0
    2d56:	1c02      	adds	r2, r0, #0
    2d58:	465f      	mov	r7, fp
    2d5a:	40d9      	lsrs	r1, r3
    2d5c:	3a08      	subs	r2, #8
    2d5e:	4097      	lsls	r7, r2
    2d60:	1c0b      	adds	r3, r1, #0
    2d62:	4096      	lsls	r6, r2
    2d64:	433b      	orrs	r3, r7
    2d66:	469b      	mov	fp, r3
    2d68:	46b1      	mov	r9, r6
    2d6a:	2300      	movs	r3, #0
    2d6c:	4d28      	ldr	r5, [pc, #160]	; (2e10 <__aeabi_ddiv+0x1d0>)
    2d6e:	2600      	movs	r6, #0
    2d70:	1a2d      	subs	r5, r5, r0
    2d72:	9300      	str	r3, [sp, #0]
    2d74:	e78a      	b.n	2c8c <__aeabi_ddiv+0x4c>
    2d76:	4652      	mov	r2, sl
    2d78:	2103      	movs	r1, #3
    2d7a:	433a      	orrs	r2, r7
    2d7c:	d1a0      	bne.n	2cc0 <__aeabi_ddiv+0x80>
    2d7e:	2700      	movs	r7, #0
    2d80:	2300      	movs	r3, #0
    2d82:	2102      	movs	r1, #2
    2d84:	e79c      	b.n	2cc0 <__aeabi_ddiv+0x80>
    2d86:	4652      	mov	r2, sl
    2d88:	433a      	orrs	r2, r7
    2d8a:	d015      	beq.n	2db8 <__aeabi_ddiv+0x178>
    2d8c:	2f00      	cmp	r7, #0
    2d8e:	d100      	bne.n	2d92 <__aeabi_ddiv+0x152>
    2d90:	e185      	b.n	309e <__aeabi_ddiv+0x45e>
    2d92:	1c38      	adds	r0, r7, #0
    2d94:	f000 fed4 	bl	3b40 <__clzsi2>
    2d98:	1c02      	adds	r2, r0, #0
    2d9a:	2128      	movs	r1, #40	; 0x28
    2d9c:	4650      	mov	r0, sl
    2d9e:	1a89      	subs	r1, r1, r2
    2da0:	1c13      	adds	r3, r2, #0
    2da2:	40c8      	lsrs	r0, r1
    2da4:	4651      	mov	r1, sl
    2da6:	3b08      	subs	r3, #8
    2da8:	4099      	lsls	r1, r3
    2daa:	409f      	lsls	r7, r3
    2dac:	1c0b      	adds	r3, r1, #0
    2dae:	4307      	orrs	r7, r0
    2db0:	4817      	ldr	r0, [pc, #92]	; (2e10 <__aeabi_ddiv+0x1d0>)
    2db2:	2100      	movs	r1, #0
    2db4:	1a80      	subs	r0, r0, r2
    2db6:	e783      	b.n	2cc0 <__aeabi_ddiv+0x80>
    2db8:	2700      	movs	r7, #0
    2dba:	2300      	movs	r3, #0
    2dbc:	2101      	movs	r1, #1
    2dbe:	e77f      	b.n	2cc0 <__aeabi_ddiv+0x80>
    2dc0:	2300      	movs	r3, #0
    2dc2:	469b      	mov	fp, r3
    2dc4:	4699      	mov	r9, r3
    2dc6:	3301      	adds	r3, #1
    2dc8:	2604      	movs	r6, #4
    2dca:	9300      	str	r3, [sp, #0]
    2dcc:	e75e      	b.n	2c8c <__aeabi_ddiv+0x4c>
    2dce:	2303      	movs	r3, #3
    2dd0:	260c      	movs	r6, #12
    2dd2:	9300      	str	r3, [sp, #0]
    2dd4:	e75a      	b.n	2c8c <__aeabi_ddiv+0x4c>
    2dd6:	2b03      	cmp	r3, #3
    2dd8:	d100      	bne.n	2ddc <__aeabi_ddiv+0x19c>
    2dda:	e23c      	b.n	3256 <__aeabi_ddiv+0x616>
    2ddc:	2b01      	cmp	r3, #1
    2dde:	d000      	beq.n	2de2 <__aeabi_ddiv+0x1a2>
    2de0:	e1bf      	b.n	3162 <__aeabi_ddiv+0x522>
    2de2:	1c1a      	adds	r2, r3, #0
    2de4:	9b01      	ldr	r3, [sp, #4]
    2de6:	401a      	ands	r2, r3
    2de8:	2100      	movs	r1, #0
    2dea:	2300      	movs	r3, #0
    2dec:	2700      	movs	r7, #0
    2dee:	4689      	mov	r9, r1
    2df0:	e78e      	b.n	2d10 <__aeabi_ddiv+0xd0>
    2df2:	2300      	movs	r3, #0
    2df4:	2780      	movs	r7, #128	; 0x80
    2df6:	4699      	mov	r9, r3
    2df8:	2200      	movs	r2, #0
    2dfa:	033f      	lsls	r7, r7, #12
    2dfc:	4b00      	ldr	r3, [pc, #0]	; (2e00 <__aeabi_ddiv+0x1c0>)
    2dfe:	e787      	b.n	2d10 <__aeabi_ddiv+0xd0>
    2e00:	000007ff 	.word	0x000007ff
    2e04:	fffffc01 	.word	0xfffffc01
    2e08:	00004ea8 	.word	0x00004ea8
    2e0c:	800fffff 	.word	0x800fffff
    2e10:	fffffc0d 	.word	0xfffffc0d
    2e14:	45bb      	cmp	fp, r7
    2e16:	d900      	bls.n	2e1a <__aeabi_ddiv+0x1da>
    2e18:	e151      	b.n	30be <__aeabi_ddiv+0x47e>
    2e1a:	d100      	bne.n	2e1e <__aeabi_ddiv+0x1de>
    2e1c:	e14c      	b.n	30b8 <__aeabi_ddiv+0x478>
    2e1e:	464a      	mov	r2, r9
    2e20:	9203      	str	r2, [sp, #12]
    2e22:	2200      	movs	r2, #0
    2e24:	465c      	mov	r4, fp
    2e26:	4690      	mov	r8, r2
    2e28:	3d01      	subs	r5, #1
    2e2a:	0e18      	lsrs	r0, r3, #24
    2e2c:	023f      	lsls	r7, r7, #8
    2e2e:	4338      	orrs	r0, r7
    2e30:	021b      	lsls	r3, r3, #8
    2e32:	9301      	str	r3, [sp, #4]
    2e34:	0c03      	lsrs	r3, r0, #16
    2e36:	4699      	mov	r9, r3
    2e38:	0403      	lsls	r3, r0, #16
    2e3a:	0c1b      	lsrs	r3, r3, #16
    2e3c:	4649      	mov	r1, r9
    2e3e:	1c06      	adds	r6, r0, #0
    2e40:	1c20      	adds	r0, r4, #0
    2e42:	1c1f      	adds	r7, r3, #0
    2e44:	9300      	str	r3, [sp, #0]
    2e46:	f7ff f829 	bl	1e9c <__aeabi_uidiv>
    2e4a:	1c02      	adds	r2, r0, #0
    2e4c:	437a      	muls	r2, r7
    2e4e:	9002      	str	r0, [sp, #8]
    2e50:	4649      	mov	r1, r9
    2e52:	1c20      	adds	r0, r4, #0
    2e54:	1c17      	adds	r7, r2, #0
    2e56:	f7ff f8a7 	bl	1fa8 <__aeabi_uidivmod>
    2e5a:	9b03      	ldr	r3, [sp, #12]
    2e5c:	0409      	lsls	r1, r1, #16
    2e5e:	0c1b      	lsrs	r3, r3, #16
    2e60:	4319      	orrs	r1, r3
    2e62:	428f      	cmp	r7, r1
    2e64:	d90c      	bls.n	2e80 <__aeabi_ddiv+0x240>
    2e66:	9b02      	ldr	r3, [sp, #8]
    2e68:	1989      	adds	r1, r1, r6
    2e6a:	3b01      	subs	r3, #1
    2e6c:	428e      	cmp	r6, r1
    2e6e:	d900      	bls.n	2e72 <__aeabi_ddiv+0x232>
    2e70:	e152      	b.n	3118 <__aeabi_ddiv+0x4d8>
    2e72:	428f      	cmp	r7, r1
    2e74:	d800      	bhi.n	2e78 <__aeabi_ddiv+0x238>
    2e76:	e14f      	b.n	3118 <__aeabi_ddiv+0x4d8>
    2e78:	9b02      	ldr	r3, [sp, #8]
    2e7a:	1989      	adds	r1, r1, r6
    2e7c:	3b02      	subs	r3, #2
    2e7e:	9302      	str	r3, [sp, #8]
    2e80:	1bcc      	subs	r4, r1, r7
    2e82:	1c20      	adds	r0, r4, #0
    2e84:	4649      	mov	r1, r9
    2e86:	f7ff f809 	bl	1e9c <__aeabi_uidiv>
    2e8a:	9f00      	ldr	r7, [sp, #0]
    2e8c:	4683      	mov	fp, r0
    2e8e:	4347      	muls	r7, r0
    2e90:	4649      	mov	r1, r9
    2e92:	1c20      	adds	r0, r4, #0
    2e94:	f7ff f888 	bl	1fa8 <__aeabi_uidivmod>
    2e98:	9a03      	ldr	r2, [sp, #12]
    2e9a:	040b      	lsls	r3, r1, #16
    2e9c:	0414      	lsls	r4, r2, #16
    2e9e:	0c24      	lsrs	r4, r4, #16
    2ea0:	4323      	orrs	r3, r4
    2ea2:	429f      	cmp	r7, r3
    2ea4:	d90d      	bls.n	2ec2 <__aeabi_ddiv+0x282>
    2ea6:	465a      	mov	r2, fp
    2ea8:	199b      	adds	r3, r3, r6
    2eaa:	3a01      	subs	r2, #1
    2eac:	429e      	cmp	r6, r3
    2eae:	d900      	bls.n	2eb2 <__aeabi_ddiv+0x272>
    2eb0:	e130      	b.n	3114 <__aeabi_ddiv+0x4d4>
    2eb2:	429f      	cmp	r7, r3
    2eb4:	d800      	bhi.n	2eb8 <__aeabi_ddiv+0x278>
    2eb6:	e12d      	b.n	3114 <__aeabi_ddiv+0x4d4>
    2eb8:	2202      	movs	r2, #2
    2eba:	4252      	negs	r2, r2
    2ebc:	4694      	mov	ip, r2
    2ebe:	199b      	adds	r3, r3, r6
    2ec0:	44e3      	add	fp, ip
    2ec2:	9a02      	ldr	r2, [sp, #8]
    2ec4:	1bdb      	subs	r3, r3, r7
    2ec6:	0417      	lsls	r7, r2, #16
    2ec8:	465a      	mov	r2, fp
    2eca:	433a      	orrs	r2, r7
    2ecc:	4693      	mov	fp, r2
    2ece:	9c01      	ldr	r4, [sp, #4]
    2ed0:	0c17      	lsrs	r7, r2, #16
    2ed2:	0c22      	lsrs	r2, r4, #16
    2ed4:	1c10      	adds	r0, r2, #0
    2ed6:	9204      	str	r2, [sp, #16]
    2ed8:	465a      	mov	r2, fp
    2eda:	0411      	lsls	r1, r2, #16
    2edc:	0422      	lsls	r2, r4, #16
    2ede:	0c12      	lsrs	r2, r2, #16
    2ee0:	1c14      	adds	r4, r2, #0
    2ee2:	0c09      	lsrs	r1, r1, #16
    2ee4:	437c      	muls	r4, r7
    2ee6:	9205      	str	r2, [sp, #20]
    2ee8:	434a      	muls	r2, r1
    2eea:	4341      	muls	r1, r0
    2eec:	4347      	muls	r7, r0
    2eee:	1861      	adds	r1, r4, r1
    2ef0:	0c10      	lsrs	r0, r2, #16
    2ef2:	1809      	adds	r1, r1, r0
    2ef4:	428c      	cmp	r4, r1
    2ef6:	d903      	bls.n	2f00 <__aeabi_ddiv+0x2c0>
    2ef8:	2080      	movs	r0, #128	; 0x80
    2efa:	0240      	lsls	r0, r0, #9
    2efc:	4684      	mov	ip, r0
    2efe:	4467      	add	r7, ip
    2f00:	0c0c      	lsrs	r4, r1, #16
    2f02:	0412      	lsls	r2, r2, #16
    2f04:	0408      	lsls	r0, r1, #16
    2f06:	0c12      	lsrs	r2, r2, #16
    2f08:	193c      	adds	r4, r7, r4
    2f0a:	1881      	adds	r1, r0, r2
    2f0c:	42a3      	cmp	r3, r4
    2f0e:	d200      	bcs.n	2f12 <__aeabi_ddiv+0x2d2>
    2f10:	e0e5      	b.n	30de <__aeabi_ddiv+0x49e>
    2f12:	d100      	bne.n	2f16 <__aeabi_ddiv+0x2d6>
    2f14:	e0df      	b.n	30d6 <__aeabi_ddiv+0x496>
    2f16:	1b1f      	subs	r7, r3, r4
    2f18:	4643      	mov	r3, r8
    2f1a:	1a5c      	subs	r4, r3, r1
    2f1c:	45a0      	cmp	r8, r4
    2f1e:	4192      	sbcs	r2, r2
    2f20:	4252      	negs	r2, r2
    2f22:	1abf      	subs	r7, r7, r2
    2f24:	42b7      	cmp	r7, r6
    2f26:	d100      	bne.n	2f2a <__aeabi_ddiv+0x2ea>
    2f28:	e10e      	b.n	3148 <__aeabi_ddiv+0x508>
    2f2a:	1c38      	adds	r0, r7, #0
    2f2c:	4649      	mov	r1, r9
    2f2e:	f7fe ffb5 	bl	1e9c <__aeabi_uidiv>
    2f32:	9b00      	ldr	r3, [sp, #0]
    2f34:	9002      	str	r0, [sp, #8]
    2f36:	4343      	muls	r3, r0
    2f38:	4649      	mov	r1, r9
    2f3a:	1c38      	adds	r0, r7, #0
    2f3c:	4698      	mov	r8, r3
    2f3e:	f7ff f833 	bl	1fa8 <__aeabi_uidivmod>
    2f42:	0c23      	lsrs	r3, r4, #16
    2f44:	040f      	lsls	r7, r1, #16
    2f46:	431f      	orrs	r7, r3
    2f48:	45b8      	cmp	r8, r7
    2f4a:	d90c      	bls.n	2f66 <__aeabi_ddiv+0x326>
    2f4c:	9b02      	ldr	r3, [sp, #8]
    2f4e:	19bf      	adds	r7, r7, r6
    2f50:	3b01      	subs	r3, #1
    2f52:	42be      	cmp	r6, r7
    2f54:	d900      	bls.n	2f58 <__aeabi_ddiv+0x318>
    2f56:	e0fb      	b.n	3150 <__aeabi_ddiv+0x510>
    2f58:	45b8      	cmp	r8, r7
    2f5a:	d800      	bhi.n	2f5e <__aeabi_ddiv+0x31e>
    2f5c:	e0f8      	b.n	3150 <__aeabi_ddiv+0x510>
    2f5e:	9b02      	ldr	r3, [sp, #8]
    2f60:	19bf      	adds	r7, r7, r6
    2f62:	3b02      	subs	r3, #2
    2f64:	9302      	str	r3, [sp, #8]
    2f66:	4643      	mov	r3, r8
    2f68:	1aff      	subs	r7, r7, r3
    2f6a:	4649      	mov	r1, r9
    2f6c:	1c38      	adds	r0, r7, #0
    2f6e:	f7fe ff95 	bl	1e9c <__aeabi_uidiv>
    2f72:	9b00      	ldr	r3, [sp, #0]
    2f74:	9003      	str	r0, [sp, #12]
    2f76:	4343      	muls	r3, r0
    2f78:	4649      	mov	r1, r9
    2f7a:	1c38      	adds	r0, r7, #0
    2f7c:	4698      	mov	r8, r3
    2f7e:	f7ff f813 	bl	1fa8 <__aeabi_uidivmod>
    2f82:	0424      	lsls	r4, r4, #16
    2f84:	0409      	lsls	r1, r1, #16
    2f86:	0c24      	lsrs	r4, r4, #16
    2f88:	4321      	orrs	r1, r4
    2f8a:	4588      	cmp	r8, r1
    2f8c:	d90c      	bls.n	2fa8 <__aeabi_ddiv+0x368>
    2f8e:	9b03      	ldr	r3, [sp, #12]
    2f90:	1989      	adds	r1, r1, r6
    2f92:	3b01      	subs	r3, #1
    2f94:	428e      	cmp	r6, r1
    2f96:	d900      	bls.n	2f9a <__aeabi_ddiv+0x35a>
    2f98:	e0dc      	b.n	3154 <__aeabi_ddiv+0x514>
    2f9a:	4588      	cmp	r8, r1
    2f9c:	d800      	bhi.n	2fa0 <__aeabi_ddiv+0x360>
    2f9e:	e0d9      	b.n	3154 <__aeabi_ddiv+0x514>
    2fa0:	9b03      	ldr	r3, [sp, #12]
    2fa2:	1989      	adds	r1, r1, r6
    2fa4:	3b02      	subs	r3, #2
    2fa6:	9303      	str	r3, [sp, #12]
    2fa8:	4643      	mov	r3, r8
    2faa:	1ac9      	subs	r1, r1, r3
    2fac:	9b02      	ldr	r3, [sp, #8]
    2fae:	9a03      	ldr	r2, [sp, #12]
    2fb0:	041b      	lsls	r3, r3, #16
    2fb2:	9c05      	ldr	r4, [sp, #20]
    2fb4:	431a      	orrs	r2, r3
    2fb6:	0c10      	lsrs	r0, r2, #16
    2fb8:	0413      	lsls	r3, r2, #16
    2fba:	4691      	mov	r9, r2
    2fbc:	1c22      	adds	r2, r4, #0
    2fbe:	9f04      	ldr	r7, [sp, #16]
    2fc0:	0c1b      	lsrs	r3, r3, #16
    2fc2:	435a      	muls	r2, r3
    2fc4:	4344      	muls	r4, r0
    2fc6:	437b      	muls	r3, r7
    2fc8:	4378      	muls	r0, r7
    2fca:	18e3      	adds	r3, r4, r3
    2fcc:	0c17      	lsrs	r7, r2, #16
    2fce:	19db      	adds	r3, r3, r7
    2fd0:	429c      	cmp	r4, r3
    2fd2:	d903      	bls.n	2fdc <__aeabi_ddiv+0x39c>
    2fd4:	2480      	movs	r4, #128	; 0x80
    2fd6:	0264      	lsls	r4, r4, #9
    2fd8:	46a4      	mov	ip, r4
    2fda:	4460      	add	r0, ip
    2fdc:	0c1c      	lsrs	r4, r3, #16
    2fde:	0412      	lsls	r2, r2, #16
    2fe0:	041b      	lsls	r3, r3, #16
    2fe2:	0c12      	lsrs	r2, r2, #16
    2fe4:	1900      	adds	r0, r0, r4
    2fe6:	189b      	adds	r3, r3, r2
    2fe8:	4281      	cmp	r1, r0
    2fea:	d200      	bcs.n	2fee <__aeabi_ddiv+0x3ae>
    2fec:	e096      	b.n	311c <__aeabi_ddiv+0x4dc>
    2fee:	d100      	bne.n	2ff2 <__aeabi_ddiv+0x3b2>
    2ff0:	e0fc      	b.n	31ec <__aeabi_ddiv+0x5ac>
    2ff2:	464a      	mov	r2, r9
    2ff4:	2301      	movs	r3, #1
    2ff6:	431a      	orrs	r2, r3
    2ff8:	4691      	mov	r9, r2
    2ffa:	4b9b      	ldr	r3, [pc, #620]	; (3268 <__aeabi_ddiv+0x628>)
    2ffc:	18eb      	adds	r3, r5, r3
    2ffe:	2b00      	cmp	r3, #0
    3000:	dc00      	bgt.n	3004 <__aeabi_ddiv+0x3c4>
    3002:	e099      	b.n	3138 <__aeabi_ddiv+0x4f8>
    3004:	464a      	mov	r2, r9
    3006:	0752      	lsls	r2, r2, #29
    3008:	d00a      	beq.n	3020 <__aeabi_ddiv+0x3e0>
    300a:	220f      	movs	r2, #15
    300c:	4649      	mov	r1, r9
    300e:	400a      	ands	r2, r1
    3010:	2a04      	cmp	r2, #4
    3012:	d005      	beq.n	3020 <__aeabi_ddiv+0x3e0>
    3014:	3104      	adds	r1, #4
    3016:	4549      	cmp	r1, r9
    3018:	4192      	sbcs	r2, r2
    301a:	4689      	mov	r9, r1
    301c:	4252      	negs	r2, r2
    301e:	4493      	add	fp, r2
    3020:	465a      	mov	r2, fp
    3022:	01d2      	lsls	r2, r2, #7
    3024:	d506      	bpl.n	3034 <__aeabi_ddiv+0x3f4>
    3026:	465a      	mov	r2, fp
    3028:	4b90      	ldr	r3, [pc, #576]	; (326c <__aeabi_ddiv+0x62c>)
    302a:	401a      	ands	r2, r3
    302c:	2380      	movs	r3, #128	; 0x80
    302e:	4693      	mov	fp, r2
    3030:	00db      	lsls	r3, r3, #3
    3032:	18eb      	adds	r3, r5, r3
    3034:	4a8e      	ldr	r2, [pc, #568]	; (3270 <__aeabi_ddiv+0x630>)
    3036:	4293      	cmp	r3, r2
    3038:	dd00      	ble.n	303c <__aeabi_ddiv+0x3fc>
    303a:	e662      	b.n	2d02 <__aeabi_ddiv+0xc2>
    303c:	464a      	mov	r2, r9
    303e:	4659      	mov	r1, fp
    3040:	08d2      	lsrs	r2, r2, #3
    3042:	0749      	lsls	r1, r1, #29
    3044:	4311      	orrs	r1, r2
    3046:	465a      	mov	r2, fp
    3048:	4689      	mov	r9, r1
    304a:	0257      	lsls	r7, r2, #9
    304c:	4651      	mov	r1, sl
    304e:	2201      	movs	r2, #1
    3050:	055b      	lsls	r3, r3, #21
    3052:	0b3f      	lsrs	r7, r7, #12
    3054:	0d5b      	lsrs	r3, r3, #21
    3056:	400a      	ands	r2, r1
    3058:	e65a      	b.n	2d10 <__aeabi_ddiv+0xd0>
    305a:	2080      	movs	r0, #128	; 0x80
    305c:	465a      	mov	r2, fp
    305e:	0300      	lsls	r0, r0, #12
    3060:	4202      	tst	r2, r0
    3062:	d008      	beq.n	3076 <__aeabi_ddiv+0x436>
    3064:	4207      	tst	r7, r0
    3066:	d106      	bne.n	3076 <__aeabi_ddiv+0x436>
    3068:	4307      	orrs	r7, r0
    306a:	033f      	lsls	r7, r7, #12
    306c:	4699      	mov	r9, r3
    306e:	0b3f      	lsrs	r7, r7, #12
    3070:	4642      	mov	r2, r8
    3072:	4b80      	ldr	r3, [pc, #512]	; (3274 <__aeabi_ddiv+0x634>)
    3074:	e64c      	b.n	2d10 <__aeabi_ddiv+0xd0>
    3076:	465f      	mov	r7, fp
    3078:	4307      	orrs	r7, r0
    307a:	033f      	lsls	r7, r7, #12
    307c:	0b3f      	lsrs	r7, r7, #12
    307e:	1c22      	adds	r2, r4, #0
    3080:	4b7c      	ldr	r3, [pc, #496]	; (3274 <__aeabi_ddiv+0x634>)
    3082:	e645      	b.n	2d10 <__aeabi_ddiv+0xd0>
    3084:	f000 fd5c 	bl	3b40 <__clzsi2>
    3088:	1c03      	adds	r3, r0, #0
    308a:	3020      	adds	r0, #32
    308c:	2827      	cmp	r0, #39	; 0x27
    308e:	dc00      	bgt.n	3092 <__aeabi_ddiv+0x452>
    3090:	e65e      	b.n	2d50 <__aeabi_ddiv+0x110>
    3092:	3b08      	subs	r3, #8
    3094:	409e      	lsls	r6, r3
    3096:	2300      	movs	r3, #0
    3098:	46b3      	mov	fp, r6
    309a:	4699      	mov	r9, r3
    309c:	e665      	b.n	2d6a <__aeabi_ddiv+0x12a>
    309e:	4650      	mov	r0, sl
    30a0:	f000 fd4e 	bl	3b40 <__clzsi2>
    30a4:	1c02      	adds	r2, r0, #0
    30a6:	3220      	adds	r2, #32
    30a8:	2a27      	cmp	r2, #39	; 0x27
    30aa:	dc00      	bgt.n	30ae <__aeabi_ddiv+0x46e>
    30ac:	e675      	b.n	2d9a <__aeabi_ddiv+0x15a>
    30ae:	4657      	mov	r7, sl
    30b0:	3808      	subs	r0, #8
    30b2:	4087      	lsls	r7, r0
    30b4:	2300      	movs	r3, #0
    30b6:	e67b      	b.n	2db0 <__aeabi_ddiv+0x170>
    30b8:	4599      	cmp	r9, r3
    30ba:	d200      	bcs.n	30be <__aeabi_ddiv+0x47e>
    30bc:	e6af      	b.n	2e1e <__aeabi_ddiv+0x1de>
    30be:	465a      	mov	r2, fp
    30c0:	4659      	mov	r1, fp
    30c2:	0854      	lsrs	r4, r2, #1
    30c4:	464a      	mov	r2, r9
    30c6:	07c8      	lsls	r0, r1, #31
    30c8:	0852      	lsrs	r2, r2, #1
    30ca:	4302      	orrs	r2, r0
    30cc:	9203      	str	r2, [sp, #12]
    30ce:	464a      	mov	r2, r9
    30d0:	07d2      	lsls	r2, r2, #31
    30d2:	4690      	mov	r8, r2
    30d4:	e6a9      	b.n	2e2a <__aeabi_ddiv+0x1ea>
    30d6:	2700      	movs	r7, #0
    30d8:	4588      	cmp	r8, r1
    30da:	d300      	bcc.n	30de <__aeabi_ddiv+0x49e>
    30dc:	e71c      	b.n	2f18 <__aeabi_ddiv+0x2d8>
    30de:	9f01      	ldr	r7, [sp, #4]
    30e0:	465a      	mov	r2, fp
    30e2:	46bc      	mov	ip, r7
    30e4:	44e0      	add	r8, ip
    30e6:	45b8      	cmp	r8, r7
    30e8:	41bf      	sbcs	r7, r7
    30ea:	427f      	negs	r7, r7
    30ec:	19bf      	adds	r7, r7, r6
    30ee:	18ff      	adds	r7, r7, r3
    30f0:	3a01      	subs	r2, #1
    30f2:	42be      	cmp	r6, r7
    30f4:	d206      	bcs.n	3104 <__aeabi_ddiv+0x4c4>
    30f6:	42bc      	cmp	r4, r7
    30f8:	d85f      	bhi.n	31ba <__aeabi_ddiv+0x57a>
    30fa:	d100      	bne.n	30fe <__aeabi_ddiv+0x4be>
    30fc:	e09f      	b.n	323e <__aeabi_ddiv+0x5fe>
    30fe:	1b3f      	subs	r7, r7, r4
    3100:	4693      	mov	fp, r2
    3102:	e709      	b.n	2f18 <__aeabi_ddiv+0x2d8>
    3104:	42b7      	cmp	r7, r6
    3106:	d1fa      	bne.n	30fe <__aeabi_ddiv+0x4be>
    3108:	9b01      	ldr	r3, [sp, #4]
    310a:	4543      	cmp	r3, r8
    310c:	d9f3      	bls.n	30f6 <__aeabi_ddiv+0x4b6>
    310e:	1b37      	subs	r7, r6, r4
    3110:	4693      	mov	fp, r2
    3112:	e701      	b.n	2f18 <__aeabi_ddiv+0x2d8>
    3114:	4693      	mov	fp, r2
    3116:	e6d4      	b.n	2ec2 <__aeabi_ddiv+0x282>
    3118:	9302      	str	r3, [sp, #8]
    311a:	e6b1      	b.n	2e80 <__aeabi_ddiv+0x240>
    311c:	464a      	mov	r2, r9
    311e:	1989      	adds	r1, r1, r6
    3120:	3a01      	subs	r2, #1
    3122:	428e      	cmp	r6, r1
    3124:	d918      	bls.n	3158 <__aeabi_ddiv+0x518>
    3126:	4691      	mov	r9, r2
    3128:	4281      	cmp	r1, r0
    312a:	d000      	beq.n	312e <__aeabi_ddiv+0x4ee>
    312c:	e761      	b.n	2ff2 <__aeabi_ddiv+0x3b2>
    312e:	9a01      	ldr	r2, [sp, #4]
    3130:	429a      	cmp	r2, r3
    3132:	d000      	beq.n	3136 <__aeabi_ddiv+0x4f6>
    3134:	e75d      	b.n	2ff2 <__aeabi_ddiv+0x3b2>
    3136:	e760      	b.n	2ffa <__aeabi_ddiv+0x3ba>
    3138:	4f4f      	ldr	r7, [pc, #316]	; (3278 <__aeabi_ddiv+0x638>)
    313a:	1b7f      	subs	r7, r7, r5
    313c:	2f38      	cmp	r7, #56	; 0x38
    313e:	dd13      	ble.n	3168 <__aeabi_ddiv+0x528>
    3140:	2201      	movs	r2, #1
    3142:	4653      	mov	r3, sl
    3144:	401a      	ands	r2, r3
    3146:	e64f      	b.n	2de8 <__aeabi_ddiv+0x1a8>
    3148:	2301      	movs	r3, #1
    314a:	425b      	negs	r3, r3
    314c:	4699      	mov	r9, r3
    314e:	e754      	b.n	2ffa <__aeabi_ddiv+0x3ba>
    3150:	9302      	str	r3, [sp, #8]
    3152:	e708      	b.n	2f66 <__aeabi_ddiv+0x326>
    3154:	9303      	str	r3, [sp, #12]
    3156:	e727      	b.n	2fa8 <__aeabi_ddiv+0x368>
    3158:	4288      	cmp	r0, r1
    315a:	d83c      	bhi.n	31d6 <__aeabi_ddiv+0x596>
    315c:	d074      	beq.n	3248 <__aeabi_ddiv+0x608>
    315e:	4691      	mov	r9, r2
    3160:	e747      	b.n	2ff2 <__aeabi_ddiv+0x3b2>
    3162:	9b01      	ldr	r3, [sp, #4]
    3164:	469a      	mov	sl, r3
    3166:	e748      	b.n	2ffa <__aeabi_ddiv+0x3ba>
    3168:	2f1f      	cmp	r7, #31
    316a:	dc44      	bgt.n	31f6 <__aeabi_ddiv+0x5b6>
    316c:	4b43      	ldr	r3, [pc, #268]	; (327c <__aeabi_ddiv+0x63c>)
    316e:	464a      	mov	r2, r9
    3170:	469c      	mov	ip, r3
    3172:	465b      	mov	r3, fp
    3174:	4465      	add	r5, ip
    3176:	40fa      	lsrs	r2, r7
    3178:	40ab      	lsls	r3, r5
    317a:	4313      	orrs	r3, r2
    317c:	464a      	mov	r2, r9
    317e:	40aa      	lsls	r2, r5
    3180:	1c15      	adds	r5, r2, #0
    3182:	1e6a      	subs	r2, r5, #1
    3184:	4195      	sbcs	r5, r2
    3186:	465a      	mov	r2, fp
    3188:	40fa      	lsrs	r2, r7
    318a:	432b      	orrs	r3, r5
    318c:	1c17      	adds	r7, r2, #0
    318e:	075a      	lsls	r2, r3, #29
    3190:	d009      	beq.n	31a6 <__aeabi_ddiv+0x566>
    3192:	220f      	movs	r2, #15
    3194:	401a      	ands	r2, r3
    3196:	2a04      	cmp	r2, #4
    3198:	d005      	beq.n	31a6 <__aeabi_ddiv+0x566>
    319a:	1d1a      	adds	r2, r3, #4
    319c:	429a      	cmp	r2, r3
    319e:	419b      	sbcs	r3, r3
    31a0:	425b      	negs	r3, r3
    31a2:	18ff      	adds	r7, r7, r3
    31a4:	1c13      	adds	r3, r2, #0
    31a6:	023a      	lsls	r2, r7, #8
    31a8:	d53e      	bpl.n	3228 <__aeabi_ddiv+0x5e8>
    31aa:	4653      	mov	r3, sl
    31ac:	2201      	movs	r2, #1
    31ae:	2100      	movs	r1, #0
    31b0:	401a      	ands	r2, r3
    31b2:	2700      	movs	r7, #0
    31b4:	2301      	movs	r3, #1
    31b6:	4689      	mov	r9, r1
    31b8:	e5aa      	b.n	2d10 <__aeabi_ddiv+0xd0>
    31ba:	2302      	movs	r3, #2
    31bc:	425b      	negs	r3, r3
    31be:	469c      	mov	ip, r3
    31c0:	9a01      	ldr	r2, [sp, #4]
    31c2:	44e3      	add	fp, ip
    31c4:	4694      	mov	ip, r2
    31c6:	44e0      	add	r8, ip
    31c8:	4590      	cmp	r8, r2
    31ca:	419b      	sbcs	r3, r3
    31cc:	425b      	negs	r3, r3
    31ce:	199b      	adds	r3, r3, r6
    31d0:	19df      	adds	r7, r3, r7
    31d2:	1b3f      	subs	r7, r7, r4
    31d4:	e6a0      	b.n	2f18 <__aeabi_ddiv+0x2d8>
    31d6:	9f01      	ldr	r7, [sp, #4]
    31d8:	464a      	mov	r2, r9
    31da:	007c      	lsls	r4, r7, #1
    31dc:	42bc      	cmp	r4, r7
    31de:	41bf      	sbcs	r7, r7
    31e0:	427f      	negs	r7, r7
    31e2:	19bf      	adds	r7, r7, r6
    31e4:	3a02      	subs	r2, #2
    31e6:	19c9      	adds	r1, r1, r7
    31e8:	9401      	str	r4, [sp, #4]
    31ea:	e79c      	b.n	3126 <__aeabi_ddiv+0x4e6>
    31ec:	2b00      	cmp	r3, #0
    31ee:	d195      	bne.n	311c <__aeabi_ddiv+0x4dc>
    31f0:	2200      	movs	r2, #0
    31f2:	9201      	str	r2, [sp, #4]
    31f4:	e79b      	b.n	312e <__aeabi_ddiv+0x4ee>
    31f6:	465a      	mov	r2, fp
    31f8:	4b21      	ldr	r3, [pc, #132]	; (3280 <__aeabi_ddiv+0x640>)
    31fa:	1b5b      	subs	r3, r3, r5
    31fc:	40da      	lsrs	r2, r3
    31fe:	2f20      	cmp	r7, #32
    3200:	d027      	beq.n	3252 <__aeabi_ddiv+0x612>
    3202:	4b20      	ldr	r3, [pc, #128]	; (3284 <__aeabi_ddiv+0x644>)
    3204:	469c      	mov	ip, r3
    3206:	465b      	mov	r3, fp
    3208:	4465      	add	r5, ip
    320a:	40ab      	lsls	r3, r5
    320c:	4649      	mov	r1, r9
    320e:	430b      	orrs	r3, r1
    3210:	1e59      	subs	r1, r3, #1
    3212:	418b      	sbcs	r3, r1
    3214:	4313      	orrs	r3, r2
    3216:	2207      	movs	r2, #7
    3218:	2700      	movs	r7, #0
    321a:	401a      	ands	r2, r3
    321c:	d007      	beq.n	322e <__aeabi_ddiv+0x5ee>
    321e:	220f      	movs	r2, #15
    3220:	2700      	movs	r7, #0
    3222:	401a      	ands	r2, r3
    3224:	2a04      	cmp	r2, #4
    3226:	d1b8      	bne.n	319a <__aeabi_ddiv+0x55a>
    3228:	077a      	lsls	r2, r7, #29
    322a:	027f      	lsls	r7, r7, #9
    322c:	0b3f      	lsrs	r7, r7, #12
    322e:	08db      	lsrs	r3, r3, #3
    3230:	4313      	orrs	r3, r2
    3232:	4699      	mov	r9, r3
    3234:	2201      	movs	r2, #1
    3236:	4653      	mov	r3, sl
    3238:	401a      	ands	r2, r3
    323a:	2300      	movs	r3, #0
    323c:	e568      	b.n	2d10 <__aeabi_ddiv+0xd0>
    323e:	4541      	cmp	r1, r8
    3240:	d8bb      	bhi.n	31ba <__aeabi_ddiv+0x57a>
    3242:	4693      	mov	fp, r2
    3244:	2700      	movs	r7, #0
    3246:	e667      	b.n	2f18 <__aeabi_ddiv+0x2d8>
    3248:	9c01      	ldr	r4, [sp, #4]
    324a:	429c      	cmp	r4, r3
    324c:	d3c3      	bcc.n	31d6 <__aeabi_ddiv+0x596>
    324e:	4691      	mov	r9, r2
    3250:	e76d      	b.n	312e <__aeabi_ddiv+0x4ee>
    3252:	2300      	movs	r3, #0
    3254:	e7da      	b.n	320c <__aeabi_ddiv+0x5cc>
    3256:	2780      	movs	r7, #128	; 0x80
    3258:	465b      	mov	r3, fp
    325a:	033f      	lsls	r7, r7, #12
    325c:	431f      	orrs	r7, r3
    325e:	033f      	lsls	r7, r7, #12
    3260:	0b3f      	lsrs	r7, r7, #12
    3262:	9a01      	ldr	r2, [sp, #4]
    3264:	4b03      	ldr	r3, [pc, #12]	; (3274 <__aeabi_ddiv+0x634>)
    3266:	e553      	b.n	2d10 <__aeabi_ddiv+0xd0>
    3268:	000003ff 	.word	0x000003ff
    326c:	feffffff 	.word	0xfeffffff
    3270:	000007fe 	.word	0x000007fe
    3274:	000007ff 	.word	0x000007ff
    3278:	fffffc02 	.word	0xfffffc02
    327c:	0000041e 	.word	0x0000041e
    3280:	fffffbe2 	.word	0xfffffbe2
    3284:	0000043e 	.word	0x0000043e

00003288 <__aeabi_dmul>:
    3288:	b5f0      	push	{r4, r5, r6, r7, lr}
    328a:	465f      	mov	r7, fp
    328c:	4656      	mov	r6, sl
    328e:	464d      	mov	r5, r9
    3290:	4644      	mov	r4, r8
    3292:	b4f0      	push	{r4, r5, r6, r7}
    3294:	1c05      	adds	r5, r0, #0
    3296:	1c06      	adds	r6, r0, #0
    3298:	0308      	lsls	r0, r1, #12
    329a:	b087      	sub	sp, #28
    329c:	4699      	mov	r9, r3
    329e:	004f      	lsls	r7, r1, #1
    32a0:	0b03      	lsrs	r3, r0, #12
    32a2:	0fcc      	lsrs	r4, r1, #31
    32a4:	4692      	mov	sl, r2
    32a6:	469b      	mov	fp, r3
    32a8:	0d7f      	lsrs	r7, r7, #21
    32aa:	9401      	str	r4, [sp, #4]
    32ac:	d067      	beq.n	337e <__aeabi_dmul+0xf6>
    32ae:	4b6c      	ldr	r3, [pc, #432]	; (3460 <__aeabi_dmul+0x1d8>)
    32b0:	429f      	cmp	r7, r3
    32b2:	d036      	beq.n	3322 <__aeabi_dmul+0x9a>
    32b4:	2080      	movs	r0, #128	; 0x80
    32b6:	465b      	mov	r3, fp
    32b8:	0340      	lsls	r0, r0, #13
    32ba:	4318      	orrs	r0, r3
    32bc:	00c0      	lsls	r0, r0, #3
    32be:	0f6b      	lsrs	r3, r5, #29
    32c0:	4318      	orrs	r0, r3
    32c2:	4b68      	ldr	r3, [pc, #416]	; (3464 <__aeabi_dmul+0x1dc>)
    32c4:	4683      	mov	fp, r0
    32c6:	469c      	mov	ip, r3
    32c8:	2300      	movs	r3, #0
    32ca:	4698      	mov	r8, r3
    32cc:	00ee      	lsls	r6, r5, #3
    32ce:	4467      	add	r7, ip
    32d0:	9300      	str	r3, [sp, #0]
    32d2:	464b      	mov	r3, r9
    32d4:	4649      	mov	r1, r9
    32d6:	031d      	lsls	r5, r3, #12
    32d8:	0fc9      	lsrs	r1, r1, #31
    32da:	005b      	lsls	r3, r3, #1
    32dc:	4652      	mov	r2, sl
    32de:	0b2d      	lsrs	r5, r5, #12
    32e0:	0d5b      	lsrs	r3, r3, #21
    32e2:	4689      	mov	r9, r1
    32e4:	d100      	bne.n	32e8 <__aeabi_dmul+0x60>
    32e6:	e06e      	b.n	33c6 <__aeabi_dmul+0x13e>
    32e8:	495d      	ldr	r1, [pc, #372]	; (3460 <__aeabi_dmul+0x1d8>)
    32ea:	428b      	cmp	r3, r1
    32ec:	d064      	beq.n	33b8 <__aeabi_dmul+0x130>
    32ee:	2080      	movs	r0, #128	; 0x80
    32f0:	495c      	ldr	r1, [pc, #368]	; (3464 <__aeabi_dmul+0x1dc>)
    32f2:	0340      	lsls	r0, r0, #13
    32f4:	468c      	mov	ip, r1
    32f6:	2100      	movs	r1, #0
    32f8:	4305      	orrs	r5, r0
    32fa:	00ed      	lsls	r5, r5, #3
    32fc:	0f50      	lsrs	r0, r2, #29
    32fe:	4305      	orrs	r5, r0
    3300:	00d2      	lsls	r2, r2, #3
    3302:	4463      	add	r3, ip
    3304:	4648      	mov	r0, r9
    3306:	18ff      	adds	r7, r7, r3
    3308:	1c7b      	adds	r3, r7, #1
    330a:	469a      	mov	sl, r3
    330c:	9b00      	ldr	r3, [sp, #0]
    330e:	4060      	eors	r0, r4
    3310:	9002      	str	r0, [sp, #8]
    3312:	430b      	orrs	r3, r1
    3314:	2b0f      	cmp	r3, #15
    3316:	d900      	bls.n	331a <__aeabi_dmul+0x92>
    3318:	e0ac      	b.n	3474 <__aeabi_dmul+0x1ec>
    331a:	4853      	ldr	r0, [pc, #332]	; (3468 <__aeabi_dmul+0x1e0>)
    331c:	009b      	lsls	r3, r3, #2
    331e:	58c3      	ldr	r3, [r0, r3]
    3320:	469f      	mov	pc, r3
    3322:	465b      	mov	r3, fp
    3324:	431d      	orrs	r5, r3
    3326:	d000      	beq.n	332a <__aeabi_dmul+0xa2>
    3328:	e082      	b.n	3430 <__aeabi_dmul+0x1a8>
    332a:	2308      	movs	r3, #8
    332c:	9300      	str	r3, [sp, #0]
    332e:	2300      	movs	r3, #0
    3330:	469b      	mov	fp, r3
    3332:	3302      	adds	r3, #2
    3334:	2600      	movs	r6, #0
    3336:	4698      	mov	r8, r3
    3338:	e7cb      	b.n	32d2 <__aeabi_dmul+0x4a>
    333a:	9b02      	ldr	r3, [sp, #8]
    333c:	9301      	str	r3, [sp, #4]
    333e:	4643      	mov	r3, r8
    3340:	2b02      	cmp	r3, #2
    3342:	d159      	bne.n	33f8 <__aeabi_dmul+0x170>
    3344:	2401      	movs	r4, #1
    3346:	2500      	movs	r5, #0
    3348:	2600      	movs	r6, #0
    334a:	9b01      	ldr	r3, [sp, #4]
    334c:	401c      	ands	r4, r3
    334e:	4b44      	ldr	r3, [pc, #272]	; (3460 <__aeabi_dmul+0x1d8>)
    3350:	2100      	movs	r1, #0
    3352:	032d      	lsls	r5, r5, #12
    3354:	0d0a      	lsrs	r2, r1, #20
    3356:	0512      	lsls	r2, r2, #20
    3358:	0b2d      	lsrs	r5, r5, #12
    335a:	4315      	orrs	r5, r2
    335c:	4a43      	ldr	r2, [pc, #268]	; (346c <__aeabi_dmul+0x1e4>)
    335e:	051b      	lsls	r3, r3, #20
    3360:	4015      	ands	r5, r2
    3362:	431d      	orrs	r5, r3
    3364:	006d      	lsls	r5, r5, #1
    3366:	07e4      	lsls	r4, r4, #31
    3368:	086d      	lsrs	r5, r5, #1
    336a:	4325      	orrs	r5, r4
    336c:	1c30      	adds	r0, r6, #0
    336e:	1c29      	adds	r1, r5, #0
    3370:	b007      	add	sp, #28
    3372:	bc3c      	pop	{r2, r3, r4, r5}
    3374:	4690      	mov	r8, r2
    3376:	4699      	mov	r9, r3
    3378:	46a2      	mov	sl, r4
    337a:	46ab      	mov	fp, r5
    337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    337e:	432b      	orrs	r3, r5
    3380:	d04e      	beq.n	3420 <__aeabi_dmul+0x198>
    3382:	465b      	mov	r3, fp
    3384:	2b00      	cmp	r3, #0
    3386:	d100      	bne.n	338a <__aeabi_dmul+0x102>
    3388:	e185      	b.n	3696 <__aeabi_dmul+0x40e>
    338a:	4658      	mov	r0, fp
    338c:	f000 fbd8 	bl	3b40 <__clzsi2>
    3390:	1c02      	adds	r2, r0, #0
    3392:	2328      	movs	r3, #40	; 0x28
    3394:	1c29      	adds	r1, r5, #0
    3396:	1a9b      	subs	r3, r3, r2
    3398:	1c16      	adds	r6, r2, #0
    339a:	4658      	mov	r0, fp
    339c:	40d9      	lsrs	r1, r3
    339e:	3e08      	subs	r6, #8
    33a0:	40b0      	lsls	r0, r6
    33a2:	1c0b      	adds	r3, r1, #0
    33a4:	40b5      	lsls	r5, r6
    33a6:	4303      	orrs	r3, r0
    33a8:	469b      	mov	fp, r3
    33aa:	1c2e      	adds	r6, r5, #0
    33ac:	2300      	movs	r3, #0
    33ae:	4f30      	ldr	r7, [pc, #192]	; (3470 <__aeabi_dmul+0x1e8>)
    33b0:	9300      	str	r3, [sp, #0]
    33b2:	1abf      	subs	r7, r7, r2
    33b4:	4698      	mov	r8, r3
    33b6:	e78c      	b.n	32d2 <__aeabi_dmul+0x4a>
    33b8:	4651      	mov	r1, sl
    33ba:	4329      	orrs	r1, r5
    33bc:	d12e      	bne.n	341c <__aeabi_dmul+0x194>
    33be:	2500      	movs	r5, #0
    33c0:	2200      	movs	r2, #0
    33c2:	2102      	movs	r1, #2
    33c4:	e79e      	b.n	3304 <__aeabi_dmul+0x7c>
    33c6:	4651      	mov	r1, sl
    33c8:	4329      	orrs	r1, r5
    33ca:	d023      	beq.n	3414 <__aeabi_dmul+0x18c>
    33cc:	2d00      	cmp	r5, #0
    33ce:	d100      	bne.n	33d2 <__aeabi_dmul+0x14a>
    33d0:	e154      	b.n	367c <__aeabi_dmul+0x3f4>
    33d2:	1c28      	adds	r0, r5, #0
    33d4:	f000 fbb4 	bl	3b40 <__clzsi2>
    33d8:	1c03      	adds	r3, r0, #0
    33da:	2128      	movs	r1, #40	; 0x28
    33dc:	4650      	mov	r0, sl
    33de:	1ac9      	subs	r1, r1, r3
    33e0:	1c1a      	adds	r2, r3, #0
    33e2:	40c8      	lsrs	r0, r1
    33e4:	4651      	mov	r1, sl
    33e6:	3a08      	subs	r2, #8
    33e8:	4091      	lsls	r1, r2
    33ea:	4095      	lsls	r5, r2
    33ec:	1c0a      	adds	r2, r1, #0
    33ee:	4305      	orrs	r5, r0
    33f0:	481f      	ldr	r0, [pc, #124]	; (3470 <__aeabi_dmul+0x1e8>)
    33f2:	2100      	movs	r1, #0
    33f4:	1ac3      	subs	r3, r0, r3
    33f6:	e785      	b.n	3304 <__aeabi_dmul+0x7c>
    33f8:	2b03      	cmp	r3, #3
    33fa:	d100      	bne.n	33fe <__aeabi_dmul+0x176>
    33fc:	e1c2      	b.n	3784 <__aeabi_dmul+0x4fc>
    33fe:	2b01      	cmp	r3, #1
    3400:	d000      	beq.n	3404 <__aeabi_dmul+0x17c>
    3402:	e16d      	b.n	36e0 <__aeabi_dmul+0x458>
    3404:	4644      	mov	r4, r8
    3406:	9b01      	ldr	r3, [sp, #4]
    3408:	2500      	movs	r5, #0
    340a:	401c      	ands	r4, r3
    340c:	b2e4      	uxtb	r4, r4
    340e:	2300      	movs	r3, #0
    3410:	2600      	movs	r6, #0
    3412:	e79d      	b.n	3350 <__aeabi_dmul+0xc8>
    3414:	2500      	movs	r5, #0
    3416:	2200      	movs	r2, #0
    3418:	2101      	movs	r1, #1
    341a:	e773      	b.n	3304 <__aeabi_dmul+0x7c>
    341c:	2103      	movs	r1, #3
    341e:	e771      	b.n	3304 <__aeabi_dmul+0x7c>
    3420:	2304      	movs	r3, #4
    3422:	9300      	str	r3, [sp, #0]
    3424:	2300      	movs	r3, #0
    3426:	469b      	mov	fp, r3
    3428:	3301      	adds	r3, #1
    342a:	2600      	movs	r6, #0
    342c:	4698      	mov	r8, r3
    342e:	e750      	b.n	32d2 <__aeabi_dmul+0x4a>
    3430:	230c      	movs	r3, #12
    3432:	9300      	str	r3, [sp, #0]
    3434:	3b09      	subs	r3, #9
    3436:	4698      	mov	r8, r3
    3438:	e74b      	b.n	32d2 <__aeabi_dmul+0x4a>
    343a:	2580      	movs	r5, #128	; 0x80
    343c:	2400      	movs	r4, #0
    343e:	032d      	lsls	r5, r5, #12
    3440:	2600      	movs	r6, #0
    3442:	4b07      	ldr	r3, [pc, #28]	; (3460 <__aeabi_dmul+0x1d8>)
    3444:	e784      	b.n	3350 <__aeabi_dmul+0xc8>
    3446:	464b      	mov	r3, r9
    3448:	46ab      	mov	fp, r5
    344a:	1c16      	adds	r6, r2, #0
    344c:	9301      	str	r3, [sp, #4]
    344e:	4688      	mov	r8, r1
    3450:	e775      	b.n	333e <__aeabi_dmul+0xb6>
    3452:	9b02      	ldr	r3, [sp, #8]
    3454:	46ab      	mov	fp, r5
    3456:	1c16      	adds	r6, r2, #0
    3458:	9301      	str	r3, [sp, #4]
    345a:	4688      	mov	r8, r1
    345c:	e76f      	b.n	333e <__aeabi_dmul+0xb6>
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	000007ff 	.word	0x000007ff
    3464:	fffffc01 	.word	0xfffffc01
    3468:	00004ee8 	.word	0x00004ee8
    346c:	800fffff 	.word	0x800fffff
    3470:	fffffc0d 	.word	0xfffffc0d
    3474:	0c33      	lsrs	r3, r6, #16
    3476:	0436      	lsls	r6, r6, #16
    3478:	0c36      	lsrs	r6, r6, #16
    347a:	469c      	mov	ip, r3
    347c:	1c33      	adds	r3, r6, #0
    347e:	0c14      	lsrs	r4, r2, #16
    3480:	0412      	lsls	r2, r2, #16
    3482:	0c12      	lsrs	r2, r2, #16
    3484:	4353      	muls	r3, r2
    3486:	4698      	mov	r8, r3
    3488:	4663      	mov	r3, ip
    348a:	4353      	muls	r3, r2
    348c:	4699      	mov	r9, r3
    348e:	4663      	mov	r3, ip
    3490:	4363      	muls	r3, r4
    3492:	9301      	str	r3, [sp, #4]
    3494:	1c33      	adds	r3, r6, #0
    3496:	4641      	mov	r1, r8
    3498:	4363      	muls	r3, r4
    349a:	0c09      	lsrs	r1, r1, #16
    349c:	444b      	add	r3, r9
    349e:	185b      	adds	r3, r3, r1
    34a0:	4599      	cmp	r9, r3
    34a2:	d905      	bls.n	34b0 <__aeabi_dmul+0x228>
    34a4:	2080      	movs	r0, #128	; 0x80
    34a6:	0240      	lsls	r0, r0, #9
    34a8:	4681      	mov	r9, r0
    34aa:	9901      	ldr	r1, [sp, #4]
    34ac:	4449      	add	r1, r9
    34ae:	9101      	str	r1, [sp, #4]
    34b0:	0c19      	lsrs	r1, r3, #16
    34b2:	9103      	str	r1, [sp, #12]
    34b4:	4641      	mov	r1, r8
    34b6:	0409      	lsls	r1, r1, #16
    34b8:	0c09      	lsrs	r1, r1, #16
    34ba:	041b      	lsls	r3, r3, #16
    34bc:	185b      	adds	r3, r3, r1
    34be:	9304      	str	r3, [sp, #16]
    34c0:	0c2b      	lsrs	r3, r5, #16
    34c2:	4698      	mov	r8, r3
    34c4:	1c33      	adds	r3, r6, #0
    34c6:	042d      	lsls	r5, r5, #16
    34c8:	0c29      	lsrs	r1, r5, #16
    34ca:	434b      	muls	r3, r1
    34cc:	4660      	mov	r0, ip
    34ce:	9300      	str	r3, [sp, #0]
    34d0:	4643      	mov	r3, r8
    34d2:	4665      	mov	r5, ip
    34d4:	4358      	muls	r0, r3
    34d6:	435e      	muls	r6, r3
    34d8:	9b00      	ldr	r3, [sp, #0]
    34da:	434d      	muls	r5, r1
    34dc:	0c1b      	lsrs	r3, r3, #16
    34de:	4699      	mov	r9, r3
    34e0:	19ae      	adds	r6, r5, r6
    34e2:	444e      	add	r6, r9
    34e4:	4684      	mov	ip, r0
    34e6:	42b5      	cmp	r5, r6
    34e8:	d903      	bls.n	34f2 <__aeabi_dmul+0x26a>
    34ea:	2380      	movs	r3, #128	; 0x80
    34ec:	025b      	lsls	r3, r3, #9
    34ee:	4699      	mov	r9, r3
    34f0:	44cc      	add	ip, r9
    34f2:	0c35      	lsrs	r5, r6, #16
    34f4:	1c2b      	adds	r3, r5, #0
    34f6:	9803      	ldr	r0, [sp, #12]
    34f8:	4463      	add	r3, ip
    34fa:	4684      	mov	ip, r0
    34fc:	9305      	str	r3, [sp, #20]
    34fe:	9b00      	ldr	r3, [sp, #0]
    3500:	0436      	lsls	r6, r6, #16
    3502:	041b      	lsls	r3, r3, #16
    3504:	0c1b      	lsrs	r3, r3, #16
    3506:	18f3      	adds	r3, r6, r3
    3508:	449c      	add	ip, r3
    350a:	4660      	mov	r0, ip
    350c:	9003      	str	r0, [sp, #12]
    350e:	4658      	mov	r0, fp
    3510:	0405      	lsls	r5, r0, #16
    3512:	0c06      	lsrs	r6, r0, #16
    3514:	0c28      	lsrs	r0, r5, #16
    3516:	4684      	mov	ip, r0
    3518:	4350      	muls	r0, r2
    351a:	1c35      	adds	r5, r6, #0
    351c:	4681      	mov	r9, r0
    351e:	4660      	mov	r0, ip
    3520:	4365      	muls	r5, r4
    3522:	4344      	muls	r4, r0
    3524:	4648      	mov	r0, r9
    3526:	0c00      	lsrs	r0, r0, #16
    3528:	4683      	mov	fp, r0
    352a:	4372      	muls	r2, r6
    352c:	1914      	adds	r4, r2, r4
    352e:	445c      	add	r4, fp
    3530:	42a2      	cmp	r2, r4
    3532:	d903      	bls.n	353c <__aeabi_dmul+0x2b4>
    3534:	2280      	movs	r2, #128	; 0x80
    3536:	0252      	lsls	r2, r2, #9
    3538:	4693      	mov	fp, r2
    353a:	445d      	add	r5, fp
    353c:	0c22      	lsrs	r2, r4, #16
    353e:	18ad      	adds	r5, r5, r2
    3540:	464a      	mov	r2, r9
    3542:	0412      	lsls	r2, r2, #16
    3544:	0c12      	lsrs	r2, r2, #16
    3546:	0424      	lsls	r4, r4, #16
    3548:	4640      	mov	r0, r8
    354a:	18a4      	adds	r4, r4, r2
    354c:	4662      	mov	r2, ip
    354e:	434a      	muls	r2, r1
    3550:	4371      	muls	r1, r6
    3552:	4346      	muls	r6, r0
    3554:	4660      	mov	r0, ip
    3556:	9600      	str	r6, [sp, #0]
    3558:	4646      	mov	r6, r8
    355a:	4370      	muls	r0, r6
    355c:	4680      	mov	r8, r0
    355e:	0c10      	lsrs	r0, r2, #16
    3560:	4684      	mov	ip, r0
    3562:	4488      	add	r8, r1
    3564:	44e0      	add	r8, ip
    3566:	4541      	cmp	r1, r8
    3568:	d905      	bls.n	3576 <__aeabi_dmul+0x2ee>
    356a:	2180      	movs	r1, #128	; 0x80
    356c:	0249      	lsls	r1, r1, #9
    356e:	468c      	mov	ip, r1
    3570:	9900      	ldr	r1, [sp, #0]
    3572:	4461      	add	r1, ip
    3574:	9100      	str	r1, [sp, #0]
    3576:	9801      	ldr	r0, [sp, #4]
    3578:	9903      	ldr	r1, [sp, #12]
    357a:	4684      	mov	ip, r0
    357c:	4461      	add	r1, ip
    357e:	4299      	cmp	r1, r3
    3580:	419b      	sbcs	r3, r3
    3582:	425b      	negs	r3, r3
    3584:	4699      	mov	r9, r3
    3586:	9805      	ldr	r0, [sp, #20]
    3588:	4643      	mov	r3, r8
    358a:	4684      	mov	ip, r0
    358c:	0412      	lsls	r2, r2, #16
    358e:	0c12      	lsrs	r2, r2, #16
    3590:	041b      	lsls	r3, r3, #16
    3592:	189b      	adds	r3, r3, r2
    3594:	4463      	add	r3, ip
    3596:	469c      	mov	ip, r3
    3598:	46ab      	mov	fp, r5
    359a:	4283      	cmp	r3, r0
    359c:	419b      	sbcs	r3, r3
    359e:	4640      	mov	r0, r8
    35a0:	190a      	adds	r2, r1, r4
    35a2:	44cc      	add	ip, r9
    35a4:	42a2      	cmp	r2, r4
    35a6:	4189      	sbcs	r1, r1
    35a8:	44e3      	add	fp, ip
    35aa:	45cc      	cmp	ip, r9
    35ac:	41b6      	sbcs	r6, r6
    35ae:	465c      	mov	r4, fp
    35b0:	0c00      	lsrs	r0, r0, #16
    35b2:	4680      	mov	r8, r0
    35b4:	4249      	negs	r1, r1
    35b6:	4276      	negs	r6, r6
    35b8:	425b      	negs	r3, r3
    35ba:	1864      	adds	r4, r4, r1
    35bc:	4333      	orrs	r3, r6
    35be:	4498      	add	r8, r3
    35c0:	428c      	cmp	r4, r1
    35c2:	4189      	sbcs	r1, r1
    35c4:	45ab      	cmp	fp, r5
    35c6:	419b      	sbcs	r3, r3
    35c8:	4249      	negs	r1, r1
    35ca:	425b      	negs	r3, r3
    35cc:	4319      	orrs	r1, r3
    35ce:	1c0d      	adds	r5, r1, #0
    35d0:	9b00      	ldr	r3, [sp, #0]
    35d2:	4445      	add	r5, r8
    35d4:	18ee      	adds	r6, r5, r3
    35d6:	0276      	lsls	r6, r6, #9
    35d8:	0de5      	lsrs	r5, r4, #23
    35da:	432e      	orrs	r6, r5
    35dc:	46b3      	mov	fp, r6
    35de:	9b04      	ldr	r3, [sp, #16]
    35e0:	0256      	lsls	r6, r2, #9
    35e2:	431e      	orrs	r6, r3
    35e4:	1e73      	subs	r3, r6, #1
    35e6:	419e      	sbcs	r6, r3
    35e8:	465b      	mov	r3, fp
    35ea:	0dd2      	lsrs	r2, r2, #23
    35ec:	4332      	orrs	r2, r6
    35ee:	0266      	lsls	r6, r4, #9
    35f0:	4316      	orrs	r6, r2
    35f2:	01db      	lsls	r3, r3, #7
    35f4:	d50a      	bpl.n	360c <__aeabi_dmul+0x384>
    35f6:	2301      	movs	r3, #1
    35f8:	4033      	ands	r3, r6
    35fa:	0876      	lsrs	r6, r6, #1
    35fc:	431e      	orrs	r6, r3
    35fe:	465b      	mov	r3, fp
    3600:	07db      	lsls	r3, r3, #31
    3602:	431e      	orrs	r6, r3
    3604:	465b      	mov	r3, fp
    3606:	085b      	lsrs	r3, r3, #1
    3608:	469b      	mov	fp, r3
    360a:	4657      	mov	r7, sl
    360c:	4b63      	ldr	r3, [pc, #396]	; (379c <__aeabi_dmul+0x514>)
    360e:	18fb      	adds	r3, r7, r3
    3610:	2b00      	cmp	r3, #0
    3612:	dd5a      	ble.n	36ca <__aeabi_dmul+0x442>
    3614:	0772      	lsls	r2, r6, #29
    3616:	d009      	beq.n	362c <__aeabi_dmul+0x3a4>
    3618:	220f      	movs	r2, #15
    361a:	4032      	ands	r2, r6
    361c:	2a04      	cmp	r2, #4
    361e:	d005      	beq.n	362c <__aeabi_dmul+0x3a4>
    3620:	1d32      	adds	r2, r6, #4
    3622:	42b2      	cmp	r2, r6
    3624:	41b6      	sbcs	r6, r6
    3626:	4276      	negs	r6, r6
    3628:	44b3      	add	fp, r6
    362a:	1c16      	adds	r6, r2, #0
    362c:	465a      	mov	r2, fp
    362e:	01d2      	lsls	r2, r2, #7
    3630:	d506      	bpl.n	3640 <__aeabi_dmul+0x3b8>
    3632:	465a      	mov	r2, fp
    3634:	4b5a      	ldr	r3, [pc, #360]	; (37a0 <__aeabi_dmul+0x518>)
    3636:	401a      	ands	r2, r3
    3638:	2380      	movs	r3, #128	; 0x80
    363a:	4693      	mov	fp, r2
    363c:	00db      	lsls	r3, r3, #3
    363e:	18fb      	adds	r3, r7, r3
    3640:	4a58      	ldr	r2, [pc, #352]	; (37a4 <__aeabi_dmul+0x51c>)
    3642:	4293      	cmp	r3, r2
    3644:	dd34      	ble.n	36b0 <__aeabi_dmul+0x428>
    3646:	2401      	movs	r4, #1
    3648:	9b02      	ldr	r3, [sp, #8]
    364a:	2500      	movs	r5, #0
    364c:	401c      	ands	r4, r3
    364e:	2600      	movs	r6, #0
    3650:	4b55      	ldr	r3, [pc, #340]	; (37a8 <__aeabi_dmul+0x520>)
    3652:	e67d      	b.n	3350 <__aeabi_dmul+0xc8>
    3654:	2080      	movs	r0, #128	; 0x80
    3656:	465b      	mov	r3, fp
    3658:	0300      	lsls	r0, r0, #12
    365a:	4203      	tst	r3, r0
    365c:	d008      	beq.n	3670 <__aeabi_dmul+0x3e8>
    365e:	4205      	tst	r5, r0
    3660:	d106      	bne.n	3670 <__aeabi_dmul+0x3e8>
    3662:	4305      	orrs	r5, r0
    3664:	032d      	lsls	r5, r5, #12
    3666:	0b2d      	lsrs	r5, r5, #12
    3668:	464c      	mov	r4, r9
    366a:	1c16      	adds	r6, r2, #0
    366c:	4b4e      	ldr	r3, [pc, #312]	; (37a8 <__aeabi_dmul+0x520>)
    366e:	e66f      	b.n	3350 <__aeabi_dmul+0xc8>
    3670:	465d      	mov	r5, fp
    3672:	4305      	orrs	r5, r0
    3674:	032d      	lsls	r5, r5, #12
    3676:	0b2d      	lsrs	r5, r5, #12
    3678:	4b4b      	ldr	r3, [pc, #300]	; (37a8 <__aeabi_dmul+0x520>)
    367a:	e669      	b.n	3350 <__aeabi_dmul+0xc8>
    367c:	4650      	mov	r0, sl
    367e:	f000 fa5f 	bl	3b40 <__clzsi2>
    3682:	1c03      	adds	r3, r0, #0
    3684:	3320      	adds	r3, #32
    3686:	2b27      	cmp	r3, #39	; 0x27
    3688:	dc00      	bgt.n	368c <__aeabi_dmul+0x404>
    368a:	e6a6      	b.n	33da <__aeabi_dmul+0x152>
    368c:	4655      	mov	r5, sl
    368e:	3808      	subs	r0, #8
    3690:	4085      	lsls	r5, r0
    3692:	2200      	movs	r2, #0
    3694:	e6ac      	b.n	33f0 <__aeabi_dmul+0x168>
    3696:	1c28      	adds	r0, r5, #0
    3698:	f000 fa52 	bl	3b40 <__clzsi2>
    369c:	1c02      	adds	r2, r0, #0
    369e:	3220      	adds	r2, #32
    36a0:	2a27      	cmp	r2, #39	; 0x27
    36a2:	dc00      	bgt.n	36a6 <__aeabi_dmul+0x41e>
    36a4:	e675      	b.n	3392 <__aeabi_dmul+0x10a>
    36a6:	3808      	subs	r0, #8
    36a8:	4085      	lsls	r5, r0
    36aa:	2600      	movs	r6, #0
    36ac:	46ab      	mov	fp, r5
    36ae:	e67d      	b.n	33ac <__aeabi_dmul+0x124>
    36b0:	465a      	mov	r2, fp
    36b2:	08f6      	lsrs	r6, r6, #3
    36b4:	0752      	lsls	r2, r2, #29
    36b6:	4316      	orrs	r6, r2
    36b8:	465a      	mov	r2, fp
    36ba:	2401      	movs	r4, #1
    36bc:	0255      	lsls	r5, r2, #9
    36be:	9a02      	ldr	r2, [sp, #8]
    36c0:	055b      	lsls	r3, r3, #21
    36c2:	0b2d      	lsrs	r5, r5, #12
    36c4:	0d5b      	lsrs	r3, r3, #21
    36c6:	4014      	ands	r4, r2
    36c8:	e642      	b.n	3350 <__aeabi_dmul+0xc8>
    36ca:	4d38      	ldr	r5, [pc, #224]	; (37ac <__aeabi_dmul+0x524>)
    36cc:	1bed      	subs	r5, r5, r7
    36ce:	2d38      	cmp	r5, #56	; 0x38
    36d0:	dd0a      	ble.n	36e8 <__aeabi_dmul+0x460>
    36d2:	2401      	movs	r4, #1
    36d4:	9b02      	ldr	r3, [sp, #8]
    36d6:	2500      	movs	r5, #0
    36d8:	401c      	ands	r4, r3
    36da:	2600      	movs	r6, #0
    36dc:	2300      	movs	r3, #0
    36de:	e637      	b.n	3350 <__aeabi_dmul+0xc8>
    36e0:	9b01      	ldr	r3, [sp, #4]
    36e2:	4657      	mov	r7, sl
    36e4:	9302      	str	r3, [sp, #8]
    36e6:	e791      	b.n	360c <__aeabi_dmul+0x384>
    36e8:	2d1f      	cmp	r5, #31
    36ea:	dc25      	bgt.n	3738 <__aeabi_dmul+0x4b0>
    36ec:	4b30      	ldr	r3, [pc, #192]	; (37b0 <__aeabi_dmul+0x528>)
    36ee:	1c32      	adds	r2, r6, #0
    36f0:	469c      	mov	ip, r3
    36f2:	4467      	add	r7, ip
    36f4:	40be      	lsls	r6, r7
    36f6:	465b      	mov	r3, fp
    36f8:	40bb      	lsls	r3, r7
    36fa:	1c37      	adds	r7, r6, #0
    36fc:	40ea      	lsrs	r2, r5
    36fe:	1e7e      	subs	r6, r7, #1
    3700:	41b7      	sbcs	r7, r6
    3702:	4313      	orrs	r3, r2
    3704:	433b      	orrs	r3, r7
    3706:	1c1e      	adds	r6, r3, #0
    3708:	465b      	mov	r3, fp
    370a:	40eb      	lsrs	r3, r5
    370c:	1c1d      	adds	r5, r3, #0
    370e:	0773      	lsls	r3, r6, #29
    3710:	d009      	beq.n	3726 <__aeabi_dmul+0x49e>
    3712:	230f      	movs	r3, #15
    3714:	4033      	ands	r3, r6
    3716:	2b04      	cmp	r3, #4
    3718:	d005      	beq.n	3726 <__aeabi_dmul+0x49e>
    371a:	1d33      	adds	r3, r6, #4
    371c:	42b3      	cmp	r3, r6
    371e:	41b6      	sbcs	r6, r6
    3720:	4276      	negs	r6, r6
    3722:	19ad      	adds	r5, r5, r6
    3724:	1c1e      	adds	r6, r3, #0
    3726:	022b      	lsls	r3, r5, #8
    3728:	d520      	bpl.n	376c <__aeabi_dmul+0x4e4>
    372a:	2401      	movs	r4, #1
    372c:	9b02      	ldr	r3, [sp, #8]
    372e:	2500      	movs	r5, #0
    3730:	401c      	ands	r4, r3
    3732:	2600      	movs	r6, #0
    3734:	2301      	movs	r3, #1
    3736:	e60b      	b.n	3350 <__aeabi_dmul+0xc8>
    3738:	465a      	mov	r2, fp
    373a:	4b1e      	ldr	r3, [pc, #120]	; (37b4 <__aeabi_dmul+0x52c>)
    373c:	1bdb      	subs	r3, r3, r7
    373e:	40da      	lsrs	r2, r3
    3740:	1c13      	adds	r3, r2, #0
    3742:	2d20      	cmp	r5, #32
    3744:	d01c      	beq.n	3780 <__aeabi_dmul+0x4f8>
    3746:	4a1c      	ldr	r2, [pc, #112]	; (37b8 <__aeabi_dmul+0x530>)
    3748:	4694      	mov	ip, r2
    374a:	465a      	mov	r2, fp
    374c:	4467      	add	r7, ip
    374e:	40ba      	lsls	r2, r7
    3750:	1c17      	adds	r7, r2, #0
    3752:	433e      	orrs	r6, r7
    3754:	1e72      	subs	r2, r6, #1
    3756:	4196      	sbcs	r6, r2
    3758:	431e      	orrs	r6, r3
    375a:	2307      	movs	r3, #7
    375c:	2500      	movs	r5, #0
    375e:	4033      	ands	r3, r6
    3760:	d007      	beq.n	3772 <__aeabi_dmul+0x4ea>
    3762:	230f      	movs	r3, #15
    3764:	2500      	movs	r5, #0
    3766:	4033      	ands	r3, r6
    3768:	2b04      	cmp	r3, #4
    376a:	d1d6      	bne.n	371a <__aeabi_dmul+0x492>
    376c:	076b      	lsls	r3, r5, #29
    376e:	026d      	lsls	r5, r5, #9
    3770:	0b2d      	lsrs	r5, r5, #12
    3772:	2401      	movs	r4, #1
    3774:	08f6      	lsrs	r6, r6, #3
    3776:	431e      	orrs	r6, r3
    3778:	9b02      	ldr	r3, [sp, #8]
    377a:	401c      	ands	r4, r3
    377c:	2300      	movs	r3, #0
    377e:	e5e7      	b.n	3350 <__aeabi_dmul+0xc8>
    3780:	2700      	movs	r7, #0
    3782:	e7e6      	b.n	3752 <__aeabi_dmul+0x4ca>
    3784:	2580      	movs	r5, #128	; 0x80
    3786:	465b      	mov	r3, fp
    3788:	2401      	movs	r4, #1
    378a:	032d      	lsls	r5, r5, #12
    378c:	431d      	orrs	r5, r3
    378e:	9b01      	ldr	r3, [sp, #4]
    3790:	032d      	lsls	r5, r5, #12
    3792:	4023      	ands	r3, r4
    3794:	1c1c      	adds	r4, r3, #0
    3796:	0b2d      	lsrs	r5, r5, #12
    3798:	4b03      	ldr	r3, [pc, #12]	; (37a8 <__aeabi_dmul+0x520>)
    379a:	e5d9      	b.n	3350 <__aeabi_dmul+0xc8>
    379c:	000003ff 	.word	0x000003ff
    37a0:	feffffff 	.word	0xfeffffff
    37a4:	000007fe 	.word	0x000007fe
    37a8:	000007ff 	.word	0x000007ff
    37ac:	fffffc02 	.word	0xfffffc02
    37b0:	0000041e 	.word	0x0000041e
    37b4:	fffffbe2 	.word	0xfffffbe2
    37b8:	0000043e 	.word	0x0000043e

000037bc <__aeabi_d2iz>:
    37bc:	030b      	lsls	r3, r1, #12
    37be:	b530      	push	{r4, r5, lr}
    37c0:	4c13      	ldr	r4, [pc, #76]	; (3810 <__aeabi_d2iz+0x54>)
    37c2:	0b1a      	lsrs	r2, r3, #12
    37c4:	004b      	lsls	r3, r1, #1
    37c6:	1c05      	adds	r5, r0, #0
    37c8:	0d5b      	lsrs	r3, r3, #21
    37ca:	0fc9      	lsrs	r1, r1, #31
    37cc:	2000      	movs	r0, #0
    37ce:	42a3      	cmp	r3, r4
    37d0:	dd10      	ble.n	37f4 <__aeabi_d2iz+0x38>
    37d2:	4810      	ldr	r0, [pc, #64]	; (3814 <__aeabi_d2iz+0x58>)
    37d4:	4283      	cmp	r3, r0
    37d6:	dc0e      	bgt.n	37f6 <__aeabi_d2iz+0x3a>
    37d8:	2080      	movs	r0, #128	; 0x80
    37da:	4c0f      	ldr	r4, [pc, #60]	; (3818 <__aeabi_d2iz+0x5c>)
    37dc:	0340      	lsls	r0, r0, #13
    37de:	4302      	orrs	r2, r0
    37e0:	1ae4      	subs	r4, r4, r3
    37e2:	2c1f      	cmp	r4, #31
    37e4:	dd0a      	ble.n	37fc <__aeabi_d2iz+0x40>
    37e6:	480d      	ldr	r0, [pc, #52]	; (381c <__aeabi_d2iz+0x60>)
    37e8:	1ac3      	subs	r3, r0, r3
    37ea:	40da      	lsrs	r2, r3
    37ec:	1c13      	adds	r3, r2, #0
    37ee:	4248      	negs	r0, r1
    37f0:	4043      	eors	r3, r0
    37f2:	1858      	adds	r0, r3, r1
    37f4:	bd30      	pop	{r4, r5, pc}
    37f6:	4b0a      	ldr	r3, [pc, #40]	; (3820 <__aeabi_d2iz+0x64>)
    37f8:	18c8      	adds	r0, r1, r3
    37fa:	e7fb      	b.n	37f4 <__aeabi_d2iz+0x38>
    37fc:	1c28      	adds	r0, r5, #0
    37fe:	40e0      	lsrs	r0, r4
    3800:	4c08      	ldr	r4, [pc, #32]	; (3824 <__aeabi_d2iz+0x68>)
    3802:	46a4      	mov	ip, r4
    3804:	4463      	add	r3, ip
    3806:	409a      	lsls	r2, r3
    3808:	1c13      	adds	r3, r2, #0
    380a:	4303      	orrs	r3, r0
    380c:	e7ef      	b.n	37ee <__aeabi_d2iz+0x32>
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	000003fe 	.word	0x000003fe
    3814:	0000041d 	.word	0x0000041d
    3818:	00000433 	.word	0x00000433
    381c:	00000413 	.word	0x00000413
    3820:	7fffffff 	.word	0x7fffffff
    3824:	fffffbed 	.word	0xfffffbed

00003828 <__aeabi_i2d>:
    3828:	b538      	push	{r3, r4, r5, lr}
    382a:	1e04      	subs	r4, r0, #0
    382c:	d016      	beq.n	385c <__aeabi_i2d+0x34>
    382e:	0fc5      	lsrs	r5, r0, #31
    3830:	d000      	beq.n	3834 <__aeabi_i2d+0xc>
    3832:	4244      	negs	r4, r0
    3834:	1c20      	adds	r0, r4, #0
    3836:	f000 f983 	bl	3b40 <__clzsi2>
    383a:	4b17      	ldr	r3, [pc, #92]	; (3898 <__aeabi_i2d+0x70>)
    383c:	1a1b      	subs	r3, r3, r0
    383e:	280a      	cmp	r0, #10
    3840:	dc21      	bgt.n	3886 <__aeabi_i2d+0x5e>
    3842:	1c02      	adds	r2, r0, #0
    3844:	1c21      	adds	r1, r4, #0
    3846:	3215      	adds	r2, #21
    3848:	4091      	lsls	r1, r2
    384a:	1c0a      	adds	r2, r1, #0
    384c:	210b      	movs	r1, #11
    384e:	1a08      	subs	r0, r1, r0
    3850:	40c4      	lsrs	r4, r0
    3852:	055b      	lsls	r3, r3, #21
    3854:	0324      	lsls	r4, r4, #12
    3856:	0b24      	lsrs	r4, r4, #12
    3858:	0d5b      	lsrs	r3, r3, #21
    385a:	e003      	b.n	3864 <__aeabi_i2d+0x3c>
    385c:	2500      	movs	r5, #0
    385e:	2300      	movs	r3, #0
    3860:	2400      	movs	r4, #0
    3862:	2200      	movs	r2, #0
    3864:	2100      	movs	r1, #0
    3866:	1c10      	adds	r0, r2, #0
    3868:	0324      	lsls	r4, r4, #12
    386a:	0d0a      	lsrs	r2, r1, #20
    386c:	0512      	lsls	r2, r2, #20
    386e:	0b24      	lsrs	r4, r4, #12
    3870:	4314      	orrs	r4, r2
    3872:	4a0a      	ldr	r2, [pc, #40]	; (389c <__aeabi_i2d+0x74>)
    3874:	051b      	lsls	r3, r3, #20
    3876:	4014      	ands	r4, r2
    3878:	431c      	orrs	r4, r3
    387a:	0064      	lsls	r4, r4, #1
    387c:	07ed      	lsls	r5, r5, #31
    387e:	0864      	lsrs	r4, r4, #1
    3880:	432c      	orrs	r4, r5
    3882:	1c21      	adds	r1, r4, #0
    3884:	bd38      	pop	{r3, r4, r5, pc}
    3886:	380b      	subs	r0, #11
    3888:	4084      	lsls	r4, r0
    388a:	055b      	lsls	r3, r3, #21
    388c:	0324      	lsls	r4, r4, #12
    388e:	0b24      	lsrs	r4, r4, #12
    3890:	0d5b      	lsrs	r3, r3, #21
    3892:	2200      	movs	r2, #0
    3894:	e7e6      	b.n	3864 <__aeabi_i2d+0x3c>
    3896:	46c0      	nop			; (mov r8, r8)
    3898:	0000041e 	.word	0x0000041e
    389c:	800fffff 	.word	0x800fffff

000038a0 <__aeabi_ui2d>:
    38a0:	b510      	push	{r4, lr}
    38a2:	1e04      	subs	r4, r0, #0
    38a4:	d010      	beq.n	38c8 <__aeabi_ui2d+0x28>
    38a6:	f000 f94b 	bl	3b40 <__clzsi2>
    38aa:	4a14      	ldr	r2, [pc, #80]	; (38fc <__aeabi_ui2d+0x5c>)
    38ac:	1a12      	subs	r2, r2, r0
    38ae:	280a      	cmp	r0, #10
    38b0:	dc1a      	bgt.n	38e8 <__aeabi_ui2d+0x48>
    38b2:	230b      	movs	r3, #11
    38b4:	1c21      	adds	r1, r4, #0
    38b6:	1a1b      	subs	r3, r3, r0
    38b8:	40d9      	lsrs	r1, r3
    38ba:	3015      	adds	r0, #21
    38bc:	030b      	lsls	r3, r1, #12
    38be:	0552      	lsls	r2, r2, #21
    38c0:	4084      	lsls	r4, r0
    38c2:	0b1b      	lsrs	r3, r3, #12
    38c4:	0d52      	lsrs	r2, r2, #21
    38c6:	e001      	b.n	38cc <__aeabi_ui2d+0x2c>
    38c8:	2200      	movs	r2, #0
    38ca:	2300      	movs	r3, #0
    38cc:	2100      	movs	r1, #0
    38ce:	031b      	lsls	r3, r3, #12
    38d0:	1c20      	adds	r0, r4, #0
    38d2:	0b1c      	lsrs	r4, r3, #12
    38d4:	0d0b      	lsrs	r3, r1, #20
    38d6:	051b      	lsls	r3, r3, #20
    38d8:	4323      	orrs	r3, r4
    38da:	4c09      	ldr	r4, [pc, #36]	; (3900 <__aeabi_ui2d+0x60>)
    38dc:	0512      	lsls	r2, r2, #20
    38de:	4023      	ands	r3, r4
    38e0:	4313      	orrs	r3, r2
    38e2:	005b      	lsls	r3, r3, #1
    38e4:	0859      	lsrs	r1, r3, #1
    38e6:	bd10      	pop	{r4, pc}
    38e8:	1c03      	adds	r3, r0, #0
    38ea:	3b0b      	subs	r3, #11
    38ec:	409c      	lsls	r4, r3
    38ee:	0552      	lsls	r2, r2, #21
    38f0:	0323      	lsls	r3, r4, #12
    38f2:	0b1b      	lsrs	r3, r3, #12
    38f4:	0d52      	lsrs	r2, r2, #21
    38f6:	2400      	movs	r4, #0
    38f8:	e7e8      	b.n	38cc <__aeabi_ui2d+0x2c>
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	0000041e 	.word	0x0000041e
    3900:	800fffff 	.word	0x800fffff

00003904 <__aeabi_f2d>:
    3904:	0042      	lsls	r2, r0, #1
    3906:	0e12      	lsrs	r2, r2, #24
    3908:	1c51      	adds	r1, r2, #1
    390a:	b538      	push	{r3, r4, r5, lr}
    390c:	b2c9      	uxtb	r1, r1
    390e:	0243      	lsls	r3, r0, #9
    3910:	0a5d      	lsrs	r5, r3, #9
    3912:	0fc4      	lsrs	r4, r0, #31
    3914:	2901      	cmp	r1, #1
    3916:	dd15      	ble.n	3944 <__aeabi_f2d+0x40>
    3918:	21e0      	movs	r1, #224	; 0xe0
    391a:	0089      	lsls	r1, r1, #2
    391c:	468c      	mov	ip, r1
    391e:	076d      	lsls	r5, r5, #29
    3920:	0b1b      	lsrs	r3, r3, #12
    3922:	4462      	add	r2, ip
    3924:	2100      	movs	r1, #0
    3926:	1c28      	adds	r0, r5, #0
    3928:	0d0d      	lsrs	r5, r1, #20
    392a:	052d      	lsls	r5, r5, #20
    392c:	432b      	orrs	r3, r5
    392e:	4d1c      	ldr	r5, [pc, #112]	; (39a0 <__aeabi_f2d+0x9c>)
    3930:	0552      	lsls	r2, r2, #21
    3932:	402b      	ands	r3, r5
    3934:	0852      	lsrs	r2, r2, #1
    3936:	4313      	orrs	r3, r2
    3938:	005b      	lsls	r3, r3, #1
    393a:	07e4      	lsls	r4, r4, #31
    393c:	085b      	lsrs	r3, r3, #1
    393e:	4323      	orrs	r3, r4
    3940:	1c19      	adds	r1, r3, #0
    3942:	bd38      	pop	{r3, r4, r5, pc}
    3944:	2a00      	cmp	r2, #0
    3946:	d115      	bne.n	3974 <__aeabi_f2d+0x70>
    3948:	2d00      	cmp	r5, #0
    394a:	d01f      	beq.n	398c <__aeabi_f2d+0x88>
    394c:	1c28      	adds	r0, r5, #0
    394e:	f000 f8f7 	bl	3b40 <__clzsi2>
    3952:	280a      	cmp	r0, #10
    3954:	dc1d      	bgt.n	3992 <__aeabi_f2d+0x8e>
    3956:	230b      	movs	r3, #11
    3958:	1c2a      	adds	r2, r5, #0
    395a:	1a1b      	subs	r3, r3, r0
    395c:	40da      	lsrs	r2, r3
    395e:	1c13      	adds	r3, r2, #0
    3960:	1c02      	adds	r2, r0, #0
    3962:	3215      	adds	r2, #21
    3964:	4095      	lsls	r5, r2
    3966:	4a0f      	ldr	r2, [pc, #60]	; (39a4 <__aeabi_f2d+0xa0>)
    3968:	031b      	lsls	r3, r3, #12
    396a:	1a12      	subs	r2, r2, r0
    396c:	0552      	lsls	r2, r2, #21
    396e:	0b1b      	lsrs	r3, r3, #12
    3970:	0d52      	lsrs	r2, r2, #21
    3972:	e7d7      	b.n	3924 <__aeabi_f2d+0x20>
    3974:	2d00      	cmp	r5, #0
    3976:	d006      	beq.n	3986 <__aeabi_f2d+0x82>
    3978:	2280      	movs	r2, #128	; 0x80
    397a:	0b1b      	lsrs	r3, r3, #12
    397c:	0312      	lsls	r2, r2, #12
    397e:	4313      	orrs	r3, r2
    3980:	076d      	lsls	r5, r5, #29
    3982:	4a09      	ldr	r2, [pc, #36]	; (39a8 <__aeabi_f2d+0xa4>)
    3984:	e7ce      	b.n	3924 <__aeabi_f2d+0x20>
    3986:	4a08      	ldr	r2, [pc, #32]	; (39a8 <__aeabi_f2d+0xa4>)
    3988:	2300      	movs	r3, #0
    398a:	e7cb      	b.n	3924 <__aeabi_f2d+0x20>
    398c:	2200      	movs	r2, #0
    398e:	2300      	movs	r3, #0
    3990:	e7c8      	b.n	3924 <__aeabi_f2d+0x20>
    3992:	1c03      	adds	r3, r0, #0
    3994:	3b0b      	subs	r3, #11
    3996:	409d      	lsls	r5, r3
    3998:	1c2b      	adds	r3, r5, #0
    399a:	2500      	movs	r5, #0
    399c:	e7e3      	b.n	3966 <__aeabi_f2d+0x62>
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	800fffff 	.word	0x800fffff
    39a4:	00000389 	.word	0x00000389
    39a8:	000007ff 	.word	0x000007ff

000039ac <__aeabi_d2f>:
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	030b      	lsls	r3, r1, #12
    39b0:	004d      	lsls	r5, r1, #1
    39b2:	0f44      	lsrs	r4, r0, #29
    39b4:	0d6d      	lsrs	r5, r5, #21
    39b6:	0a5b      	lsrs	r3, r3, #9
    39b8:	4323      	orrs	r3, r4
    39ba:	1c6c      	adds	r4, r5, #1
    39bc:	0564      	lsls	r4, r4, #21
    39be:	0fc9      	lsrs	r1, r1, #31
    39c0:	00c2      	lsls	r2, r0, #3
    39c2:	0d64      	lsrs	r4, r4, #21
    39c4:	2c01      	cmp	r4, #1
    39c6:	dd2a      	ble.n	3a1e <__aeabi_d2f+0x72>
    39c8:	4c3b      	ldr	r4, [pc, #236]	; (3ab8 <__aeabi_d2f+0x10c>)
    39ca:	192c      	adds	r4, r5, r4
    39cc:	2cfe      	cmp	r4, #254	; 0xfe
    39ce:	dc1a      	bgt.n	3a06 <__aeabi_d2f+0x5a>
    39d0:	2c00      	cmp	r4, #0
    39d2:	dd35      	ble.n	3a40 <__aeabi_d2f+0x94>
    39d4:	0180      	lsls	r0, r0, #6
    39d6:	1e45      	subs	r5, r0, #1
    39d8:	41a8      	sbcs	r0, r5
    39da:	00db      	lsls	r3, r3, #3
    39dc:	4303      	orrs	r3, r0
    39de:	0f52      	lsrs	r2, r2, #29
    39e0:	4313      	orrs	r3, r2
    39e2:	075a      	lsls	r2, r3, #29
    39e4:	d004      	beq.n	39f0 <__aeabi_d2f+0x44>
    39e6:	220f      	movs	r2, #15
    39e8:	401a      	ands	r2, r3
    39ea:	2a04      	cmp	r2, #4
    39ec:	d000      	beq.n	39f0 <__aeabi_d2f+0x44>
    39ee:	3304      	adds	r3, #4
    39f0:	2280      	movs	r2, #128	; 0x80
    39f2:	04d2      	lsls	r2, r2, #19
    39f4:	401a      	ands	r2, r3
    39f6:	d027      	beq.n	3a48 <__aeabi_d2f+0x9c>
    39f8:	3401      	adds	r4, #1
    39fa:	2cff      	cmp	r4, #255	; 0xff
    39fc:	d003      	beq.n	3a06 <__aeabi_d2f+0x5a>
    39fe:	019b      	lsls	r3, r3, #6
    3a00:	0a5b      	lsrs	r3, r3, #9
    3a02:	b2e4      	uxtb	r4, r4
    3a04:	e001      	b.n	3a0a <__aeabi_d2f+0x5e>
    3a06:	24ff      	movs	r4, #255	; 0xff
    3a08:	2300      	movs	r3, #0
    3a0a:	025b      	lsls	r3, r3, #9
    3a0c:	05e4      	lsls	r4, r4, #23
    3a0e:	0a5b      	lsrs	r3, r3, #9
    3a10:	4323      	orrs	r3, r4
    3a12:	005b      	lsls	r3, r3, #1
    3a14:	07c9      	lsls	r1, r1, #31
    3a16:	085b      	lsrs	r3, r3, #1
    3a18:	430b      	orrs	r3, r1
    3a1a:	1c18      	adds	r0, r3, #0
    3a1c:	bd70      	pop	{r4, r5, r6, pc}
    3a1e:	2d00      	cmp	r5, #0
    3a20:	d106      	bne.n	3a30 <__aeabi_d2f+0x84>
    3a22:	4313      	orrs	r3, r2
    3a24:	d10e      	bne.n	3a44 <__aeabi_d2f+0x98>
    3a26:	2400      	movs	r4, #0
    3a28:	025b      	lsls	r3, r3, #9
    3a2a:	0a5b      	lsrs	r3, r3, #9
    3a2c:	b2e4      	uxtb	r4, r4
    3a2e:	e7ec      	b.n	3a0a <__aeabi_d2f+0x5e>
    3a30:	431a      	orrs	r2, r3
    3a32:	d0e8      	beq.n	3a06 <__aeabi_d2f+0x5a>
    3a34:	2080      	movs	r0, #128	; 0x80
    3a36:	00db      	lsls	r3, r3, #3
    3a38:	0480      	lsls	r0, r0, #18
    3a3a:	4303      	orrs	r3, r0
    3a3c:	24ff      	movs	r4, #255	; 0xff
    3a3e:	e7d0      	b.n	39e2 <__aeabi_d2f+0x36>
    3a40:	3417      	adds	r4, #23
    3a42:	da0c      	bge.n	3a5e <__aeabi_d2f+0xb2>
    3a44:	2305      	movs	r3, #5
    3a46:	2400      	movs	r4, #0
    3a48:	08db      	lsrs	r3, r3, #3
    3a4a:	2cff      	cmp	r4, #255	; 0xff
    3a4c:	d1ec      	bne.n	3a28 <__aeabi_d2f+0x7c>
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d02d      	beq.n	3aae <__aeabi_d2f+0x102>
    3a52:	2280      	movs	r2, #128	; 0x80
    3a54:	03d2      	lsls	r2, r2, #15
    3a56:	4313      	orrs	r3, r2
    3a58:	025b      	lsls	r3, r3, #9
    3a5a:	0a5b      	lsrs	r3, r3, #9
    3a5c:	e7d5      	b.n	3a0a <__aeabi_d2f+0x5e>
    3a5e:	2480      	movs	r4, #128	; 0x80
    3a60:	4816      	ldr	r0, [pc, #88]	; (3abc <__aeabi_d2f+0x110>)
    3a62:	0424      	lsls	r4, r4, #16
    3a64:	4323      	orrs	r3, r4
    3a66:	1b40      	subs	r0, r0, r5
    3a68:	281f      	cmp	r0, #31
    3a6a:	dc0d      	bgt.n	3a88 <__aeabi_d2f+0xdc>
    3a6c:	4c14      	ldr	r4, [pc, #80]	; (3ac0 <__aeabi_d2f+0x114>)
    3a6e:	46a4      	mov	ip, r4
    3a70:	4465      	add	r5, ip
    3a72:	40ab      	lsls	r3, r5
    3a74:	1c1c      	adds	r4, r3, #0
    3a76:	1c13      	adds	r3, r2, #0
    3a78:	40ab      	lsls	r3, r5
    3a7a:	1e5d      	subs	r5, r3, #1
    3a7c:	41ab      	sbcs	r3, r5
    3a7e:	40c2      	lsrs	r2, r0
    3a80:	4323      	orrs	r3, r4
    3a82:	4313      	orrs	r3, r2
    3a84:	2400      	movs	r4, #0
    3a86:	e7ac      	b.n	39e2 <__aeabi_d2f+0x36>
    3a88:	1c1e      	adds	r6, r3, #0
    3a8a:	4c0e      	ldr	r4, [pc, #56]	; (3ac4 <__aeabi_d2f+0x118>)
    3a8c:	1b64      	subs	r4, r4, r5
    3a8e:	40e6      	lsrs	r6, r4
    3a90:	1c34      	adds	r4, r6, #0
    3a92:	2820      	cmp	r0, #32
    3a94:	d00d      	beq.n	3ab2 <__aeabi_d2f+0x106>
    3a96:	480c      	ldr	r0, [pc, #48]	; (3ac8 <__aeabi_d2f+0x11c>)
    3a98:	4684      	mov	ip, r0
    3a9a:	4465      	add	r5, ip
    3a9c:	40ab      	lsls	r3, r5
    3a9e:	1c1d      	adds	r5, r3, #0
    3aa0:	432a      	orrs	r2, r5
    3aa2:	1e53      	subs	r3, r2, #1
    3aa4:	419a      	sbcs	r2, r3
    3aa6:	1c13      	adds	r3, r2, #0
    3aa8:	4323      	orrs	r3, r4
    3aaa:	2400      	movs	r4, #0
    3aac:	e799      	b.n	39e2 <__aeabi_d2f+0x36>
    3aae:	2300      	movs	r3, #0
    3ab0:	e7ab      	b.n	3a0a <__aeabi_d2f+0x5e>
    3ab2:	2500      	movs	r5, #0
    3ab4:	e7f4      	b.n	3aa0 <__aeabi_d2f+0xf4>
    3ab6:	46c0      	nop			; (mov r8, r8)
    3ab8:	fffffc80 	.word	0xfffffc80
    3abc:	0000039e 	.word	0x0000039e
    3ac0:	fffffc82 	.word	0xfffffc82
    3ac4:	0000037e 	.word	0x0000037e
    3ac8:	fffffca2 	.word	0xfffffca2

00003acc <__aeabi_cfrcmple>:
    3acc:	4684      	mov	ip, r0
    3ace:	1c08      	adds	r0, r1, #0
    3ad0:	4661      	mov	r1, ip
    3ad2:	e7ff      	b.n	3ad4 <__aeabi_cfcmpeq>

00003ad4 <__aeabi_cfcmpeq>:
    3ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3ad6:	f000 f8c5 	bl	3c64 <__lesf2>
    3ada:	2800      	cmp	r0, #0
    3adc:	d401      	bmi.n	3ae2 <__aeabi_cfcmpeq+0xe>
    3ade:	2100      	movs	r1, #0
    3ae0:	42c8      	cmn	r0, r1
    3ae2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003ae4 <__aeabi_fcmpeq>:
    3ae4:	b510      	push	{r4, lr}
    3ae6:	f000 f849 	bl	3b7c <__eqsf2>
    3aea:	4240      	negs	r0, r0
    3aec:	3001      	adds	r0, #1
    3aee:	bd10      	pop	{r4, pc}

00003af0 <__aeabi_fcmplt>:
    3af0:	b510      	push	{r4, lr}
    3af2:	f000 f8b7 	bl	3c64 <__lesf2>
    3af6:	2800      	cmp	r0, #0
    3af8:	db01      	blt.n	3afe <__aeabi_fcmplt+0xe>
    3afa:	2000      	movs	r0, #0
    3afc:	bd10      	pop	{r4, pc}
    3afe:	2001      	movs	r0, #1
    3b00:	bd10      	pop	{r4, pc}
    3b02:	46c0      	nop			; (mov r8, r8)

00003b04 <__aeabi_fcmple>:
    3b04:	b510      	push	{r4, lr}
    3b06:	f000 f8ad 	bl	3c64 <__lesf2>
    3b0a:	2800      	cmp	r0, #0
    3b0c:	dd01      	ble.n	3b12 <__aeabi_fcmple+0xe>
    3b0e:	2000      	movs	r0, #0
    3b10:	bd10      	pop	{r4, pc}
    3b12:	2001      	movs	r0, #1
    3b14:	bd10      	pop	{r4, pc}
    3b16:	46c0      	nop			; (mov r8, r8)

00003b18 <__aeabi_fcmpgt>:
    3b18:	b510      	push	{r4, lr}
    3b1a:	f000 f859 	bl	3bd0 <__gesf2>
    3b1e:	2800      	cmp	r0, #0
    3b20:	dc01      	bgt.n	3b26 <__aeabi_fcmpgt+0xe>
    3b22:	2000      	movs	r0, #0
    3b24:	bd10      	pop	{r4, pc}
    3b26:	2001      	movs	r0, #1
    3b28:	bd10      	pop	{r4, pc}
    3b2a:	46c0      	nop			; (mov r8, r8)

00003b2c <__aeabi_fcmpge>:
    3b2c:	b510      	push	{r4, lr}
    3b2e:	f000 f84f 	bl	3bd0 <__gesf2>
    3b32:	2800      	cmp	r0, #0
    3b34:	da01      	bge.n	3b3a <__aeabi_fcmpge+0xe>
    3b36:	2000      	movs	r0, #0
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	2001      	movs	r0, #1
    3b3c:	bd10      	pop	{r4, pc}
    3b3e:	46c0      	nop			; (mov r8, r8)

00003b40 <__clzsi2>:
    3b40:	211c      	movs	r1, #28
    3b42:	2301      	movs	r3, #1
    3b44:	041b      	lsls	r3, r3, #16
    3b46:	4298      	cmp	r0, r3
    3b48:	d301      	bcc.n	3b4e <__clzsi2+0xe>
    3b4a:	0c00      	lsrs	r0, r0, #16
    3b4c:	3910      	subs	r1, #16
    3b4e:	0a1b      	lsrs	r3, r3, #8
    3b50:	4298      	cmp	r0, r3
    3b52:	d301      	bcc.n	3b58 <__clzsi2+0x18>
    3b54:	0a00      	lsrs	r0, r0, #8
    3b56:	3908      	subs	r1, #8
    3b58:	091b      	lsrs	r3, r3, #4
    3b5a:	4298      	cmp	r0, r3
    3b5c:	d301      	bcc.n	3b62 <__clzsi2+0x22>
    3b5e:	0900      	lsrs	r0, r0, #4
    3b60:	3904      	subs	r1, #4
    3b62:	a202      	add	r2, pc, #8	; (adr r2, 3b6c <__clzsi2+0x2c>)
    3b64:	5c10      	ldrb	r0, [r2, r0]
    3b66:	1840      	adds	r0, r0, r1
    3b68:	4770      	bx	lr
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	02020304 	.word	0x02020304
    3b70:	01010101 	.word	0x01010101
	...

00003b7c <__eqsf2>:
    3b7c:	0243      	lsls	r3, r0, #9
    3b7e:	b570      	push	{r4, r5, r6, lr}
    3b80:	0042      	lsls	r2, r0, #1
    3b82:	004c      	lsls	r4, r1, #1
    3b84:	0a5d      	lsrs	r5, r3, #9
    3b86:	0fc3      	lsrs	r3, r0, #31
    3b88:	0248      	lsls	r0, r1, #9
    3b8a:	0e12      	lsrs	r2, r2, #24
    3b8c:	0a46      	lsrs	r6, r0, #9
    3b8e:	0e24      	lsrs	r4, r4, #24
    3b90:	0fc9      	lsrs	r1, r1, #31
    3b92:	2aff      	cmp	r2, #255	; 0xff
    3b94:	d005      	beq.n	3ba2 <__eqsf2+0x26>
    3b96:	2cff      	cmp	r4, #255	; 0xff
    3b98:	d008      	beq.n	3bac <__eqsf2+0x30>
    3b9a:	2001      	movs	r0, #1
    3b9c:	42a2      	cmp	r2, r4
    3b9e:	d00b      	beq.n	3bb8 <__eqsf2+0x3c>
    3ba0:	bd70      	pop	{r4, r5, r6, pc}
    3ba2:	2001      	movs	r0, #1
    3ba4:	2d00      	cmp	r5, #0
    3ba6:	d1fb      	bne.n	3ba0 <__eqsf2+0x24>
    3ba8:	2cff      	cmp	r4, #255	; 0xff
    3baa:	d1f6      	bne.n	3b9a <__eqsf2+0x1e>
    3bac:	2001      	movs	r0, #1
    3bae:	2e00      	cmp	r6, #0
    3bb0:	d1f6      	bne.n	3ba0 <__eqsf2+0x24>
    3bb2:	2001      	movs	r0, #1
    3bb4:	42a2      	cmp	r2, r4
    3bb6:	d1f3      	bne.n	3ba0 <__eqsf2+0x24>
    3bb8:	42b5      	cmp	r5, r6
    3bba:	d1f1      	bne.n	3ba0 <__eqsf2+0x24>
    3bbc:	428b      	cmp	r3, r1
    3bbe:	d005      	beq.n	3bcc <__eqsf2+0x50>
    3bc0:	2a00      	cmp	r2, #0
    3bc2:	d1ed      	bne.n	3ba0 <__eqsf2+0x24>
    3bc4:	1c28      	adds	r0, r5, #0
    3bc6:	1e43      	subs	r3, r0, #1
    3bc8:	4198      	sbcs	r0, r3
    3bca:	e7e9      	b.n	3ba0 <__eqsf2+0x24>
    3bcc:	2000      	movs	r0, #0
    3bce:	e7e7      	b.n	3ba0 <__eqsf2+0x24>

00003bd0 <__gesf2>:
    3bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bd2:	0243      	lsls	r3, r0, #9
    3bd4:	024d      	lsls	r5, r1, #9
    3bd6:	004a      	lsls	r2, r1, #1
    3bd8:	0044      	lsls	r4, r0, #1
    3bda:	0a5e      	lsrs	r6, r3, #9
    3bdc:	0e24      	lsrs	r4, r4, #24
    3bde:	0fc3      	lsrs	r3, r0, #31
    3be0:	0a6d      	lsrs	r5, r5, #9
    3be2:	0e12      	lsrs	r2, r2, #24
    3be4:	0fc9      	lsrs	r1, r1, #31
    3be6:	2cff      	cmp	r4, #255	; 0xff
    3be8:	d00d      	beq.n	3c06 <__gesf2+0x36>
    3bea:	2aff      	cmp	r2, #255	; 0xff
    3bec:	d031      	beq.n	3c52 <__gesf2+0x82>
    3bee:	2c00      	cmp	r4, #0
    3bf0:	d10d      	bne.n	3c0e <__gesf2+0x3e>
    3bf2:	4277      	negs	r7, r6
    3bf4:	4177      	adcs	r7, r6
    3bf6:	2a00      	cmp	r2, #0
    3bf8:	d123      	bne.n	3c42 <__gesf2+0x72>
    3bfa:	2d00      	cmp	r5, #0
    3bfc:	d121      	bne.n	3c42 <__gesf2+0x72>
    3bfe:	2000      	movs	r0, #0
    3c00:	2f00      	cmp	r7, #0
    3c02:	d10b      	bne.n	3c1c <__gesf2+0x4c>
    3c04:	e007      	b.n	3c16 <__gesf2+0x46>
    3c06:	2e00      	cmp	r6, #0
    3c08:	d128      	bne.n	3c5c <__gesf2+0x8c>
    3c0a:	2aff      	cmp	r2, #255	; 0xff
    3c0c:	d021      	beq.n	3c52 <__gesf2+0x82>
    3c0e:	2a00      	cmp	r2, #0
    3c10:	d005      	beq.n	3c1e <__gesf2+0x4e>
    3c12:	428b      	cmp	r3, r1
    3c14:	d007      	beq.n	3c26 <__gesf2+0x56>
    3c16:	4258      	negs	r0, r3
    3c18:	2301      	movs	r3, #1
    3c1a:	4318      	orrs	r0, r3
    3c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c1e:	2d00      	cmp	r5, #0
    3c20:	d0f9      	beq.n	3c16 <__gesf2+0x46>
    3c22:	428b      	cmp	r3, r1
    3c24:	d1f7      	bne.n	3c16 <__gesf2+0x46>
    3c26:	4294      	cmp	r4, r2
    3c28:	dcf5      	bgt.n	3c16 <__gesf2+0x46>
    3c2a:	db04      	blt.n	3c36 <__gesf2+0x66>
    3c2c:	42ae      	cmp	r6, r5
    3c2e:	d8f2      	bhi.n	3c16 <__gesf2+0x46>
    3c30:	2000      	movs	r0, #0
    3c32:	42ae      	cmp	r6, r5
    3c34:	d2f2      	bcs.n	3c1c <__gesf2+0x4c>
    3c36:	4258      	negs	r0, r3
    3c38:	4143      	adcs	r3, r0
    3c3a:	2001      	movs	r0, #1
    3c3c:	425b      	negs	r3, r3
    3c3e:	4318      	orrs	r0, r3
    3c40:	e7ec      	b.n	3c1c <__gesf2+0x4c>
    3c42:	2f00      	cmp	r7, #0
    3c44:	d0e5      	beq.n	3c12 <__gesf2+0x42>
    3c46:	4248      	negs	r0, r1
    3c48:	4141      	adcs	r1, r0
    3c4a:	2001      	movs	r0, #1
    3c4c:	4249      	negs	r1, r1
    3c4e:	4308      	orrs	r0, r1
    3c50:	e7e4      	b.n	3c1c <__gesf2+0x4c>
    3c52:	2d00      	cmp	r5, #0
    3c54:	d102      	bne.n	3c5c <__gesf2+0x8c>
    3c56:	2c00      	cmp	r4, #0
    3c58:	d0cb      	beq.n	3bf2 <__gesf2+0x22>
    3c5a:	e7da      	b.n	3c12 <__gesf2+0x42>
    3c5c:	2002      	movs	r0, #2
    3c5e:	4240      	negs	r0, r0
    3c60:	e7dc      	b.n	3c1c <__gesf2+0x4c>
    3c62:	46c0      	nop			; (mov r8, r8)

00003c64 <__lesf2>:
    3c64:	0243      	lsls	r3, r0, #9
    3c66:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c68:	0042      	lsls	r2, r0, #1
    3c6a:	004c      	lsls	r4, r1, #1
    3c6c:	0a5e      	lsrs	r6, r3, #9
    3c6e:	0fc3      	lsrs	r3, r0, #31
    3c70:	0248      	lsls	r0, r1, #9
    3c72:	0e12      	lsrs	r2, r2, #24
    3c74:	0a45      	lsrs	r5, r0, #9
    3c76:	0e24      	lsrs	r4, r4, #24
    3c78:	0fc9      	lsrs	r1, r1, #31
    3c7a:	2aff      	cmp	r2, #255	; 0xff
    3c7c:	d00f      	beq.n	3c9e <__lesf2+0x3a>
    3c7e:	2cff      	cmp	r4, #255	; 0xff
    3c80:	d01a      	beq.n	3cb8 <__lesf2+0x54>
    3c82:	2a00      	cmp	r2, #0
    3c84:	d110      	bne.n	3ca8 <__lesf2+0x44>
    3c86:	4277      	negs	r7, r6
    3c88:	4177      	adcs	r7, r6
    3c8a:	2c00      	cmp	r4, #0
    3c8c:	d029      	beq.n	3ce2 <__lesf2+0x7e>
    3c8e:	2f00      	cmp	r7, #0
    3c90:	d017      	beq.n	3cc2 <__lesf2+0x5e>
    3c92:	4248      	negs	r0, r1
    3c94:	4141      	adcs	r1, r0
    3c96:	2001      	movs	r0, #1
    3c98:	4249      	negs	r1, r1
    3c9a:	4308      	orrs	r0, r1
    3c9c:	e00b      	b.n	3cb6 <__lesf2+0x52>
    3c9e:	2002      	movs	r0, #2
    3ca0:	2e00      	cmp	r6, #0
    3ca2:	d108      	bne.n	3cb6 <__lesf2+0x52>
    3ca4:	2cff      	cmp	r4, #255	; 0xff
    3ca6:	d007      	beq.n	3cb8 <__lesf2+0x54>
    3ca8:	2c00      	cmp	r4, #0
    3caa:	d10a      	bne.n	3cc2 <__lesf2+0x5e>
    3cac:	2d00      	cmp	r5, #0
    3cae:	d108      	bne.n	3cc2 <__lesf2+0x5e>
    3cb0:	4258      	negs	r0, r3
    3cb2:	2301      	movs	r3, #1
    3cb4:	4318      	orrs	r0, r3
    3cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cb8:	2002      	movs	r0, #2
    3cba:	2d00      	cmp	r5, #0
    3cbc:	d1fb      	bne.n	3cb6 <__lesf2+0x52>
    3cbe:	2a00      	cmp	r2, #0
    3cc0:	d0e1      	beq.n	3c86 <__lesf2+0x22>
    3cc2:	428b      	cmp	r3, r1
    3cc4:	d1f4      	bne.n	3cb0 <__lesf2+0x4c>
    3cc6:	42a2      	cmp	r2, r4
    3cc8:	dcf2      	bgt.n	3cb0 <__lesf2+0x4c>
    3cca:	db04      	blt.n	3cd6 <__lesf2+0x72>
    3ccc:	42ae      	cmp	r6, r5
    3cce:	d8ef      	bhi.n	3cb0 <__lesf2+0x4c>
    3cd0:	2000      	movs	r0, #0
    3cd2:	42ae      	cmp	r6, r5
    3cd4:	d2ef      	bcs.n	3cb6 <__lesf2+0x52>
    3cd6:	4258      	negs	r0, r3
    3cd8:	4143      	adcs	r3, r0
    3cda:	2001      	movs	r0, #1
    3cdc:	425b      	negs	r3, r3
    3cde:	4318      	orrs	r0, r3
    3ce0:	e7e9      	b.n	3cb6 <__lesf2+0x52>
    3ce2:	2d00      	cmp	r5, #0
    3ce4:	d1d3      	bne.n	3c8e <__lesf2+0x2a>
    3ce6:	2000      	movs	r0, #0
    3ce8:	2f00      	cmp	r7, #0
    3cea:	d1e4      	bne.n	3cb6 <__lesf2+0x52>
    3cec:	e7e0      	b.n	3cb0 <__lesf2+0x4c>
    3cee:	46c0      	nop			; (mov r8, r8)

00003cf0 <__libc_init_array>:
    3cf0:	4b0e      	ldr	r3, [pc, #56]	; (3d2c <__libc_init_array+0x3c>)
    3cf2:	b570      	push	{r4, r5, r6, lr}
    3cf4:	2500      	movs	r5, #0
    3cf6:	1c1e      	adds	r6, r3, #0
    3cf8:	4c0d      	ldr	r4, [pc, #52]	; (3d30 <__libc_init_array+0x40>)
    3cfa:	1ae4      	subs	r4, r4, r3
    3cfc:	10a4      	asrs	r4, r4, #2
    3cfe:	42a5      	cmp	r5, r4
    3d00:	d004      	beq.n	3d0c <__libc_init_array+0x1c>
    3d02:	00ab      	lsls	r3, r5, #2
    3d04:	58f3      	ldr	r3, [r6, r3]
    3d06:	4798      	blx	r3
    3d08:	3501      	adds	r5, #1
    3d0a:	e7f8      	b.n	3cfe <__libc_init_array+0xe>
    3d0c:	f001 f9da 	bl	50c4 <_init>
    3d10:	4b08      	ldr	r3, [pc, #32]	; (3d34 <__libc_init_array+0x44>)
    3d12:	2500      	movs	r5, #0
    3d14:	1c1e      	adds	r6, r3, #0
    3d16:	4c08      	ldr	r4, [pc, #32]	; (3d38 <__libc_init_array+0x48>)
    3d18:	1ae4      	subs	r4, r4, r3
    3d1a:	10a4      	asrs	r4, r4, #2
    3d1c:	42a5      	cmp	r5, r4
    3d1e:	d004      	beq.n	3d2a <__libc_init_array+0x3a>
    3d20:	00ab      	lsls	r3, r5, #2
    3d22:	58f3      	ldr	r3, [r6, r3]
    3d24:	4798      	blx	r3
    3d26:	3501      	adds	r5, #1
    3d28:	e7f8      	b.n	3d1c <__libc_init_array+0x2c>
    3d2a:	bd70      	pop	{r4, r5, r6, pc}
    3d2c:	000050d0 	.word	0x000050d0
    3d30:	000050d0 	.word	0x000050d0
    3d34:	000050d0 	.word	0x000050d0
    3d38:	000050d4 	.word	0x000050d4

00003d3c <memcpy>:
    3d3c:	2300      	movs	r3, #0
    3d3e:	b510      	push	{r4, lr}
    3d40:	4293      	cmp	r3, r2
    3d42:	d003      	beq.n	3d4c <memcpy+0x10>
    3d44:	5ccc      	ldrb	r4, [r1, r3]
    3d46:	54c4      	strb	r4, [r0, r3]
    3d48:	3301      	adds	r3, #1
    3d4a:	e7f9      	b.n	3d40 <memcpy+0x4>
    3d4c:	bd10      	pop	{r4, pc}

00003d4e <memset>:
    3d4e:	1c03      	adds	r3, r0, #0
    3d50:	1882      	adds	r2, r0, r2
    3d52:	4293      	cmp	r3, r2
    3d54:	d002      	beq.n	3d5c <memset+0xe>
    3d56:	7019      	strb	r1, [r3, #0]
    3d58:	3301      	adds	r3, #1
    3d5a:	e7fa      	b.n	3d52 <memset+0x4>
    3d5c:	4770      	bx	lr
	...

00003d60 <iprintf>:
    3d60:	b40f      	push	{r0, r1, r2, r3}
    3d62:	4b0b      	ldr	r3, [pc, #44]	; (3d90 <iprintf+0x30>)
    3d64:	b513      	push	{r0, r1, r4, lr}
    3d66:	681c      	ldr	r4, [r3, #0]
    3d68:	2c00      	cmp	r4, #0
    3d6a:	d005      	beq.n	3d78 <iprintf+0x18>
    3d6c:	69a3      	ldr	r3, [r4, #24]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d102      	bne.n	3d78 <iprintf+0x18>
    3d72:	1c20      	adds	r0, r4, #0
    3d74:	f000 f996 	bl	40a4 <__sinit>
    3d78:	ab05      	add	r3, sp, #20
    3d7a:	1c20      	adds	r0, r4, #0
    3d7c:	68a1      	ldr	r1, [r4, #8]
    3d7e:	9a04      	ldr	r2, [sp, #16]
    3d80:	9301      	str	r3, [sp, #4]
    3d82:	f000 faf1 	bl	4368 <_vfiprintf_r>
    3d86:	bc16      	pop	{r1, r2, r4}
    3d88:	bc08      	pop	{r3}
    3d8a:	b004      	add	sp, #16
    3d8c:	4718      	bx	r3
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	20000170 	.word	0x20000170

00003d94 <setbuf>:
    3d94:	b508      	push	{r3, lr}
    3d96:	424a      	negs	r2, r1
    3d98:	414a      	adcs	r2, r1
    3d9a:	2380      	movs	r3, #128	; 0x80
    3d9c:	0052      	lsls	r2, r2, #1
    3d9e:	00db      	lsls	r3, r3, #3
    3da0:	f000 f802 	bl	3da8 <setvbuf>
    3da4:	bd08      	pop	{r3, pc}
	...

00003da8 <setvbuf>:
    3da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3daa:	1c1e      	adds	r6, r3, #0
    3dac:	4b3c      	ldr	r3, [pc, #240]	; (3ea0 <setvbuf+0xf8>)
    3dae:	1c04      	adds	r4, r0, #0
    3db0:	681d      	ldr	r5, [r3, #0]
    3db2:	1c0f      	adds	r7, r1, #0
    3db4:	9201      	str	r2, [sp, #4]
    3db6:	2d00      	cmp	r5, #0
    3db8:	d005      	beq.n	3dc6 <setvbuf+0x1e>
    3dba:	69ab      	ldr	r3, [r5, #24]
    3dbc:	2b00      	cmp	r3, #0
    3dbe:	d102      	bne.n	3dc6 <setvbuf+0x1e>
    3dc0:	1c28      	adds	r0, r5, #0
    3dc2:	f000 f96f 	bl	40a4 <__sinit>
    3dc6:	4b37      	ldr	r3, [pc, #220]	; (3ea4 <setvbuf+0xfc>)
    3dc8:	429c      	cmp	r4, r3
    3dca:	d101      	bne.n	3dd0 <setvbuf+0x28>
    3dcc:	686c      	ldr	r4, [r5, #4]
    3dce:	e008      	b.n	3de2 <setvbuf+0x3a>
    3dd0:	4b35      	ldr	r3, [pc, #212]	; (3ea8 <setvbuf+0x100>)
    3dd2:	429c      	cmp	r4, r3
    3dd4:	d101      	bne.n	3dda <setvbuf+0x32>
    3dd6:	68ac      	ldr	r4, [r5, #8]
    3dd8:	e003      	b.n	3de2 <setvbuf+0x3a>
    3dda:	4b34      	ldr	r3, [pc, #208]	; (3eac <setvbuf+0x104>)
    3ddc:	429c      	cmp	r4, r3
    3dde:	d100      	bne.n	3de2 <setvbuf+0x3a>
    3de0:	68ec      	ldr	r4, [r5, #12]
    3de2:	9b01      	ldr	r3, [sp, #4]
    3de4:	2b02      	cmp	r3, #2
    3de6:	d858      	bhi.n	3e9a <setvbuf+0xf2>
    3de8:	2e00      	cmp	r6, #0
    3dea:	db56      	blt.n	3e9a <setvbuf+0xf2>
    3dec:	1c28      	adds	r0, r5, #0
    3dee:	1c21      	adds	r1, r4, #0
    3df0:	f000 f8ea 	bl	3fc8 <_fflush_r>
    3df4:	2300      	movs	r3, #0
    3df6:	6063      	str	r3, [r4, #4]
    3df8:	61a3      	str	r3, [r4, #24]
    3dfa:	89a3      	ldrh	r3, [r4, #12]
    3dfc:	061b      	lsls	r3, r3, #24
    3dfe:	d503      	bpl.n	3e08 <setvbuf+0x60>
    3e00:	1c28      	adds	r0, r5, #0
    3e02:	6921      	ldr	r1, [r4, #16]
    3e04:	f000 f9ea 	bl	41dc <_free_r>
    3e08:	2283      	movs	r2, #131	; 0x83
    3e0a:	89a3      	ldrh	r3, [r4, #12]
    3e0c:	4393      	bics	r3, r2
    3e0e:	81a3      	strh	r3, [r4, #12]
    3e10:	9b01      	ldr	r3, [sp, #4]
    3e12:	2b02      	cmp	r3, #2
    3e14:	d013      	beq.n	3e3e <setvbuf+0x96>
    3e16:	2f00      	cmp	r7, #0
    3e18:	d125      	bne.n	3e66 <setvbuf+0xbe>
    3e1a:	2e00      	cmp	r6, #0
    3e1c:	d101      	bne.n	3e22 <setvbuf+0x7a>
    3e1e:	2680      	movs	r6, #128	; 0x80
    3e20:	00f6      	lsls	r6, r6, #3
    3e22:	1c30      	adds	r0, r6, #0
    3e24:	f000 f9d0 	bl	41c8 <malloc>
    3e28:	1e07      	subs	r7, r0, #0
    3e2a:	d118      	bne.n	3e5e <setvbuf+0xb6>
    3e2c:	2080      	movs	r0, #128	; 0x80
    3e2e:	00c0      	lsls	r0, r0, #3
    3e30:	f000 f9ca 	bl	41c8 <malloc>
    3e34:	1e07      	subs	r7, r0, #0
    3e36:	d110      	bne.n	3e5a <setvbuf+0xb2>
    3e38:	2001      	movs	r0, #1
    3e3a:	4240      	negs	r0, r0
    3e3c:	e000      	b.n	3e40 <setvbuf+0x98>
    3e3e:	2000      	movs	r0, #0
    3e40:	2202      	movs	r2, #2
    3e42:	89a3      	ldrh	r3, [r4, #12]
    3e44:	4313      	orrs	r3, r2
    3e46:	81a3      	strh	r3, [r4, #12]
    3e48:	2300      	movs	r3, #0
    3e4a:	60a3      	str	r3, [r4, #8]
    3e4c:	1c23      	adds	r3, r4, #0
    3e4e:	3347      	adds	r3, #71	; 0x47
    3e50:	6023      	str	r3, [r4, #0]
    3e52:	6123      	str	r3, [r4, #16]
    3e54:	2301      	movs	r3, #1
    3e56:	6163      	str	r3, [r4, #20]
    3e58:	e021      	b.n	3e9e <setvbuf+0xf6>
    3e5a:	2680      	movs	r6, #128	; 0x80
    3e5c:	00f6      	lsls	r6, r6, #3
    3e5e:	2280      	movs	r2, #128	; 0x80
    3e60:	89a3      	ldrh	r3, [r4, #12]
    3e62:	4313      	orrs	r3, r2
    3e64:	81a3      	strh	r3, [r4, #12]
    3e66:	9b01      	ldr	r3, [sp, #4]
    3e68:	2b01      	cmp	r3, #1
    3e6a:	d105      	bne.n	3e78 <setvbuf+0xd0>
    3e6c:	89a3      	ldrh	r3, [r4, #12]
    3e6e:	9a01      	ldr	r2, [sp, #4]
    3e70:	431a      	orrs	r2, r3
    3e72:	4273      	negs	r3, r6
    3e74:	81a2      	strh	r2, [r4, #12]
    3e76:	61a3      	str	r3, [r4, #24]
    3e78:	4b0d      	ldr	r3, [pc, #52]	; (3eb0 <setvbuf+0x108>)
    3e7a:	2000      	movs	r0, #0
    3e7c:	62ab      	str	r3, [r5, #40]	; 0x28
    3e7e:	89a2      	ldrh	r2, [r4, #12]
    3e80:	6027      	str	r7, [r4, #0]
    3e82:	6127      	str	r7, [r4, #16]
    3e84:	6166      	str	r6, [r4, #20]
    3e86:	0713      	lsls	r3, r2, #28
    3e88:	d509      	bpl.n	3e9e <setvbuf+0xf6>
    3e8a:	2303      	movs	r3, #3
    3e8c:	401a      	ands	r2, r3
    3e8e:	4253      	negs	r3, r2
    3e90:	4153      	adcs	r3, r2
    3e92:	425b      	negs	r3, r3
    3e94:	401e      	ands	r6, r3
    3e96:	60a6      	str	r6, [r4, #8]
    3e98:	e001      	b.n	3e9e <setvbuf+0xf6>
    3e9a:	2001      	movs	r0, #1
    3e9c:	4240      	negs	r0, r0
    3e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ea0:	20000170 	.word	0x20000170
    3ea4:	00005030 	.word	0x00005030
    3ea8:	00005050 	.word	0x00005050
    3eac:	00005070 	.word	0x00005070
    3eb0:	00004021 	.word	0x00004021

00003eb4 <__sflush_r>:
    3eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3eb6:	898a      	ldrh	r2, [r1, #12]
    3eb8:	1c05      	adds	r5, r0, #0
    3eba:	1c0c      	adds	r4, r1, #0
    3ebc:	0713      	lsls	r3, r2, #28
    3ebe:	d45e      	bmi.n	3f7e <__sflush_r+0xca>
    3ec0:	684b      	ldr	r3, [r1, #4]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	dc02      	bgt.n	3ecc <__sflush_r+0x18>
    3ec6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3ec8:	2b00      	cmp	r3, #0
    3eca:	dd1a      	ble.n	3f02 <__sflush_r+0x4e>
    3ecc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3ece:	2f00      	cmp	r7, #0
    3ed0:	d017      	beq.n	3f02 <__sflush_r+0x4e>
    3ed2:	2300      	movs	r3, #0
    3ed4:	682e      	ldr	r6, [r5, #0]
    3ed6:	602b      	str	r3, [r5, #0]
    3ed8:	2380      	movs	r3, #128	; 0x80
    3eda:	015b      	lsls	r3, r3, #5
    3edc:	401a      	ands	r2, r3
    3ede:	d001      	beq.n	3ee4 <__sflush_r+0x30>
    3ee0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3ee2:	e015      	b.n	3f10 <__sflush_r+0x5c>
    3ee4:	1c28      	adds	r0, r5, #0
    3ee6:	6a21      	ldr	r1, [r4, #32]
    3ee8:	2301      	movs	r3, #1
    3eea:	47b8      	blx	r7
    3eec:	1c02      	adds	r2, r0, #0
    3eee:	1c43      	adds	r3, r0, #1
    3ef0:	d10e      	bne.n	3f10 <__sflush_r+0x5c>
    3ef2:	682b      	ldr	r3, [r5, #0]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d00b      	beq.n	3f10 <__sflush_r+0x5c>
    3ef8:	2b1d      	cmp	r3, #29
    3efa:	d001      	beq.n	3f00 <__sflush_r+0x4c>
    3efc:	2b16      	cmp	r3, #22
    3efe:	d102      	bne.n	3f06 <__sflush_r+0x52>
    3f00:	602e      	str	r6, [r5, #0]
    3f02:	2000      	movs	r0, #0
    3f04:	e05e      	b.n	3fc4 <__sflush_r+0x110>
    3f06:	2140      	movs	r1, #64	; 0x40
    3f08:	89a3      	ldrh	r3, [r4, #12]
    3f0a:	430b      	orrs	r3, r1
    3f0c:	81a3      	strh	r3, [r4, #12]
    3f0e:	e059      	b.n	3fc4 <__sflush_r+0x110>
    3f10:	89a3      	ldrh	r3, [r4, #12]
    3f12:	075b      	lsls	r3, r3, #29
    3f14:	d506      	bpl.n	3f24 <__sflush_r+0x70>
    3f16:	6863      	ldr	r3, [r4, #4]
    3f18:	1ad2      	subs	r2, r2, r3
    3f1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	d001      	beq.n	3f24 <__sflush_r+0x70>
    3f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3f22:	1ad2      	subs	r2, r2, r3
    3f24:	2300      	movs	r3, #0
    3f26:	1c28      	adds	r0, r5, #0
    3f28:	6a21      	ldr	r1, [r4, #32]
    3f2a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3f2c:	47b8      	blx	r7
    3f2e:	89a3      	ldrh	r3, [r4, #12]
    3f30:	1c42      	adds	r2, r0, #1
    3f32:	d106      	bne.n	3f42 <__sflush_r+0x8e>
    3f34:	682a      	ldr	r2, [r5, #0]
    3f36:	2a00      	cmp	r2, #0
    3f38:	d003      	beq.n	3f42 <__sflush_r+0x8e>
    3f3a:	2a1d      	cmp	r2, #29
    3f3c:	d001      	beq.n	3f42 <__sflush_r+0x8e>
    3f3e:	2a16      	cmp	r2, #22
    3f40:	d119      	bne.n	3f76 <__sflush_r+0xc2>
    3f42:	2200      	movs	r2, #0
    3f44:	6062      	str	r2, [r4, #4]
    3f46:	6922      	ldr	r2, [r4, #16]
    3f48:	6022      	str	r2, [r4, #0]
    3f4a:	04db      	lsls	r3, r3, #19
    3f4c:	d505      	bpl.n	3f5a <__sflush_r+0xa6>
    3f4e:	1c43      	adds	r3, r0, #1
    3f50:	d102      	bne.n	3f58 <__sflush_r+0xa4>
    3f52:	682b      	ldr	r3, [r5, #0]
    3f54:	2b00      	cmp	r3, #0
    3f56:	d100      	bne.n	3f5a <__sflush_r+0xa6>
    3f58:	6560      	str	r0, [r4, #84]	; 0x54
    3f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3f5c:	602e      	str	r6, [r5, #0]
    3f5e:	2900      	cmp	r1, #0
    3f60:	d0cf      	beq.n	3f02 <__sflush_r+0x4e>
    3f62:	1c23      	adds	r3, r4, #0
    3f64:	3344      	adds	r3, #68	; 0x44
    3f66:	4299      	cmp	r1, r3
    3f68:	d002      	beq.n	3f70 <__sflush_r+0xbc>
    3f6a:	1c28      	adds	r0, r5, #0
    3f6c:	f000 f936 	bl	41dc <_free_r>
    3f70:	2000      	movs	r0, #0
    3f72:	6360      	str	r0, [r4, #52]	; 0x34
    3f74:	e026      	b.n	3fc4 <__sflush_r+0x110>
    3f76:	2240      	movs	r2, #64	; 0x40
    3f78:	4313      	orrs	r3, r2
    3f7a:	81a3      	strh	r3, [r4, #12]
    3f7c:	e022      	b.n	3fc4 <__sflush_r+0x110>
    3f7e:	690f      	ldr	r7, [r1, #16]
    3f80:	2f00      	cmp	r7, #0
    3f82:	d0be      	beq.n	3f02 <__sflush_r+0x4e>
    3f84:	680b      	ldr	r3, [r1, #0]
    3f86:	600f      	str	r7, [r1, #0]
    3f88:	1bdb      	subs	r3, r3, r7
    3f8a:	9301      	str	r3, [sp, #4]
    3f8c:	2300      	movs	r3, #0
    3f8e:	0792      	lsls	r2, r2, #30
    3f90:	d100      	bne.n	3f94 <__sflush_r+0xe0>
    3f92:	694b      	ldr	r3, [r1, #20]
    3f94:	60a3      	str	r3, [r4, #8]
    3f96:	9b01      	ldr	r3, [sp, #4]
    3f98:	2b00      	cmp	r3, #0
    3f9a:	ddb2      	ble.n	3f02 <__sflush_r+0x4e>
    3f9c:	1c28      	adds	r0, r5, #0
    3f9e:	6a21      	ldr	r1, [r4, #32]
    3fa0:	1c3a      	adds	r2, r7, #0
    3fa2:	9b01      	ldr	r3, [sp, #4]
    3fa4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3fa6:	47b0      	blx	r6
    3fa8:	2800      	cmp	r0, #0
    3faa:	dc06      	bgt.n	3fba <__sflush_r+0x106>
    3fac:	2240      	movs	r2, #64	; 0x40
    3fae:	2001      	movs	r0, #1
    3fb0:	89a3      	ldrh	r3, [r4, #12]
    3fb2:	4240      	negs	r0, r0
    3fb4:	4313      	orrs	r3, r2
    3fb6:	81a3      	strh	r3, [r4, #12]
    3fb8:	e004      	b.n	3fc4 <__sflush_r+0x110>
    3fba:	9b01      	ldr	r3, [sp, #4]
    3fbc:	183f      	adds	r7, r7, r0
    3fbe:	1a1b      	subs	r3, r3, r0
    3fc0:	9301      	str	r3, [sp, #4]
    3fc2:	e7e8      	b.n	3f96 <__sflush_r+0xe2>
    3fc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003fc8 <_fflush_r>:
    3fc8:	b538      	push	{r3, r4, r5, lr}
    3fca:	690b      	ldr	r3, [r1, #16]
    3fcc:	1c05      	adds	r5, r0, #0
    3fce:	1c0c      	adds	r4, r1, #0
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d101      	bne.n	3fd8 <_fflush_r+0x10>
    3fd4:	2000      	movs	r0, #0
    3fd6:	e01c      	b.n	4012 <_fflush_r+0x4a>
    3fd8:	2800      	cmp	r0, #0
    3fda:	d004      	beq.n	3fe6 <_fflush_r+0x1e>
    3fdc:	6983      	ldr	r3, [r0, #24]
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d101      	bne.n	3fe6 <_fflush_r+0x1e>
    3fe2:	f000 f85f 	bl	40a4 <__sinit>
    3fe6:	4b0b      	ldr	r3, [pc, #44]	; (4014 <_fflush_r+0x4c>)
    3fe8:	429c      	cmp	r4, r3
    3fea:	d101      	bne.n	3ff0 <_fflush_r+0x28>
    3fec:	686c      	ldr	r4, [r5, #4]
    3fee:	e008      	b.n	4002 <_fflush_r+0x3a>
    3ff0:	4b09      	ldr	r3, [pc, #36]	; (4018 <_fflush_r+0x50>)
    3ff2:	429c      	cmp	r4, r3
    3ff4:	d101      	bne.n	3ffa <_fflush_r+0x32>
    3ff6:	68ac      	ldr	r4, [r5, #8]
    3ff8:	e003      	b.n	4002 <_fflush_r+0x3a>
    3ffa:	4b08      	ldr	r3, [pc, #32]	; (401c <_fflush_r+0x54>)
    3ffc:	429c      	cmp	r4, r3
    3ffe:	d100      	bne.n	4002 <_fflush_r+0x3a>
    4000:	68ec      	ldr	r4, [r5, #12]
    4002:	220c      	movs	r2, #12
    4004:	5ea3      	ldrsh	r3, [r4, r2]
    4006:	2b00      	cmp	r3, #0
    4008:	d0e4      	beq.n	3fd4 <_fflush_r+0xc>
    400a:	1c28      	adds	r0, r5, #0
    400c:	1c21      	adds	r1, r4, #0
    400e:	f7ff ff51 	bl	3eb4 <__sflush_r>
    4012:	bd38      	pop	{r3, r4, r5, pc}
    4014:	00005030 	.word	0x00005030
    4018:	00005050 	.word	0x00005050
    401c:	00005070 	.word	0x00005070

00004020 <_cleanup_r>:
    4020:	b508      	push	{r3, lr}
    4022:	4902      	ldr	r1, [pc, #8]	; (402c <_cleanup_r+0xc>)
    4024:	f000 f8ae 	bl	4184 <_fwalk_reent>
    4028:	bd08      	pop	{r3, pc}
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	00003fc9 	.word	0x00003fc9

00004030 <std.isra.0>:
    4030:	2300      	movs	r3, #0
    4032:	b510      	push	{r4, lr}
    4034:	1c04      	adds	r4, r0, #0
    4036:	6003      	str	r3, [r0, #0]
    4038:	6043      	str	r3, [r0, #4]
    403a:	6083      	str	r3, [r0, #8]
    403c:	8181      	strh	r1, [r0, #12]
    403e:	6643      	str	r3, [r0, #100]	; 0x64
    4040:	81c2      	strh	r2, [r0, #14]
    4042:	6103      	str	r3, [r0, #16]
    4044:	6143      	str	r3, [r0, #20]
    4046:	6183      	str	r3, [r0, #24]
    4048:	1c19      	adds	r1, r3, #0
    404a:	2208      	movs	r2, #8
    404c:	305c      	adds	r0, #92	; 0x5c
    404e:	f7ff fe7e 	bl	3d4e <memset>
    4052:	4b05      	ldr	r3, [pc, #20]	; (4068 <std.isra.0+0x38>)
    4054:	6224      	str	r4, [r4, #32]
    4056:	6263      	str	r3, [r4, #36]	; 0x24
    4058:	4b04      	ldr	r3, [pc, #16]	; (406c <std.isra.0+0x3c>)
    405a:	62a3      	str	r3, [r4, #40]	; 0x28
    405c:	4b04      	ldr	r3, [pc, #16]	; (4070 <std.isra.0+0x40>)
    405e:	62e3      	str	r3, [r4, #44]	; 0x2c
    4060:	4b04      	ldr	r3, [pc, #16]	; (4074 <std.isra.0+0x44>)
    4062:	6323      	str	r3, [r4, #48]	; 0x30
    4064:	bd10      	pop	{r4, pc}
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	000048b9 	.word	0x000048b9
    406c:	000048e1 	.word	0x000048e1
    4070:	00004919 	.word	0x00004919
    4074:	00004945 	.word	0x00004945

00004078 <__sfmoreglue>:
    4078:	b570      	push	{r4, r5, r6, lr}
    407a:	2568      	movs	r5, #104	; 0x68
    407c:	1e4b      	subs	r3, r1, #1
    407e:	435d      	muls	r5, r3
    4080:	1c0e      	adds	r6, r1, #0
    4082:	1c29      	adds	r1, r5, #0
    4084:	3174      	adds	r1, #116	; 0x74
    4086:	f000 f8ef 	bl	4268 <_malloc_r>
    408a:	1e04      	subs	r4, r0, #0
    408c:	d008      	beq.n	40a0 <__sfmoreglue+0x28>
    408e:	2100      	movs	r1, #0
    4090:	1c2a      	adds	r2, r5, #0
    4092:	6001      	str	r1, [r0, #0]
    4094:	6046      	str	r6, [r0, #4]
    4096:	300c      	adds	r0, #12
    4098:	60a0      	str	r0, [r4, #8]
    409a:	3268      	adds	r2, #104	; 0x68
    409c:	f7ff fe57 	bl	3d4e <memset>
    40a0:	1c20      	adds	r0, r4, #0
    40a2:	bd70      	pop	{r4, r5, r6, pc}

000040a4 <__sinit>:
    40a4:	6983      	ldr	r3, [r0, #24]
    40a6:	b513      	push	{r0, r1, r4, lr}
    40a8:	2b00      	cmp	r3, #0
    40aa:	d128      	bne.n	40fe <__sinit+0x5a>
    40ac:	6483      	str	r3, [r0, #72]	; 0x48
    40ae:	64c3      	str	r3, [r0, #76]	; 0x4c
    40b0:	6503      	str	r3, [r0, #80]	; 0x50
    40b2:	4b13      	ldr	r3, [pc, #76]	; (4100 <__sinit+0x5c>)
    40b4:	4a13      	ldr	r2, [pc, #76]	; (4104 <__sinit+0x60>)
    40b6:	681b      	ldr	r3, [r3, #0]
    40b8:	6282      	str	r2, [r0, #40]	; 0x28
    40ba:	9301      	str	r3, [sp, #4]
    40bc:	4298      	cmp	r0, r3
    40be:	d101      	bne.n	40c4 <__sinit+0x20>
    40c0:	2301      	movs	r3, #1
    40c2:	6183      	str	r3, [r0, #24]
    40c4:	1c04      	adds	r4, r0, #0
    40c6:	f000 f81f 	bl	4108 <__sfp>
    40ca:	6060      	str	r0, [r4, #4]
    40cc:	1c20      	adds	r0, r4, #0
    40ce:	f000 f81b 	bl	4108 <__sfp>
    40d2:	60a0      	str	r0, [r4, #8]
    40d4:	1c20      	adds	r0, r4, #0
    40d6:	f000 f817 	bl	4108 <__sfp>
    40da:	2104      	movs	r1, #4
    40dc:	60e0      	str	r0, [r4, #12]
    40de:	2200      	movs	r2, #0
    40e0:	6860      	ldr	r0, [r4, #4]
    40e2:	f7ff ffa5 	bl	4030 <std.isra.0>
    40e6:	68a0      	ldr	r0, [r4, #8]
    40e8:	2109      	movs	r1, #9
    40ea:	2201      	movs	r2, #1
    40ec:	f7ff ffa0 	bl	4030 <std.isra.0>
    40f0:	68e0      	ldr	r0, [r4, #12]
    40f2:	2112      	movs	r1, #18
    40f4:	2202      	movs	r2, #2
    40f6:	f7ff ff9b 	bl	4030 <std.isra.0>
    40fa:	2301      	movs	r3, #1
    40fc:	61a3      	str	r3, [r4, #24]
    40fe:	bd13      	pop	{r0, r1, r4, pc}
    4100:	0000502c 	.word	0x0000502c
    4104:	00004021 	.word	0x00004021

00004108 <__sfp>:
    4108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    410a:	4b1d      	ldr	r3, [pc, #116]	; (4180 <__sfp+0x78>)
    410c:	1c06      	adds	r6, r0, #0
    410e:	681d      	ldr	r5, [r3, #0]
    4110:	69ab      	ldr	r3, [r5, #24]
    4112:	2b00      	cmp	r3, #0
    4114:	d102      	bne.n	411c <__sfp+0x14>
    4116:	1c28      	adds	r0, r5, #0
    4118:	f7ff ffc4 	bl	40a4 <__sinit>
    411c:	3548      	adds	r5, #72	; 0x48
    411e:	68ac      	ldr	r4, [r5, #8]
    4120:	686b      	ldr	r3, [r5, #4]
    4122:	3b01      	subs	r3, #1
    4124:	d405      	bmi.n	4132 <__sfp+0x2a>
    4126:	220c      	movs	r2, #12
    4128:	5ea7      	ldrsh	r7, [r4, r2]
    412a:	2f00      	cmp	r7, #0
    412c:	d010      	beq.n	4150 <__sfp+0x48>
    412e:	3468      	adds	r4, #104	; 0x68
    4130:	e7f7      	b.n	4122 <__sfp+0x1a>
    4132:	682b      	ldr	r3, [r5, #0]
    4134:	2b00      	cmp	r3, #0
    4136:	d106      	bne.n	4146 <__sfp+0x3e>
    4138:	1c30      	adds	r0, r6, #0
    413a:	2104      	movs	r1, #4
    413c:	f7ff ff9c 	bl	4078 <__sfmoreglue>
    4140:	6028      	str	r0, [r5, #0]
    4142:	2800      	cmp	r0, #0
    4144:	d001      	beq.n	414a <__sfp+0x42>
    4146:	682d      	ldr	r5, [r5, #0]
    4148:	e7e9      	b.n	411e <__sfp+0x16>
    414a:	230c      	movs	r3, #12
    414c:	6033      	str	r3, [r6, #0]
    414e:	e016      	b.n	417e <__sfp+0x76>
    4150:	2301      	movs	r3, #1
    4152:	1c20      	adds	r0, r4, #0
    4154:	425b      	negs	r3, r3
    4156:	81e3      	strh	r3, [r4, #14]
    4158:	3302      	adds	r3, #2
    415a:	81a3      	strh	r3, [r4, #12]
    415c:	6667      	str	r7, [r4, #100]	; 0x64
    415e:	6027      	str	r7, [r4, #0]
    4160:	60a7      	str	r7, [r4, #8]
    4162:	6067      	str	r7, [r4, #4]
    4164:	6127      	str	r7, [r4, #16]
    4166:	6167      	str	r7, [r4, #20]
    4168:	61a7      	str	r7, [r4, #24]
    416a:	305c      	adds	r0, #92	; 0x5c
    416c:	1c39      	adds	r1, r7, #0
    416e:	2208      	movs	r2, #8
    4170:	f7ff fded 	bl	3d4e <memset>
    4174:	1c20      	adds	r0, r4, #0
    4176:	6367      	str	r7, [r4, #52]	; 0x34
    4178:	63a7      	str	r7, [r4, #56]	; 0x38
    417a:	64a7      	str	r7, [r4, #72]	; 0x48
    417c:	64e7      	str	r7, [r4, #76]	; 0x4c
    417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4180:	0000502c 	.word	0x0000502c

00004184 <_fwalk_reent>:
    4184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4186:	1c04      	adds	r4, r0, #0
    4188:	1c07      	adds	r7, r0, #0
    418a:	2600      	movs	r6, #0
    418c:	9101      	str	r1, [sp, #4]
    418e:	3448      	adds	r4, #72	; 0x48
    4190:	2c00      	cmp	r4, #0
    4192:	d016      	beq.n	41c2 <_fwalk_reent+0x3e>
    4194:	6863      	ldr	r3, [r4, #4]
    4196:	68a5      	ldr	r5, [r4, #8]
    4198:	9300      	str	r3, [sp, #0]
    419a:	9b00      	ldr	r3, [sp, #0]
    419c:	3b01      	subs	r3, #1
    419e:	9300      	str	r3, [sp, #0]
    41a0:	d40d      	bmi.n	41be <_fwalk_reent+0x3a>
    41a2:	89ab      	ldrh	r3, [r5, #12]
    41a4:	2b01      	cmp	r3, #1
    41a6:	d908      	bls.n	41ba <_fwalk_reent+0x36>
    41a8:	220e      	movs	r2, #14
    41aa:	5eab      	ldrsh	r3, [r5, r2]
    41ac:	3301      	adds	r3, #1
    41ae:	d004      	beq.n	41ba <_fwalk_reent+0x36>
    41b0:	1c38      	adds	r0, r7, #0
    41b2:	1c29      	adds	r1, r5, #0
    41b4:	9b01      	ldr	r3, [sp, #4]
    41b6:	4798      	blx	r3
    41b8:	4306      	orrs	r6, r0
    41ba:	3568      	adds	r5, #104	; 0x68
    41bc:	e7ed      	b.n	419a <_fwalk_reent+0x16>
    41be:	6824      	ldr	r4, [r4, #0]
    41c0:	e7e6      	b.n	4190 <_fwalk_reent+0xc>
    41c2:	1c30      	adds	r0, r6, #0
    41c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000041c8 <malloc>:
    41c8:	b508      	push	{r3, lr}
    41ca:	4b03      	ldr	r3, [pc, #12]	; (41d8 <malloc+0x10>)
    41cc:	1c01      	adds	r1, r0, #0
    41ce:	6818      	ldr	r0, [r3, #0]
    41d0:	f000 f84a 	bl	4268 <_malloc_r>
    41d4:	bd08      	pop	{r3, pc}
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	20000170 	.word	0x20000170

000041dc <_free_r>:
    41dc:	b530      	push	{r4, r5, lr}
    41de:	2900      	cmp	r1, #0
    41e0:	d03e      	beq.n	4260 <_free_r+0x84>
    41e2:	3904      	subs	r1, #4
    41e4:	680b      	ldr	r3, [r1, #0]
    41e6:	2b00      	cmp	r3, #0
    41e8:	da00      	bge.n	41ec <_free_r+0x10>
    41ea:	18c9      	adds	r1, r1, r3
    41ec:	4a1d      	ldr	r2, [pc, #116]	; (4264 <_free_r+0x88>)
    41ee:	6813      	ldr	r3, [r2, #0]
    41f0:	1c14      	adds	r4, r2, #0
    41f2:	2b00      	cmp	r3, #0
    41f4:	d102      	bne.n	41fc <_free_r+0x20>
    41f6:	604b      	str	r3, [r1, #4]
    41f8:	6011      	str	r1, [r2, #0]
    41fa:	e031      	b.n	4260 <_free_r+0x84>
    41fc:	4299      	cmp	r1, r3
    41fe:	d20d      	bcs.n	421c <_free_r+0x40>
    4200:	6808      	ldr	r0, [r1, #0]
    4202:	180a      	adds	r2, r1, r0
    4204:	429a      	cmp	r2, r3
    4206:	d103      	bne.n	4210 <_free_r+0x34>
    4208:	6813      	ldr	r3, [r2, #0]
    420a:	18c3      	adds	r3, r0, r3
    420c:	600b      	str	r3, [r1, #0]
    420e:	6853      	ldr	r3, [r2, #4]
    4210:	604b      	str	r3, [r1, #4]
    4212:	6021      	str	r1, [r4, #0]
    4214:	e024      	b.n	4260 <_free_r+0x84>
    4216:	428a      	cmp	r2, r1
    4218:	d803      	bhi.n	4222 <_free_r+0x46>
    421a:	1c13      	adds	r3, r2, #0
    421c:	685a      	ldr	r2, [r3, #4]
    421e:	2a00      	cmp	r2, #0
    4220:	d1f9      	bne.n	4216 <_free_r+0x3a>
    4222:	681d      	ldr	r5, [r3, #0]
    4224:	195c      	adds	r4, r3, r5
    4226:	428c      	cmp	r4, r1
    4228:	d10b      	bne.n	4242 <_free_r+0x66>
    422a:	6809      	ldr	r1, [r1, #0]
    422c:	1869      	adds	r1, r5, r1
    422e:	1858      	adds	r0, r3, r1
    4230:	6019      	str	r1, [r3, #0]
    4232:	4290      	cmp	r0, r2
    4234:	d114      	bne.n	4260 <_free_r+0x84>
    4236:	6810      	ldr	r0, [r2, #0]
    4238:	6852      	ldr	r2, [r2, #4]
    423a:	1809      	adds	r1, r1, r0
    423c:	6019      	str	r1, [r3, #0]
    423e:	605a      	str	r2, [r3, #4]
    4240:	e00e      	b.n	4260 <_free_r+0x84>
    4242:	428c      	cmp	r4, r1
    4244:	d902      	bls.n	424c <_free_r+0x70>
    4246:	230c      	movs	r3, #12
    4248:	6003      	str	r3, [r0, #0]
    424a:	e009      	b.n	4260 <_free_r+0x84>
    424c:	6808      	ldr	r0, [r1, #0]
    424e:	180c      	adds	r4, r1, r0
    4250:	4294      	cmp	r4, r2
    4252:	d103      	bne.n	425c <_free_r+0x80>
    4254:	6814      	ldr	r4, [r2, #0]
    4256:	6852      	ldr	r2, [r2, #4]
    4258:	1900      	adds	r0, r0, r4
    425a:	6008      	str	r0, [r1, #0]
    425c:	604a      	str	r2, [r1, #4]
    425e:	6059      	str	r1, [r3, #4]
    4260:	bd30      	pop	{r4, r5, pc}
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	200002ac 	.word	0x200002ac

00004268 <_malloc_r>:
    4268:	2303      	movs	r3, #3
    426a:	b570      	push	{r4, r5, r6, lr}
    426c:	1ccc      	adds	r4, r1, #3
    426e:	439c      	bics	r4, r3
    4270:	3408      	adds	r4, #8
    4272:	1c05      	adds	r5, r0, #0
    4274:	2c0c      	cmp	r4, #12
    4276:	d201      	bcs.n	427c <_malloc_r+0x14>
    4278:	240c      	movs	r4, #12
    427a:	e005      	b.n	4288 <_malloc_r+0x20>
    427c:	2c00      	cmp	r4, #0
    427e:	da03      	bge.n	4288 <_malloc_r+0x20>
    4280:	230c      	movs	r3, #12
    4282:	2000      	movs	r0, #0
    4284:	602b      	str	r3, [r5, #0]
    4286:	e042      	b.n	430e <_malloc_r+0xa6>
    4288:	428c      	cmp	r4, r1
    428a:	d3f9      	bcc.n	4280 <_malloc_r+0x18>
    428c:	4a20      	ldr	r2, [pc, #128]	; (4310 <_malloc_r+0xa8>)
    428e:	6813      	ldr	r3, [r2, #0]
    4290:	1c10      	adds	r0, r2, #0
    4292:	1c19      	adds	r1, r3, #0
    4294:	2900      	cmp	r1, #0
    4296:	d013      	beq.n	42c0 <_malloc_r+0x58>
    4298:	680a      	ldr	r2, [r1, #0]
    429a:	1b12      	subs	r2, r2, r4
    429c:	d40d      	bmi.n	42ba <_malloc_r+0x52>
    429e:	2a0b      	cmp	r2, #11
    42a0:	d902      	bls.n	42a8 <_malloc_r+0x40>
    42a2:	600a      	str	r2, [r1, #0]
    42a4:	188b      	adds	r3, r1, r2
    42a6:	e01f      	b.n	42e8 <_malloc_r+0x80>
    42a8:	428b      	cmp	r3, r1
    42aa:	d102      	bne.n	42b2 <_malloc_r+0x4a>
    42ac:	685a      	ldr	r2, [r3, #4]
    42ae:	6002      	str	r2, [r0, #0]
    42b0:	e01b      	b.n	42ea <_malloc_r+0x82>
    42b2:	684a      	ldr	r2, [r1, #4]
    42b4:	605a      	str	r2, [r3, #4]
    42b6:	1c0b      	adds	r3, r1, #0
    42b8:	e017      	b.n	42ea <_malloc_r+0x82>
    42ba:	1c0b      	adds	r3, r1, #0
    42bc:	6849      	ldr	r1, [r1, #4]
    42be:	e7e9      	b.n	4294 <_malloc_r+0x2c>
    42c0:	4e14      	ldr	r6, [pc, #80]	; (4314 <_malloc_r+0xac>)
    42c2:	6833      	ldr	r3, [r6, #0]
    42c4:	2b00      	cmp	r3, #0
    42c6:	d103      	bne.n	42d0 <_malloc_r+0x68>
    42c8:	1c28      	adds	r0, r5, #0
    42ca:	f000 fae3 	bl	4894 <_sbrk_r>
    42ce:	6030      	str	r0, [r6, #0]
    42d0:	1c28      	adds	r0, r5, #0
    42d2:	1c21      	adds	r1, r4, #0
    42d4:	f000 fade 	bl	4894 <_sbrk_r>
    42d8:	1c03      	adds	r3, r0, #0
    42da:	1c42      	adds	r2, r0, #1
    42dc:	d0d0      	beq.n	4280 <_malloc_r+0x18>
    42de:	2203      	movs	r2, #3
    42e0:	1cc6      	adds	r6, r0, #3
    42e2:	4396      	bics	r6, r2
    42e4:	4286      	cmp	r6, r0
    42e6:	d10a      	bne.n	42fe <_malloc_r+0x96>
    42e8:	601c      	str	r4, [r3, #0]
    42ea:	1c18      	adds	r0, r3, #0
    42ec:	2107      	movs	r1, #7
    42ee:	300b      	adds	r0, #11
    42f0:	1d1a      	adds	r2, r3, #4
    42f2:	4388      	bics	r0, r1
    42f4:	1a82      	subs	r2, r0, r2
    42f6:	d00a      	beq.n	430e <_malloc_r+0xa6>
    42f8:	4251      	negs	r1, r2
    42fa:	5099      	str	r1, [r3, r2]
    42fc:	e007      	b.n	430e <_malloc_r+0xa6>
    42fe:	1a31      	subs	r1, r6, r0
    4300:	1c28      	adds	r0, r5, #0
    4302:	f000 fac7 	bl	4894 <_sbrk_r>
    4306:	1c43      	adds	r3, r0, #1
    4308:	d0ba      	beq.n	4280 <_malloc_r+0x18>
    430a:	1c33      	adds	r3, r6, #0
    430c:	e7ec      	b.n	42e8 <_malloc_r+0x80>
    430e:	bd70      	pop	{r4, r5, r6, pc}
    4310:	200002ac 	.word	0x200002ac
    4314:	200002a8 	.word	0x200002a8

00004318 <__sfputc_r>:
    4318:	6893      	ldr	r3, [r2, #8]
    431a:	b510      	push	{r4, lr}
    431c:	3b01      	subs	r3, #1
    431e:	6093      	str	r3, [r2, #8]
    4320:	2b00      	cmp	r3, #0
    4322:	da05      	bge.n	4330 <__sfputc_r+0x18>
    4324:	6994      	ldr	r4, [r2, #24]
    4326:	42a3      	cmp	r3, r4
    4328:	db08      	blt.n	433c <__sfputc_r+0x24>
    432a:	b2cb      	uxtb	r3, r1
    432c:	2b0a      	cmp	r3, #10
    432e:	d005      	beq.n	433c <__sfputc_r+0x24>
    4330:	6813      	ldr	r3, [r2, #0]
    4332:	1c58      	adds	r0, r3, #1
    4334:	6010      	str	r0, [r2, #0]
    4336:	7019      	strb	r1, [r3, #0]
    4338:	b2c8      	uxtb	r0, r1
    433a:	e001      	b.n	4340 <__sfputc_r+0x28>
    433c:	f000 fb08 	bl	4950 <__swbuf_r>
    4340:	bd10      	pop	{r4, pc}

00004342 <__sfputs_r>:
    4342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4344:	1c06      	adds	r6, r0, #0
    4346:	1c0f      	adds	r7, r1, #0
    4348:	1c14      	adds	r4, r2, #0
    434a:	18d5      	adds	r5, r2, r3
    434c:	42ac      	cmp	r4, r5
    434e:	d008      	beq.n	4362 <__sfputs_r+0x20>
    4350:	7821      	ldrb	r1, [r4, #0]
    4352:	1c30      	adds	r0, r6, #0
    4354:	1c3a      	adds	r2, r7, #0
    4356:	f7ff ffdf 	bl	4318 <__sfputc_r>
    435a:	3401      	adds	r4, #1
    435c:	1c43      	adds	r3, r0, #1
    435e:	d1f5      	bne.n	434c <__sfputs_r+0xa>
    4360:	e000      	b.n	4364 <__sfputs_r+0x22>
    4362:	2000      	movs	r0, #0
    4364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004368 <_vfiprintf_r>:
    4368:	b5f0      	push	{r4, r5, r6, r7, lr}
    436a:	b09f      	sub	sp, #124	; 0x7c
    436c:	1c06      	adds	r6, r0, #0
    436e:	1c0f      	adds	r7, r1, #0
    4370:	9202      	str	r2, [sp, #8]
    4372:	9305      	str	r3, [sp, #20]
    4374:	2800      	cmp	r0, #0
    4376:	d004      	beq.n	4382 <_vfiprintf_r+0x1a>
    4378:	6983      	ldr	r3, [r0, #24]
    437a:	2b00      	cmp	r3, #0
    437c:	d101      	bne.n	4382 <_vfiprintf_r+0x1a>
    437e:	f7ff fe91 	bl	40a4 <__sinit>
    4382:	4b79      	ldr	r3, [pc, #484]	; (4568 <_vfiprintf_r+0x200>)
    4384:	429f      	cmp	r7, r3
    4386:	d101      	bne.n	438c <_vfiprintf_r+0x24>
    4388:	6877      	ldr	r7, [r6, #4]
    438a:	e008      	b.n	439e <_vfiprintf_r+0x36>
    438c:	4b77      	ldr	r3, [pc, #476]	; (456c <_vfiprintf_r+0x204>)
    438e:	429f      	cmp	r7, r3
    4390:	d101      	bne.n	4396 <_vfiprintf_r+0x2e>
    4392:	68b7      	ldr	r7, [r6, #8]
    4394:	e003      	b.n	439e <_vfiprintf_r+0x36>
    4396:	4b76      	ldr	r3, [pc, #472]	; (4570 <_vfiprintf_r+0x208>)
    4398:	429f      	cmp	r7, r3
    439a:	d100      	bne.n	439e <_vfiprintf_r+0x36>
    439c:	68f7      	ldr	r7, [r6, #12]
    439e:	89bb      	ldrh	r3, [r7, #12]
    43a0:	071b      	lsls	r3, r3, #28
    43a2:	d50a      	bpl.n	43ba <_vfiprintf_r+0x52>
    43a4:	693b      	ldr	r3, [r7, #16]
    43a6:	2b00      	cmp	r3, #0
    43a8:	d007      	beq.n	43ba <_vfiprintf_r+0x52>
    43aa:	2300      	movs	r3, #0
    43ac:	ad06      	add	r5, sp, #24
    43ae:	616b      	str	r3, [r5, #20]
    43b0:	3320      	adds	r3, #32
    43b2:	766b      	strb	r3, [r5, #25]
    43b4:	3310      	adds	r3, #16
    43b6:	76ab      	strb	r3, [r5, #26]
    43b8:	e03d      	b.n	4436 <_vfiprintf_r+0xce>
    43ba:	1c30      	adds	r0, r6, #0
    43bc:	1c39      	adds	r1, r7, #0
    43be:	f000 fb33 	bl	4a28 <__swsetup_r>
    43c2:	2800      	cmp	r0, #0
    43c4:	d0f1      	beq.n	43aa <_vfiprintf_r+0x42>
    43c6:	2001      	movs	r0, #1
    43c8:	4240      	negs	r0, r0
    43ca:	e0ca      	b.n	4562 <_vfiprintf_r+0x1fa>
    43cc:	9a05      	ldr	r2, [sp, #20]
    43ce:	1d11      	adds	r1, r2, #4
    43d0:	6812      	ldr	r2, [r2, #0]
    43d2:	9105      	str	r1, [sp, #20]
    43d4:	2a00      	cmp	r2, #0
    43d6:	db7e      	blt.n	44d6 <_vfiprintf_r+0x16e>
    43d8:	9209      	str	r2, [sp, #36]	; 0x24
    43da:	3401      	adds	r4, #1
    43dc:	7823      	ldrb	r3, [r4, #0]
    43de:	2b2e      	cmp	r3, #46	; 0x2e
    43e0:	d100      	bne.n	43e4 <_vfiprintf_r+0x7c>
    43e2:	e089      	b.n	44f8 <_vfiprintf_r+0x190>
    43e4:	7821      	ldrb	r1, [r4, #0]
    43e6:	4863      	ldr	r0, [pc, #396]	; (4574 <_vfiprintf_r+0x20c>)
    43e8:	2203      	movs	r2, #3
    43ea:	f000 fc0f 	bl	4c0c <memchr>
    43ee:	2800      	cmp	r0, #0
    43f0:	d008      	beq.n	4404 <_vfiprintf_r+0x9c>
    43f2:	4b60      	ldr	r3, [pc, #384]	; (4574 <_vfiprintf_r+0x20c>)
    43f4:	3401      	adds	r4, #1
    43f6:	1ac0      	subs	r0, r0, r3
    43f8:	2340      	movs	r3, #64	; 0x40
    43fa:	4083      	lsls	r3, r0
    43fc:	1c18      	adds	r0, r3, #0
    43fe:	682b      	ldr	r3, [r5, #0]
    4400:	4318      	orrs	r0, r3
    4402:	6028      	str	r0, [r5, #0]
    4404:	7821      	ldrb	r1, [r4, #0]
    4406:	1c63      	adds	r3, r4, #1
    4408:	485b      	ldr	r0, [pc, #364]	; (4578 <_vfiprintf_r+0x210>)
    440a:	2206      	movs	r2, #6
    440c:	9302      	str	r3, [sp, #8]
    440e:	7629      	strb	r1, [r5, #24]
    4410:	f000 fbfc 	bl	4c0c <memchr>
    4414:	2800      	cmp	r0, #0
    4416:	d100      	bne.n	441a <_vfiprintf_r+0xb2>
    4418:	e091      	b.n	453e <_vfiprintf_r+0x1d6>
    441a:	4b58      	ldr	r3, [pc, #352]	; (457c <_vfiprintf_r+0x214>)
    441c:	2b00      	cmp	r3, #0
    441e:	d000      	beq.n	4422 <_vfiprintf_r+0xba>
    4420:	e084      	b.n	452c <_vfiprintf_r+0x1c4>
    4422:	2207      	movs	r2, #7
    4424:	9b05      	ldr	r3, [sp, #20]
    4426:	3307      	adds	r3, #7
    4428:	4393      	bics	r3, r2
    442a:	3308      	adds	r3, #8
    442c:	9305      	str	r3, [sp, #20]
    442e:	696b      	ldr	r3, [r5, #20]
    4430:	9a03      	ldr	r2, [sp, #12]
    4432:	189b      	adds	r3, r3, r2
    4434:	616b      	str	r3, [r5, #20]
    4436:	9c02      	ldr	r4, [sp, #8]
    4438:	7823      	ldrb	r3, [r4, #0]
    443a:	2b00      	cmp	r3, #0
    443c:	d104      	bne.n	4448 <_vfiprintf_r+0xe0>
    443e:	9b02      	ldr	r3, [sp, #8]
    4440:	1ae3      	subs	r3, r4, r3
    4442:	9304      	str	r3, [sp, #16]
    4444:	d011      	beq.n	446a <_vfiprintf_r+0x102>
    4446:	e003      	b.n	4450 <_vfiprintf_r+0xe8>
    4448:	2b25      	cmp	r3, #37	; 0x25
    444a:	d0f8      	beq.n	443e <_vfiprintf_r+0xd6>
    444c:	3401      	adds	r4, #1
    444e:	e7f3      	b.n	4438 <_vfiprintf_r+0xd0>
    4450:	9b04      	ldr	r3, [sp, #16]
    4452:	1c30      	adds	r0, r6, #0
    4454:	1c39      	adds	r1, r7, #0
    4456:	9a02      	ldr	r2, [sp, #8]
    4458:	f7ff ff73 	bl	4342 <__sfputs_r>
    445c:	1c43      	adds	r3, r0, #1
    445e:	d07b      	beq.n	4558 <_vfiprintf_r+0x1f0>
    4460:	696a      	ldr	r2, [r5, #20]
    4462:	9b04      	ldr	r3, [sp, #16]
    4464:	4694      	mov	ip, r2
    4466:	4463      	add	r3, ip
    4468:	616b      	str	r3, [r5, #20]
    446a:	7823      	ldrb	r3, [r4, #0]
    446c:	2b00      	cmp	r3, #0
    446e:	d073      	beq.n	4558 <_vfiprintf_r+0x1f0>
    4470:	2201      	movs	r2, #1
    4472:	2300      	movs	r3, #0
    4474:	4252      	negs	r2, r2
    4476:	606a      	str	r2, [r5, #4]
    4478:	a902      	add	r1, sp, #8
    447a:	3254      	adds	r2, #84	; 0x54
    447c:	1852      	adds	r2, r2, r1
    447e:	3401      	adds	r4, #1
    4480:	602b      	str	r3, [r5, #0]
    4482:	60eb      	str	r3, [r5, #12]
    4484:	60ab      	str	r3, [r5, #8]
    4486:	7013      	strb	r3, [r2, #0]
    4488:	65ab      	str	r3, [r5, #88]	; 0x58
    448a:	7821      	ldrb	r1, [r4, #0]
    448c:	483c      	ldr	r0, [pc, #240]	; (4580 <_vfiprintf_r+0x218>)
    448e:	2205      	movs	r2, #5
    4490:	f000 fbbc 	bl	4c0c <memchr>
    4494:	2800      	cmp	r0, #0
    4496:	d009      	beq.n	44ac <_vfiprintf_r+0x144>
    4498:	4b39      	ldr	r3, [pc, #228]	; (4580 <_vfiprintf_r+0x218>)
    449a:	3401      	adds	r4, #1
    449c:	1ac0      	subs	r0, r0, r3
    449e:	2301      	movs	r3, #1
    44a0:	4083      	lsls	r3, r0
    44a2:	1c18      	adds	r0, r3, #0
    44a4:	682b      	ldr	r3, [r5, #0]
    44a6:	4318      	orrs	r0, r3
    44a8:	6028      	str	r0, [r5, #0]
    44aa:	e7ee      	b.n	448a <_vfiprintf_r+0x122>
    44ac:	682b      	ldr	r3, [r5, #0]
    44ae:	06da      	lsls	r2, r3, #27
    44b0:	d504      	bpl.n	44bc <_vfiprintf_r+0x154>
    44b2:	2253      	movs	r2, #83	; 0x53
    44b4:	2120      	movs	r1, #32
    44b6:	a802      	add	r0, sp, #8
    44b8:	1812      	adds	r2, r2, r0
    44ba:	7011      	strb	r1, [r2, #0]
    44bc:	071a      	lsls	r2, r3, #28
    44be:	d504      	bpl.n	44ca <_vfiprintf_r+0x162>
    44c0:	2253      	movs	r2, #83	; 0x53
    44c2:	212b      	movs	r1, #43	; 0x2b
    44c4:	a802      	add	r0, sp, #8
    44c6:	1812      	adds	r2, r2, r0
    44c8:	7011      	strb	r1, [r2, #0]
    44ca:	7822      	ldrb	r2, [r4, #0]
    44cc:	2a2a      	cmp	r2, #42	; 0x2a
    44ce:	d100      	bne.n	44d2 <_vfiprintf_r+0x16a>
    44d0:	e77c      	b.n	43cc <_vfiprintf_r+0x64>
    44d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44d4:	e005      	b.n	44e2 <_vfiprintf_r+0x17a>
    44d6:	4252      	negs	r2, r2
    44d8:	60ea      	str	r2, [r5, #12]
    44da:	2202      	movs	r2, #2
    44dc:	4313      	orrs	r3, r2
    44de:	602b      	str	r3, [r5, #0]
    44e0:	e77b      	b.n	43da <_vfiprintf_r+0x72>
    44e2:	7822      	ldrb	r2, [r4, #0]
    44e4:	3a30      	subs	r2, #48	; 0x30
    44e6:	2a09      	cmp	r2, #9
    44e8:	d804      	bhi.n	44f4 <_vfiprintf_r+0x18c>
    44ea:	210a      	movs	r1, #10
    44ec:	434b      	muls	r3, r1
    44ee:	3401      	adds	r4, #1
    44f0:	189b      	adds	r3, r3, r2
    44f2:	e7f6      	b.n	44e2 <_vfiprintf_r+0x17a>
    44f4:	9309      	str	r3, [sp, #36]	; 0x24
    44f6:	e771      	b.n	43dc <_vfiprintf_r+0x74>
    44f8:	7863      	ldrb	r3, [r4, #1]
    44fa:	2b2a      	cmp	r3, #42	; 0x2a
    44fc:	d109      	bne.n	4512 <_vfiprintf_r+0x1aa>
    44fe:	9b05      	ldr	r3, [sp, #20]
    4500:	3402      	adds	r4, #2
    4502:	1d1a      	adds	r2, r3, #4
    4504:	681b      	ldr	r3, [r3, #0]
    4506:	9205      	str	r2, [sp, #20]
    4508:	2b00      	cmp	r3, #0
    450a:	da0d      	bge.n	4528 <_vfiprintf_r+0x1c0>
    450c:	2301      	movs	r3, #1
    450e:	425b      	negs	r3, r3
    4510:	e00a      	b.n	4528 <_vfiprintf_r+0x1c0>
    4512:	2300      	movs	r3, #0
    4514:	3401      	adds	r4, #1
    4516:	7822      	ldrb	r2, [r4, #0]
    4518:	3a30      	subs	r2, #48	; 0x30
    451a:	2a09      	cmp	r2, #9
    451c:	d804      	bhi.n	4528 <_vfiprintf_r+0x1c0>
    451e:	210a      	movs	r1, #10
    4520:	434b      	muls	r3, r1
    4522:	3401      	adds	r4, #1
    4524:	189b      	adds	r3, r3, r2
    4526:	e7f6      	b.n	4516 <_vfiprintf_r+0x1ae>
    4528:	9307      	str	r3, [sp, #28]
    452a:	e75b      	b.n	43e4 <_vfiprintf_r+0x7c>
    452c:	ab05      	add	r3, sp, #20
    452e:	9300      	str	r3, [sp, #0]
    4530:	1c30      	adds	r0, r6, #0
    4532:	1c29      	adds	r1, r5, #0
    4534:	1c3a      	adds	r2, r7, #0
    4536:	4b13      	ldr	r3, [pc, #76]	; (4584 <_vfiprintf_r+0x21c>)
    4538:	e000      	b.n	453c <_vfiprintf_r+0x1d4>
    453a:	bf00      	nop
    453c:	e007      	b.n	454e <_vfiprintf_r+0x1e6>
    453e:	ab05      	add	r3, sp, #20
    4540:	9300      	str	r3, [sp, #0]
    4542:	1c30      	adds	r0, r6, #0
    4544:	1c29      	adds	r1, r5, #0
    4546:	1c3a      	adds	r2, r7, #0
    4548:	4b0e      	ldr	r3, [pc, #56]	; (4584 <_vfiprintf_r+0x21c>)
    454a:	f000 f88b 	bl	4664 <_printf_i>
    454e:	9003      	str	r0, [sp, #12]
    4550:	9b03      	ldr	r3, [sp, #12]
    4552:	3301      	adds	r3, #1
    4554:	d000      	beq.n	4558 <_vfiprintf_r+0x1f0>
    4556:	e76a      	b.n	442e <_vfiprintf_r+0xc6>
    4558:	89bb      	ldrh	r3, [r7, #12]
    455a:	065b      	lsls	r3, r3, #25
    455c:	d500      	bpl.n	4560 <_vfiprintf_r+0x1f8>
    455e:	e732      	b.n	43c6 <_vfiprintf_r+0x5e>
    4560:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4562:	b01f      	add	sp, #124	; 0x7c
    4564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4566:	46c0      	nop			; (mov r8, r8)
    4568:	00005030 	.word	0x00005030
    456c:	00005050 	.word	0x00005050
    4570:	00005070 	.word	0x00005070
    4574:	00005096 	.word	0x00005096
    4578:	0000509a 	.word	0x0000509a
    457c:	00000000 	.word	0x00000000
    4580:	00005090 	.word	0x00005090
    4584:	00004343 	.word	0x00004343

00004588 <_printf_common>:
    4588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    458a:	1c17      	adds	r7, r2, #0
    458c:	9301      	str	r3, [sp, #4]
    458e:	690a      	ldr	r2, [r1, #16]
    4590:	688b      	ldr	r3, [r1, #8]
    4592:	9000      	str	r0, [sp, #0]
    4594:	1c0c      	adds	r4, r1, #0
    4596:	4293      	cmp	r3, r2
    4598:	da00      	bge.n	459c <_printf_common+0x14>
    459a:	1c13      	adds	r3, r2, #0
    459c:	1c22      	adds	r2, r4, #0
    459e:	603b      	str	r3, [r7, #0]
    45a0:	3243      	adds	r2, #67	; 0x43
    45a2:	7812      	ldrb	r2, [r2, #0]
    45a4:	2a00      	cmp	r2, #0
    45a6:	d001      	beq.n	45ac <_printf_common+0x24>
    45a8:	3301      	adds	r3, #1
    45aa:	603b      	str	r3, [r7, #0]
    45ac:	6823      	ldr	r3, [r4, #0]
    45ae:	069b      	lsls	r3, r3, #26
    45b0:	d502      	bpl.n	45b8 <_printf_common+0x30>
    45b2:	683b      	ldr	r3, [r7, #0]
    45b4:	3302      	adds	r3, #2
    45b6:	603b      	str	r3, [r7, #0]
    45b8:	2506      	movs	r5, #6
    45ba:	6823      	ldr	r3, [r4, #0]
    45bc:	401d      	ands	r5, r3
    45be:	d01e      	beq.n	45fe <_printf_common+0x76>
    45c0:	1c23      	adds	r3, r4, #0
    45c2:	3343      	adds	r3, #67	; 0x43
    45c4:	781b      	ldrb	r3, [r3, #0]
    45c6:	1e5a      	subs	r2, r3, #1
    45c8:	4193      	sbcs	r3, r2
    45ca:	6822      	ldr	r2, [r4, #0]
    45cc:	0692      	lsls	r2, r2, #26
    45ce:	d51c      	bpl.n	460a <_printf_common+0x82>
    45d0:	2030      	movs	r0, #48	; 0x30
    45d2:	18e1      	adds	r1, r4, r3
    45d4:	3140      	adds	r1, #64	; 0x40
    45d6:	70c8      	strb	r0, [r1, #3]
    45d8:	1c21      	adds	r1, r4, #0
    45da:	1c5a      	adds	r2, r3, #1
    45dc:	3145      	adds	r1, #69	; 0x45
    45de:	7809      	ldrb	r1, [r1, #0]
    45e0:	18a2      	adds	r2, r4, r2
    45e2:	3240      	adds	r2, #64	; 0x40
    45e4:	3302      	adds	r3, #2
    45e6:	70d1      	strb	r1, [r2, #3]
    45e8:	e00f      	b.n	460a <_printf_common+0x82>
    45ea:	1c22      	adds	r2, r4, #0
    45ec:	2301      	movs	r3, #1
    45ee:	9800      	ldr	r0, [sp, #0]
    45f0:	9901      	ldr	r1, [sp, #4]
    45f2:	3219      	adds	r2, #25
    45f4:	9e08      	ldr	r6, [sp, #32]
    45f6:	47b0      	blx	r6
    45f8:	1c43      	adds	r3, r0, #1
    45fa:	d00e      	beq.n	461a <_printf_common+0x92>
    45fc:	3501      	adds	r5, #1
    45fe:	68e3      	ldr	r3, [r4, #12]
    4600:	683a      	ldr	r2, [r7, #0]
    4602:	1a9b      	subs	r3, r3, r2
    4604:	429d      	cmp	r5, r3
    4606:	dbf0      	blt.n	45ea <_printf_common+0x62>
    4608:	e7da      	b.n	45c0 <_printf_common+0x38>
    460a:	1c22      	adds	r2, r4, #0
    460c:	9800      	ldr	r0, [sp, #0]
    460e:	9901      	ldr	r1, [sp, #4]
    4610:	3243      	adds	r2, #67	; 0x43
    4612:	9d08      	ldr	r5, [sp, #32]
    4614:	47a8      	blx	r5
    4616:	1c43      	adds	r3, r0, #1
    4618:	d102      	bne.n	4620 <_printf_common+0x98>
    461a:	2001      	movs	r0, #1
    461c:	4240      	negs	r0, r0
    461e:	e020      	b.n	4662 <_printf_common+0xda>
    4620:	2306      	movs	r3, #6
    4622:	6820      	ldr	r0, [r4, #0]
    4624:	68e1      	ldr	r1, [r4, #12]
    4626:	683a      	ldr	r2, [r7, #0]
    4628:	4003      	ands	r3, r0
    462a:	2500      	movs	r5, #0
    462c:	2b04      	cmp	r3, #4
    462e:	d103      	bne.n	4638 <_printf_common+0xb0>
    4630:	1a8d      	subs	r5, r1, r2
    4632:	43eb      	mvns	r3, r5
    4634:	17db      	asrs	r3, r3, #31
    4636:	401d      	ands	r5, r3
    4638:	68a3      	ldr	r3, [r4, #8]
    463a:	6922      	ldr	r2, [r4, #16]
    463c:	4293      	cmp	r3, r2
    463e:	dd01      	ble.n	4644 <_printf_common+0xbc>
    4640:	1a9b      	subs	r3, r3, r2
    4642:	18ed      	adds	r5, r5, r3
    4644:	2700      	movs	r7, #0
    4646:	42af      	cmp	r7, r5
    4648:	da0a      	bge.n	4660 <_printf_common+0xd8>
    464a:	1c22      	adds	r2, r4, #0
    464c:	2301      	movs	r3, #1
    464e:	9800      	ldr	r0, [sp, #0]
    4650:	9901      	ldr	r1, [sp, #4]
    4652:	321a      	adds	r2, #26
    4654:	9e08      	ldr	r6, [sp, #32]
    4656:	47b0      	blx	r6
    4658:	1c43      	adds	r3, r0, #1
    465a:	d0de      	beq.n	461a <_printf_common+0x92>
    465c:	3701      	adds	r7, #1
    465e:	e7f2      	b.n	4646 <_printf_common+0xbe>
    4660:	2000      	movs	r0, #0
    4662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004664 <_printf_i>:
    4664:	b5f0      	push	{r4, r5, r6, r7, lr}
    4666:	b08b      	sub	sp, #44	; 0x2c
    4668:	9206      	str	r2, [sp, #24]
    466a:	1c0a      	adds	r2, r1, #0
    466c:	3243      	adds	r2, #67	; 0x43
    466e:	9307      	str	r3, [sp, #28]
    4670:	9005      	str	r0, [sp, #20]
    4672:	9204      	str	r2, [sp, #16]
    4674:	7e0a      	ldrb	r2, [r1, #24]
    4676:	1c0c      	adds	r4, r1, #0
    4678:	9b10      	ldr	r3, [sp, #64]	; 0x40
    467a:	2a6e      	cmp	r2, #110	; 0x6e
    467c:	d100      	bne.n	4680 <_printf_i+0x1c>
    467e:	e0a8      	b.n	47d2 <_printf_i+0x16e>
    4680:	d811      	bhi.n	46a6 <_printf_i+0x42>
    4682:	2a63      	cmp	r2, #99	; 0x63
    4684:	d022      	beq.n	46cc <_printf_i+0x68>
    4686:	d809      	bhi.n	469c <_printf_i+0x38>
    4688:	2a00      	cmp	r2, #0
    468a:	d100      	bne.n	468e <_printf_i+0x2a>
    468c:	e0b2      	b.n	47f4 <_printf_i+0x190>
    468e:	2a58      	cmp	r2, #88	; 0x58
    4690:	d000      	beq.n	4694 <_printf_i+0x30>
    4692:	e0c2      	b.n	481a <_printf_i+0x1b6>
    4694:	3145      	adds	r1, #69	; 0x45
    4696:	700a      	strb	r2, [r1, #0]
    4698:	4a7c      	ldr	r2, [pc, #496]	; (488c <_printf_i+0x228>)
    469a:	e04f      	b.n	473c <_printf_i+0xd8>
    469c:	2a64      	cmp	r2, #100	; 0x64
    469e:	d01d      	beq.n	46dc <_printf_i+0x78>
    46a0:	2a69      	cmp	r2, #105	; 0x69
    46a2:	d01b      	beq.n	46dc <_printf_i+0x78>
    46a4:	e0b9      	b.n	481a <_printf_i+0x1b6>
    46a6:	2a73      	cmp	r2, #115	; 0x73
    46a8:	d100      	bne.n	46ac <_printf_i+0x48>
    46aa:	e0a7      	b.n	47fc <_printf_i+0x198>
    46ac:	d809      	bhi.n	46c2 <_printf_i+0x5e>
    46ae:	2a6f      	cmp	r2, #111	; 0x6f
    46b0:	d029      	beq.n	4706 <_printf_i+0xa2>
    46b2:	2a70      	cmp	r2, #112	; 0x70
    46b4:	d000      	beq.n	46b8 <_printf_i+0x54>
    46b6:	e0b0      	b.n	481a <_printf_i+0x1b6>
    46b8:	2220      	movs	r2, #32
    46ba:	6809      	ldr	r1, [r1, #0]
    46bc:	430a      	orrs	r2, r1
    46be:	6022      	str	r2, [r4, #0]
    46c0:	e037      	b.n	4732 <_printf_i+0xce>
    46c2:	2a75      	cmp	r2, #117	; 0x75
    46c4:	d01f      	beq.n	4706 <_printf_i+0xa2>
    46c6:	2a78      	cmp	r2, #120	; 0x78
    46c8:	d033      	beq.n	4732 <_printf_i+0xce>
    46ca:	e0a6      	b.n	481a <_printf_i+0x1b6>
    46cc:	1c0e      	adds	r6, r1, #0
    46ce:	681a      	ldr	r2, [r3, #0]
    46d0:	3642      	adds	r6, #66	; 0x42
    46d2:	1d11      	adds	r1, r2, #4
    46d4:	6019      	str	r1, [r3, #0]
    46d6:	6813      	ldr	r3, [r2, #0]
    46d8:	7033      	strb	r3, [r6, #0]
    46da:	e0a1      	b.n	4820 <_printf_i+0x1bc>
    46dc:	6821      	ldr	r1, [r4, #0]
    46de:	681a      	ldr	r2, [r3, #0]
    46e0:	0608      	lsls	r0, r1, #24
    46e2:	d406      	bmi.n	46f2 <_printf_i+0x8e>
    46e4:	0649      	lsls	r1, r1, #25
    46e6:	d504      	bpl.n	46f2 <_printf_i+0x8e>
    46e8:	1d11      	adds	r1, r2, #4
    46ea:	6019      	str	r1, [r3, #0]
    46ec:	2300      	movs	r3, #0
    46ee:	5ed5      	ldrsh	r5, [r2, r3]
    46f0:	e002      	b.n	46f8 <_printf_i+0x94>
    46f2:	1d11      	adds	r1, r2, #4
    46f4:	6019      	str	r1, [r3, #0]
    46f6:	6815      	ldr	r5, [r2, #0]
    46f8:	2d00      	cmp	r5, #0
    46fa:	da3b      	bge.n	4774 <_printf_i+0x110>
    46fc:	232d      	movs	r3, #45	; 0x2d
    46fe:	9a04      	ldr	r2, [sp, #16]
    4700:	426d      	negs	r5, r5
    4702:	7013      	strb	r3, [r2, #0]
    4704:	e036      	b.n	4774 <_printf_i+0x110>
    4706:	6821      	ldr	r1, [r4, #0]
    4708:	681a      	ldr	r2, [r3, #0]
    470a:	0608      	lsls	r0, r1, #24
    470c:	d406      	bmi.n	471c <_printf_i+0xb8>
    470e:	0649      	lsls	r1, r1, #25
    4710:	d504      	bpl.n	471c <_printf_i+0xb8>
    4712:	6815      	ldr	r5, [r2, #0]
    4714:	1d11      	adds	r1, r2, #4
    4716:	6019      	str	r1, [r3, #0]
    4718:	b2ad      	uxth	r5, r5
    471a:	e002      	b.n	4722 <_printf_i+0xbe>
    471c:	1d11      	adds	r1, r2, #4
    471e:	6019      	str	r1, [r3, #0]
    4720:	6815      	ldr	r5, [r2, #0]
    4722:	4b5a      	ldr	r3, [pc, #360]	; (488c <_printf_i+0x228>)
    4724:	7e22      	ldrb	r2, [r4, #24]
    4726:	9303      	str	r3, [sp, #12]
    4728:	270a      	movs	r7, #10
    472a:	2a6f      	cmp	r2, #111	; 0x6f
    472c:	d11d      	bne.n	476a <_printf_i+0x106>
    472e:	2708      	movs	r7, #8
    4730:	e01b      	b.n	476a <_printf_i+0x106>
    4732:	1c22      	adds	r2, r4, #0
    4734:	2178      	movs	r1, #120	; 0x78
    4736:	3245      	adds	r2, #69	; 0x45
    4738:	7011      	strb	r1, [r2, #0]
    473a:	4a55      	ldr	r2, [pc, #340]	; (4890 <_printf_i+0x22c>)
    473c:	6819      	ldr	r1, [r3, #0]
    473e:	9203      	str	r2, [sp, #12]
    4740:	1d08      	adds	r0, r1, #4
    4742:	6822      	ldr	r2, [r4, #0]
    4744:	6018      	str	r0, [r3, #0]
    4746:	680d      	ldr	r5, [r1, #0]
    4748:	0610      	lsls	r0, r2, #24
    474a:	d402      	bmi.n	4752 <_printf_i+0xee>
    474c:	0650      	lsls	r0, r2, #25
    474e:	d500      	bpl.n	4752 <_printf_i+0xee>
    4750:	b2ad      	uxth	r5, r5
    4752:	07d3      	lsls	r3, r2, #31
    4754:	d502      	bpl.n	475c <_printf_i+0xf8>
    4756:	2320      	movs	r3, #32
    4758:	431a      	orrs	r2, r3
    475a:	6022      	str	r2, [r4, #0]
    475c:	2710      	movs	r7, #16
    475e:	2d00      	cmp	r5, #0
    4760:	d103      	bne.n	476a <_printf_i+0x106>
    4762:	2320      	movs	r3, #32
    4764:	6822      	ldr	r2, [r4, #0]
    4766:	439a      	bics	r2, r3
    4768:	6022      	str	r2, [r4, #0]
    476a:	1c23      	adds	r3, r4, #0
    476c:	2200      	movs	r2, #0
    476e:	3343      	adds	r3, #67	; 0x43
    4770:	701a      	strb	r2, [r3, #0]
    4772:	e002      	b.n	477a <_printf_i+0x116>
    4774:	270a      	movs	r7, #10
    4776:	4b45      	ldr	r3, [pc, #276]	; (488c <_printf_i+0x228>)
    4778:	9303      	str	r3, [sp, #12]
    477a:	6863      	ldr	r3, [r4, #4]
    477c:	60a3      	str	r3, [r4, #8]
    477e:	2b00      	cmp	r3, #0
    4780:	db03      	blt.n	478a <_printf_i+0x126>
    4782:	2204      	movs	r2, #4
    4784:	6821      	ldr	r1, [r4, #0]
    4786:	4391      	bics	r1, r2
    4788:	6021      	str	r1, [r4, #0]
    478a:	2d00      	cmp	r5, #0
    478c:	d102      	bne.n	4794 <_printf_i+0x130>
    478e:	9e04      	ldr	r6, [sp, #16]
    4790:	2b00      	cmp	r3, #0
    4792:	d00e      	beq.n	47b2 <_printf_i+0x14e>
    4794:	9e04      	ldr	r6, [sp, #16]
    4796:	1c28      	adds	r0, r5, #0
    4798:	1c39      	adds	r1, r7, #0
    479a:	f7fd fc05 	bl	1fa8 <__aeabi_uidivmod>
    479e:	9b03      	ldr	r3, [sp, #12]
    47a0:	3e01      	subs	r6, #1
    47a2:	5c5b      	ldrb	r3, [r3, r1]
    47a4:	1c28      	adds	r0, r5, #0
    47a6:	7033      	strb	r3, [r6, #0]
    47a8:	1c39      	adds	r1, r7, #0
    47aa:	f7fd fb77 	bl	1e9c <__aeabi_uidiv>
    47ae:	1e05      	subs	r5, r0, #0
    47b0:	d1f1      	bne.n	4796 <_printf_i+0x132>
    47b2:	2f08      	cmp	r7, #8
    47b4:	d109      	bne.n	47ca <_printf_i+0x166>
    47b6:	6823      	ldr	r3, [r4, #0]
    47b8:	07db      	lsls	r3, r3, #31
    47ba:	d506      	bpl.n	47ca <_printf_i+0x166>
    47bc:	6863      	ldr	r3, [r4, #4]
    47be:	6922      	ldr	r2, [r4, #16]
    47c0:	4293      	cmp	r3, r2
    47c2:	dc02      	bgt.n	47ca <_printf_i+0x166>
    47c4:	2330      	movs	r3, #48	; 0x30
    47c6:	3e01      	subs	r6, #1
    47c8:	7033      	strb	r3, [r6, #0]
    47ca:	9b04      	ldr	r3, [sp, #16]
    47cc:	1b9b      	subs	r3, r3, r6
    47ce:	6123      	str	r3, [r4, #16]
    47d0:	e02b      	b.n	482a <_printf_i+0x1c6>
    47d2:	6809      	ldr	r1, [r1, #0]
    47d4:	681a      	ldr	r2, [r3, #0]
    47d6:	0608      	lsls	r0, r1, #24
    47d8:	d407      	bmi.n	47ea <_printf_i+0x186>
    47da:	0649      	lsls	r1, r1, #25
    47dc:	d505      	bpl.n	47ea <_printf_i+0x186>
    47de:	1d11      	adds	r1, r2, #4
    47e0:	6019      	str	r1, [r3, #0]
    47e2:	6813      	ldr	r3, [r2, #0]
    47e4:	8aa2      	ldrh	r2, [r4, #20]
    47e6:	801a      	strh	r2, [r3, #0]
    47e8:	e004      	b.n	47f4 <_printf_i+0x190>
    47ea:	1d11      	adds	r1, r2, #4
    47ec:	6019      	str	r1, [r3, #0]
    47ee:	6813      	ldr	r3, [r2, #0]
    47f0:	6962      	ldr	r2, [r4, #20]
    47f2:	601a      	str	r2, [r3, #0]
    47f4:	2300      	movs	r3, #0
    47f6:	9e04      	ldr	r6, [sp, #16]
    47f8:	6123      	str	r3, [r4, #16]
    47fa:	e016      	b.n	482a <_printf_i+0x1c6>
    47fc:	681a      	ldr	r2, [r3, #0]
    47fe:	1d11      	adds	r1, r2, #4
    4800:	6019      	str	r1, [r3, #0]
    4802:	6816      	ldr	r6, [r2, #0]
    4804:	2100      	movs	r1, #0
    4806:	1c30      	adds	r0, r6, #0
    4808:	6862      	ldr	r2, [r4, #4]
    480a:	f000 f9ff 	bl	4c0c <memchr>
    480e:	2800      	cmp	r0, #0
    4810:	d001      	beq.n	4816 <_printf_i+0x1b2>
    4812:	1b80      	subs	r0, r0, r6
    4814:	6060      	str	r0, [r4, #4]
    4816:	6863      	ldr	r3, [r4, #4]
    4818:	e003      	b.n	4822 <_printf_i+0x1be>
    481a:	1c26      	adds	r6, r4, #0
    481c:	3642      	adds	r6, #66	; 0x42
    481e:	7032      	strb	r2, [r6, #0]
    4820:	2301      	movs	r3, #1
    4822:	6123      	str	r3, [r4, #16]
    4824:	2300      	movs	r3, #0
    4826:	9a04      	ldr	r2, [sp, #16]
    4828:	7013      	strb	r3, [r2, #0]
    482a:	9b07      	ldr	r3, [sp, #28]
    482c:	9805      	ldr	r0, [sp, #20]
    482e:	9300      	str	r3, [sp, #0]
    4830:	1c21      	adds	r1, r4, #0
    4832:	9b06      	ldr	r3, [sp, #24]
    4834:	aa09      	add	r2, sp, #36	; 0x24
    4836:	f7ff fea7 	bl	4588 <_printf_common>
    483a:	1c43      	adds	r3, r0, #1
    483c:	d102      	bne.n	4844 <_printf_i+0x1e0>
    483e:	2001      	movs	r0, #1
    4840:	4240      	negs	r0, r0
    4842:	e021      	b.n	4888 <_printf_i+0x224>
    4844:	6923      	ldr	r3, [r4, #16]
    4846:	9805      	ldr	r0, [sp, #20]
    4848:	9906      	ldr	r1, [sp, #24]
    484a:	1c32      	adds	r2, r6, #0
    484c:	9d07      	ldr	r5, [sp, #28]
    484e:	47a8      	blx	r5
    4850:	1c43      	adds	r3, r0, #1
    4852:	d0f4      	beq.n	483e <_printf_i+0x1da>
    4854:	6823      	ldr	r3, [r4, #0]
    4856:	079b      	lsls	r3, r3, #30
    4858:	d405      	bmi.n	4866 <_printf_i+0x202>
    485a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    485c:	68e0      	ldr	r0, [r4, #12]
    485e:	4298      	cmp	r0, r3
    4860:	da12      	bge.n	4888 <_printf_i+0x224>
    4862:	1c18      	adds	r0, r3, #0
    4864:	e010      	b.n	4888 <_printf_i+0x224>
    4866:	2500      	movs	r5, #0
    4868:	68e3      	ldr	r3, [r4, #12]
    486a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    486c:	1a9b      	subs	r3, r3, r2
    486e:	429d      	cmp	r5, r3
    4870:	daf3      	bge.n	485a <_printf_i+0x1f6>
    4872:	1c22      	adds	r2, r4, #0
    4874:	2301      	movs	r3, #1
    4876:	9805      	ldr	r0, [sp, #20]
    4878:	9906      	ldr	r1, [sp, #24]
    487a:	3219      	adds	r2, #25
    487c:	9e07      	ldr	r6, [sp, #28]
    487e:	47b0      	blx	r6
    4880:	1c43      	adds	r3, r0, #1
    4882:	d0dc      	beq.n	483e <_printf_i+0x1da>
    4884:	3501      	adds	r5, #1
    4886:	e7ef      	b.n	4868 <_printf_i+0x204>
    4888:	b00b      	add	sp, #44	; 0x2c
    488a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    488c:	000050a1 	.word	0x000050a1
    4890:	000050b2 	.word	0x000050b2

00004894 <_sbrk_r>:
    4894:	b538      	push	{r3, r4, r5, lr}
    4896:	2300      	movs	r3, #0
    4898:	4c06      	ldr	r4, [pc, #24]	; (48b4 <_sbrk_r+0x20>)
    489a:	1c05      	adds	r5, r0, #0
    489c:	1c08      	adds	r0, r1, #0
    489e:	6023      	str	r3, [r4, #0]
    48a0:	f7fd f8c8 	bl	1a34 <_sbrk>
    48a4:	1c43      	adds	r3, r0, #1
    48a6:	d103      	bne.n	48b0 <_sbrk_r+0x1c>
    48a8:	6823      	ldr	r3, [r4, #0]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d000      	beq.n	48b0 <_sbrk_r+0x1c>
    48ae:	602b      	str	r3, [r5, #0]
    48b0:	bd38      	pop	{r3, r4, r5, pc}
    48b2:	46c0      	nop			; (mov r8, r8)
    48b4:	200002f8 	.word	0x200002f8

000048b8 <__sread>:
    48b8:	b538      	push	{r3, r4, r5, lr}
    48ba:	1c0c      	adds	r4, r1, #0
    48bc:	250e      	movs	r5, #14
    48be:	5f49      	ldrsh	r1, [r1, r5]
    48c0:	f000 f9b0 	bl	4c24 <_read_r>
    48c4:	2800      	cmp	r0, #0
    48c6:	db03      	blt.n	48d0 <__sread+0x18>
    48c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    48ca:	181b      	adds	r3, r3, r0
    48cc:	6563      	str	r3, [r4, #84]	; 0x54
    48ce:	e003      	b.n	48d8 <__sread+0x20>
    48d0:	89a2      	ldrh	r2, [r4, #12]
    48d2:	4b02      	ldr	r3, [pc, #8]	; (48dc <__sread+0x24>)
    48d4:	4013      	ands	r3, r2
    48d6:	81a3      	strh	r3, [r4, #12]
    48d8:	bd38      	pop	{r3, r4, r5, pc}
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	ffffefff 	.word	0xffffefff

000048e0 <__swrite>:
    48e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e2:	1c1e      	adds	r6, r3, #0
    48e4:	898b      	ldrh	r3, [r1, #12]
    48e6:	1c05      	adds	r5, r0, #0
    48e8:	1c0c      	adds	r4, r1, #0
    48ea:	1c17      	adds	r7, r2, #0
    48ec:	05db      	lsls	r3, r3, #23
    48ee:	d505      	bpl.n	48fc <__swrite+0x1c>
    48f0:	230e      	movs	r3, #14
    48f2:	5ec9      	ldrsh	r1, [r1, r3]
    48f4:	2200      	movs	r2, #0
    48f6:	2302      	movs	r3, #2
    48f8:	f000 f91c 	bl	4b34 <_lseek_r>
    48fc:	89a2      	ldrh	r2, [r4, #12]
    48fe:	4b05      	ldr	r3, [pc, #20]	; (4914 <__swrite+0x34>)
    4900:	1c28      	adds	r0, r5, #0
    4902:	4013      	ands	r3, r2
    4904:	81a3      	strh	r3, [r4, #12]
    4906:	1c3a      	adds	r2, r7, #0
    4908:	230e      	movs	r3, #14
    490a:	5ee1      	ldrsh	r1, [r4, r3]
    490c:	1c33      	adds	r3, r6, #0
    490e:	f000 f877 	bl	4a00 <_write_r>
    4912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4914:	ffffefff 	.word	0xffffefff

00004918 <__sseek>:
    4918:	b538      	push	{r3, r4, r5, lr}
    491a:	1c0c      	adds	r4, r1, #0
    491c:	250e      	movs	r5, #14
    491e:	5f49      	ldrsh	r1, [r1, r5]
    4920:	f000 f908 	bl	4b34 <_lseek_r>
    4924:	89a3      	ldrh	r3, [r4, #12]
    4926:	1c42      	adds	r2, r0, #1
    4928:	d103      	bne.n	4932 <__sseek+0x1a>
    492a:	4a05      	ldr	r2, [pc, #20]	; (4940 <__sseek+0x28>)
    492c:	4013      	ands	r3, r2
    492e:	81a3      	strh	r3, [r4, #12]
    4930:	e004      	b.n	493c <__sseek+0x24>
    4932:	2280      	movs	r2, #128	; 0x80
    4934:	0152      	lsls	r2, r2, #5
    4936:	4313      	orrs	r3, r2
    4938:	81a3      	strh	r3, [r4, #12]
    493a:	6560      	str	r0, [r4, #84]	; 0x54
    493c:	bd38      	pop	{r3, r4, r5, pc}
    493e:	46c0      	nop			; (mov r8, r8)
    4940:	ffffefff 	.word	0xffffefff

00004944 <__sclose>:
    4944:	b508      	push	{r3, lr}
    4946:	230e      	movs	r3, #14
    4948:	5ec9      	ldrsh	r1, [r1, r3]
    494a:	f000 f8e1 	bl	4b10 <_close_r>
    494e:	bd08      	pop	{r3, pc}

00004950 <__swbuf_r>:
    4950:	b570      	push	{r4, r5, r6, lr}
    4952:	1c05      	adds	r5, r0, #0
    4954:	1c0e      	adds	r6, r1, #0
    4956:	1c14      	adds	r4, r2, #0
    4958:	2800      	cmp	r0, #0
    495a:	d004      	beq.n	4966 <__swbuf_r+0x16>
    495c:	6983      	ldr	r3, [r0, #24]
    495e:	2b00      	cmp	r3, #0
    4960:	d101      	bne.n	4966 <__swbuf_r+0x16>
    4962:	f7ff fb9f 	bl	40a4 <__sinit>
    4966:	4b23      	ldr	r3, [pc, #140]	; (49f4 <__swbuf_r+0xa4>)
    4968:	429c      	cmp	r4, r3
    496a:	d101      	bne.n	4970 <__swbuf_r+0x20>
    496c:	686c      	ldr	r4, [r5, #4]
    496e:	e008      	b.n	4982 <__swbuf_r+0x32>
    4970:	4b21      	ldr	r3, [pc, #132]	; (49f8 <__swbuf_r+0xa8>)
    4972:	429c      	cmp	r4, r3
    4974:	d101      	bne.n	497a <__swbuf_r+0x2a>
    4976:	68ac      	ldr	r4, [r5, #8]
    4978:	e003      	b.n	4982 <__swbuf_r+0x32>
    497a:	4b20      	ldr	r3, [pc, #128]	; (49fc <__swbuf_r+0xac>)
    497c:	429c      	cmp	r4, r3
    497e:	d100      	bne.n	4982 <__swbuf_r+0x32>
    4980:	68ec      	ldr	r4, [r5, #12]
    4982:	69a3      	ldr	r3, [r4, #24]
    4984:	60a3      	str	r3, [r4, #8]
    4986:	89a3      	ldrh	r3, [r4, #12]
    4988:	071b      	lsls	r3, r3, #28
    498a:	d50a      	bpl.n	49a2 <__swbuf_r+0x52>
    498c:	6923      	ldr	r3, [r4, #16]
    498e:	2b00      	cmp	r3, #0
    4990:	d007      	beq.n	49a2 <__swbuf_r+0x52>
    4992:	6823      	ldr	r3, [r4, #0]
    4994:	6922      	ldr	r2, [r4, #16]
    4996:	b2f6      	uxtb	r6, r6
    4998:	1a98      	subs	r0, r3, r2
    499a:	6963      	ldr	r3, [r4, #20]
    499c:	4298      	cmp	r0, r3
    499e:	db0f      	blt.n	49c0 <__swbuf_r+0x70>
    49a0:	e008      	b.n	49b4 <__swbuf_r+0x64>
    49a2:	1c28      	adds	r0, r5, #0
    49a4:	1c21      	adds	r1, r4, #0
    49a6:	f000 f83f 	bl	4a28 <__swsetup_r>
    49aa:	2800      	cmp	r0, #0
    49ac:	d0f1      	beq.n	4992 <__swbuf_r+0x42>
    49ae:	2001      	movs	r0, #1
    49b0:	4240      	negs	r0, r0
    49b2:	e01d      	b.n	49f0 <__swbuf_r+0xa0>
    49b4:	1c28      	adds	r0, r5, #0
    49b6:	1c21      	adds	r1, r4, #0
    49b8:	f7ff fb06 	bl	3fc8 <_fflush_r>
    49bc:	2800      	cmp	r0, #0
    49be:	d1f6      	bne.n	49ae <__swbuf_r+0x5e>
    49c0:	68a3      	ldr	r3, [r4, #8]
    49c2:	3001      	adds	r0, #1
    49c4:	3b01      	subs	r3, #1
    49c6:	60a3      	str	r3, [r4, #8]
    49c8:	6823      	ldr	r3, [r4, #0]
    49ca:	1c5a      	adds	r2, r3, #1
    49cc:	6022      	str	r2, [r4, #0]
    49ce:	701e      	strb	r6, [r3, #0]
    49d0:	6963      	ldr	r3, [r4, #20]
    49d2:	4298      	cmp	r0, r3
    49d4:	d005      	beq.n	49e2 <__swbuf_r+0x92>
    49d6:	89a3      	ldrh	r3, [r4, #12]
    49d8:	1c30      	adds	r0, r6, #0
    49da:	07db      	lsls	r3, r3, #31
    49dc:	d508      	bpl.n	49f0 <__swbuf_r+0xa0>
    49de:	2e0a      	cmp	r6, #10
    49e0:	d106      	bne.n	49f0 <__swbuf_r+0xa0>
    49e2:	1c28      	adds	r0, r5, #0
    49e4:	1c21      	adds	r1, r4, #0
    49e6:	f7ff faef 	bl	3fc8 <_fflush_r>
    49ea:	2800      	cmp	r0, #0
    49ec:	d1df      	bne.n	49ae <__swbuf_r+0x5e>
    49ee:	1c30      	adds	r0, r6, #0
    49f0:	bd70      	pop	{r4, r5, r6, pc}
    49f2:	46c0      	nop			; (mov r8, r8)
    49f4:	00005030 	.word	0x00005030
    49f8:	00005050 	.word	0x00005050
    49fc:	00005070 	.word	0x00005070

00004a00 <_write_r>:
    4a00:	b538      	push	{r3, r4, r5, lr}
    4a02:	1c05      	adds	r5, r0, #0
    4a04:	2000      	movs	r0, #0
    4a06:	4c07      	ldr	r4, [pc, #28]	; (4a24 <_write_r+0x24>)
    4a08:	6020      	str	r0, [r4, #0]
    4a0a:	1c08      	adds	r0, r1, #0
    4a0c:	1c11      	adds	r1, r2, #0
    4a0e:	1c1a      	adds	r2, r3, #0
    4a10:	f7fb fdec 	bl	5ec <_write>
    4a14:	1c43      	adds	r3, r0, #1
    4a16:	d103      	bne.n	4a20 <_write_r+0x20>
    4a18:	6823      	ldr	r3, [r4, #0]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d000      	beq.n	4a20 <_write_r+0x20>
    4a1e:	602b      	str	r3, [r5, #0]
    4a20:	bd38      	pop	{r3, r4, r5, pc}
    4a22:	46c0      	nop			; (mov r8, r8)
    4a24:	200002f8 	.word	0x200002f8

00004a28 <__swsetup_r>:
    4a28:	4b35      	ldr	r3, [pc, #212]	; (4b00 <__swsetup_r+0xd8>)
    4a2a:	b570      	push	{r4, r5, r6, lr}
    4a2c:	681d      	ldr	r5, [r3, #0]
    4a2e:	1c06      	adds	r6, r0, #0
    4a30:	1c0c      	adds	r4, r1, #0
    4a32:	2d00      	cmp	r5, #0
    4a34:	d005      	beq.n	4a42 <__swsetup_r+0x1a>
    4a36:	69ab      	ldr	r3, [r5, #24]
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d102      	bne.n	4a42 <__swsetup_r+0x1a>
    4a3c:	1c28      	adds	r0, r5, #0
    4a3e:	f7ff fb31 	bl	40a4 <__sinit>
    4a42:	4b30      	ldr	r3, [pc, #192]	; (4b04 <__swsetup_r+0xdc>)
    4a44:	429c      	cmp	r4, r3
    4a46:	d101      	bne.n	4a4c <__swsetup_r+0x24>
    4a48:	686c      	ldr	r4, [r5, #4]
    4a4a:	e008      	b.n	4a5e <__swsetup_r+0x36>
    4a4c:	4b2e      	ldr	r3, [pc, #184]	; (4b08 <__swsetup_r+0xe0>)
    4a4e:	429c      	cmp	r4, r3
    4a50:	d101      	bne.n	4a56 <__swsetup_r+0x2e>
    4a52:	68ac      	ldr	r4, [r5, #8]
    4a54:	e003      	b.n	4a5e <__swsetup_r+0x36>
    4a56:	4b2d      	ldr	r3, [pc, #180]	; (4b0c <__swsetup_r+0xe4>)
    4a58:	429c      	cmp	r4, r3
    4a5a:	d100      	bne.n	4a5e <__swsetup_r+0x36>
    4a5c:	68ec      	ldr	r4, [r5, #12]
    4a5e:	89a3      	ldrh	r3, [r4, #12]
    4a60:	b29a      	uxth	r2, r3
    4a62:	0711      	lsls	r1, r2, #28
    4a64:	d423      	bmi.n	4aae <__swsetup_r+0x86>
    4a66:	06d1      	lsls	r1, r2, #27
    4a68:	d407      	bmi.n	4a7a <__swsetup_r+0x52>
    4a6a:	2209      	movs	r2, #9
    4a6c:	2001      	movs	r0, #1
    4a6e:	6032      	str	r2, [r6, #0]
    4a70:	3237      	adds	r2, #55	; 0x37
    4a72:	4313      	orrs	r3, r2
    4a74:	81a3      	strh	r3, [r4, #12]
    4a76:	4240      	negs	r0, r0
    4a78:	e040      	b.n	4afc <__swsetup_r+0xd4>
    4a7a:	0753      	lsls	r3, r2, #29
    4a7c:	d513      	bpl.n	4aa6 <__swsetup_r+0x7e>
    4a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4a80:	2900      	cmp	r1, #0
    4a82:	d008      	beq.n	4a96 <__swsetup_r+0x6e>
    4a84:	1c23      	adds	r3, r4, #0
    4a86:	3344      	adds	r3, #68	; 0x44
    4a88:	4299      	cmp	r1, r3
    4a8a:	d002      	beq.n	4a92 <__swsetup_r+0x6a>
    4a8c:	1c30      	adds	r0, r6, #0
    4a8e:	f7ff fba5 	bl	41dc <_free_r>
    4a92:	2300      	movs	r3, #0
    4a94:	6363      	str	r3, [r4, #52]	; 0x34
    4a96:	2224      	movs	r2, #36	; 0x24
    4a98:	89a3      	ldrh	r3, [r4, #12]
    4a9a:	4393      	bics	r3, r2
    4a9c:	81a3      	strh	r3, [r4, #12]
    4a9e:	2300      	movs	r3, #0
    4aa0:	6063      	str	r3, [r4, #4]
    4aa2:	6923      	ldr	r3, [r4, #16]
    4aa4:	6023      	str	r3, [r4, #0]
    4aa6:	2208      	movs	r2, #8
    4aa8:	89a3      	ldrh	r3, [r4, #12]
    4aaa:	4313      	orrs	r3, r2
    4aac:	81a3      	strh	r3, [r4, #12]
    4aae:	6923      	ldr	r3, [r4, #16]
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d10b      	bne.n	4acc <__swsetup_r+0xa4>
    4ab4:	23a0      	movs	r3, #160	; 0xa0
    4ab6:	89a2      	ldrh	r2, [r4, #12]
    4ab8:	009b      	lsls	r3, r3, #2
    4aba:	4013      	ands	r3, r2
    4abc:	2280      	movs	r2, #128	; 0x80
    4abe:	0092      	lsls	r2, r2, #2
    4ac0:	4293      	cmp	r3, r2
    4ac2:	d003      	beq.n	4acc <__swsetup_r+0xa4>
    4ac4:	1c30      	adds	r0, r6, #0
    4ac6:	1c21      	adds	r1, r4, #0
    4ac8:	f000 f848 	bl	4b5c <__smakebuf_r>
    4acc:	2301      	movs	r3, #1
    4ace:	89a2      	ldrh	r2, [r4, #12]
    4ad0:	4013      	ands	r3, r2
    4ad2:	d005      	beq.n	4ae0 <__swsetup_r+0xb8>
    4ad4:	2300      	movs	r3, #0
    4ad6:	60a3      	str	r3, [r4, #8]
    4ad8:	6963      	ldr	r3, [r4, #20]
    4ada:	425b      	negs	r3, r3
    4adc:	61a3      	str	r3, [r4, #24]
    4ade:	e003      	b.n	4ae8 <__swsetup_r+0xc0>
    4ae0:	0791      	lsls	r1, r2, #30
    4ae2:	d400      	bmi.n	4ae6 <__swsetup_r+0xbe>
    4ae4:	6963      	ldr	r3, [r4, #20]
    4ae6:	60a3      	str	r3, [r4, #8]
    4ae8:	2000      	movs	r0, #0
    4aea:	6923      	ldr	r3, [r4, #16]
    4aec:	4283      	cmp	r3, r0
    4aee:	d105      	bne.n	4afc <__swsetup_r+0xd4>
    4af0:	0613      	lsls	r3, r2, #24
    4af2:	d503      	bpl.n	4afc <__swsetup_r+0xd4>
    4af4:	2340      	movs	r3, #64	; 0x40
    4af6:	431a      	orrs	r2, r3
    4af8:	81a2      	strh	r2, [r4, #12]
    4afa:	3801      	subs	r0, #1
    4afc:	bd70      	pop	{r4, r5, r6, pc}
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	20000170 	.word	0x20000170
    4b04:	00005030 	.word	0x00005030
    4b08:	00005050 	.word	0x00005050
    4b0c:	00005070 	.word	0x00005070

00004b10 <_close_r>:
    4b10:	b538      	push	{r3, r4, r5, lr}
    4b12:	2300      	movs	r3, #0
    4b14:	4c06      	ldr	r4, [pc, #24]	; (4b30 <_close_r+0x20>)
    4b16:	1c05      	adds	r5, r0, #0
    4b18:	1c08      	adds	r0, r1, #0
    4b1a:	6023      	str	r3, [r4, #0]
    4b1c:	f7fc ff9c 	bl	1a58 <_close>
    4b20:	1c43      	adds	r3, r0, #1
    4b22:	d103      	bne.n	4b2c <_close_r+0x1c>
    4b24:	6823      	ldr	r3, [r4, #0]
    4b26:	2b00      	cmp	r3, #0
    4b28:	d000      	beq.n	4b2c <_close_r+0x1c>
    4b2a:	602b      	str	r3, [r5, #0]
    4b2c:	bd38      	pop	{r3, r4, r5, pc}
    4b2e:	46c0      	nop			; (mov r8, r8)
    4b30:	200002f8 	.word	0x200002f8

00004b34 <_lseek_r>:
    4b34:	b538      	push	{r3, r4, r5, lr}
    4b36:	1c05      	adds	r5, r0, #0
    4b38:	2000      	movs	r0, #0
    4b3a:	4c07      	ldr	r4, [pc, #28]	; (4b58 <_lseek_r+0x24>)
    4b3c:	6020      	str	r0, [r4, #0]
    4b3e:	1c08      	adds	r0, r1, #0
    4b40:	1c11      	adds	r1, r2, #0
    4b42:	1c1a      	adds	r2, r3, #0
    4b44:	f7fc ff94 	bl	1a70 <_lseek>
    4b48:	1c43      	adds	r3, r0, #1
    4b4a:	d103      	bne.n	4b54 <_lseek_r+0x20>
    4b4c:	6823      	ldr	r3, [r4, #0]
    4b4e:	2b00      	cmp	r3, #0
    4b50:	d000      	beq.n	4b54 <_lseek_r+0x20>
    4b52:	602b      	str	r3, [r5, #0]
    4b54:	bd38      	pop	{r3, r4, r5, pc}
    4b56:	46c0      	nop			; (mov r8, r8)
    4b58:	200002f8 	.word	0x200002f8

00004b5c <__smakebuf_r>:
    4b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b5e:	898b      	ldrh	r3, [r1, #12]
    4b60:	b091      	sub	sp, #68	; 0x44
    4b62:	079b      	lsls	r3, r3, #30
    4b64:	d506      	bpl.n	4b74 <__smakebuf_r+0x18>
    4b66:	1c0b      	adds	r3, r1, #0
    4b68:	3347      	adds	r3, #71	; 0x47
    4b6a:	600b      	str	r3, [r1, #0]
    4b6c:	610b      	str	r3, [r1, #16]
    4b6e:	2301      	movs	r3, #1
    4b70:	614b      	str	r3, [r1, #20]
    4b72:	e045      	b.n	4c00 <__smakebuf_r+0xa4>
    4b74:	1c0c      	adds	r4, r1, #0
    4b76:	230e      	movs	r3, #14
    4b78:	5ec9      	ldrsh	r1, [r1, r3]
    4b7a:	1c06      	adds	r6, r0, #0
    4b7c:	2900      	cmp	r1, #0
    4b7e:	da04      	bge.n	4b8a <__smakebuf_r+0x2e>
    4b80:	2380      	movs	r3, #128	; 0x80
    4b82:	89a5      	ldrh	r5, [r4, #12]
    4b84:	401d      	ands	r5, r3
    4b86:	d110      	bne.n	4baa <__smakebuf_r+0x4e>
    4b88:	e00c      	b.n	4ba4 <__smakebuf_r+0x48>
    4b8a:	aa01      	add	r2, sp, #4
    4b8c:	f000 f85e 	bl	4c4c <_fstat_r>
    4b90:	2800      	cmp	r0, #0
    4b92:	dbf5      	blt.n	4b80 <__smakebuf_r+0x24>
    4b94:	23f0      	movs	r3, #240	; 0xf0
    4b96:	9d02      	ldr	r5, [sp, #8]
    4b98:	021b      	lsls	r3, r3, #8
    4b9a:	401d      	ands	r5, r3
    4b9c:	4b19      	ldr	r3, [pc, #100]	; (4c04 <__smakebuf_r+0xa8>)
    4b9e:	18ed      	adds	r5, r5, r3
    4ba0:	426b      	negs	r3, r5
    4ba2:	415d      	adcs	r5, r3
    4ba4:	2780      	movs	r7, #128	; 0x80
    4ba6:	00ff      	lsls	r7, r7, #3
    4ba8:	e001      	b.n	4bae <__smakebuf_r+0x52>
    4baa:	2500      	movs	r5, #0
    4bac:	2740      	movs	r7, #64	; 0x40
    4bae:	1c30      	adds	r0, r6, #0
    4bb0:	1c39      	adds	r1, r7, #0
    4bb2:	f7ff fb59 	bl	4268 <_malloc_r>
    4bb6:	2800      	cmp	r0, #0
    4bb8:	d10c      	bne.n	4bd4 <__smakebuf_r+0x78>
    4bba:	89a3      	ldrh	r3, [r4, #12]
    4bbc:	059a      	lsls	r2, r3, #22
    4bbe:	d41f      	bmi.n	4c00 <__smakebuf_r+0xa4>
    4bc0:	2202      	movs	r2, #2
    4bc2:	4313      	orrs	r3, r2
    4bc4:	81a3      	strh	r3, [r4, #12]
    4bc6:	1c23      	adds	r3, r4, #0
    4bc8:	3347      	adds	r3, #71	; 0x47
    4bca:	6023      	str	r3, [r4, #0]
    4bcc:	6123      	str	r3, [r4, #16]
    4bce:	2301      	movs	r3, #1
    4bd0:	6163      	str	r3, [r4, #20]
    4bd2:	e015      	b.n	4c00 <__smakebuf_r+0xa4>
    4bd4:	2280      	movs	r2, #128	; 0x80
    4bd6:	4b0c      	ldr	r3, [pc, #48]	; (4c08 <__smakebuf_r+0xac>)
    4bd8:	62b3      	str	r3, [r6, #40]	; 0x28
    4bda:	89a3      	ldrh	r3, [r4, #12]
    4bdc:	6020      	str	r0, [r4, #0]
    4bde:	4313      	orrs	r3, r2
    4be0:	81a3      	strh	r3, [r4, #12]
    4be2:	6120      	str	r0, [r4, #16]
    4be4:	6167      	str	r7, [r4, #20]
    4be6:	2d00      	cmp	r5, #0
    4be8:	d00a      	beq.n	4c00 <__smakebuf_r+0xa4>
    4bea:	230e      	movs	r3, #14
    4bec:	5ee1      	ldrsh	r1, [r4, r3]
    4bee:	1c30      	adds	r0, r6, #0
    4bf0:	f000 f83e 	bl	4c70 <_isatty_r>
    4bf4:	2800      	cmp	r0, #0
    4bf6:	d003      	beq.n	4c00 <__smakebuf_r+0xa4>
    4bf8:	2201      	movs	r2, #1
    4bfa:	89a3      	ldrh	r3, [r4, #12]
    4bfc:	4313      	orrs	r3, r2
    4bfe:	81a3      	strh	r3, [r4, #12]
    4c00:	b011      	add	sp, #68	; 0x44
    4c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c04:	ffffe000 	.word	0xffffe000
    4c08:	00004021 	.word	0x00004021

00004c0c <memchr>:
    4c0c:	b2c9      	uxtb	r1, r1
    4c0e:	1882      	adds	r2, r0, r2
    4c10:	4290      	cmp	r0, r2
    4c12:	d004      	beq.n	4c1e <memchr+0x12>
    4c14:	7803      	ldrb	r3, [r0, #0]
    4c16:	428b      	cmp	r3, r1
    4c18:	d002      	beq.n	4c20 <memchr+0x14>
    4c1a:	3001      	adds	r0, #1
    4c1c:	e7f8      	b.n	4c10 <memchr+0x4>
    4c1e:	2000      	movs	r0, #0
    4c20:	4770      	bx	lr
	...

00004c24 <_read_r>:
    4c24:	b538      	push	{r3, r4, r5, lr}
    4c26:	1c05      	adds	r5, r0, #0
    4c28:	2000      	movs	r0, #0
    4c2a:	4c07      	ldr	r4, [pc, #28]	; (4c48 <_read_r+0x24>)
    4c2c:	6020      	str	r0, [r4, #0]
    4c2e:	1c08      	adds	r0, r1, #0
    4c30:	1c11      	adds	r1, r2, #0
    4c32:	1c1a      	adds	r2, r3, #0
    4c34:	f7fb fcb8 	bl	5a8 <_read>
    4c38:	1c43      	adds	r3, r0, #1
    4c3a:	d103      	bne.n	4c44 <_read_r+0x20>
    4c3c:	6823      	ldr	r3, [r4, #0]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d000      	beq.n	4c44 <_read_r+0x20>
    4c42:	602b      	str	r3, [r5, #0]
    4c44:	bd38      	pop	{r3, r4, r5, pc}
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	200002f8 	.word	0x200002f8

00004c4c <_fstat_r>:
    4c4c:	b538      	push	{r3, r4, r5, lr}
    4c4e:	2300      	movs	r3, #0
    4c50:	4c06      	ldr	r4, [pc, #24]	; (4c6c <_fstat_r+0x20>)
    4c52:	1c05      	adds	r5, r0, #0
    4c54:	1c08      	adds	r0, r1, #0
    4c56:	1c11      	adds	r1, r2, #0
    4c58:	6023      	str	r3, [r4, #0]
    4c5a:	f7fc ff01 	bl	1a60 <_fstat>
    4c5e:	1c43      	adds	r3, r0, #1
    4c60:	d103      	bne.n	4c6a <_fstat_r+0x1e>
    4c62:	6823      	ldr	r3, [r4, #0]
    4c64:	2b00      	cmp	r3, #0
    4c66:	d000      	beq.n	4c6a <_fstat_r+0x1e>
    4c68:	602b      	str	r3, [r5, #0]
    4c6a:	bd38      	pop	{r3, r4, r5, pc}
    4c6c:	200002f8 	.word	0x200002f8

00004c70 <_isatty_r>:
    4c70:	b538      	push	{r3, r4, r5, lr}
    4c72:	2300      	movs	r3, #0
    4c74:	4c06      	ldr	r4, [pc, #24]	; (4c90 <_isatty_r+0x20>)
    4c76:	1c05      	adds	r5, r0, #0
    4c78:	1c08      	adds	r0, r1, #0
    4c7a:	6023      	str	r3, [r4, #0]
    4c7c:	f7fc fef6 	bl	1a6c <_isatty>
    4c80:	1c43      	adds	r3, r0, #1
    4c82:	d103      	bne.n	4c8c <_isatty_r+0x1c>
    4c84:	6823      	ldr	r3, [r4, #0]
    4c86:	2b00      	cmp	r3, #0
    4c88:	d000      	beq.n	4c8c <_isatty_r+0x1c>
    4c8a:	602b      	str	r3, [r5, #0]
    4c8c:	bd38      	pop	{r3, r4, r5, pc}
    4c8e:	46c0      	nop			; (mov r8, r8)
    4c90:	200002f8 	.word	0x200002f8
    4c94:	42000800 	.word	0x42000800
    4c98:	42000c00 	.word	0x42000c00
    4c9c:	42001000 	.word	0x42001000
    4ca0:	42001400 	.word	0x42001400
    4ca4:	42001800 	.word	0x42001800
    4ca8:	42001c00 	.word	0x42001c00
    4cac:	0c0b0a09 	.word	0x0c0b0a09
    4cb0:	00000e0d 	.word	0x00000e0d

00004cb4 <_tcc_intflag>:
    4cb4:	00000001 00000002 00000004 00000008     ................
    4cc4:	00001000 00002000 00004000 00008000     ..... ...@......
    4cd4:	00010000 00020000 00040000 00080000     ................
    4ce4:	00001092 0000108e 0000108e 000010ee     ................
    4cf4:	000010ee 000010a8 00001098 000010ae     ................
    4d04:	000010dc 0000135c 0000133c 0000133c     ....\...<...<...
    4d14:	000013c8 0000134e 0000136a 00001340     ....N...j...@...
    4d24:	00001378 000013b8 00001cea 00001cf2     x...............
    4d34:	00001cc2 00001cca 00001cd2 00001cda     ................
    4d44:	00001ce2 71657246 636e6575 25203a79     ....Frequency: %
    4d54:	2d202075 202d2d2d 79747544 63796320     u  ---- Duty cyc
    4d64:	203a656c 000a7525 61786548 3025203a     le: %u..Hexa: %0
    4d74:	420a7834 203a6e69 00000000 00000031     4x.Bin: ....1...
    4d84:	00000030 746e4920 75727265 73207370     0... Interrups s
    4d94:	65746174 7325203a 0000000a 7373694d     tate: %s....Miss
    4da4:	496e6f69 643a706d 2c36313d 2c363d6f     ionImp:d=16,o=6,
    4db4:	35393d62 6432333a 6432332c 32332c23     b=95:32d,32d#,32
    4dc4:	32332c64 332c2364 332c6432 2c236432     d,32d#,32d,32d#,
    4dd4:	2c643233 23643233 6432332c 6432332c     32d,32d#,32d,32d
    4de4:	6432332c 32332c23 32332c65 32332c66     ,32d#,32e,32f,32
    4df4:	332c2366 672c6732 2c70382c 70382c67     f#,32g,g,8p,g,8p
    4e04:	2c23612c 37632c70 672c702c 2c70382c     ,a#,p,c7,p,g,8p,
    4e14:	70382c67 702c662c 2c23662c 2c672c70     g,8p,f,p,f#,p,g,
    4e24:	672c7038 2c70382c 702c2361 2c37632c     8p,g,8p,a#,p,c7,
    4e34:	2c672c70 672c7038 2c70382c 2c702c66     p,g,8p,g,8p,f,p,
    4e44:	702c2366 2c23612c 64322c67 7032332c     f#,p,a#,g,2d,32p
    4e54:	2c23612c 63322c67 32332c23 23612c70     ,a#,g,2c#,32p,a#
    4e64:	322c672c 23612c63 63382c35 2c70322c     ,g,2c,a#5,8c,2p,
    4e74:	2c703233 2c352361 322c3567 332c2366     32p,a#5,g5,2f#,3
    4e84:	612c7032 672c3523 66322c35 7032332c     2p,a#5,g5,2f,32p
    4e94:	3523612c 2c35672c 642c6532 64382c23     ,a#5,g5,2e,d#,8d
    4ea4:	00000000 00002e14 00002d02 00002de8     .........-...-..
    4eb4:	00002cee 00002de8 00002df2 00002de8     .,...-...-...-..
    4ec4:	00002cee 00002d02 00002d02 00002df2     .,...-...-...-..
    4ed4:	00002cee 00002cf8 00002cf8 00002cf8     .,...,...,...,..
    4ee4:	0000305a 00003474 00003452 00003452     Z0..t4..R4..R4..
    4ef4:	00003446 0000333a 0000333a 0000343a     F4..:3..:3..:4..
    4f04:	00003446 0000333a 0000343a 0000333a     F4..:3..:4..:3..
    4f14:	00003446 0000333e 0000333e 0000333e     F4..>3..>3..>3..
    4f24:	00003654                                T6..

00004f28 <_ctype_>:
    4f28:	20202000 20202020 28282020 20282828     .         ((((( 
    4f38:	20202020 20202020 20202020 20202020                     
    4f48:	10108820 10101010 10101010 10101010      ...............
    4f58:	04040410 04040404 10040404 10101010     ................
    4f68:	41411010 41414141 01010101 01010101     ..AAAAAA........
    4f78:	01010101 01010101 01010101 10101010     ................
    4f88:	42421010 42424242 02020202 02020202     ..BBBBBB........
    4f98:	02020202 02020202 02020202 10101010     ................
    4fa8:	00000020 00000000 00000000 00000000      ...............
	...
    5028:	00004300                                .C..

0000502c <_global_impure_ptr>:
    502c:	20000110                                ... 

00005030 <__sf_fake_stdin>:
	...

00005050 <__sf_fake_stdout>:
	...

00005070 <__sf_fake_stderr>:
	...
    5090:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    50a0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    50b0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    50c0:	00006665                                ef..

000050c4 <_init>:
    50c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50c6:	46c0      	nop			; (mov r8, r8)
    50c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    50ca:	bc08      	pop	{r3}
    50cc:	469e      	mov	lr, r3
    50ce:	4770      	bx	lr

000050d0 <__init_array_start>:
    50d0:	000000dd 	.word	0x000000dd

000050d4 <_fini>:
    50d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    50da:	bc08      	pop	{r3}
    50dc:	469e      	mov	lr, r3
    50de:	4770      	bx	lr

000050e0 <__fini_array_start>:
    50e0:	000000b5 	.word	0x000000b5
