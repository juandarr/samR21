
Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004904  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004904  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016c  20000070  00004974  00010070  2**2
                  ALLOC
  3 .stack        00002004  200001dc  00004ae0  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000238c1  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e4a  00000000  00000000  000339b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004617  00000000  00000000  000367fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  0003ae15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000530  00000000  00000000  0003b34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018c0d  00000000  00000000  0003b87d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c9b5  00000000  00000000  0005448a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00084228  00000000  00000000  00060e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000013bc  00000000  00000000  000e5068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021e0 	.word	0x200021e0
       4:	00001905 	.word	0x00001905
       8:	00001901 	.word	0x00001901
       c:	00001901 	.word	0x00001901
	...
      2c:	00001901 	.word	0x00001901
	...
      38:	00001901 	.word	0x00001901
      3c:	00001901 	.word	0x00001901
      40:	00001901 	.word	0x00001901
      44:	00001901 	.word	0x00001901
      48:	00001901 	.word	0x00001901
      4c:	00001901 	.word	0x00001901
      50:	00001901 	.word	0x00001901
      54:	00001901 	.word	0x00001901
      58:	00001901 	.word	0x00001901
      5c:	00001901 	.word	0x00001901
      60:	00001901 	.word	0x00001901
      64:	00000e8d 	.word	0x00000e8d
      68:	00000e9d 	.word	0x00000e9d
      6c:	00000ead 	.word	0x00000ead
      70:	00000ebd 	.word	0x00000ebd
      74:	00000ecd 	.word	0x00000ecd
      78:	00000edd 	.word	0x00000edd
      7c:	00000f35 	.word	0x00000f35
      80:	00000f45 	.word	0x00000f45
      84:	00000f55 	.word	0x00000f55
      88:	00001901 	.word	0x00001901
      8c:	00001901 	.word	0x00001901
      90:	00001901 	.word	0x00001901
	...
      9c:	00001901 	.word	0x00001901
      a0:	00001901 	.word	0x00001901
      a4:	00000000 	.word	0x00000000
      a8:	00001901 	.word	0x00001901
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004904 	.word	0x00004904

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00004904 	.word	0x00004904
     108:	20000074 	.word	0x20000074
     10c:	00004904 	.word	0x00004904
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
     114:	b510      	push	{r4, lr}
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     11e:	21fa      	movs	r1, #250	; 0xfa
     120:	0089      	lsls	r1, r1, #2
     122:	47a0      	blx	r4
     124:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     126:	6018      	str	r0, [r3, #0]
     128:	21fa      	movs	r1, #250	; 0xfa
     12a:	0089      	lsls	r1, r1, #2
     12c:	47a0      	blx	r4
     12e:	4b06      	ldr	r3, [pc, #24]	; (148 <delay_init+0x34>)
     130:	6018      	str	r0, [r3, #0]
     132:	2205      	movs	r2, #5
     134:	4b05      	ldr	r3, [pc, #20]	; (14c <delay_init+0x38>)
     136:	601a      	str	r2, [r3, #0]
     138:	bd10      	pop	{r4, pc}
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	00001691 	.word	0x00001691
     140:	000035ad 	.word	0x000035ad
     144:	20000004 	.word	0x20000004
     148:	20000000 	.word	0x20000000
     14c:	e000e010 	.word	0xe000e010

00000150 <delay_cycles_ms>:
     150:	b530      	push	{r4, r5, lr}
     152:	4b08      	ldr	r3, [pc, #32]	; (174 <delay_cycles_ms+0x24>)
     154:	681c      	ldr	r4, [r3, #0]
     156:	4a08      	ldr	r2, [pc, #32]	; (178 <delay_cycles_ms+0x28>)
     158:	2500      	movs	r5, #0
     15a:	2180      	movs	r1, #128	; 0x80
     15c:	0249      	lsls	r1, r1, #9
     15e:	e006      	b.n	16e <delay_cycles_ms+0x1e>
     160:	2c00      	cmp	r4, #0
     162:	d004      	beq.n	16e <delay_cycles_ms+0x1e>
     164:	6054      	str	r4, [r2, #4]
     166:	6095      	str	r5, [r2, #8]
     168:	6813      	ldr	r3, [r2, #0]
     16a:	420b      	tst	r3, r1
     16c:	d0fc      	beq.n	168 <delay_cycles_ms+0x18>
     16e:	3801      	subs	r0, #1
     170:	d2f6      	bcs.n	160 <delay_cycles_ms+0x10>
     172:	bd30      	pop	{r4, r5, pc}
     174:	20000004 	.word	0x20000004
     178:	e000e010 	.word	0xe000e010

0000017c <_sercom_get_sync_baud_val>:
     17c:	b510      	push	{r4, lr}
     17e:	0849      	lsrs	r1, r1, #1
     180:	2440      	movs	r4, #64	; 0x40
     182:	4281      	cmp	r1, r0
     184:	d30c      	bcc.n	1a0 <_sercom_get_sync_baud_val+0x24>
     186:	2300      	movs	r3, #0
     188:	1a09      	subs	r1, r1, r0
     18a:	3301      	adds	r3, #1
     18c:	b29b      	uxth	r3, r3
     18e:	4288      	cmp	r0, r1
     190:	d9fa      	bls.n	188 <_sercom_get_sync_baud_val+0xc>
     192:	3b01      	subs	r3, #1
     194:	b29b      	uxth	r3, r3
     196:	2440      	movs	r4, #64	; 0x40
     198:	2bff      	cmp	r3, #255	; 0xff
     19a:	d801      	bhi.n	1a0 <_sercom_get_sync_baud_val+0x24>
     19c:	8013      	strh	r3, [r2, #0]
     19e:	2400      	movs	r4, #0
     1a0:	1c20      	adds	r0, r4, #0
     1a2:	bd10      	pop	{r4, pc}

000001a4 <_sercom_get_async_baud_val>:
     1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1a6:	465f      	mov	r7, fp
     1a8:	4656      	mov	r6, sl
     1aa:	464d      	mov	r5, r9
     1ac:	4644      	mov	r4, r8
     1ae:	b4f0      	push	{r4, r5, r6, r7}
     1b0:	b089      	sub	sp, #36	; 0x24
     1b2:	1c1c      	adds	r4, r3, #0
     1b4:	ab12      	add	r3, sp, #72	; 0x48
     1b6:	781b      	ldrb	r3, [r3, #0]
     1b8:	1c06      	adds	r6, r0, #0
     1ba:	435e      	muls	r6, r3
     1bc:	2540      	movs	r5, #64	; 0x40
     1be:	428e      	cmp	r6, r1
     1c0:	d900      	bls.n	1c4 <_sercom_get_async_baud_val+0x20>
     1c2:	e0c7      	b.n	354 <_sercom_get_async_baud_val+0x1b0>
     1c4:	1c25      	adds	r5, r4, #0
     1c6:	9207      	str	r2, [sp, #28]
     1c8:	1c0c      	adds	r4, r1, #0
     1ca:	1c02      	adds	r2, r0, #0
     1cc:	2d00      	cmp	r5, #0
     1ce:	d151      	bne.n	274 <_sercom_get_async_baud_val+0xd0>
     1d0:	1c18      	adds	r0, r3, #0
     1d2:	2100      	movs	r1, #0
     1d4:	2300      	movs	r3, #0
     1d6:	4d63      	ldr	r5, [pc, #396]	; (364 <_sercom_get_async_baud_val+0x1c0>)
     1d8:	47a8      	blx	r5
     1da:	4683      	mov	fp, r0
     1dc:	1c26      	adds	r6, r4, #0
     1de:	2700      	movs	r7, #0
     1e0:	2300      	movs	r3, #0
     1e2:	2400      	movs	r4, #0
     1e4:	9302      	str	r3, [sp, #8]
     1e6:	9403      	str	r4, [sp, #12]
     1e8:	2200      	movs	r2, #0
     1ea:	2300      	movs	r3, #0
     1ec:	203f      	movs	r0, #63	; 0x3f
     1ee:	2120      	movs	r1, #32
     1f0:	468c      	mov	ip, r1
     1f2:	391f      	subs	r1, #31
     1f4:	9600      	str	r6, [sp, #0]
     1f6:	9701      	str	r7, [sp, #4]
     1f8:	2420      	movs	r4, #32
     1fa:	4264      	negs	r4, r4
     1fc:	1904      	adds	r4, r0, r4
     1fe:	d403      	bmi.n	208 <_sercom_get_async_baud_val+0x64>
     200:	1c0d      	adds	r5, r1, #0
     202:	40a5      	lsls	r5, r4
     204:	46a8      	mov	r8, r5
     206:	e004      	b.n	212 <_sercom_get_async_baud_val+0x6e>
     208:	4664      	mov	r4, ip
     20a:	1a24      	subs	r4, r4, r0
     20c:	1c0d      	adds	r5, r1, #0
     20e:	40e5      	lsrs	r5, r4
     210:	46a8      	mov	r8, r5
     212:	1c0c      	adds	r4, r1, #0
     214:	4084      	lsls	r4, r0
     216:	46a1      	mov	r9, r4
     218:	1c14      	adds	r4, r2, #0
     21a:	1c1d      	adds	r5, r3, #0
     21c:	18a4      	adds	r4, r4, r2
     21e:	415d      	adcs	r5, r3
     220:	1c22      	adds	r2, r4, #0
     222:	1c2b      	adds	r3, r5, #0
     224:	465e      	mov	r6, fp
     226:	4647      	mov	r7, r8
     228:	423e      	tst	r6, r7
     22a:	d003      	beq.n	234 <_sercom_get_async_baud_val+0x90>
     22c:	1c0e      	adds	r6, r1, #0
     22e:	4326      	orrs	r6, r4
     230:	1c32      	adds	r2, r6, #0
     232:	1c2b      	adds	r3, r5, #0
     234:	9c01      	ldr	r4, [sp, #4]
     236:	429c      	cmp	r4, r3
     238:	d810      	bhi.n	25c <_sercom_get_async_baud_val+0xb8>
     23a:	d102      	bne.n	242 <_sercom_get_async_baud_val+0x9e>
     23c:	9c00      	ldr	r4, [sp, #0]
     23e:	4294      	cmp	r4, r2
     240:	d80c      	bhi.n	25c <_sercom_get_async_baud_val+0xb8>
     242:	9c00      	ldr	r4, [sp, #0]
     244:	9d01      	ldr	r5, [sp, #4]
     246:	1b12      	subs	r2, r2, r4
     248:	41ab      	sbcs	r3, r5
     24a:	464d      	mov	r5, r9
     24c:	9e02      	ldr	r6, [sp, #8]
     24e:	9f03      	ldr	r7, [sp, #12]
     250:	4335      	orrs	r5, r6
     252:	1c3c      	adds	r4, r7, #0
     254:	4646      	mov	r6, r8
     256:	4334      	orrs	r4, r6
     258:	9502      	str	r5, [sp, #8]
     25a:	9403      	str	r4, [sp, #12]
     25c:	3801      	subs	r0, #1
     25e:	d2cb      	bcs.n	1f8 <_sercom_get_async_baud_val+0x54>
     260:	2200      	movs	r2, #0
     262:	2301      	movs	r3, #1
     264:	9802      	ldr	r0, [sp, #8]
     266:	9903      	ldr	r1, [sp, #12]
     268:	1a12      	subs	r2, r2, r0
     26a:	418b      	sbcs	r3, r1
     26c:	0c11      	lsrs	r1, r2, #16
     26e:	041b      	lsls	r3, r3, #16
     270:	4319      	orrs	r1, r3
     272:	e06c      	b.n	34e <_sercom_get_async_baud_val+0x1aa>
     274:	2100      	movs	r1, #0
     276:	2d01      	cmp	r5, #1
     278:	d169      	bne.n	34e <_sercom_get_async_baud_val+0x1aa>
     27a:	0f61      	lsrs	r1, r4, #29
     27c:	1c0f      	adds	r7, r1, #0
     27e:	00e1      	lsls	r1, r4, #3
     280:	4688      	mov	r8, r1
     282:	1c18      	adds	r0, r3, #0
     284:	2100      	movs	r1, #0
     286:	2300      	movs	r3, #0
     288:	4c36      	ldr	r4, [pc, #216]	; (364 <_sercom_get_async_baud_val+0x1c0>)
     28a:	47a0      	blx	r4
     28c:	1c04      	adds	r4, r0, #0
     28e:	1c0d      	adds	r5, r1, #0
     290:	2300      	movs	r3, #0
     292:	469c      	mov	ip, r3
     294:	3320      	adds	r3, #32
     296:	469b      	mov	fp, r3
     298:	2601      	movs	r6, #1
     29a:	4663      	mov	r3, ip
     29c:	9305      	str	r3, [sp, #20]
     29e:	46b9      	mov	r9, r7
     2a0:	466b      	mov	r3, sp
     2a2:	7d1b      	ldrb	r3, [r3, #20]
     2a4:	9306      	str	r3, [sp, #24]
     2a6:	2300      	movs	r3, #0
     2a8:	469c      	mov	ip, r3
     2aa:	2000      	movs	r0, #0
     2ac:	2100      	movs	r1, #0
     2ae:	223f      	movs	r2, #63	; 0x3f
     2b0:	9400      	str	r4, [sp, #0]
     2b2:	9501      	str	r5, [sp, #4]
     2b4:	2320      	movs	r3, #32
     2b6:	425b      	negs	r3, r3
     2b8:	18d3      	adds	r3, r2, r3
     2ba:	d403      	bmi.n	2c4 <_sercom_get_async_baud_val+0x120>
     2bc:	1c34      	adds	r4, r6, #0
     2be:	409c      	lsls	r4, r3
     2c0:	1c23      	adds	r3, r4, #0
     2c2:	e004      	b.n	2ce <_sercom_get_async_baud_val+0x12a>
     2c4:	465b      	mov	r3, fp
     2c6:	1a9b      	subs	r3, r3, r2
     2c8:	1c34      	adds	r4, r6, #0
     2ca:	40dc      	lsrs	r4, r3
     2cc:	1c23      	adds	r3, r4, #0
     2ce:	1c37      	adds	r7, r6, #0
     2d0:	4097      	lsls	r7, r2
     2d2:	1c04      	adds	r4, r0, #0
     2d4:	1c0d      	adds	r5, r1, #0
     2d6:	1824      	adds	r4, r4, r0
     2d8:	414d      	adcs	r5, r1
     2da:	1c20      	adds	r0, r4, #0
     2dc:	1c29      	adds	r1, r5, #0
     2de:	9002      	str	r0, [sp, #8]
     2e0:	9103      	str	r1, [sp, #12]
     2e2:	4644      	mov	r4, r8
     2e4:	403c      	ands	r4, r7
     2e6:	46a2      	mov	sl, r4
     2e8:	464c      	mov	r4, r9
     2ea:	4023      	ands	r3, r4
     2ec:	4654      	mov	r4, sl
     2ee:	4323      	orrs	r3, r4
     2f0:	d005      	beq.n	2fe <_sercom_get_async_baud_val+0x15a>
     2f2:	9b02      	ldr	r3, [sp, #8]
     2f4:	9c03      	ldr	r4, [sp, #12]
     2f6:	1c1d      	adds	r5, r3, #0
     2f8:	4335      	orrs	r5, r6
     2fa:	1c28      	adds	r0, r5, #0
     2fc:	1c21      	adds	r1, r4, #0
     2fe:	9b01      	ldr	r3, [sp, #4]
     300:	428b      	cmp	r3, r1
     302:	d80a      	bhi.n	31a <_sercom_get_async_baud_val+0x176>
     304:	d102      	bne.n	30c <_sercom_get_async_baud_val+0x168>
     306:	9b00      	ldr	r3, [sp, #0]
     308:	4283      	cmp	r3, r0
     30a:	d806      	bhi.n	31a <_sercom_get_async_baud_val+0x176>
     30c:	9b00      	ldr	r3, [sp, #0]
     30e:	9c01      	ldr	r4, [sp, #4]
     310:	1ac0      	subs	r0, r0, r3
     312:	41a1      	sbcs	r1, r4
     314:	4663      	mov	r3, ip
     316:	433b      	orrs	r3, r7
     318:	469c      	mov	ip, r3
     31a:	3a01      	subs	r2, #1
     31c:	d2ca      	bcs.n	2b4 <_sercom_get_async_baud_val+0x110>
     31e:	9c00      	ldr	r4, [sp, #0]
     320:	9d01      	ldr	r5, [sp, #4]
     322:	4662      	mov	r2, ip
     324:	9905      	ldr	r1, [sp, #20]
     326:	1a53      	subs	r3, r2, r1
     328:	08db      	lsrs	r3, r3, #3
     32a:	4a0f      	ldr	r2, [pc, #60]	; (368 <_sercom_get_async_baud_val+0x1c4>)
     32c:	4293      	cmp	r3, r2
     32e:	d908      	bls.n	342 <_sercom_get_async_baud_val+0x19e>
     330:	9a06      	ldr	r2, [sp, #24]
     332:	3201      	adds	r2, #1
     334:	b2d2      	uxtb	r2, r2
     336:	9206      	str	r2, [sp, #24]
     338:	1c0a      	adds	r2, r1, #0
     33a:	3201      	adds	r2, #1
     33c:	9205      	str	r2, [sp, #20]
     33e:	2a08      	cmp	r2, #8
     340:	d1ae      	bne.n	2a0 <_sercom_get_async_baud_val+0xfc>
     342:	2540      	movs	r5, #64	; 0x40
     344:	9a06      	ldr	r2, [sp, #24]
     346:	2a08      	cmp	r2, #8
     348:	d004      	beq.n	354 <_sercom_get_async_baud_val+0x1b0>
     34a:	0351      	lsls	r1, r2, #13
     34c:	4319      	orrs	r1, r3
     34e:	9b07      	ldr	r3, [sp, #28]
     350:	8019      	strh	r1, [r3, #0]
     352:	2500      	movs	r5, #0
     354:	1c28      	adds	r0, r5, #0
     356:	b009      	add	sp, #36	; 0x24
     358:	bc3c      	pop	{r2, r3, r4, r5}
     35a:	4690      	mov	r8, r2
     35c:	4699      	mov	r9, r3
     35e:	46a2      	mov	sl, r4
     360:	46ab      	mov	fp, r5
     362:	bdf0      	pop	{r4, r5, r6, r7, pc}
     364:	000036d1 	.word	0x000036d1
     368:	00001fff 	.word	0x00001fff

0000036c <sercom_set_gclk_generator>:
     36c:	b510      	push	{r4, lr}
     36e:	b082      	sub	sp, #8
     370:	1c04      	adds	r4, r0, #0
     372:	4b0e      	ldr	r3, [pc, #56]	; (3ac <sercom_set_gclk_generator+0x40>)
     374:	781b      	ldrb	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d001      	beq.n	37e <sercom_set_gclk_generator+0x12>
     37a:	2900      	cmp	r1, #0
     37c:	d00d      	beq.n	39a <sercom_set_gclk_generator+0x2e>
     37e:	a901      	add	r1, sp, #4
     380:	700c      	strb	r4, [r1, #0]
     382:	2013      	movs	r0, #19
     384:	4b0a      	ldr	r3, [pc, #40]	; (3b0 <sercom_set_gclk_generator+0x44>)
     386:	4798      	blx	r3
     388:	2013      	movs	r0, #19
     38a:	4b0a      	ldr	r3, [pc, #40]	; (3b4 <sercom_set_gclk_generator+0x48>)
     38c:	4798      	blx	r3
     38e:	4b07      	ldr	r3, [pc, #28]	; (3ac <sercom_set_gclk_generator+0x40>)
     390:	705c      	strb	r4, [r3, #1]
     392:	2201      	movs	r2, #1
     394:	701a      	strb	r2, [r3, #0]
     396:	2000      	movs	r0, #0
     398:	e006      	b.n	3a8 <sercom_set_gclk_generator+0x3c>
     39a:	4b04      	ldr	r3, [pc, #16]	; (3ac <sercom_set_gclk_generator+0x40>)
     39c:	785b      	ldrb	r3, [r3, #1]
     39e:	4283      	cmp	r3, r0
     3a0:	d001      	beq.n	3a6 <sercom_set_gclk_generator+0x3a>
     3a2:	201d      	movs	r0, #29
     3a4:	e000      	b.n	3a8 <sercom_set_gclk_generator+0x3c>
     3a6:	2000      	movs	r0, #0
     3a8:	b002      	add	sp, #8
     3aa:	bd10      	pop	{r4, pc}
     3ac:	2000008c 	.word	0x2000008c
     3b0:	000017a9 	.word	0x000017a9
     3b4:	0000171d 	.word	0x0000171d

000003b8 <_sercom_get_default_pad>:
     3b8:	4b44      	ldr	r3, [pc, #272]	; (4cc <_sercom_get_default_pad+0x114>)
     3ba:	4298      	cmp	r0, r3
     3bc:	d033      	beq.n	426 <_sercom_get_default_pad+0x6e>
     3be:	d806      	bhi.n	3ce <_sercom_get_default_pad+0x16>
     3c0:	4b43      	ldr	r3, [pc, #268]	; (4d0 <_sercom_get_default_pad+0x118>)
     3c2:	4298      	cmp	r0, r3
     3c4:	d00d      	beq.n	3e2 <_sercom_get_default_pad+0x2a>
     3c6:	4b43      	ldr	r3, [pc, #268]	; (4d4 <_sercom_get_default_pad+0x11c>)
     3c8:	4298      	cmp	r0, r3
     3ca:	d01b      	beq.n	404 <_sercom_get_default_pad+0x4c>
     3cc:	e06f      	b.n	4ae <_sercom_get_default_pad+0xf6>
     3ce:	4b42      	ldr	r3, [pc, #264]	; (4d8 <_sercom_get_default_pad+0x120>)
     3d0:	4298      	cmp	r0, r3
     3d2:	d04a      	beq.n	46a <_sercom_get_default_pad+0xb2>
     3d4:	4b41      	ldr	r3, [pc, #260]	; (4dc <_sercom_get_default_pad+0x124>)
     3d6:	4298      	cmp	r0, r3
     3d8:	d058      	beq.n	48c <_sercom_get_default_pad+0xd4>
     3da:	4b41      	ldr	r3, [pc, #260]	; (4e0 <_sercom_get_default_pad+0x128>)
     3dc:	4298      	cmp	r0, r3
     3de:	d166      	bne.n	4ae <_sercom_get_default_pad+0xf6>
     3e0:	e032      	b.n	448 <_sercom_get_default_pad+0x90>
     3e2:	2901      	cmp	r1, #1
     3e4:	d006      	beq.n	3f4 <_sercom_get_default_pad+0x3c>
     3e6:	2900      	cmp	r1, #0
     3e8:	d063      	beq.n	4b2 <_sercom_get_default_pad+0xfa>
     3ea:	2902      	cmp	r1, #2
     3ec:	d006      	beq.n	3fc <_sercom_get_default_pad+0x44>
     3ee:	2903      	cmp	r1, #3
     3f0:	d006      	beq.n	400 <_sercom_get_default_pad+0x48>
     3f2:	e001      	b.n	3f8 <_sercom_get_default_pad+0x40>
     3f4:	483b      	ldr	r0, [pc, #236]	; (4e4 <_sercom_get_default_pad+0x12c>)
     3f6:	e067      	b.n	4c8 <_sercom_get_default_pad+0x110>
     3f8:	2000      	movs	r0, #0
     3fa:	e065      	b.n	4c8 <_sercom_get_default_pad+0x110>
     3fc:	483a      	ldr	r0, [pc, #232]	; (4e8 <_sercom_get_default_pad+0x130>)
     3fe:	e063      	b.n	4c8 <_sercom_get_default_pad+0x110>
     400:	483a      	ldr	r0, [pc, #232]	; (4ec <_sercom_get_default_pad+0x134>)
     402:	e061      	b.n	4c8 <_sercom_get_default_pad+0x110>
     404:	2901      	cmp	r1, #1
     406:	d006      	beq.n	416 <_sercom_get_default_pad+0x5e>
     408:	2900      	cmp	r1, #0
     40a:	d054      	beq.n	4b6 <_sercom_get_default_pad+0xfe>
     40c:	2902      	cmp	r1, #2
     40e:	d006      	beq.n	41e <_sercom_get_default_pad+0x66>
     410:	2903      	cmp	r1, #3
     412:	d006      	beq.n	422 <_sercom_get_default_pad+0x6a>
     414:	e001      	b.n	41a <_sercom_get_default_pad+0x62>
     416:	4836      	ldr	r0, [pc, #216]	; (4f0 <_sercom_get_default_pad+0x138>)
     418:	e056      	b.n	4c8 <_sercom_get_default_pad+0x110>
     41a:	2000      	movs	r0, #0
     41c:	e054      	b.n	4c8 <_sercom_get_default_pad+0x110>
     41e:	4835      	ldr	r0, [pc, #212]	; (4f4 <_sercom_get_default_pad+0x13c>)
     420:	e052      	b.n	4c8 <_sercom_get_default_pad+0x110>
     422:	4835      	ldr	r0, [pc, #212]	; (4f8 <_sercom_get_default_pad+0x140>)
     424:	e050      	b.n	4c8 <_sercom_get_default_pad+0x110>
     426:	2901      	cmp	r1, #1
     428:	d006      	beq.n	438 <_sercom_get_default_pad+0x80>
     42a:	2900      	cmp	r1, #0
     42c:	d045      	beq.n	4ba <_sercom_get_default_pad+0x102>
     42e:	2902      	cmp	r1, #2
     430:	d006      	beq.n	440 <_sercom_get_default_pad+0x88>
     432:	2903      	cmp	r1, #3
     434:	d006      	beq.n	444 <_sercom_get_default_pad+0x8c>
     436:	e001      	b.n	43c <_sercom_get_default_pad+0x84>
     438:	4830      	ldr	r0, [pc, #192]	; (4fc <_sercom_get_default_pad+0x144>)
     43a:	e045      	b.n	4c8 <_sercom_get_default_pad+0x110>
     43c:	2000      	movs	r0, #0
     43e:	e043      	b.n	4c8 <_sercom_get_default_pad+0x110>
     440:	482f      	ldr	r0, [pc, #188]	; (500 <_sercom_get_default_pad+0x148>)
     442:	e041      	b.n	4c8 <_sercom_get_default_pad+0x110>
     444:	482f      	ldr	r0, [pc, #188]	; (504 <_sercom_get_default_pad+0x14c>)
     446:	e03f      	b.n	4c8 <_sercom_get_default_pad+0x110>
     448:	2901      	cmp	r1, #1
     44a:	d006      	beq.n	45a <_sercom_get_default_pad+0xa2>
     44c:	2900      	cmp	r1, #0
     44e:	d036      	beq.n	4be <_sercom_get_default_pad+0x106>
     450:	2902      	cmp	r1, #2
     452:	d006      	beq.n	462 <_sercom_get_default_pad+0xaa>
     454:	2903      	cmp	r1, #3
     456:	d006      	beq.n	466 <_sercom_get_default_pad+0xae>
     458:	e001      	b.n	45e <_sercom_get_default_pad+0xa6>
     45a:	482b      	ldr	r0, [pc, #172]	; (508 <_sercom_get_default_pad+0x150>)
     45c:	e034      	b.n	4c8 <_sercom_get_default_pad+0x110>
     45e:	2000      	movs	r0, #0
     460:	e032      	b.n	4c8 <_sercom_get_default_pad+0x110>
     462:	482a      	ldr	r0, [pc, #168]	; (50c <_sercom_get_default_pad+0x154>)
     464:	e030      	b.n	4c8 <_sercom_get_default_pad+0x110>
     466:	482a      	ldr	r0, [pc, #168]	; (510 <_sercom_get_default_pad+0x158>)
     468:	e02e      	b.n	4c8 <_sercom_get_default_pad+0x110>
     46a:	2901      	cmp	r1, #1
     46c:	d006      	beq.n	47c <_sercom_get_default_pad+0xc4>
     46e:	2900      	cmp	r1, #0
     470:	d027      	beq.n	4c2 <_sercom_get_default_pad+0x10a>
     472:	2902      	cmp	r1, #2
     474:	d006      	beq.n	484 <_sercom_get_default_pad+0xcc>
     476:	2903      	cmp	r1, #3
     478:	d006      	beq.n	488 <_sercom_get_default_pad+0xd0>
     47a:	e001      	b.n	480 <_sercom_get_default_pad+0xc8>
     47c:	4825      	ldr	r0, [pc, #148]	; (514 <_sercom_get_default_pad+0x15c>)
     47e:	e023      	b.n	4c8 <_sercom_get_default_pad+0x110>
     480:	2000      	movs	r0, #0
     482:	e021      	b.n	4c8 <_sercom_get_default_pad+0x110>
     484:	4824      	ldr	r0, [pc, #144]	; (518 <_sercom_get_default_pad+0x160>)
     486:	e01f      	b.n	4c8 <_sercom_get_default_pad+0x110>
     488:	4824      	ldr	r0, [pc, #144]	; (51c <_sercom_get_default_pad+0x164>)
     48a:	e01d      	b.n	4c8 <_sercom_get_default_pad+0x110>
     48c:	2901      	cmp	r1, #1
     48e:	d006      	beq.n	49e <_sercom_get_default_pad+0xe6>
     490:	2900      	cmp	r1, #0
     492:	d018      	beq.n	4c6 <_sercom_get_default_pad+0x10e>
     494:	2902      	cmp	r1, #2
     496:	d006      	beq.n	4a6 <_sercom_get_default_pad+0xee>
     498:	2903      	cmp	r1, #3
     49a:	d006      	beq.n	4aa <_sercom_get_default_pad+0xf2>
     49c:	e001      	b.n	4a2 <_sercom_get_default_pad+0xea>
     49e:	4820      	ldr	r0, [pc, #128]	; (520 <_sercom_get_default_pad+0x168>)
     4a0:	e012      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4a2:	2000      	movs	r0, #0
     4a4:	e010      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4a6:	481f      	ldr	r0, [pc, #124]	; (524 <_sercom_get_default_pad+0x16c>)
     4a8:	e00e      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4aa:	481f      	ldr	r0, [pc, #124]	; (528 <_sercom_get_default_pad+0x170>)
     4ac:	e00c      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4ae:	2000      	movs	r0, #0
     4b0:	e00a      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4b2:	481e      	ldr	r0, [pc, #120]	; (52c <_sercom_get_default_pad+0x174>)
     4b4:	e008      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4b6:	2003      	movs	r0, #3
     4b8:	e006      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4ba:	481d      	ldr	r0, [pc, #116]	; (530 <_sercom_get_default_pad+0x178>)
     4bc:	e004      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4be:	481d      	ldr	r0, [pc, #116]	; (534 <_sercom_get_default_pad+0x17c>)
     4c0:	e002      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4c2:	481d      	ldr	r0, [pc, #116]	; (538 <_sercom_get_default_pad+0x180>)
     4c4:	e000      	b.n	4c8 <_sercom_get_default_pad+0x110>
     4c6:	481d      	ldr	r0, [pc, #116]	; (53c <_sercom_get_default_pad+0x184>)
     4c8:	4770      	bx	lr
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	42001000 	.word	0x42001000
     4d0:	42000800 	.word	0x42000800
     4d4:	42000c00 	.word	0x42000c00
     4d8:	42001800 	.word	0x42001800
     4dc:	42001c00 	.word	0x42001c00
     4e0:	42001400 	.word	0x42001400
     4e4:	00050003 	.word	0x00050003
     4e8:	00060003 	.word	0x00060003
     4ec:	00070003 	.word	0x00070003
     4f0:	00010003 	.word	0x00010003
     4f4:	001e0003 	.word	0x001e0003
     4f8:	001f0003 	.word	0x001f0003
     4fc:	000d0002 	.word	0x000d0002
     500:	000e0002 	.word	0x000e0002
     504:	000f0002 	.word	0x000f0002
     508:	00110003 	.word	0x00110003
     50c:	00120003 	.word	0x00120003
     510:	00130003 	.word	0x00130003
     514:	003f0005 	.word	0x003f0005
     518:	003e0005 	.word	0x003e0005
     51c:	00520005 	.word	0x00520005
     520:	00170003 	.word	0x00170003
     524:	00180003 	.word	0x00180003
     528:	00190003 	.word	0x00190003
     52c:	00040003 	.word	0x00040003
     530:	000c0002 	.word	0x000c0002
     534:	00100003 	.word	0x00100003
     538:	00530005 	.word	0x00530005
     53c:	00160003 	.word	0x00160003

00000540 <_sercom_get_sercom_inst_index>:
     540:	b530      	push	{r4, r5, lr}
     542:	b087      	sub	sp, #28
     544:	4b0c      	ldr	r3, [pc, #48]	; (578 <_sercom_get_sercom_inst_index+0x38>)
     546:	466a      	mov	r2, sp
     548:	cb32      	ldmia	r3!, {r1, r4, r5}
     54a:	c232      	stmia	r2!, {r1, r4, r5}
     54c:	cb32      	ldmia	r3!, {r1, r4, r5}
     54e:	c232      	stmia	r2!, {r1, r4, r5}
     550:	9b00      	ldr	r3, [sp, #0]
     552:	4283      	cmp	r3, r0
     554:	d006      	beq.n	564 <_sercom_get_sercom_inst_index+0x24>
     556:	2301      	movs	r3, #1
     558:	009a      	lsls	r2, r3, #2
     55a:	4669      	mov	r1, sp
     55c:	5852      	ldr	r2, [r2, r1]
     55e:	4282      	cmp	r2, r0
     560:	d103      	bne.n	56a <_sercom_get_sercom_inst_index+0x2a>
     562:	e000      	b.n	566 <_sercom_get_sercom_inst_index+0x26>
     564:	2300      	movs	r3, #0
     566:	b2d8      	uxtb	r0, r3
     568:	e003      	b.n	572 <_sercom_get_sercom_inst_index+0x32>
     56a:	3301      	adds	r3, #1
     56c:	2b06      	cmp	r3, #6
     56e:	d1f3      	bne.n	558 <_sercom_get_sercom_inst_index+0x18>
     570:	2000      	movs	r0, #0
     572:	b007      	add	sp, #28
     574:	bd30      	pop	{r4, r5, pc}
     576:	46c0      	nop			; (mov r8, r8)
     578:	000046c8 	.word	0x000046c8

0000057c <_read>:
     57c:	b5f0      	push	{r4, r5, r6, r7, lr}
     57e:	4647      	mov	r7, r8
     580:	b480      	push	{r7}
     582:	1c0c      	adds	r4, r1, #0
     584:	4690      	mov	r8, r2
     586:	2800      	cmp	r0, #0
     588:	d110      	bne.n	5ac <_read+0x30>
     58a:	2a00      	cmp	r2, #0
     58c:	dd0a      	ble.n	5a4 <_read+0x28>
     58e:	188f      	adds	r7, r1, r2
     590:	4e09      	ldr	r6, [pc, #36]	; (5b8 <_read+0x3c>)
     592:	4d0a      	ldr	r5, [pc, #40]	; (5bc <_read+0x40>)
     594:	6830      	ldr	r0, [r6, #0]
     596:	1c21      	adds	r1, r4, #0
     598:	682b      	ldr	r3, [r5, #0]
     59a:	4798      	blx	r3
     59c:	3401      	adds	r4, #1
     59e:	42bc      	cmp	r4, r7
     5a0:	d1f8      	bne.n	594 <_read+0x18>
     5a2:	e001      	b.n	5a8 <_read+0x2c>
     5a4:	2300      	movs	r3, #0
     5a6:	4698      	mov	r8, r3
     5a8:	4640      	mov	r0, r8
     5aa:	e001      	b.n	5b0 <_read+0x34>
     5ac:	2001      	movs	r0, #1
     5ae:	4240      	negs	r0, r0
     5b0:	bc04      	pop	{r2}
     5b2:	4690      	mov	r8, r2
     5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	200001b0 	.word	0x200001b0
     5bc:	200001a8 	.word	0x200001a8

000005c0 <_write>:
     5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     5c2:	4647      	mov	r7, r8
     5c4:	b480      	push	{r7}
     5c6:	3801      	subs	r0, #1
     5c8:	2802      	cmp	r0, #2
     5ca:	d815      	bhi.n	5f8 <_write+0x38>
     5cc:	2a00      	cmp	r2, #0
     5ce:	d010      	beq.n	5f2 <_write+0x32>
     5d0:	1c15      	adds	r5, r2, #0
     5d2:	1c0e      	adds	r6, r1, #0
     5d4:	2400      	movs	r4, #0
     5d6:	4b0c      	ldr	r3, [pc, #48]	; (608 <_write+0x48>)
     5d8:	4698      	mov	r8, r3
     5da:	4f0c      	ldr	r7, [pc, #48]	; (60c <_write+0x4c>)
     5dc:	4643      	mov	r3, r8
     5de:	6818      	ldr	r0, [r3, #0]
     5e0:	5d31      	ldrb	r1, [r6, r4]
     5e2:	683b      	ldr	r3, [r7, #0]
     5e4:	4798      	blx	r3
     5e6:	2800      	cmp	r0, #0
     5e8:	db09      	blt.n	5fe <_write+0x3e>
     5ea:	3401      	adds	r4, #1
     5ec:	42a5      	cmp	r5, r4
     5ee:	d1f5      	bne.n	5dc <_write+0x1c>
     5f0:	e000      	b.n	5f4 <_write+0x34>
     5f2:	2400      	movs	r4, #0
     5f4:	1c20      	adds	r0, r4, #0
     5f6:	e004      	b.n	602 <_write+0x42>
     5f8:	2001      	movs	r0, #1
     5fa:	4240      	negs	r0, r0
     5fc:	e001      	b.n	602 <_write+0x42>
     5fe:	2001      	movs	r0, #1
     600:	4240      	negs	r0, r0
     602:	bc04      	pop	{r2}
     604:	4690      	mov	r8, r2
     606:	bdf0      	pop	{r4, r5, r6, r7, pc}
     608:	200001b0 	.word	0x200001b0
     60c:	200001ac 	.word	0x200001ac

00000610 <usart_serial_getchar>:
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b082      	sub	sp, #8
     614:	1c05      	adds	r5, r0, #0
     616:	1c0e      	adds	r6, r1, #0
     618:	2200      	movs	r2, #0
     61a:	466b      	mov	r3, sp
     61c:	80da      	strh	r2, [r3, #6]
     61e:	4c06      	ldr	r4, [pc, #24]	; (638 <usart_serial_getchar+0x28>)
     620:	1c28      	adds	r0, r5, #0
     622:	466b      	mov	r3, sp
     624:	1d99      	adds	r1, r3, #6
     626:	47a0      	blx	r4
     628:	2800      	cmp	r0, #0
     62a:	d1f9      	bne.n	620 <usart_serial_getchar+0x10>
     62c:	466b      	mov	r3, sp
     62e:	3306      	adds	r3, #6
     630:	881b      	ldrh	r3, [r3, #0]
     632:	7033      	strb	r3, [r6, #0]
     634:	b002      	add	sp, #8
     636:	bd70      	pop	{r4, r5, r6, pc}
     638:	00000b69 	.word	0x00000b69

0000063c <usart_serial_putchar>:
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	1c05      	adds	r5, r0, #0
     640:	b28c      	uxth	r4, r1
     642:	4e03      	ldr	r6, [pc, #12]	; (650 <usart_serial_putchar+0x14>)
     644:	1c28      	adds	r0, r5, #0
     646:	1c21      	adds	r1, r4, #0
     648:	47b0      	blx	r6
     64a:	2800      	cmp	r0, #0
     64c:	d1fa      	bne.n	644 <usart_serial_putchar+0x8>
     64e:	bd70      	pop	{r4, r5, r6, pc}
     650:	00000b3d 	.word	0x00000b3d

00000654 <USART_HOST_ISR_VECT>:
     654:	b510      	push	{r4, lr}
     656:	b082      	sub	sp, #8
     658:	466b      	mov	r3, sp
     65a:	1ddc      	adds	r4, r3, #7
     65c:	4810      	ldr	r0, [pc, #64]	; (6a0 <USART_HOST_ISR_VECT+0x4c>)
     65e:	1c21      	adds	r1, r4, #0
     660:	2201      	movs	r2, #1
     662:	4b10      	ldr	r3, [pc, #64]	; (6a4 <USART_HOST_ISR_VECT+0x50>)
     664:	4798      	blx	r3
     666:	b672      	cpsid	i
     668:	f3bf 8f5f 	dmb	sy
     66c:	2200      	movs	r2, #0
     66e:	4b0e      	ldr	r3, [pc, #56]	; (6a8 <USART_HOST_ISR_VECT+0x54>)
     670:	701a      	strb	r2, [r3, #0]
     672:	4b0e      	ldr	r3, [pc, #56]	; (6ac <USART_HOST_ISR_VECT+0x58>)
     674:	781b      	ldrb	r3, [r3, #0]
     676:	7821      	ldrb	r1, [r4, #0]
     678:	4a0d      	ldr	r2, [pc, #52]	; (6b0 <USART_HOST_ISR_VECT+0x5c>)
     67a:	54d1      	strb	r1, [r2, r3]
     67c:	2b9b      	cmp	r3, #155	; 0x9b
     67e:	d103      	bne.n	688 <USART_HOST_ISR_VECT+0x34>
     680:	2200      	movs	r2, #0
     682:	4b0a      	ldr	r3, [pc, #40]	; (6ac <USART_HOST_ISR_VECT+0x58>)
     684:	701a      	strb	r2, [r3, #0]
     686:	e002      	b.n	68e <USART_HOST_ISR_VECT+0x3a>
     688:	3301      	adds	r3, #1
     68a:	4a08      	ldr	r2, [pc, #32]	; (6ac <USART_HOST_ISR_VECT+0x58>)
     68c:	7013      	strb	r3, [r2, #0]
     68e:	2201      	movs	r2, #1
     690:	4b05      	ldr	r3, [pc, #20]	; (6a8 <USART_HOST_ISR_VECT+0x54>)
     692:	701a      	strb	r2, [r3, #0]
     694:	f3bf 8f5f 	dmb	sy
     698:	b662      	cpsie	i
     69a:	b002      	add	sp, #8
     69c:	bd10      	pop	{r4, pc}
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	2000012c 	.word	0x2000012c
     6a4:	00000be1 	.word	0x00000be1
     6a8:	20000008 	.word	0x20000008
     6ac:	20000160 	.word	0x20000160
     6b0:	20000090 	.word	0x20000090

000006b4 <sio2host_init>:
     6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b6:	b091      	sub	sp, #68	; 0x44
     6b8:	2380      	movs	r3, #128	; 0x80
     6ba:	05db      	lsls	r3, r3, #23
     6bc:	9300      	str	r3, [sp, #0]
     6be:	2300      	movs	r3, #0
     6c0:	9301      	str	r3, [sp, #4]
     6c2:	22ff      	movs	r2, #255	; 0xff
     6c4:	4669      	mov	r1, sp
     6c6:	810a      	strh	r2, [r1, #8]
     6c8:	2200      	movs	r2, #0
     6ca:	728b      	strb	r3, [r1, #10]
     6cc:	72cb      	strb	r3, [r1, #11]
     6ce:	2401      	movs	r4, #1
     6d0:	2124      	movs	r1, #36	; 0x24
     6d2:	4668      	mov	r0, sp
     6d4:	5444      	strb	r4, [r0, r1]
     6d6:	3101      	adds	r1, #1
     6d8:	5444      	strb	r4, [r0, r1]
     6da:	3101      	adds	r1, #1
     6dc:	5443      	strb	r3, [r0, r1]
     6de:	3101      	adds	r1, #1
     6e0:	5443      	strb	r3, [r0, r1]
     6e2:	930a      	str	r3, [sp, #40]	; 0x28
     6e4:	3105      	adds	r1, #5
     6e6:	5443      	strb	r3, [r0, r1]
     6e8:	3101      	adds	r1, #1
     6ea:	5443      	strb	r3, [r0, r1]
     6ec:	9305      	str	r3, [sp, #20]
     6ee:	8203      	strh	r3, [r0, #16]
     6f0:	76c3      	strb	r3, [r0, #27]
     6f2:	7602      	strb	r2, [r0, #24]
     6f4:	7702      	strb	r2, [r0, #28]
     6f6:	7642      	strb	r2, [r0, #25]
     6f8:	2313      	movs	r3, #19
     6fa:	7683      	strb	r3, [r0, #26]
     6fc:	7742      	strb	r2, [r0, #29]
     6fe:	2380      	movs	r3, #128	; 0x80
     700:	035b      	lsls	r3, r3, #13
     702:	9303      	str	r3, [sp, #12]
     704:	4b2f      	ldr	r3, [pc, #188]	; (7c4 <sio2host_init+0x110>)
     706:	930c      	str	r3, [sp, #48]	; 0x30
     708:	4b2f      	ldr	r3, [pc, #188]	; (7c8 <sio2host_init+0x114>)
     70a:	930d      	str	r3, [sp, #52]	; 0x34
     70c:	2301      	movs	r3, #1
     70e:	425b      	negs	r3, r3
     710:	930e      	str	r3, [sp, #56]	; 0x38
     712:	930f      	str	r3, [sp, #60]	; 0x3c
     714:	23e1      	movs	r3, #225	; 0xe1
     716:	025b      	lsls	r3, r3, #9
     718:	9308      	str	r3, [sp, #32]
     71a:	4d2c      	ldr	r5, [pc, #176]	; (7cc <sio2host_init+0x118>)
     71c:	4b2c      	ldr	r3, [pc, #176]	; (7d0 <sio2host_init+0x11c>)
     71e:	601d      	str	r5, [r3, #0]
     720:	4a2c      	ldr	r2, [pc, #176]	; (7d4 <sio2host_init+0x120>)
     722:	4b2d      	ldr	r3, [pc, #180]	; (7d8 <sio2host_init+0x124>)
     724:	601a      	str	r2, [r3, #0]
     726:	4a2d      	ldr	r2, [pc, #180]	; (7dc <sio2host_init+0x128>)
     728:	4b2d      	ldr	r3, [pc, #180]	; (7e0 <sio2host_init+0x12c>)
     72a:	601a      	str	r2, [r3, #0]
     72c:	1c28      	adds	r0, r5, #0
     72e:	492d      	ldr	r1, [pc, #180]	; (7e4 <sio2host_init+0x130>)
     730:	466a      	mov	r2, sp
     732:	4b2d      	ldr	r3, [pc, #180]	; (7e8 <sio2host_init+0x134>)
     734:	4798      	blx	r3
     736:	4f2d      	ldr	r7, [pc, #180]	; (7ec <sio2host_init+0x138>)
     738:	683b      	ldr	r3, [r7, #0]
     73a:	6898      	ldr	r0, [r3, #8]
     73c:	2100      	movs	r1, #0
     73e:	4e2c      	ldr	r6, [pc, #176]	; (7f0 <sio2host_init+0x13c>)
     740:	47b0      	blx	r6
     742:	683b      	ldr	r3, [r7, #0]
     744:	6858      	ldr	r0, [r3, #4]
     746:	2100      	movs	r1, #0
     748:	47b0      	blx	r6
     74a:	682e      	ldr	r6, [r5, #0]
     74c:	1c30      	adds	r0, r6, #0
     74e:	4b29      	ldr	r3, [pc, #164]	; (7f4 <sio2host_init+0x140>)
     750:	4798      	blx	r3
     752:	231f      	movs	r3, #31
     754:	4018      	ands	r0, r3
     756:	4084      	lsls	r4, r0
     758:	4b27      	ldr	r3, [pc, #156]	; (7f8 <sio2host_init+0x144>)
     75a:	601c      	str	r4, [r3, #0]
     75c:	682a      	ldr	r2, [r5, #0]
     75e:	69d3      	ldr	r3, [r2, #28]
     760:	2b00      	cmp	r3, #0
     762:	d1fc      	bne.n	75e <sio2host_init+0xaa>
     764:	6832      	ldr	r2, [r6, #0]
     766:	3302      	adds	r3, #2
     768:	4313      	orrs	r3, r2
     76a:	6033      	str	r3, [r6, #0]
     76c:	4b17      	ldr	r3, [pc, #92]	; (7cc <sio2host_init+0x118>)
     76e:	681b      	ldr	r3, [r3, #0]
     770:	69da      	ldr	r2, [r3, #28]
     772:	2a00      	cmp	r2, #0
     774:	d1fc      	bne.n	770 <sio2host_init+0xbc>
     776:	685a      	ldr	r2, [r3, #4]
     778:	2180      	movs	r1, #128	; 0x80
     77a:	0249      	lsls	r1, r1, #9
     77c:	430a      	orrs	r2, r1
     77e:	605a      	str	r2, [r3, #4]
     780:	2101      	movs	r1, #1
     782:	4a12      	ldr	r2, [pc, #72]	; (7cc <sio2host_init+0x118>)
     784:	71d1      	strb	r1, [r2, #7]
     786:	69da      	ldr	r2, [r3, #28]
     788:	2a00      	cmp	r2, #0
     78a:	d1fc      	bne.n	786 <sio2host_init+0xd2>
     78c:	69da      	ldr	r2, [r3, #28]
     78e:	2a00      	cmp	r2, #0
     790:	d1fc      	bne.n	78c <sio2host_init+0xd8>
     792:	685a      	ldr	r2, [r3, #4]
     794:	2180      	movs	r1, #128	; 0x80
     796:	0289      	lsls	r1, r1, #10
     798:	430a      	orrs	r2, r1
     79a:	605a      	str	r2, [r3, #4]
     79c:	2101      	movs	r1, #1
     79e:	4a0b      	ldr	r2, [pc, #44]	; (7cc <sio2host_init+0x118>)
     7a0:	7191      	strb	r1, [r2, #6]
     7a2:	69da      	ldr	r2, [r3, #28]
     7a4:	2a00      	cmp	r2, #0
     7a6:	d1fc      	bne.n	7a2 <sio2host_init+0xee>
     7a8:	2000      	movs	r0, #0
     7aa:	4914      	ldr	r1, [pc, #80]	; (7fc <sio2host_init+0x148>)
     7ac:	4b14      	ldr	r3, [pc, #80]	; (800 <sio2host_init+0x14c>)
     7ae:	4798      	blx	r3
     7b0:	2204      	movs	r2, #4
     7b2:	4b0c      	ldr	r3, [pc, #48]	; (7e4 <sio2host_init+0x130>)
     7b4:	759a      	strb	r2, [r3, #22]
     7b6:	32fd      	adds	r2, #253	; 0xfd
     7b8:	32ff      	adds	r2, #255	; 0xff
     7ba:	4b0f      	ldr	r3, [pc, #60]	; (7f8 <sio2host_init+0x144>)
     7bc:	601a      	str	r2, [r3, #0]
     7be:	b011      	add	sp, #68	; 0x44
     7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	00040003 	.word	0x00040003
     7c8:	00050003 	.word	0x00050003
     7cc:	2000012c 	.word	0x2000012c
     7d0:	200001b0 	.word	0x200001b0
     7d4:	0000063d 	.word	0x0000063d
     7d8:	200001ac 	.word	0x200001ac
     7dc:	00000611 	.word	0x00000611
     7e0:	200001a8 	.word	0x200001a8
     7e4:	42000800 	.word	0x42000800
     7e8:	00000805 	.word	0x00000805
     7ec:	2000006c 	.word	0x2000006c
     7f0:	000037c9 	.word	0x000037c9
     7f4:	00000e61 	.word	0x00000e61
     7f8:	e000e100 	.word	0xe000e100
     7fc:	00000655 	.word	0x00000655
     800:	00000e25 	.word	0x00000e25

00000804 <usart_init>:
     804:	b5f0      	push	{r4, r5, r6, r7, lr}
     806:	465f      	mov	r7, fp
     808:	4656      	mov	r6, sl
     80a:	464d      	mov	r5, r9
     80c:	4644      	mov	r4, r8
     80e:	b4f0      	push	{r4, r5, r6, r7}
     810:	b091      	sub	sp, #68	; 0x44
     812:	1c05      	adds	r5, r0, #0
     814:	1c0c      	adds	r4, r1, #0
     816:	1c16      	adds	r6, r2, #0
     818:	6029      	str	r1, [r5, #0]
     81a:	1c08      	adds	r0, r1, #0
     81c:	4bb9      	ldr	r3, [pc, #740]	; (b04 <usart_init+0x300>)
     81e:	4798      	blx	r3
     820:	6822      	ldr	r2, [r4, #0]
     822:	2305      	movs	r3, #5
     824:	07d2      	lsls	r2, r2, #31
     826:	d500      	bpl.n	82a <usart_init+0x26>
     828:	e163      	b.n	af2 <usart_init+0x2ee>
     82a:	6822      	ldr	r2, [r4, #0]
     82c:	3317      	adds	r3, #23
     82e:	0792      	lsls	r2, r2, #30
     830:	d500      	bpl.n	834 <usart_init+0x30>
     832:	e15e      	b.n	af2 <usart_init+0x2ee>
     834:	49b4      	ldr	r1, [pc, #720]	; (b08 <usart_init+0x304>)
     836:	6a0a      	ldr	r2, [r1, #32]
     838:	1c87      	adds	r7, r0, #2
     83a:	3b1b      	subs	r3, #27
     83c:	40bb      	lsls	r3, r7
     83e:	4313      	orrs	r3, r2
     840:	620b      	str	r3, [r1, #32]
     842:	a90f      	add	r1, sp, #60	; 0x3c
     844:	272d      	movs	r7, #45	; 0x2d
     846:	5df3      	ldrb	r3, [r6, r7]
     848:	700b      	strb	r3, [r1, #0]
     84a:	3014      	adds	r0, #20
     84c:	b2c3      	uxtb	r3, r0
     84e:	9302      	str	r3, [sp, #8]
     850:	1c18      	adds	r0, r3, #0
     852:	4bae      	ldr	r3, [pc, #696]	; (b0c <usart_init+0x308>)
     854:	4798      	blx	r3
     856:	9802      	ldr	r0, [sp, #8]
     858:	4bad      	ldr	r3, [pc, #692]	; (b10 <usart_init+0x30c>)
     85a:	4798      	blx	r3
     85c:	5df0      	ldrb	r0, [r6, r7]
     85e:	2100      	movs	r1, #0
     860:	4bac      	ldr	r3, [pc, #688]	; (b14 <usart_init+0x310>)
     862:	4798      	blx	r3
     864:	7af3      	ldrb	r3, [r6, #11]
     866:	716b      	strb	r3, [r5, #5]
     868:	2324      	movs	r3, #36	; 0x24
     86a:	5cf3      	ldrb	r3, [r6, r3]
     86c:	71ab      	strb	r3, [r5, #6]
     86e:	2325      	movs	r3, #37	; 0x25
     870:	5cf3      	ldrb	r3, [r6, r3]
     872:	71eb      	strb	r3, [r5, #7]
     874:	7ef3      	ldrb	r3, [r6, #27]
     876:	722b      	strb	r3, [r5, #8]
     878:	7f33      	ldrb	r3, [r6, #28]
     87a:	726b      	strb	r3, [r5, #9]
     87c:	682b      	ldr	r3, [r5, #0]
     87e:	469a      	mov	sl, r3
     880:	1c18      	adds	r0, r3, #0
     882:	4ba0      	ldr	r3, [pc, #640]	; (b04 <usart_init+0x300>)
     884:	4798      	blx	r3
     886:	3014      	adds	r0, #20
     888:	2200      	movs	r2, #0
     88a:	230e      	movs	r3, #14
     88c:	a906      	add	r1, sp, #24
     88e:	468c      	mov	ip, r1
     890:	4463      	add	r3, ip
     892:	801a      	strh	r2, [r3, #0]
     894:	8a33      	ldrh	r3, [r6, #16]
     896:	4699      	mov	r9, r3
     898:	2380      	movs	r3, #128	; 0x80
     89a:	01db      	lsls	r3, r3, #7
     89c:	4599      	cmp	r9, r3
     89e:	d019      	beq.n	8d4 <usart_init+0xd0>
     8a0:	d804      	bhi.n	8ac <usart_init+0xa8>
     8a2:	2380      	movs	r3, #128	; 0x80
     8a4:	019b      	lsls	r3, r3, #6
     8a6:	4599      	cmp	r9, r3
     8a8:	d00a      	beq.n	8c0 <usart_init+0xbc>
     8aa:	e103      	b.n	ab4 <usart_init+0x2b0>
     8ac:	23c0      	movs	r3, #192	; 0xc0
     8ae:	01db      	lsls	r3, r3, #7
     8b0:	4599      	cmp	r9, r3
     8b2:	d00a      	beq.n	8ca <usart_init+0xc6>
     8b4:	2380      	movs	r3, #128	; 0x80
     8b6:	021b      	lsls	r3, r3, #8
     8b8:	4599      	cmp	r9, r3
     8ba:	d100      	bne.n	8be <usart_init+0xba>
     8bc:	e0ff      	b.n	abe <usart_init+0x2ba>
     8be:	e0f9      	b.n	ab4 <usart_init+0x2b0>
     8c0:	2310      	movs	r3, #16
     8c2:	4698      	mov	r8, r3
     8c4:	3b0f      	subs	r3, #15
     8c6:	9307      	str	r3, [sp, #28]
     8c8:	e0fd      	b.n	ac6 <usart_init+0x2c2>
     8ca:	2308      	movs	r3, #8
     8cc:	4698      	mov	r8, r3
     8ce:	3b07      	subs	r3, #7
     8d0:	9307      	str	r3, [sp, #28]
     8d2:	e0f8      	b.n	ac6 <usart_init+0x2c2>
     8d4:	6833      	ldr	r3, [r6, #0]
     8d6:	469b      	mov	fp, r3
     8d8:	68f3      	ldr	r3, [r6, #12]
     8da:	9302      	str	r3, [sp, #8]
     8dc:	6973      	ldr	r3, [r6, #20]
     8de:	9303      	str	r3, [sp, #12]
     8e0:	7e33      	ldrb	r3, [r6, #24]
     8e2:	9304      	str	r3, [sp, #16]
     8e4:	2326      	movs	r3, #38	; 0x26
     8e6:	5cf3      	ldrb	r3, [r6, r3]
     8e8:	9305      	str	r3, [sp, #20]
     8ea:	6872      	ldr	r2, [r6, #4]
     8ec:	9206      	str	r2, [sp, #24]
     8ee:	2a00      	cmp	r2, #0
     8f0:	d015      	beq.n	91e <usart_init+0x11a>
     8f2:	2380      	movs	r3, #128	; 0x80
     8f4:	055b      	lsls	r3, r3, #21
     8f6:	429a      	cmp	r2, r3
     8f8:	d136      	bne.n	968 <usart_init+0x164>
     8fa:	2327      	movs	r3, #39	; 0x27
     8fc:	5cf3      	ldrb	r3, [r6, r3]
     8fe:	2b00      	cmp	r3, #0
     900:	d136      	bne.n	970 <usart_init+0x16c>
     902:	6a33      	ldr	r3, [r6, #32]
     904:	4698      	mov	r8, r3
     906:	b2c0      	uxtb	r0, r0
     908:	4b83      	ldr	r3, [pc, #524]	; (b18 <usart_init+0x314>)
     90a:	4798      	blx	r3
     90c:	1c01      	adds	r1, r0, #0
     90e:	4640      	mov	r0, r8
     910:	220e      	movs	r2, #14
     912:	ab06      	add	r3, sp, #24
     914:	469c      	mov	ip, r3
     916:	4462      	add	r2, ip
     918:	4b80      	ldr	r3, [pc, #512]	; (b1c <usart_init+0x318>)
     91a:	4798      	blx	r3
     91c:	e025      	b.n	96a <usart_init+0x166>
     91e:	2308      	movs	r3, #8
     920:	4698      	mov	r8, r3
     922:	2300      	movs	r3, #0
     924:	9307      	str	r3, [sp, #28]
     926:	2327      	movs	r3, #39	; 0x27
     928:	5cf3      	ldrb	r3, [r6, r3]
     92a:	2b00      	cmp	r3, #0
     92c:	d00b      	beq.n	946 <usart_init+0x142>
     92e:	4643      	mov	r3, r8
     930:	9300      	str	r3, [sp, #0]
     932:	6a30      	ldr	r0, [r6, #32]
     934:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     936:	220e      	movs	r2, #14
     938:	ab06      	add	r3, sp, #24
     93a:	469c      	mov	ip, r3
     93c:	4462      	add	r2, ip
     93e:	9b07      	ldr	r3, [sp, #28]
     940:	4f77      	ldr	r7, [pc, #476]	; (b20 <usart_init+0x31c>)
     942:	47b8      	blx	r7
     944:	e011      	b.n	96a <usart_init+0x166>
     946:	6a33      	ldr	r3, [r6, #32]
     948:	1c1f      	adds	r7, r3, #0
     94a:	b2c0      	uxtb	r0, r0
     94c:	4b72      	ldr	r3, [pc, #456]	; (b18 <usart_init+0x314>)
     94e:	4798      	blx	r3
     950:	1c01      	adds	r1, r0, #0
     952:	4643      	mov	r3, r8
     954:	9300      	str	r3, [sp, #0]
     956:	1c38      	adds	r0, r7, #0
     958:	220e      	movs	r2, #14
     95a:	ab06      	add	r3, sp, #24
     95c:	469c      	mov	ip, r3
     95e:	4462      	add	r2, ip
     960:	9b07      	ldr	r3, [sp, #28]
     962:	4f6f      	ldr	r7, [pc, #444]	; (b20 <usart_init+0x31c>)
     964:	47b8      	blx	r7
     966:	e000      	b.n	96a <usart_init+0x166>
     968:	2000      	movs	r0, #0
     96a:	1e03      	subs	r3, r0, #0
     96c:	d000      	beq.n	970 <usart_init+0x16c>
     96e:	e0c0      	b.n	af2 <usart_init+0x2ee>
     970:	7e73      	ldrb	r3, [r6, #25]
     972:	2b00      	cmp	r3, #0
     974:	d002      	beq.n	97c <usart_init+0x178>
     976:	7eb3      	ldrb	r3, [r6, #26]
     978:	4652      	mov	r2, sl
     97a:	7393      	strb	r3, [r2, #14]
     97c:	682a      	ldr	r2, [r5, #0]
     97e:	9f06      	ldr	r7, [sp, #24]
     980:	69d3      	ldr	r3, [r2, #28]
     982:	2b00      	cmp	r3, #0
     984:	d1fc      	bne.n	980 <usart_init+0x17c>
     986:	330e      	adds	r3, #14
     988:	aa06      	add	r2, sp, #24
     98a:	4694      	mov	ip, r2
     98c:	4463      	add	r3, ip
     98e:	881b      	ldrh	r3, [r3, #0]
     990:	4652      	mov	r2, sl
     992:	8193      	strh	r3, [r2, #12]
     994:	9b02      	ldr	r3, [sp, #8]
     996:	465a      	mov	r2, fp
     998:	4313      	orrs	r3, r2
     99a:	9a03      	ldr	r2, [sp, #12]
     99c:	4313      	orrs	r3, r2
     99e:	433b      	orrs	r3, r7
     9a0:	464a      	mov	r2, r9
     9a2:	4313      	orrs	r3, r2
     9a4:	9a04      	ldr	r2, [sp, #16]
     9a6:	0212      	lsls	r2, r2, #8
     9a8:	4313      	orrs	r3, r2
     9aa:	9a05      	ldr	r2, [sp, #20]
     9ac:	0757      	lsls	r7, r2, #29
     9ae:	431f      	orrs	r7, r3
     9b0:	2327      	movs	r3, #39	; 0x27
     9b2:	5cf3      	ldrb	r3, [r6, r3]
     9b4:	2b00      	cmp	r3, #0
     9b6:	d101      	bne.n	9bc <usart_init+0x1b8>
     9b8:	3304      	adds	r3, #4
     9ba:	431f      	orrs	r7, r3
     9bc:	7f33      	ldrb	r3, [r6, #28]
     9be:	0259      	lsls	r1, r3, #9
     9c0:	7e72      	ldrb	r2, [r6, #25]
     9c2:	0293      	lsls	r3, r2, #10
     9c4:	430b      	orrs	r3, r1
     9c6:	7f72      	ldrb	r2, [r6, #29]
     9c8:	0212      	lsls	r2, r2, #8
     9ca:	4313      	orrs	r3, r2
     9cc:	2224      	movs	r2, #36	; 0x24
     9ce:	5cb2      	ldrb	r2, [r6, r2]
     9d0:	0452      	lsls	r2, r2, #17
     9d2:	4313      	orrs	r3, r2
     9d4:	2225      	movs	r2, #37	; 0x25
     9d6:	5cb2      	ldrb	r2, [r6, r2]
     9d8:	0412      	lsls	r2, r2, #16
     9da:	4313      	orrs	r3, r2
     9dc:	7af1      	ldrb	r1, [r6, #11]
     9de:	4319      	orrs	r1, r3
     9e0:	8933      	ldrh	r3, [r6, #8]
     9e2:	2bff      	cmp	r3, #255	; 0xff
     9e4:	d004      	beq.n	9f0 <usart_init+0x1ec>
     9e6:	2280      	movs	r2, #128	; 0x80
     9e8:	0452      	lsls	r2, r2, #17
     9ea:	4317      	orrs	r7, r2
     9ec:	4319      	orrs	r1, r3
     9ee:	e005      	b.n	9fc <usart_init+0x1f8>
     9f0:	7ef3      	ldrb	r3, [r6, #27]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d002      	beq.n	9fc <usart_init+0x1f8>
     9f6:	2380      	movs	r3, #128	; 0x80
     9f8:	04db      	lsls	r3, r3, #19
     9fa:	431f      	orrs	r7, r3
     9fc:	232c      	movs	r3, #44	; 0x2c
     9fe:	5cf3      	ldrb	r3, [r6, r3]
     a00:	2b00      	cmp	r3, #0
     a02:	d103      	bne.n	a0c <usart_init+0x208>
     a04:	4b47      	ldr	r3, [pc, #284]	; (b24 <usart_init+0x320>)
     a06:	789b      	ldrb	r3, [r3, #2]
     a08:	079b      	lsls	r3, r3, #30
     a0a:	d501      	bpl.n	a10 <usart_init+0x20c>
     a0c:	2380      	movs	r3, #128	; 0x80
     a0e:	431f      	orrs	r7, r3
     a10:	682a      	ldr	r2, [r5, #0]
     a12:	69d3      	ldr	r3, [r2, #28]
     a14:	2b00      	cmp	r3, #0
     a16:	d1fc      	bne.n	a12 <usart_init+0x20e>
     a18:	4653      	mov	r3, sl
     a1a:	6059      	str	r1, [r3, #4]
     a1c:	682a      	ldr	r2, [r5, #0]
     a1e:	69d3      	ldr	r3, [r2, #28]
     a20:	2b00      	cmp	r3, #0
     a22:	d1fc      	bne.n	a1e <usart_init+0x21a>
     a24:	4653      	mov	r3, sl
     a26:	601f      	str	r7, [r3, #0]
     a28:	ab0e      	add	r3, sp, #56	; 0x38
     a2a:	2280      	movs	r2, #128	; 0x80
     a2c:	701a      	strb	r2, [r3, #0]
     a2e:	2200      	movs	r2, #0
     a30:	705a      	strb	r2, [r3, #1]
     a32:	70da      	strb	r2, [r3, #3]
     a34:	709a      	strb	r2, [r3, #2]
     a36:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a38:	930a      	str	r3, [sp, #40]	; 0x28
     a3a:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a3c:	930b      	str	r3, [sp, #44]	; 0x2c
     a3e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a40:	930c      	str	r3, [sp, #48]	; 0x30
     a42:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a44:	9302      	str	r3, [sp, #8]
     a46:	930d      	str	r3, [sp, #52]	; 0x34
     a48:	2700      	movs	r7, #0
     a4a:	ae0e      	add	r6, sp, #56	; 0x38
     a4c:	b2f9      	uxtb	r1, r7
     a4e:	00bb      	lsls	r3, r7, #2
     a50:	aa0a      	add	r2, sp, #40	; 0x28
     a52:	5898      	ldr	r0, [r3, r2]
     a54:	2800      	cmp	r0, #0
     a56:	d102      	bne.n	a5e <usart_init+0x25a>
     a58:	1c20      	adds	r0, r4, #0
     a5a:	4b33      	ldr	r3, [pc, #204]	; (b28 <usart_init+0x324>)
     a5c:	4798      	blx	r3
     a5e:	1c43      	adds	r3, r0, #1
     a60:	d005      	beq.n	a6e <usart_init+0x26a>
     a62:	7030      	strb	r0, [r6, #0]
     a64:	0c00      	lsrs	r0, r0, #16
     a66:	b2c0      	uxtb	r0, r0
     a68:	1c31      	adds	r1, r6, #0
     a6a:	4b30      	ldr	r3, [pc, #192]	; (b2c <usart_init+0x328>)
     a6c:	4798      	blx	r3
     a6e:	3701      	adds	r7, #1
     a70:	2f04      	cmp	r7, #4
     a72:	d1eb      	bne.n	a4c <usart_init+0x248>
     a74:	2300      	movs	r3, #0
     a76:	60eb      	str	r3, [r5, #12]
     a78:	612b      	str	r3, [r5, #16]
     a7a:	616b      	str	r3, [r5, #20]
     a7c:	61ab      	str	r3, [r5, #24]
     a7e:	61eb      	str	r3, [r5, #28]
     a80:	622b      	str	r3, [r5, #32]
     a82:	62ab      	str	r3, [r5, #40]	; 0x28
     a84:	626b      	str	r3, [r5, #36]	; 0x24
     a86:	2200      	movs	r2, #0
     a88:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a8a:	85ab      	strh	r3, [r5, #44]	; 0x2c
     a8c:	3330      	adds	r3, #48	; 0x30
     a8e:	54ea      	strb	r2, [r5, r3]
     a90:	3301      	adds	r3, #1
     a92:	54ea      	strb	r2, [r5, r3]
     a94:	3301      	adds	r3, #1
     a96:	54ea      	strb	r2, [r5, r3]
     a98:	3301      	adds	r3, #1
     a9a:	54ea      	strb	r2, [r5, r3]
     a9c:	6828      	ldr	r0, [r5, #0]
     a9e:	4b19      	ldr	r3, [pc, #100]	; (b04 <usart_init+0x300>)
     aa0:	4798      	blx	r3
     aa2:	1c04      	adds	r4, r0, #0
     aa4:	4922      	ldr	r1, [pc, #136]	; (b30 <usart_init+0x32c>)
     aa6:	4b23      	ldr	r3, [pc, #140]	; (b34 <usart_init+0x330>)
     aa8:	4798      	blx	r3
     aaa:	00a4      	lsls	r4, r4, #2
     aac:	4b22      	ldr	r3, [pc, #136]	; (b38 <usart_init+0x334>)
     aae:	50e5      	str	r5, [r4, r3]
     ab0:	2300      	movs	r3, #0
     ab2:	e01e      	b.n	af2 <usart_init+0x2ee>
     ab4:	2310      	movs	r3, #16
     ab6:	4698      	mov	r8, r3
     ab8:	2300      	movs	r3, #0
     aba:	9307      	str	r3, [sp, #28]
     abc:	e003      	b.n	ac6 <usart_init+0x2c2>
     abe:	2303      	movs	r3, #3
     ac0:	4698      	mov	r8, r3
     ac2:	2300      	movs	r3, #0
     ac4:	9307      	str	r3, [sp, #28]
     ac6:	6833      	ldr	r3, [r6, #0]
     ac8:	469b      	mov	fp, r3
     aca:	68f3      	ldr	r3, [r6, #12]
     acc:	9302      	str	r3, [sp, #8]
     ace:	6973      	ldr	r3, [r6, #20]
     ad0:	9303      	str	r3, [sp, #12]
     ad2:	7e33      	ldrb	r3, [r6, #24]
     ad4:	9304      	str	r3, [sp, #16]
     ad6:	2326      	movs	r3, #38	; 0x26
     ad8:	5cf3      	ldrb	r3, [r6, r3]
     ada:	9305      	str	r3, [sp, #20]
     adc:	6872      	ldr	r2, [r6, #4]
     ade:	9206      	str	r2, [sp, #24]
     ae0:	2a00      	cmp	r2, #0
     ae2:	d100      	bne.n	ae6 <usart_init+0x2e2>
     ae4:	e71f      	b.n	926 <usart_init+0x122>
     ae6:	2380      	movs	r3, #128	; 0x80
     ae8:	055b      	lsls	r3, r3, #21
     aea:	429a      	cmp	r2, r3
     aec:	d100      	bne.n	af0 <usart_init+0x2ec>
     aee:	e704      	b.n	8fa <usart_init+0xf6>
     af0:	e73e      	b.n	970 <usart_init+0x16c>
     af2:	1c18      	adds	r0, r3, #0
     af4:	b011      	add	sp, #68	; 0x44
     af6:	bc3c      	pop	{r2, r3, r4, r5}
     af8:	4690      	mov	r8, r2
     afa:	4699      	mov	r9, r3
     afc:	46a2      	mov	sl, r4
     afe:	46ab      	mov	fp, r5
     b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	00000541 	.word	0x00000541
     b08:	40000400 	.word	0x40000400
     b0c:	000017a9 	.word	0x000017a9
     b10:	0000171d 	.word	0x0000171d
     b14:	0000036d 	.word	0x0000036d
     b18:	000017c5 	.word	0x000017c5
     b1c:	0000017d 	.word	0x0000017d
     b20:	000001a5 	.word	0x000001a5
     b24:	41002000 	.word	0x41002000
     b28:	000003b9 	.word	0x000003b9
     b2c:	000018a1 	.word	0x000018a1
     b30:	00000c81 	.word	0x00000c81
     b34:	00000e25 	.word	0x00000e25
     b38:	200001b4 	.word	0x200001b4

00000b3c <usart_write_wait>:
     b3c:	b510      	push	{r4, lr}
     b3e:	6803      	ldr	r3, [r0, #0]
     b40:	79c4      	ldrb	r4, [r0, #7]
     b42:	221c      	movs	r2, #28
     b44:	2c00      	cmp	r4, #0
     b46:	d00d      	beq.n	b64 <usart_write_wait+0x28>
     b48:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     b4a:	b280      	uxth	r0, r0
     b4c:	3a17      	subs	r2, #23
     b4e:	2800      	cmp	r0, #0
     b50:	d108      	bne.n	b64 <usart_write_wait+0x28>
     b52:	69da      	ldr	r2, [r3, #28]
     b54:	2a00      	cmp	r2, #0
     b56:	d1fc      	bne.n	b52 <usart_write_wait+0x16>
     b58:	8519      	strh	r1, [r3, #40]	; 0x28
     b5a:	2102      	movs	r1, #2
     b5c:	7e1a      	ldrb	r2, [r3, #24]
     b5e:	420a      	tst	r2, r1
     b60:	d0fc      	beq.n	b5c <usart_write_wait+0x20>
     b62:	2200      	movs	r2, #0
     b64:	1c10      	adds	r0, r2, #0
     b66:	bd10      	pop	{r4, pc}

00000b68 <usart_read_wait>:
     b68:	b510      	push	{r4, lr}
     b6a:	6804      	ldr	r4, [r0, #0]
     b6c:	7982      	ldrb	r2, [r0, #6]
     b6e:	231c      	movs	r3, #28
     b70:	2a00      	cmp	r2, #0
     b72:	d033      	beq.n	bdc <usart_read_wait+0x74>
     b74:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     b76:	b292      	uxth	r2, r2
     b78:	3b17      	subs	r3, #23
     b7a:	2a00      	cmp	r2, #0
     b7c:	d12e      	bne.n	bdc <usart_read_wait+0x74>
     b7e:	7e22      	ldrb	r2, [r4, #24]
     b80:	0752      	lsls	r2, r2, #29
     b82:	d52b      	bpl.n	bdc <usart_read_wait+0x74>
     b84:	69e3      	ldr	r3, [r4, #28]
     b86:	2b00      	cmp	r3, #0
     b88:	d1fc      	bne.n	b84 <usart_read_wait+0x1c>
     b8a:	8b63      	ldrh	r3, [r4, #26]
     b8c:	b2db      	uxtb	r3, r3
     b8e:	069a      	lsls	r2, r3, #26
     b90:	d021      	beq.n	bd6 <usart_read_wait+0x6e>
     b92:	079a      	lsls	r2, r3, #30
     b94:	d503      	bpl.n	b9e <usart_read_wait+0x36>
     b96:	2302      	movs	r3, #2
     b98:	8363      	strh	r3, [r4, #26]
     b9a:	3318      	adds	r3, #24
     b9c:	e01e      	b.n	bdc <usart_read_wait+0x74>
     b9e:	075a      	lsls	r2, r3, #29
     ba0:	d503      	bpl.n	baa <usart_read_wait+0x42>
     ba2:	2304      	movs	r3, #4
     ba4:	8363      	strh	r3, [r4, #26]
     ba6:	331a      	adds	r3, #26
     ba8:	e018      	b.n	bdc <usart_read_wait+0x74>
     baa:	07da      	lsls	r2, r3, #31
     bac:	d503      	bpl.n	bb6 <usart_read_wait+0x4e>
     bae:	2301      	movs	r3, #1
     bb0:	8363      	strh	r3, [r4, #26]
     bb2:	3312      	adds	r3, #18
     bb4:	e012      	b.n	bdc <usart_read_wait+0x74>
     bb6:	06da      	lsls	r2, r3, #27
     bb8:	d505      	bpl.n	bc6 <usart_read_wait+0x5e>
     bba:	8b62      	ldrh	r2, [r4, #26]
     bbc:	2310      	movs	r3, #16
     bbe:	4313      	orrs	r3, r2
     bc0:	8363      	strh	r3, [r4, #26]
     bc2:	2342      	movs	r3, #66	; 0x42
     bc4:	e00a      	b.n	bdc <usart_read_wait+0x74>
     bc6:	069b      	lsls	r3, r3, #26
     bc8:	d505      	bpl.n	bd6 <usart_read_wait+0x6e>
     bca:	8b62      	ldrh	r2, [r4, #26]
     bcc:	2320      	movs	r3, #32
     bce:	4313      	orrs	r3, r2
     bd0:	8363      	strh	r3, [r4, #26]
     bd2:	2341      	movs	r3, #65	; 0x41
     bd4:	e002      	b.n	bdc <usart_read_wait+0x74>
     bd6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     bd8:	800b      	strh	r3, [r1, #0]
     bda:	2300      	movs	r3, #0
     bdc:	1c18      	adds	r0, r3, #0
     bde:	bd10      	pop	{r4, pc}

00000be0 <usart_read_buffer_wait>:
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	4657      	mov	r7, sl
     be4:	464e      	mov	r6, r9
     be6:	b4c0      	push	{r6, r7}
     be8:	b083      	sub	sp, #12
     bea:	2317      	movs	r3, #23
     bec:	2a00      	cmp	r2, #0
     bee:	d03c      	beq.n	c6a <usart_read_buffer_wait+0x8a>
     bf0:	7984      	ldrb	r4, [r0, #6]
     bf2:	3305      	adds	r3, #5
     bf4:	2c00      	cmp	r4, #0
     bf6:	d038      	beq.n	c6a <usart_read_buffer_wait+0x8a>
     bf8:	468a      	mov	sl, r1
     bfa:	4681      	mov	r9, r0
     bfc:	6805      	ldr	r5, [r0, #0]
     bfe:	1c17      	adds	r7, r2, #0
     c00:	2600      	movs	r6, #0
     c02:	2404      	movs	r4, #4
     c04:	e02c      	b.n	c60 <usart_read_buffer_wait+0x80>
     c06:	7e2a      	ldrb	r2, [r5, #24]
     c08:	4222      	tst	r2, r4
     c0a:	d104      	bne.n	c16 <usart_read_buffer_wait+0x36>
     c0c:	2b01      	cmp	r3, #1
     c0e:	d023      	beq.n	c58 <usart_read_buffer_wait+0x78>
     c10:	3b01      	subs	r3, #1
     c12:	2b00      	cmp	r3, #0
     c14:	d1f7      	bne.n	c06 <usart_read_buffer_wait+0x26>
     c16:	466b      	mov	r3, sp
     c18:	1d99      	adds	r1, r3, #6
     c1a:	2300      	movs	r3, #0
     c1c:	800b      	strh	r3, [r1, #0]
     c1e:	4648      	mov	r0, r9
     c20:	4b15      	ldr	r3, [pc, #84]	; (c78 <usart_read_buffer_wait+0x98>)
     c22:	4798      	blx	r3
     c24:	2800      	cmp	r0, #0
     c26:	d119      	bne.n	c5c <usart_read_buffer_wait+0x7c>
     c28:	1c73      	adds	r3, r6, #1
     c2a:	b299      	uxth	r1, r3
     c2c:	466b      	mov	r3, sp
     c2e:	3306      	adds	r3, #6
     c30:	881b      	ldrh	r3, [r3, #0]
     c32:	4652      	mov	r2, sl
     c34:	5593      	strb	r3, [r2, r6]
     c36:	464a      	mov	r2, r9
     c38:	7952      	ldrb	r2, [r2, #5]
     c3a:	2a01      	cmp	r2, #1
     c3c:	d105      	bne.n	c4a <usart_read_buffer_wait+0x6a>
     c3e:	1cb2      	adds	r2, r6, #2
     c40:	b296      	uxth	r6, r2
     c42:	0a1b      	lsrs	r3, r3, #8
     c44:	4652      	mov	r2, sl
     c46:	5453      	strb	r3, [r2, r1]
     c48:	e000      	b.n	c4c <usart_read_buffer_wait+0x6c>
     c4a:	1c0e      	adds	r6, r1, #0
     c4c:	1e7a      	subs	r2, r7, #1
     c4e:	b297      	uxth	r7, r2
     c50:	2f00      	cmp	r7, #0
     c52:	d105      	bne.n	c60 <usart_read_buffer_wait+0x80>
     c54:	2300      	movs	r3, #0
     c56:	e008      	b.n	c6a <usart_read_buffer_wait+0x8a>
     c58:	2312      	movs	r3, #18
     c5a:	e006      	b.n	c6a <usart_read_buffer_wait+0x8a>
     c5c:	1c03      	adds	r3, r0, #0
     c5e:	e004      	b.n	c6a <usart_read_buffer_wait+0x8a>
     c60:	7e2b      	ldrb	r3, [r5, #24]
     c62:	4223      	tst	r3, r4
     c64:	d1d7      	bne.n	c16 <usart_read_buffer_wait+0x36>
     c66:	4b05      	ldr	r3, [pc, #20]	; (c7c <usart_read_buffer_wait+0x9c>)
     c68:	e7cd      	b.n	c06 <usart_read_buffer_wait+0x26>
     c6a:	1c18      	adds	r0, r3, #0
     c6c:	b003      	add	sp, #12
     c6e:	bc0c      	pop	{r2, r3}
     c70:	4691      	mov	r9, r2
     c72:	469a      	mov	sl, r3
     c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	00000b69 	.word	0x00000b69
     c7c:	0000ffff 	.word	0x0000ffff

00000c80 <_usart_interrupt_handler>:
     c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c82:	0080      	lsls	r0, r0, #2
     c84:	4b65      	ldr	r3, [pc, #404]	; (e1c <_usart_interrupt_handler+0x19c>)
     c86:	58c5      	ldr	r5, [r0, r3]
     c88:	682c      	ldr	r4, [r5, #0]
     c8a:	69e3      	ldr	r3, [r4, #28]
     c8c:	2b00      	cmp	r3, #0
     c8e:	d1fc      	bne.n	c8a <_usart_interrupt_handler+0xa>
     c90:	7e23      	ldrb	r3, [r4, #24]
     c92:	7da6      	ldrb	r6, [r4, #22]
     c94:	401e      	ands	r6, r3
     c96:	2331      	movs	r3, #49	; 0x31
     c98:	5ceb      	ldrb	r3, [r5, r3]
     c9a:	2230      	movs	r2, #48	; 0x30
     c9c:	5caf      	ldrb	r7, [r5, r2]
     c9e:	401f      	ands	r7, r3
     ca0:	07f3      	lsls	r3, r6, #31
     ca2:	d522      	bpl.n	cea <_usart_interrupt_handler+0x6a>
     ca4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     ca6:	b29b      	uxth	r3, r3
     ca8:	2b00      	cmp	r3, #0
     caa:	d01c      	beq.n	ce6 <_usart_interrupt_handler+0x66>
     cac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     cae:	7813      	ldrb	r3, [r2, #0]
     cb0:	b2db      	uxtb	r3, r3
     cb2:	1c51      	adds	r1, r2, #1
     cb4:	62a9      	str	r1, [r5, #40]	; 0x28
     cb6:	7969      	ldrb	r1, [r5, #5]
     cb8:	2901      	cmp	r1, #1
     cba:	d001      	beq.n	cc0 <_usart_interrupt_handler+0x40>
     cbc:	b29b      	uxth	r3, r3
     cbe:	e004      	b.n	cca <_usart_interrupt_handler+0x4a>
     cc0:	7851      	ldrb	r1, [r2, #1]
     cc2:	0209      	lsls	r1, r1, #8
     cc4:	430b      	orrs	r3, r1
     cc6:	3202      	adds	r2, #2
     cc8:	62aa      	str	r2, [r5, #40]	; 0x28
     cca:	05db      	lsls	r3, r3, #23
     ccc:	0ddb      	lsrs	r3, r3, #23
     cce:	8523      	strh	r3, [r4, #40]	; 0x28
     cd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     cd2:	3b01      	subs	r3, #1
     cd4:	b29b      	uxth	r3, r3
     cd6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     cd8:	2b00      	cmp	r3, #0
     cda:	d106      	bne.n	cea <_usart_interrupt_handler+0x6a>
     cdc:	3301      	adds	r3, #1
     cde:	7523      	strb	r3, [r4, #20]
     ce0:	3301      	adds	r3, #1
     ce2:	75a3      	strb	r3, [r4, #22]
     ce4:	e001      	b.n	cea <_usart_interrupt_handler+0x6a>
     ce6:	2301      	movs	r3, #1
     ce8:	7523      	strb	r3, [r4, #20]
     cea:	07b3      	lsls	r3, r6, #30
     cec:	d509      	bpl.n	d02 <_usart_interrupt_handler+0x82>
     cee:	2302      	movs	r3, #2
     cf0:	7523      	strb	r3, [r4, #20]
     cf2:	2200      	movs	r2, #0
     cf4:	3331      	adds	r3, #49	; 0x31
     cf6:	54ea      	strb	r2, [r5, r3]
     cf8:	07fb      	lsls	r3, r7, #31
     cfa:	d502      	bpl.n	d02 <_usart_interrupt_handler+0x82>
     cfc:	1c28      	adds	r0, r5, #0
     cfe:	68eb      	ldr	r3, [r5, #12]
     d00:	4798      	blx	r3
     d02:	0773      	lsls	r3, r6, #29
     d04:	d56a      	bpl.n	ddc <_usart_interrupt_handler+0x15c>
     d06:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d08:	b29b      	uxth	r3, r3
     d0a:	2b00      	cmp	r3, #0
     d0c:	d064      	beq.n	dd8 <_usart_interrupt_handler+0x158>
     d0e:	8b63      	ldrh	r3, [r4, #26]
     d10:	b2db      	uxtb	r3, r3
     d12:	071a      	lsls	r2, r3, #28
     d14:	d402      	bmi.n	d1c <_usart_interrupt_handler+0x9c>
     d16:	223f      	movs	r2, #63	; 0x3f
     d18:	4013      	ands	r3, r2
     d1a:	e001      	b.n	d20 <_usart_interrupt_handler+0xa0>
     d1c:	2237      	movs	r2, #55	; 0x37
     d1e:	4013      	ands	r3, r2
     d20:	2b00      	cmp	r3, #0
     d22:	d037      	beq.n	d94 <_usart_interrupt_handler+0x114>
     d24:	079a      	lsls	r2, r3, #30
     d26:	d507      	bpl.n	d38 <_usart_interrupt_handler+0xb8>
     d28:	221a      	movs	r2, #26
     d2a:	2332      	movs	r3, #50	; 0x32
     d2c:	54ea      	strb	r2, [r5, r3]
     d2e:	8b62      	ldrh	r2, [r4, #26]
     d30:	3b30      	subs	r3, #48	; 0x30
     d32:	4313      	orrs	r3, r2
     d34:	8363      	strh	r3, [r4, #26]
     d36:	e027      	b.n	d88 <_usart_interrupt_handler+0x108>
     d38:	075a      	lsls	r2, r3, #29
     d3a:	d507      	bpl.n	d4c <_usart_interrupt_handler+0xcc>
     d3c:	221e      	movs	r2, #30
     d3e:	2332      	movs	r3, #50	; 0x32
     d40:	54ea      	strb	r2, [r5, r3]
     d42:	8b62      	ldrh	r2, [r4, #26]
     d44:	3b2e      	subs	r3, #46	; 0x2e
     d46:	4313      	orrs	r3, r2
     d48:	8363      	strh	r3, [r4, #26]
     d4a:	e01d      	b.n	d88 <_usart_interrupt_handler+0x108>
     d4c:	07da      	lsls	r2, r3, #31
     d4e:	d507      	bpl.n	d60 <_usart_interrupt_handler+0xe0>
     d50:	2213      	movs	r2, #19
     d52:	2332      	movs	r3, #50	; 0x32
     d54:	54ea      	strb	r2, [r5, r3]
     d56:	8b62      	ldrh	r2, [r4, #26]
     d58:	3b31      	subs	r3, #49	; 0x31
     d5a:	4313      	orrs	r3, r2
     d5c:	8363      	strh	r3, [r4, #26]
     d5e:	e013      	b.n	d88 <_usart_interrupt_handler+0x108>
     d60:	06da      	lsls	r2, r3, #27
     d62:	d507      	bpl.n	d74 <_usart_interrupt_handler+0xf4>
     d64:	2242      	movs	r2, #66	; 0x42
     d66:	2332      	movs	r3, #50	; 0x32
     d68:	54ea      	strb	r2, [r5, r3]
     d6a:	8b62      	ldrh	r2, [r4, #26]
     d6c:	3b22      	subs	r3, #34	; 0x22
     d6e:	4313      	orrs	r3, r2
     d70:	8363      	strh	r3, [r4, #26]
     d72:	e009      	b.n	d88 <_usart_interrupt_handler+0x108>
     d74:	2220      	movs	r2, #32
     d76:	421a      	tst	r2, r3
     d78:	d006      	beq.n	d88 <_usart_interrupt_handler+0x108>
     d7a:	3221      	adds	r2, #33	; 0x21
     d7c:	2332      	movs	r3, #50	; 0x32
     d7e:	54ea      	strb	r2, [r5, r3]
     d80:	8b62      	ldrh	r2, [r4, #26]
     d82:	3b12      	subs	r3, #18
     d84:	4313      	orrs	r3, r2
     d86:	8363      	strh	r3, [r4, #26]
     d88:	077b      	lsls	r3, r7, #29
     d8a:	d527      	bpl.n	ddc <_usart_interrupt_handler+0x15c>
     d8c:	1c28      	adds	r0, r5, #0
     d8e:	696b      	ldr	r3, [r5, #20]
     d90:	4798      	blx	r3
     d92:	e023      	b.n	ddc <_usart_interrupt_handler+0x15c>
     d94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d96:	05db      	lsls	r3, r3, #23
     d98:	0ddb      	lsrs	r3, r3, #23
     d9a:	b2da      	uxtb	r2, r3
     d9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d9e:	700a      	strb	r2, [r1, #0]
     da0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     da2:	1c51      	adds	r1, r2, #1
     da4:	6269      	str	r1, [r5, #36]	; 0x24
     da6:	7969      	ldrb	r1, [r5, #5]
     da8:	2901      	cmp	r1, #1
     daa:	d104      	bne.n	db6 <_usart_interrupt_handler+0x136>
     dac:	0a1b      	lsrs	r3, r3, #8
     dae:	7053      	strb	r3, [r2, #1]
     db0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     db2:	3301      	adds	r3, #1
     db4:	626b      	str	r3, [r5, #36]	; 0x24
     db6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     db8:	3b01      	subs	r3, #1
     dba:	b29b      	uxth	r3, r3
     dbc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     dbe:	2b00      	cmp	r3, #0
     dc0:	d10c      	bne.n	ddc <_usart_interrupt_handler+0x15c>
     dc2:	3304      	adds	r3, #4
     dc4:	7523      	strb	r3, [r4, #20]
     dc6:	2200      	movs	r2, #0
     dc8:	332e      	adds	r3, #46	; 0x2e
     dca:	54ea      	strb	r2, [r5, r3]
     dcc:	07bb      	lsls	r3, r7, #30
     dce:	d505      	bpl.n	ddc <_usart_interrupt_handler+0x15c>
     dd0:	1c28      	adds	r0, r5, #0
     dd2:	692b      	ldr	r3, [r5, #16]
     dd4:	4798      	blx	r3
     dd6:	e001      	b.n	ddc <_usart_interrupt_handler+0x15c>
     dd8:	2304      	movs	r3, #4
     dda:	7523      	strb	r3, [r4, #20]
     ddc:	06f3      	lsls	r3, r6, #27
     dde:	d507      	bpl.n	df0 <_usart_interrupt_handler+0x170>
     de0:	2310      	movs	r3, #16
     de2:	7523      	strb	r3, [r4, #20]
     de4:	7623      	strb	r3, [r4, #24]
     de6:	06fb      	lsls	r3, r7, #27
     de8:	d502      	bpl.n	df0 <_usart_interrupt_handler+0x170>
     dea:	1c28      	adds	r0, r5, #0
     dec:	69eb      	ldr	r3, [r5, #28]
     dee:	4798      	blx	r3
     df0:	06b3      	lsls	r3, r6, #26
     df2:	d507      	bpl.n	e04 <_usart_interrupt_handler+0x184>
     df4:	2320      	movs	r3, #32
     df6:	7523      	strb	r3, [r4, #20]
     df8:	7623      	strb	r3, [r4, #24]
     dfa:	073b      	lsls	r3, r7, #28
     dfc:	d502      	bpl.n	e04 <_usart_interrupt_handler+0x184>
     dfe:	1c28      	adds	r0, r5, #0
     e00:	69ab      	ldr	r3, [r5, #24]
     e02:	4798      	blx	r3
     e04:	0733      	lsls	r3, r6, #28
     e06:	d507      	bpl.n	e18 <_usart_interrupt_handler+0x198>
     e08:	2308      	movs	r3, #8
     e0a:	7523      	strb	r3, [r4, #20]
     e0c:	7623      	strb	r3, [r4, #24]
     e0e:	06bb      	lsls	r3, r7, #26
     e10:	d502      	bpl.n	e18 <_usart_interrupt_handler+0x198>
     e12:	6a2b      	ldr	r3, [r5, #32]
     e14:	1c28      	adds	r0, r5, #0
     e16:	4798      	blx	r3
     e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	200001b4 	.word	0x200001b4

00000e20 <_sercom_default_handler>:
     e20:	4770      	bx	lr
     e22:	46c0      	nop			; (mov r8, r8)

00000e24 <_sercom_set_handler>:
     e24:	b5f0      	push	{r4, r5, r6, r7, lr}
     e26:	4b0a      	ldr	r3, [pc, #40]	; (e50 <_sercom_set_handler+0x2c>)
     e28:	781b      	ldrb	r3, [r3, #0]
     e2a:	2b00      	cmp	r3, #0
     e2c:	d10c      	bne.n	e48 <_sercom_set_handler+0x24>
     e2e:	4f09      	ldr	r7, [pc, #36]	; (e54 <_sercom_set_handler+0x30>)
     e30:	4e09      	ldr	r6, [pc, #36]	; (e58 <_sercom_set_handler+0x34>)
     e32:	4d0a      	ldr	r5, [pc, #40]	; (e5c <_sercom_set_handler+0x38>)
     e34:	2400      	movs	r4, #0
     e36:	51de      	str	r6, [r3, r7]
     e38:	195a      	adds	r2, r3, r5
     e3a:	6014      	str	r4, [r2, #0]
     e3c:	3304      	adds	r3, #4
     e3e:	2b18      	cmp	r3, #24
     e40:	d1f9      	bne.n	e36 <_sercom_set_handler+0x12>
     e42:	2201      	movs	r2, #1
     e44:	4b02      	ldr	r3, [pc, #8]	; (e50 <_sercom_set_handler+0x2c>)
     e46:	701a      	strb	r2, [r3, #0]
     e48:	0080      	lsls	r0, r0, #2
     e4a:	4b02      	ldr	r3, [pc, #8]	; (e54 <_sercom_set_handler+0x30>)
     e4c:	50c1      	str	r1, [r0, r3]
     e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e50:	20000161 	.word	0x20000161
     e54:	20000164 	.word	0x20000164
     e58:	00000e21 	.word	0x00000e21
     e5c:	200001b4 	.word	0x200001b4

00000e60 <_sercom_get_interrupt_vector>:
     e60:	b510      	push	{r4, lr}
     e62:	b082      	sub	sp, #8
     e64:	1c04      	adds	r4, r0, #0
     e66:	4668      	mov	r0, sp
     e68:	4905      	ldr	r1, [pc, #20]	; (e80 <_sercom_get_interrupt_vector+0x20>)
     e6a:	2206      	movs	r2, #6
     e6c:	4b05      	ldr	r3, [pc, #20]	; (e84 <_sercom_get_interrupt_vector+0x24>)
     e6e:	4798      	blx	r3
     e70:	1c20      	adds	r0, r4, #0
     e72:	4b05      	ldr	r3, [pc, #20]	; (e88 <_sercom_get_interrupt_vector+0x28>)
     e74:	4798      	blx	r3
     e76:	466b      	mov	r3, sp
     e78:	5618      	ldrsb	r0, [r3, r0]
     e7a:	b002      	add	sp, #8
     e7c:	bd10      	pop	{r4, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	000046e0 	.word	0x000046e0
     e84:	00003771 	.word	0x00003771
     e88:	00000541 	.word	0x00000541

00000e8c <SERCOM0_Handler>:
     e8c:	b508      	push	{r3, lr}
     e8e:	4b02      	ldr	r3, [pc, #8]	; (e98 <SERCOM0_Handler+0xc>)
     e90:	681b      	ldr	r3, [r3, #0]
     e92:	2000      	movs	r0, #0
     e94:	4798      	blx	r3
     e96:	bd08      	pop	{r3, pc}
     e98:	20000164 	.word	0x20000164

00000e9c <SERCOM1_Handler>:
     e9c:	b508      	push	{r3, lr}
     e9e:	4b02      	ldr	r3, [pc, #8]	; (ea8 <SERCOM1_Handler+0xc>)
     ea0:	685b      	ldr	r3, [r3, #4]
     ea2:	2001      	movs	r0, #1
     ea4:	4798      	blx	r3
     ea6:	bd08      	pop	{r3, pc}
     ea8:	20000164 	.word	0x20000164

00000eac <SERCOM2_Handler>:
     eac:	b508      	push	{r3, lr}
     eae:	4b02      	ldr	r3, [pc, #8]	; (eb8 <SERCOM2_Handler+0xc>)
     eb0:	689b      	ldr	r3, [r3, #8]
     eb2:	2002      	movs	r0, #2
     eb4:	4798      	blx	r3
     eb6:	bd08      	pop	{r3, pc}
     eb8:	20000164 	.word	0x20000164

00000ebc <SERCOM3_Handler>:
     ebc:	b508      	push	{r3, lr}
     ebe:	4b02      	ldr	r3, [pc, #8]	; (ec8 <SERCOM3_Handler+0xc>)
     ec0:	68db      	ldr	r3, [r3, #12]
     ec2:	2003      	movs	r0, #3
     ec4:	4798      	blx	r3
     ec6:	bd08      	pop	{r3, pc}
     ec8:	20000164 	.word	0x20000164

00000ecc <SERCOM4_Handler>:
     ecc:	b508      	push	{r3, lr}
     ece:	4b02      	ldr	r3, [pc, #8]	; (ed8 <SERCOM4_Handler+0xc>)
     ed0:	691b      	ldr	r3, [r3, #16]
     ed2:	2004      	movs	r0, #4
     ed4:	4798      	blx	r3
     ed6:	bd08      	pop	{r3, pc}
     ed8:	20000164 	.word	0x20000164

00000edc <SERCOM5_Handler>:
     edc:	b508      	push	{r3, lr}
     ede:	4b02      	ldr	r3, [pc, #8]	; (ee8 <SERCOM5_Handler+0xc>)
     ee0:	695b      	ldr	r3, [r3, #20]
     ee2:	2005      	movs	r0, #5
     ee4:	4798      	blx	r3
     ee6:	bd08      	pop	{r3, pc}
     ee8:	20000164 	.word	0x20000164

00000eec <_tcc_interrupt_handler>:
     eec:	b5f0      	push	{r4, r5, r6, r7, lr}
     eee:	4647      	mov	r7, r8
     ef0:	b480      	push	{r7}
     ef2:	0080      	lsls	r0, r0, #2
     ef4:	4b0d      	ldr	r3, [pc, #52]	; (f2c <_tcc_interrupt_handler+0x40>)
     ef6:	58c7      	ldr	r7, [r0, r3]
     ef8:	683b      	ldr	r3, [r7, #0]
     efa:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     efe:	401e      	ands	r6, r3
     f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f02:	401e      	ands	r6, r3
     f04:	2400      	movs	r4, #0
     f06:	4b0a      	ldr	r3, [pc, #40]	; (f30 <_tcc_interrupt_handler+0x44>)
     f08:	4698      	mov	r8, r3
     f0a:	4643      	mov	r3, r8
     f0c:	58e5      	ldr	r5, [r4, r3]
     f0e:	422e      	tst	r6, r5
     f10:	d005      	beq.n	f1e <_tcc_interrupt_handler+0x32>
     f12:	193b      	adds	r3, r7, r4
     f14:	685b      	ldr	r3, [r3, #4]
     f16:	1c38      	adds	r0, r7, #0
     f18:	4798      	blx	r3
     f1a:	683b      	ldr	r3, [r7, #0]
     f1c:	62dd      	str	r5, [r3, #44]	; 0x2c
     f1e:	3404      	adds	r4, #4
     f20:	2c30      	cmp	r4, #48	; 0x30
     f22:	d1f2      	bne.n	f0a <_tcc_interrupt_handler+0x1e>
     f24:	bc04      	pop	{r2}
     f26:	4690      	mov	r8, r2
     f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	200001cc 	.word	0x200001cc
     f30:	000046e8 	.word	0x000046e8

00000f34 <TCC0_Handler>:
     f34:	b508      	push	{r3, lr}
     f36:	2000      	movs	r0, #0
     f38:	4b01      	ldr	r3, [pc, #4]	; (f40 <TCC0_Handler+0xc>)
     f3a:	4798      	blx	r3
     f3c:	bd08      	pop	{r3, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000eed 	.word	0x00000eed

00000f44 <TCC1_Handler>:
     f44:	b508      	push	{r3, lr}
     f46:	2001      	movs	r0, #1
     f48:	4b01      	ldr	r3, [pc, #4]	; (f50 <TCC1_Handler+0xc>)
     f4a:	4798      	blx	r3
     f4c:	bd08      	pop	{r3, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	00000eed 	.word	0x00000eed

00000f54 <TCC2_Handler>:
     f54:	b508      	push	{r3, lr}
     f56:	2002      	movs	r0, #2
     f58:	4b01      	ldr	r3, [pc, #4]	; (f60 <TCC2_Handler+0xc>)
     f5a:	4798      	blx	r3
     f5c:	bd08      	pop	{r3, pc}
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	00000eed 	.word	0x00000eed

00000f64 <cpu_irq_enter_critical>:
     f64:	4b0c      	ldr	r3, [pc, #48]	; (f98 <cpu_irq_enter_critical+0x34>)
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	2b00      	cmp	r3, #0
     f6a:	d110      	bne.n	f8e <cpu_irq_enter_critical+0x2a>
     f6c:	f3ef 8310 	mrs	r3, PRIMASK
     f70:	2b00      	cmp	r3, #0
     f72:	d109      	bne.n	f88 <cpu_irq_enter_critical+0x24>
     f74:	b672      	cpsid	i
     f76:	f3bf 8f5f 	dmb	sy
     f7a:	2200      	movs	r2, #0
     f7c:	4b07      	ldr	r3, [pc, #28]	; (f9c <cpu_irq_enter_critical+0x38>)
     f7e:	701a      	strb	r2, [r3, #0]
     f80:	3201      	adds	r2, #1
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <cpu_irq_enter_critical+0x3c>)
     f84:	701a      	strb	r2, [r3, #0]
     f86:	e002      	b.n	f8e <cpu_irq_enter_critical+0x2a>
     f88:	2200      	movs	r2, #0
     f8a:	4b05      	ldr	r3, [pc, #20]	; (fa0 <cpu_irq_enter_critical+0x3c>)
     f8c:	701a      	strb	r2, [r3, #0]
     f8e:	4a02      	ldr	r2, [pc, #8]	; (f98 <cpu_irq_enter_critical+0x34>)
     f90:	6813      	ldr	r3, [r2, #0]
     f92:	3301      	adds	r3, #1
     f94:	6013      	str	r3, [r2, #0]
     f96:	4770      	bx	lr
     f98:	2000017c 	.word	0x2000017c
     f9c:	20000008 	.word	0x20000008
     fa0:	20000180 	.word	0x20000180

00000fa4 <cpu_irq_leave_critical>:
     fa4:	4b08      	ldr	r3, [pc, #32]	; (fc8 <cpu_irq_leave_critical+0x24>)
     fa6:	681a      	ldr	r2, [r3, #0]
     fa8:	3a01      	subs	r2, #1
     faa:	601a      	str	r2, [r3, #0]
     fac:	681b      	ldr	r3, [r3, #0]
     fae:	2b00      	cmp	r3, #0
     fb0:	d109      	bne.n	fc6 <cpu_irq_leave_critical+0x22>
     fb2:	4b06      	ldr	r3, [pc, #24]	; (fcc <cpu_irq_leave_critical+0x28>)
     fb4:	781b      	ldrb	r3, [r3, #0]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d005      	beq.n	fc6 <cpu_irq_leave_critical+0x22>
     fba:	2201      	movs	r2, #1
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <cpu_irq_leave_critical+0x2c>)
     fbe:	701a      	strb	r2, [r3, #0]
     fc0:	f3bf 8f5f 	dmb	sy
     fc4:	b662      	cpsie	i
     fc6:	4770      	bx	lr
     fc8:	2000017c 	.word	0x2000017c
     fcc:	20000180 	.word	0x20000180
     fd0:	20000008 	.word	0x20000008

00000fd4 <system_board_init>:
     fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd6:	4647      	mov	r7, r8
     fd8:	b480      	push	{r7}
     fda:	b082      	sub	sp, #8
     fdc:	ac01      	add	r4, sp, #4
     fde:	2601      	movs	r6, #1
     fe0:	7066      	strb	r6, [r4, #1]
     fe2:	2700      	movs	r7, #0
     fe4:	70a7      	strb	r7, [r4, #2]
     fe6:	7026      	strb	r6, [r4, #0]
     fe8:	2013      	movs	r0, #19
     fea:	1c21      	adds	r1, r4, #0
     fec:	4d0b      	ldr	r5, [pc, #44]	; (101c <system_board_init+0x48>)
     fee:	47a8      	blx	r5
     ff0:	4b0b      	ldr	r3, [pc, #44]	; (1020 <system_board_init+0x4c>)
     ff2:	4698      	mov	r8, r3
     ff4:	2380      	movs	r3, #128	; 0x80
     ff6:	031b      	lsls	r3, r3, #12
     ff8:	4642      	mov	r2, r8
     ffa:	6193      	str	r3, [r2, #24]
     ffc:	200d      	movs	r0, #13
     ffe:	1c21      	adds	r1, r4, #0
    1000:	47a8      	blx	r5
    1002:	2380      	movs	r3, #128	; 0x80
    1004:	019b      	lsls	r3, r3, #6
    1006:	4642      	mov	r2, r8
    1008:	6153      	str	r3, [r2, #20]
    100a:	7027      	strb	r7, [r4, #0]
    100c:	7066      	strb	r6, [r4, #1]
    100e:	201c      	movs	r0, #28
    1010:	1c21      	adds	r1, r4, #0
    1012:	47a8      	blx	r5
    1014:	b002      	add	sp, #8
    1016:	bc04      	pop	{r2}
    1018:	4690      	mov	r8, r2
    101a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    101c:	00001025 	.word	0x00001025
    1020:	41004400 	.word	0x41004400

00001024 <port_pin_set_config>:
    1024:	b500      	push	{lr}
    1026:	b083      	sub	sp, #12
    1028:	ab01      	add	r3, sp, #4
    102a:	2280      	movs	r2, #128	; 0x80
    102c:	701a      	strb	r2, [r3, #0]
    102e:	780a      	ldrb	r2, [r1, #0]
    1030:	705a      	strb	r2, [r3, #1]
    1032:	784a      	ldrb	r2, [r1, #1]
    1034:	709a      	strb	r2, [r3, #2]
    1036:	788a      	ldrb	r2, [r1, #2]
    1038:	70da      	strb	r2, [r3, #3]
    103a:	1c19      	adds	r1, r3, #0
    103c:	4b01      	ldr	r3, [pc, #4]	; (1044 <port_pin_set_config+0x20>)
    103e:	4798      	blx	r3
    1040:	b003      	add	sp, #12
    1042:	bd00      	pop	{pc}
    1044:	000018a1 	.word	0x000018a1

00001048 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1048:	b508      	push	{r3, lr}
	switch (clock_source) {
    104a:	2808      	cmp	r0, #8
    104c:	d803      	bhi.n	1056 <system_clock_source_get_hz+0xe>
    104e:	0080      	lsls	r0, r0, #2
    1050:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <system_clock_source_get_hz+0x78>)
    1052:	581b      	ldr	r3, [r3, r0]
    1054:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1056:	2000      	movs	r0, #0
    1058:	e031      	b.n	10be <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    105a:	4b1a      	ldr	r3, [pc, #104]	; (10c4 <system_clock_source_get_hz+0x7c>)
    105c:	6918      	ldr	r0, [r3, #16]
    105e:	e02e      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1060:	4b19      	ldr	r3, [pc, #100]	; (10c8 <system_clock_source_get_hz+0x80>)
    1062:	6a18      	ldr	r0, [r3, #32]
    1064:	0580      	lsls	r0, r0, #22
    1066:	0f80      	lsrs	r0, r0, #30
    1068:	4b18      	ldr	r3, [pc, #96]	; (10cc <system_clock_source_get_hz+0x84>)
    106a:	40c3      	lsrs	r3, r0
    106c:	1c18      	adds	r0, r3, #0
    106e:	e026      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1070:	4b14      	ldr	r3, [pc, #80]	; (10c4 <system_clock_source_get_hz+0x7c>)
    1072:	6958      	ldr	r0, [r3, #20]
    1074:	e023      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1076:	4b13      	ldr	r3, [pc, #76]	; (10c4 <system_clock_source_get_hz+0x7c>)
    1078:	681b      	ldr	r3, [r3, #0]
    107a:	2002      	movs	r0, #2
    107c:	4018      	ands	r0, r3
    107e:	d01e      	beq.n	10be <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1080:	4911      	ldr	r1, [pc, #68]	; (10c8 <system_clock_source_get_hz+0x80>)
    1082:	2210      	movs	r2, #16
    1084:	68cb      	ldr	r3, [r1, #12]
    1086:	421a      	tst	r2, r3
    1088:	d0fc      	beq.n	1084 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    108a:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <system_clock_source_get_hz+0x7c>)
    108c:	681b      	ldr	r3, [r3, #0]
    108e:	075b      	lsls	r3, r3, #29
    1090:	d514      	bpl.n	10bc <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1092:	2000      	movs	r0, #0
    1094:	4b0e      	ldr	r3, [pc, #56]	; (10d0 <system_clock_source_get_hz+0x88>)
    1096:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1098:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <system_clock_source_get_hz+0x7c>)
    109a:	689b      	ldr	r3, [r3, #8]
    109c:	041b      	lsls	r3, r3, #16
    109e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10a0:	4358      	muls	r0, r3
    10a2:	e00c      	b.n	10be <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10a4:	2350      	movs	r3, #80	; 0x50
    10a6:	4a08      	ldr	r2, [pc, #32]	; (10c8 <system_clock_source_get_hz+0x80>)
    10a8:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    10aa:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    10ac:	075b      	lsls	r3, r3, #29
    10ae:	d506      	bpl.n	10be <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    10b0:	4b04      	ldr	r3, [pc, #16]	; (10c4 <system_clock_source_get_hz+0x7c>)
    10b2:	68d8      	ldr	r0, [r3, #12]
    10b4:	e003      	b.n	10be <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    10b6:	2080      	movs	r0, #128	; 0x80
    10b8:	0200      	lsls	r0, r0, #8
    10ba:	e000      	b.n	10be <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    10bc:	4805      	ldr	r0, [pc, #20]	; (10d4 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    10be:	bd08      	pop	{r3, pc}
    10c0:	00004718 	.word	0x00004718
    10c4:	20000184 	.word	0x20000184
    10c8:	40000800 	.word	0x40000800
    10cc:	007a1200 	.word	0x007a1200
    10d0:	000017c5 	.word	0x000017c5
    10d4:	02dc6c00 	.word	0x02dc6c00

000010d8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    10da:	4c0c      	ldr	r4, [pc, #48]	; (110c <system_clock_source_osc8m_set_config+0x34>)
    10dc:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    10de:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10e0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    10e2:	7842      	ldrb	r2, [r0, #1]
    10e4:	2001      	movs	r0, #1
    10e6:	4002      	ands	r2, r0
    10e8:	0192      	lsls	r2, r2, #6
    10ea:	2640      	movs	r6, #64	; 0x40
    10ec:	43b3      	bics	r3, r6
    10ee:	4313      	orrs	r3, r2
    10f0:	1c02      	adds	r2, r0, #0
    10f2:	402a      	ands	r2, r5
    10f4:	01d2      	lsls	r2, r2, #7
    10f6:	307f      	adds	r0, #127	; 0x7f
    10f8:	4383      	bics	r3, r0
    10fa:	4313      	orrs	r3, r2
    10fc:	2203      	movs	r2, #3
    10fe:	400a      	ands	r2, r1
    1100:	0212      	lsls	r2, r2, #8
    1102:	4903      	ldr	r1, [pc, #12]	; (1110 <system_clock_source_osc8m_set_config+0x38>)
    1104:	400b      	ands	r3, r1
    1106:	4313      	orrs	r3, r2
    1108:	6223      	str	r3, [r4, #32]
}
    110a:	bd70      	pop	{r4, r5, r6, pc}
    110c:	40000800 	.word	0x40000800
    1110:	fffffcff 	.word	0xfffffcff

00001114 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    1114:	b5f0      	push	{r4, r5, r6, r7, lr}
    1116:	4657      	mov	r7, sl
    1118:	464e      	mov	r6, r9
    111a:	4645      	mov	r5, r8
    111c:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    111e:	4e1c      	ldr	r6, [pc, #112]	; (1190 <system_clock_source_osc32k_set_config+0x7c>)
    1120:	69b3      	ldr	r3, [r6, #24]
    1122:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    1124:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    1126:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1128:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    112a:	78c3      	ldrb	r3, [r0, #3]
    112c:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    112e:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    1130:	7883      	ldrb	r3, [r0, #2]
    1132:	2001      	movs	r0, #1
    1134:	4003      	ands	r3, r0
    1136:	009b      	lsls	r3, r3, #2
    1138:	469a      	mov	sl, r3
    113a:	2204      	movs	r2, #4
    113c:	4690      	mov	r8, r2
    113e:	4662      	mov	r2, ip
    1140:	4643      	mov	r3, r8
    1142:	439a      	bics	r2, r3
    1144:	1c13      	adds	r3, r2, #0
    1146:	4652      	mov	r2, sl
    1148:	431a      	orrs	r2, r3
    114a:	1c13      	adds	r3, r2, #0
    114c:	4001      	ands	r1, r0
    114e:	00c9      	lsls	r1, r1, #3
    1150:	2208      	movs	r2, #8
    1152:	4393      	bics	r3, r2
    1154:	430b      	orrs	r3, r1
    1156:	464a      	mov	r2, r9
    1158:	4002      	ands	r2, r0
    115a:	0192      	lsls	r2, r2, #6
    115c:	2140      	movs	r1, #64	; 0x40
    115e:	438b      	bics	r3, r1
    1160:	4313      	orrs	r3, r2
    1162:	4007      	ands	r7, r0
    1164:	01ff      	lsls	r7, r7, #7
    1166:	2280      	movs	r2, #128	; 0x80
    1168:	4393      	bics	r3, r2
    116a:	433b      	orrs	r3, r7
    116c:	3a79      	subs	r2, #121	; 0x79
    116e:	4015      	ands	r5, r2
    1170:	022d      	lsls	r5, r5, #8
    1172:	4f08      	ldr	r7, [pc, #32]	; (1194 <system_clock_source_osc32k_set_config+0x80>)
    1174:	403b      	ands	r3, r7
    1176:	432b      	orrs	r3, r5
    1178:	4004      	ands	r4, r0
    117a:	0320      	lsls	r0, r4, #12
    117c:	4c06      	ldr	r4, [pc, #24]	; (1198 <system_clock_source_osc32k_set_config+0x84>)
    117e:	401c      	ands	r4, r3
    1180:	4304      	orrs	r4, r0
    1182:	61b4      	str	r4, [r6, #24]
}
    1184:	bc1c      	pop	{r2, r3, r4}
    1186:	4690      	mov	r8, r2
    1188:	4699      	mov	r9, r3
    118a:	46a2      	mov	sl, r4
    118c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	40000800 	.word	0x40000800
    1194:	fffff8ff 	.word	0xfffff8ff
    1198:	ffffefff 	.word	0xffffefff

0000119c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    119c:	b5f0      	push	{r4, r5, r6, r7, lr}
    119e:	465f      	mov	r7, fp
    11a0:	4656      	mov	r6, sl
    11a2:	464d      	mov	r5, r9
    11a4:	4644      	mov	r4, r8
    11a6:	b4f0      	push	{r4, r5, r6, r7}
    11a8:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    11aa:	4e2e      	ldr	r6, [pc, #184]	; (1264 <system_clock_source_xosc32k_set_config+0xc8>)
    11ac:	8ab3      	ldrh	r3, [r6, #20]
    11ae:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    11b0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    11b2:	7803      	ldrb	r3, [r0, #0]
    11b4:	425a      	negs	r2, r3
    11b6:	415a      	adcs	r2, r3
    11b8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    11ba:	7883      	ldrb	r3, [r0, #2]
    11bc:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    11be:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    11c0:	7902      	ldrb	r2, [r0, #4]
    11c2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    11c4:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    11c6:	7b02      	ldrb	r2, [r0, #12]
    11c8:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    11ca:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    11cc:	6882      	ldr	r2, [r0, #8]
    11ce:	4826      	ldr	r0, [pc, #152]	; (1268 <system_clock_source_xosc32k_set_config+0xcc>)
    11d0:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    11d2:	2001      	movs	r0, #1
    11d4:	464a      	mov	r2, r9
    11d6:	0092      	lsls	r2, r2, #2
    11d8:	4691      	mov	r9, r2
    11da:	2204      	movs	r2, #4
    11dc:	4692      	mov	sl, r2
    11de:	4662      	mov	r2, ip
    11e0:	4651      	mov	r1, sl
    11e2:	438a      	bics	r2, r1
    11e4:	4694      	mov	ip, r2
    11e6:	464a      	mov	r2, r9
    11e8:	4661      	mov	r1, ip
    11ea:	430a      	orrs	r2, r1
    11ec:	4694      	mov	ip, r2
    11ee:	4642      	mov	r2, r8
    11f0:	4002      	ands	r2, r0
    11f2:	00d2      	lsls	r2, r2, #3
    11f4:	4690      	mov	r8, r2
    11f6:	2208      	movs	r2, #8
    11f8:	4691      	mov	r9, r2
    11fa:	4662      	mov	r2, ip
    11fc:	4649      	mov	r1, r9
    11fe:	438a      	bics	r2, r1
    1200:	4694      	mov	ip, r2
    1202:	4642      	mov	r2, r8
    1204:	4661      	mov	r1, ip
    1206:	430a      	orrs	r2, r1
    1208:	4694      	mov	ip, r2
    120a:	4003      	ands	r3, r0
    120c:	011b      	lsls	r3, r3, #4
    120e:	2210      	movs	r2, #16
    1210:	4690      	mov	r8, r2
    1212:	4662      	mov	r2, ip
    1214:	4641      	mov	r1, r8
    1216:	438a      	bics	r2, r1
    1218:	4313      	orrs	r3, r2
    121a:	4659      	mov	r1, fp
    121c:	4001      	ands	r1, r0
    121e:	0149      	lsls	r1, r1, #5
    1220:	2220      	movs	r2, #32
    1222:	4393      	bics	r3, r2
    1224:	430b      	orrs	r3, r1
    1226:	9a01      	ldr	r2, [sp, #4]
    1228:	4002      	ands	r2, r0
    122a:	0192      	lsls	r2, r2, #6
    122c:	2140      	movs	r1, #64	; 0x40
    122e:	438b      	bics	r3, r1
    1230:	4313      	orrs	r3, r2
    1232:	4007      	ands	r7, r0
    1234:	01ff      	lsls	r7, r7, #7
    1236:	2280      	movs	r2, #128	; 0x80
    1238:	4393      	bics	r3, r2
    123a:	433b      	orrs	r3, r7
    123c:	3a79      	subs	r2, #121	; 0x79
    123e:	4015      	ands	r5, r2
    1240:	022d      	lsls	r5, r5, #8
    1242:	4f0a      	ldr	r7, [pc, #40]	; (126c <system_clock_source_xosc32k_set_config+0xd0>)
    1244:	403b      	ands	r3, r7
    1246:	432b      	orrs	r3, r5
    1248:	4004      	ands	r4, r0
    124a:	0320      	lsls	r0, r4, #12
    124c:	4c08      	ldr	r4, [pc, #32]	; (1270 <system_clock_source_xosc32k_set_config+0xd4>)
    124e:	401c      	ands	r4, r3
    1250:	4304      	orrs	r4, r0
    1252:	82b4      	strh	r4, [r6, #20]
}
    1254:	b003      	add	sp, #12
    1256:	bc3c      	pop	{r2, r3, r4, r5}
    1258:	4690      	mov	r8, r2
    125a:	4699      	mov	r9, r3
    125c:	46a2      	mov	sl, r4
    125e:	46ab      	mov	fp, r5
    1260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	40000800 	.word	0x40000800
    1268:	20000184 	.word	0x20000184
    126c:	fffff8ff 	.word	0xfffff8ff
    1270:	ffffefff 	.word	0xffffefff

00001274 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1274:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1276:	7a03      	ldrb	r3, [r0, #8]
    1278:	069b      	lsls	r3, r3, #26
    127a:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    127c:	8943      	ldrh	r3, [r0, #10]
    127e:	059b      	lsls	r3, r3, #22
    1280:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1282:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    1284:	4c19      	ldr	r4, [pc, #100]	; (12ec <system_clock_source_dfll_set_config+0x78>)
    1286:	6063      	str	r3, [r4, #4]
    1288:	8881      	ldrh	r1, [r0, #4]
    128a:	8843      	ldrh	r3, [r0, #2]
    128c:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    128e:	79c3      	ldrb	r3, [r0, #7]
    1290:	7982      	ldrb	r2, [r0, #6]
    1292:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1294:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1296:	7842      	ldrb	r2, [r0, #1]
    1298:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    129a:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    129c:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    129e:	7803      	ldrb	r3, [r0, #0]
    12a0:	2b04      	cmp	r3, #4
    12a2:	d10f      	bne.n	12c4 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12a4:	7b03      	ldrb	r3, [r0, #12]
    12a6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12a8:	8a02      	ldrh	r2, [r0, #16]
    12aa:	4313      	orrs	r3, r2
    12ac:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12ae:	89c3      	ldrh	r3, [r0, #14]
    12b0:	041b      	lsls	r3, r3, #16
    12b2:	4a0f      	ldr	r2, [pc, #60]	; (12f0 <system_clock_source_dfll_set_config+0x7c>)
    12b4:	4013      	ands	r3, r2
    12b6:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    12b8:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    12ba:	6821      	ldr	r1, [r4, #0]
    12bc:	2304      	movs	r3, #4
    12be:	430b      	orrs	r3, r1
    12c0:	6023      	str	r3, [r4, #0]
    12c2:	e011      	b.n	12e8 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12c4:	2b20      	cmp	r3, #32
    12c6:	d10f      	bne.n	12e8 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12c8:	7b03      	ldrb	r3, [r0, #12]
    12ca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12cc:	8a02      	ldrh	r2, [r0, #16]
    12ce:	4313      	orrs	r3, r2
    12d0:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12d2:	89c3      	ldrh	r3, [r0, #14]
    12d4:	041b      	lsls	r3, r3, #16
    12d6:	4a06      	ldr	r2, [pc, #24]	; (12f0 <system_clock_source_dfll_set_config+0x7c>)
    12d8:	4013      	ands	r3, r2
    12da:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    12dc:	4a03      	ldr	r2, [pc, #12]	; (12ec <system_clock_source_dfll_set_config+0x78>)
    12de:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    12e0:	6813      	ldr	r3, [r2, #0]
    12e2:	4904      	ldr	r1, [pc, #16]	; (12f4 <system_clock_source_dfll_set_config+0x80>)
    12e4:	430b      	orrs	r3, r1
    12e6:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    12e8:	bd10      	pop	{r4, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	20000184 	.word	0x20000184
    12f0:	03ff0000 	.word	0x03ff0000
    12f4:	00000424 	.word	0x00000424

000012f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    12f8:	2808      	cmp	r0, #8
    12fa:	d803      	bhi.n	1304 <system_clock_source_enable+0xc>
    12fc:	0080      	lsls	r0, r0, #2
    12fe:	4b25      	ldr	r3, [pc, #148]	; (1394 <system_clock_source_enable+0x9c>)
    1300:	581b      	ldr	r3, [r3, r0]
    1302:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1304:	2017      	movs	r0, #23
    1306:	e044      	b.n	1392 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1308:	4a23      	ldr	r2, [pc, #140]	; (1398 <system_clock_source_enable+0xa0>)
    130a:	6a11      	ldr	r1, [r2, #32]
    130c:	2302      	movs	r3, #2
    130e:	430b      	orrs	r3, r1
    1310:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1312:	2000      	movs	r0, #0
    1314:	e03d      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1316:	4a20      	ldr	r2, [pc, #128]	; (1398 <system_clock_source_enable+0xa0>)
    1318:	6991      	ldr	r1, [r2, #24]
    131a:	2302      	movs	r3, #2
    131c:	430b      	orrs	r3, r1
    131e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1320:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1322:	e036      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1324:	4a1c      	ldr	r2, [pc, #112]	; (1398 <system_clock_source_enable+0xa0>)
    1326:	8a11      	ldrh	r1, [r2, #16]
    1328:	2302      	movs	r3, #2
    132a:	430b      	orrs	r3, r1
    132c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    132e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1330:	e02f      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1332:	4a19      	ldr	r2, [pc, #100]	; (1398 <system_clock_source_enable+0xa0>)
    1334:	8a91      	ldrh	r1, [r2, #20]
    1336:	2302      	movs	r3, #2
    1338:	430b      	orrs	r3, r1
    133a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    133c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    133e:	e028      	b.n	1392 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1340:	4916      	ldr	r1, [pc, #88]	; (139c <system_clock_source_enable+0xa4>)
    1342:	680b      	ldr	r3, [r1, #0]
    1344:	2202      	movs	r2, #2
    1346:	4313      	orrs	r3, r2
    1348:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    134a:	4b13      	ldr	r3, [pc, #76]	; (1398 <system_clock_source_enable+0xa0>)
    134c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    134e:	1c19      	adds	r1, r3, #0
    1350:	320e      	adds	r2, #14
    1352:	68cb      	ldr	r3, [r1, #12]
    1354:	421a      	tst	r2, r3
    1356:	d0fc      	beq.n	1352 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1358:	4a10      	ldr	r2, [pc, #64]	; (139c <system_clock_source_enable+0xa4>)
    135a:	6891      	ldr	r1, [r2, #8]
    135c:	4b0e      	ldr	r3, [pc, #56]	; (1398 <system_clock_source_enable+0xa0>)
    135e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1360:	6852      	ldr	r2, [r2, #4]
    1362:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1364:	2200      	movs	r2, #0
    1366:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1368:	1c19      	adds	r1, r3, #0
    136a:	3210      	adds	r2, #16
    136c:	68cb      	ldr	r3, [r1, #12]
    136e:	421a      	tst	r2, r3
    1370:	d0fc      	beq.n	136c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1372:	4b0a      	ldr	r3, [pc, #40]	; (139c <system_clock_source_enable+0xa4>)
    1374:	681b      	ldr	r3, [r3, #0]
    1376:	b29b      	uxth	r3, r3
    1378:	4a07      	ldr	r2, [pc, #28]	; (1398 <system_clock_source_enable+0xa0>)
    137a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    137c:	2000      	movs	r0, #0
    137e:	e008      	b.n	1392 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1380:	4905      	ldr	r1, [pc, #20]	; (1398 <system_clock_source_enable+0xa0>)
    1382:	2244      	movs	r2, #68	; 0x44
    1384:	5c88      	ldrb	r0, [r1, r2]
    1386:	2302      	movs	r3, #2
    1388:	4303      	orrs	r3, r0
    138a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    138c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    138e:	e000      	b.n	1392 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1390:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1392:	4770      	bx	lr
    1394:	0000473c 	.word	0x0000473c
    1398:	40000800 	.word	0x40000800
    139c:	20000184 	.word	0x20000184

000013a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13a2:	464f      	mov	r7, r9
    13a4:	4646      	mov	r6, r8
    13a6:	b4c0      	push	{r6, r7}
    13a8:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13aa:	22c2      	movs	r2, #194	; 0xc2
    13ac:	00d2      	lsls	r2, r2, #3
    13ae:	4b61      	ldr	r3, [pc, #388]	; (1534 <system_clock_init+0x194>)
    13b0:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13b2:	4961      	ldr	r1, [pc, #388]	; (1538 <system_clock_init+0x198>)
    13b4:	684b      	ldr	r3, [r1, #4]
    13b6:	221e      	movs	r2, #30
    13b8:	4393      	bics	r3, r2
    13ba:	3a1a      	subs	r2, #26
    13bc:	4313      	orrs	r3, r2
    13be:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    13c0:	ab01      	add	r3, sp, #4
    13c2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13c4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13c6:	4d5d      	ldr	r5, [pc, #372]	; (153c <system_clock_init+0x19c>)
    13c8:	b2e0      	uxtb	r0, r4
    13ca:	a901      	add	r1, sp, #4
    13cc:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13ce:	3401      	adds	r4, #1
    13d0:	2c25      	cmp	r4, #37	; 0x25
    13d2:	d1f9      	bne.n	13c8 <system_clock_init+0x28>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    13d4:	a80c      	add	r0, sp, #48	; 0x30
    13d6:	2300      	movs	r3, #0
    13d8:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    13da:	2280      	movs	r2, #128	; 0x80
    13dc:	0212      	lsls	r2, r2, #8
    13de:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    13e0:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    13e2:	2201      	movs	r2, #1
    13e4:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    13e6:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    13e8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    13ea:	2106      	movs	r1, #6
    13ec:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    13ee:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    13f0:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    13f2:	4b53      	ldr	r3, [pc, #332]	; (1540 <system_clock_init+0x1a0>)
    13f4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    13f6:	2005      	movs	r0, #5
    13f8:	4b52      	ldr	r3, [pc, #328]	; (1544 <system_clock_init+0x1a4>)
    13fa:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    13fc:	494d      	ldr	r1, [pc, #308]	; (1534 <system_clock_init+0x194>)
    13fe:	2202      	movs	r2, #2
    1400:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1402:	421a      	tst	r2, r3
    1404:	d0fc      	beq.n	1400 <system_clock_init+0x60>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1406:	494b      	ldr	r1, [pc, #300]	; (1534 <system_clock_init+0x194>)
    1408:	8a8a      	ldrh	r2, [r1, #20]
    140a:	2380      	movs	r3, #128	; 0x80
    140c:	4313      	orrs	r3, r2
    140e:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    1410:	4d4d      	ldr	r5, [pc, #308]	; (1548 <system_clock_init+0x1a8>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    1412:	682b      	ldr	r3, [r5, #0]
    1414:	04db      	lsls	r3, r3, #19
    1416:	0e5b      	lsrs	r3, r3, #25
    1418:	041a      	lsls	r2, r3, #16
    141a:	6988      	ldr	r0, [r1, #24]
    141c:	4b4b      	ldr	r3, [pc, #300]	; (154c <system_clock_init+0x1ac>)
    141e:	4003      	ands	r3, r0
    1420:	4313      	orrs	r3, r2
    1422:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    1424:	a80a      	add	r0, sp, #40	; 0x28
    1426:	2301      	movs	r3, #1
    1428:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    142a:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    142c:	2400      	movs	r4, #0
    142e:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    1430:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    1432:	3306      	adds	r3, #6
    1434:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    1436:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    1438:	4b45      	ldr	r3, [pc, #276]	; (1550 <system_clock_init+0x1b0>)
    143a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    143c:	2004      	movs	r0, #4
    143e:	4b41      	ldr	r3, [pc, #260]	; (1544 <system_clock_init+0x1a4>)
    1440:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1442:	ab05      	add	r3, sp, #20
    1444:	2200      	movs	r2, #0
    1446:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1448:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    144a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    144c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    144e:	213f      	movs	r1, #63	; 0x3f
    1450:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1452:	393b      	subs	r1, #59	; 0x3b
    1454:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1456:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1458:	682b      	ldr	r3, [r5, #0]
    145a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    145c:	2b3f      	cmp	r3, #63	; 0x3f
    145e:	d100      	bne.n	1462 <system_clock_init+0xc2>
		coarse = 0x1f;
    1460:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    1462:	a805      	add	r0, sp, #20
    1464:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1466:	23b7      	movs	r3, #183	; 0xb7
    1468:	00db      	lsls	r3, r3, #3
    146a:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    146c:	2307      	movs	r3, #7
    146e:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1470:	3338      	adds	r3, #56	; 0x38
    1472:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1474:	4b37      	ldr	r3, [pc, #220]	; (1554 <system_clock_init+0x1b4>)
    1476:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1478:	a804      	add	r0, sp, #16
    147a:	2500      	movs	r5, #0
    147c:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    147e:	2601      	movs	r6, #1
    1480:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1482:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1484:	4b34      	ldr	r3, [pc, #208]	; (1558 <system_clock_init+0x1b8>)
    1486:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1488:	2006      	movs	r0, #6
    148a:	4b2e      	ldr	r3, [pc, #184]	; (1544 <system_clock_init+0x1a4>)
    148c:	4699      	mov	r9, r3
    148e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1490:	4b32      	ldr	r3, [pc, #200]	; (155c <system_clock_init+0x1bc>)
    1492:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1494:	ac01      	add	r4, sp, #4
    1496:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1498:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    149a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    149c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    149e:	2305      	movs	r3, #5
    14a0:	7023      	strb	r3, [r4, #0]
    14a2:	2001      	movs	r0, #1
    14a4:	1c21      	adds	r1, r4, #0
    14a6:	4b2e      	ldr	r3, [pc, #184]	; (1560 <system_clock_init+0x1c0>)
    14a8:	4698      	mov	r8, r3
    14aa:	4798      	blx	r3
    14ac:	2001      	movs	r0, #1
    14ae:	4f2d      	ldr	r7, [pc, #180]	; (1564 <system_clock_init+0x1c4>)
    14b0:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    14b2:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    14b4:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14b6:	7265      	strb	r5, [r4, #9]
    14b8:	2304      	movs	r3, #4
    14ba:	7023      	strb	r3, [r4, #0]
    14bc:	331c      	adds	r3, #28
    14be:	6063      	str	r3, [r4, #4]
    14c0:	2002      	movs	r0, #2
    14c2:	1c21      	adds	r1, r4, #0
    14c4:	47c0      	blx	r8
    14c6:	2002      	movs	r0, #2
    14c8:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    14ca:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    14cc:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14ce:	2306      	movs	r3, #6
    14d0:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    14d2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    14d4:	7265      	strb	r5, [r4, #9]
    14d6:	2003      	movs	r0, #3
    14d8:	1c21      	adds	r1, r4, #0
    14da:	47c0      	blx	r8
    14dc:	2003      	movs	r0, #3
    14de:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    14e0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    14e2:	2000      	movs	r0, #0
    14e4:	1c21      	adds	r1, r4, #0
    14e6:	4b15      	ldr	r3, [pc, #84]	; (153c <system_clock_init+0x19c>)
    14e8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    14ea:	2000      	movs	r0, #0
    14ec:	4b1e      	ldr	r3, [pc, #120]	; (1568 <system_clock_init+0x1c8>)
    14ee:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    14f0:	2007      	movs	r0, #7
    14f2:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    14f4:	490f      	ldr	r1, [pc, #60]	; (1534 <system_clock_init+0x194>)
    14f6:	22d0      	movs	r2, #208	; 0xd0
    14f8:	68cb      	ldr	r3, [r1, #12]
    14fa:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    14fc:	2bd0      	cmp	r3, #208	; 0xd0
    14fe:	d1fb      	bne.n	14f8 <system_clock_init+0x158>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1500:	4a1a      	ldr	r2, [pc, #104]	; (156c <system_clock_init+0x1cc>)
    1502:	2300      	movs	r3, #0
    1504:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1506:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1508:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    150a:	72d3      	strb	r3, [r2, #11]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    150c:	a901      	add	r1, sp, #4
    150e:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1510:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1512:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1514:	3307      	adds	r3, #7
    1516:	700b      	strb	r3, [r1, #0]
    1518:	3b04      	subs	r3, #4
    151a:	604b      	str	r3, [r1, #4]
    151c:	2000      	movs	r0, #0
    151e:	4b10      	ldr	r3, [pc, #64]	; (1560 <system_clock_init+0x1c0>)
    1520:	4798      	blx	r3
    1522:	2000      	movs	r0, #0
    1524:	4b0f      	ldr	r3, [pc, #60]	; (1564 <system_clock_init+0x1c4>)
    1526:	4798      	blx	r3
#endif
}
    1528:	b011      	add	sp, #68	; 0x44
    152a:	bc0c      	pop	{r2, r3}
    152c:	4690      	mov	r8, r2
    152e:	4699      	mov	r9, r3
    1530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	40000800 	.word	0x40000800
    1538:	41004000 	.word	0x41004000
    153c:	000017a9 	.word	0x000017a9
    1540:	0000119d 	.word	0x0000119d
    1544:	000012f9 	.word	0x000012f9
    1548:	00806024 	.word	0x00806024
    154c:	ff80ffff 	.word	0xff80ffff
    1550:	00001115 	.word	0x00001115
    1554:	00001275 	.word	0x00001275
    1558:	000010d9 	.word	0x000010d9
    155c:	00001571 	.word	0x00001571
    1560:	00001595 	.word	0x00001595
    1564:	0000164d 	.word	0x0000164d
    1568:	0000171d 	.word	0x0000171d
    156c:	40000400 	.word	0x40000400

00001570 <system_gclk_init>:
    1570:	4a06      	ldr	r2, [pc, #24]	; (158c <system_gclk_init+0x1c>)
    1572:	6991      	ldr	r1, [r2, #24]
    1574:	2308      	movs	r3, #8
    1576:	430b      	orrs	r3, r1
    1578:	6193      	str	r3, [r2, #24]
    157a:	2201      	movs	r2, #1
    157c:	4b04      	ldr	r3, [pc, #16]	; (1590 <system_gclk_init+0x20>)
    157e:	701a      	strb	r2, [r3, #0]
    1580:	1c19      	adds	r1, r3, #0
    1582:	780b      	ldrb	r3, [r1, #0]
    1584:	4213      	tst	r3, r2
    1586:	d1fc      	bne.n	1582 <system_gclk_init+0x12>
    1588:	4770      	bx	lr
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	40000400 	.word	0x40000400
    1590:	40000c00 	.word	0x40000c00

00001594 <system_gclk_gen_set_config>:
    1594:	b570      	push	{r4, r5, r6, lr}
    1596:	1c06      	adds	r6, r0, #0
    1598:	1c04      	adds	r4, r0, #0
    159a:	780d      	ldrb	r5, [r1, #0]
    159c:	022d      	lsls	r5, r5, #8
    159e:	4305      	orrs	r5, r0
    15a0:	784b      	ldrb	r3, [r1, #1]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d002      	beq.n	15ac <system_gclk_gen_set_config+0x18>
    15a6:	2380      	movs	r3, #128	; 0x80
    15a8:	02db      	lsls	r3, r3, #11
    15aa:	431d      	orrs	r5, r3
    15ac:	7a4b      	ldrb	r3, [r1, #9]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d002      	beq.n	15b8 <system_gclk_gen_set_config+0x24>
    15b2:	2380      	movs	r3, #128	; 0x80
    15b4:	031b      	lsls	r3, r3, #12
    15b6:	431d      	orrs	r5, r3
    15b8:	6848      	ldr	r0, [r1, #4]
    15ba:	2801      	cmp	r0, #1
    15bc:	d918      	bls.n	15f0 <system_gclk_gen_set_config+0x5c>
    15be:	1e43      	subs	r3, r0, #1
    15c0:	4218      	tst	r0, r3
    15c2:	d110      	bne.n	15e6 <system_gclk_gen_set_config+0x52>
    15c4:	2802      	cmp	r0, #2
    15c6:	d906      	bls.n	15d6 <system_gclk_gen_set_config+0x42>
    15c8:	2302      	movs	r3, #2
    15ca:	2200      	movs	r2, #0
    15cc:	3201      	adds	r2, #1
    15ce:	005b      	lsls	r3, r3, #1
    15d0:	4298      	cmp	r0, r3
    15d2:	d8fb      	bhi.n	15cc <system_gclk_gen_set_config+0x38>
    15d4:	e000      	b.n	15d8 <system_gclk_gen_set_config+0x44>
    15d6:	2200      	movs	r2, #0
    15d8:	0212      	lsls	r2, r2, #8
    15da:	4332      	orrs	r2, r6
    15dc:	1c14      	adds	r4, r2, #0
    15de:	2380      	movs	r3, #128	; 0x80
    15e0:	035b      	lsls	r3, r3, #13
    15e2:	431d      	orrs	r5, r3
    15e4:	e004      	b.n	15f0 <system_gclk_gen_set_config+0x5c>
    15e6:	0204      	lsls	r4, r0, #8
    15e8:	4334      	orrs	r4, r6
    15ea:	2380      	movs	r3, #128	; 0x80
    15ec:	029b      	lsls	r3, r3, #10
    15ee:	431d      	orrs	r5, r3
    15f0:	7a0b      	ldrb	r3, [r1, #8]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d002      	beq.n	15fc <system_gclk_gen_set_config+0x68>
    15f6:	2380      	movs	r3, #128	; 0x80
    15f8:	039b      	lsls	r3, r3, #14
    15fa:	431d      	orrs	r5, r3
    15fc:	4a0f      	ldr	r2, [pc, #60]	; (163c <system_gclk_gen_set_config+0xa8>)
    15fe:	7853      	ldrb	r3, [r2, #1]
    1600:	b25b      	sxtb	r3, r3
    1602:	2b00      	cmp	r3, #0
    1604:	dbfb      	blt.n	15fe <system_gclk_gen_set_config+0x6a>
    1606:	4b0e      	ldr	r3, [pc, #56]	; (1640 <system_gclk_gen_set_config+0xac>)
    1608:	4798      	blx	r3
    160a:	4b0e      	ldr	r3, [pc, #56]	; (1644 <system_gclk_gen_set_config+0xb0>)
    160c:	701e      	strb	r6, [r3, #0]
    160e:	4a0b      	ldr	r2, [pc, #44]	; (163c <system_gclk_gen_set_config+0xa8>)
    1610:	7853      	ldrb	r3, [r2, #1]
    1612:	b25b      	sxtb	r3, r3
    1614:	2b00      	cmp	r3, #0
    1616:	dbfb      	blt.n	1610 <system_gclk_gen_set_config+0x7c>
    1618:	4b08      	ldr	r3, [pc, #32]	; (163c <system_gclk_gen_set_config+0xa8>)
    161a:	609c      	str	r4, [r3, #8]
    161c:	1c1a      	adds	r2, r3, #0
    161e:	7853      	ldrb	r3, [r2, #1]
    1620:	b25b      	sxtb	r3, r3
    1622:	2b00      	cmp	r3, #0
    1624:	dbfb      	blt.n	161e <system_gclk_gen_set_config+0x8a>
    1626:	4a05      	ldr	r2, [pc, #20]	; (163c <system_gclk_gen_set_config+0xa8>)
    1628:	6851      	ldr	r1, [r2, #4]
    162a:	2380      	movs	r3, #128	; 0x80
    162c:	025b      	lsls	r3, r3, #9
    162e:	400b      	ands	r3, r1
    1630:	431d      	orrs	r5, r3
    1632:	6055      	str	r5, [r2, #4]
    1634:	4b04      	ldr	r3, [pc, #16]	; (1648 <system_gclk_gen_set_config+0xb4>)
    1636:	4798      	blx	r3
    1638:	bd70      	pop	{r4, r5, r6, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	40000c00 	.word	0x40000c00
    1640:	00000f65 	.word	0x00000f65
    1644:	40000c08 	.word	0x40000c08
    1648:	00000fa5 	.word	0x00000fa5

0000164c <system_gclk_gen_enable>:
    164c:	b510      	push	{r4, lr}
    164e:	1c04      	adds	r4, r0, #0
    1650:	4a0b      	ldr	r2, [pc, #44]	; (1680 <system_gclk_gen_enable+0x34>)
    1652:	7853      	ldrb	r3, [r2, #1]
    1654:	b25b      	sxtb	r3, r3
    1656:	2b00      	cmp	r3, #0
    1658:	dbfb      	blt.n	1652 <system_gclk_gen_enable+0x6>
    165a:	4b0a      	ldr	r3, [pc, #40]	; (1684 <system_gclk_gen_enable+0x38>)
    165c:	4798      	blx	r3
    165e:	4b0a      	ldr	r3, [pc, #40]	; (1688 <system_gclk_gen_enable+0x3c>)
    1660:	701c      	strb	r4, [r3, #0]
    1662:	4a07      	ldr	r2, [pc, #28]	; (1680 <system_gclk_gen_enable+0x34>)
    1664:	7853      	ldrb	r3, [r2, #1]
    1666:	b25b      	sxtb	r3, r3
    1668:	2b00      	cmp	r3, #0
    166a:	dbfb      	blt.n	1664 <system_gclk_gen_enable+0x18>
    166c:	4a04      	ldr	r2, [pc, #16]	; (1680 <system_gclk_gen_enable+0x34>)
    166e:	6853      	ldr	r3, [r2, #4]
    1670:	2180      	movs	r1, #128	; 0x80
    1672:	0249      	lsls	r1, r1, #9
    1674:	430b      	orrs	r3, r1
    1676:	6053      	str	r3, [r2, #4]
    1678:	4b04      	ldr	r3, [pc, #16]	; (168c <system_gclk_gen_enable+0x40>)
    167a:	4798      	blx	r3
    167c:	bd10      	pop	{r4, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	40000c00 	.word	0x40000c00
    1684:	00000f65 	.word	0x00000f65
    1688:	40000c04 	.word	0x40000c04
    168c:	00000fa5 	.word	0x00000fa5

00001690 <system_gclk_gen_get_hz>:
    1690:	b570      	push	{r4, r5, r6, lr}
    1692:	1c04      	adds	r4, r0, #0
    1694:	4a1a      	ldr	r2, [pc, #104]	; (1700 <system_gclk_gen_get_hz+0x70>)
    1696:	7853      	ldrb	r3, [r2, #1]
    1698:	b25b      	sxtb	r3, r3
    169a:	2b00      	cmp	r3, #0
    169c:	dbfb      	blt.n	1696 <system_gclk_gen_get_hz+0x6>
    169e:	4b19      	ldr	r3, [pc, #100]	; (1704 <system_gclk_gen_get_hz+0x74>)
    16a0:	4798      	blx	r3
    16a2:	4b19      	ldr	r3, [pc, #100]	; (1708 <system_gclk_gen_get_hz+0x78>)
    16a4:	701c      	strb	r4, [r3, #0]
    16a6:	4a16      	ldr	r2, [pc, #88]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16a8:	7853      	ldrb	r3, [r2, #1]
    16aa:	b25b      	sxtb	r3, r3
    16ac:	2b00      	cmp	r3, #0
    16ae:	dbfb      	blt.n	16a8 <system_gclk_gen_get_hz+0x18>
    16b0:	4e13      	ldr	r6, [pc, #76]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16b2:	6870      	ldr	r0, [r6, #4]
    16b4:	04c0      	lsls	r0, r0, #19
    16b6:	0ec0      	lsrs	r0, r0, #27
    16b8:	4b14      	ldr	r3, [pc, #80]	; (170c <system_gclk_gen_get_hz+0x7c>)
    16ba:	4798      	blx	r3
    16bc:	1c05      	adds	r5, r0, #0
    16be:	4b12      	ldr	r3, [pc, #72]	; (1708 <system_gclk_gen_get_hz+0x78>)
    16c0:	701c      	strb	r4, [r3, #0]
    16c2:	6876      	ldr	r6, [r6, #4]
    16c4:	02f6      	lsls	r6, r6, #11
    16c6:	0ff6      	lsrs	r6, r6, #31
    16c8:	4b11      	ldr	r3, [pc, #68]	; (1710 <system_gclk_gen_get_hz+0x80>)
    16ca:	701c      	strb	r4, [r3, #0]
    16cc:	4a0c      	ldr	r2, [pc, #48]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16ce:	7853      	ldrb	r3, [r2, #1]
    16d0:	b25b      	sxtb	r3, r3
    16d2:	2b00      	cmp	r3, #0
    16d4:	dbfb      	blt.n	16ce <system_gclk_gen_get_hz+0x3e>
    16d6:	4b0a      	ldr	r3, [pc, #40]	; (1700 <system_gclk_gen_get_hz+0x70>)
    16d8:	689c      	ldr	r4, [r3, #8]
    16da:	0a24      	lsrs	r4, r4, #8
    16dc:	b2a4      	uxth	r4, r4
    16de:	4b0d      	ldr	r3, [pc, #52]	; (1714 <system_gclk_gen_get_hz+0x84>)
    16e0:	4798      	blx	r3
    16e2:	2e00      	cmp	r6, #0
    16e4:	d107      	bne.n	16f6 <system_gclk_gen_get_hz+0x66>
    16e6:	2c01      	cmp	r4, #1
    16e8:	d907      	bls.n	16fa <system_gclk_gen_get_hz+0x6a>
    16ea:	1c28      	adds	r0, r5, #0
    16ec:	1c21      	adds	r1, r4, #0
    16ee:	4b0a      	ldr	r3, [pc, #40]	; (1718 <system_gclk_gen_get_hz+0x88>)
    16f0:	4798      	blx	r3
    16f2:	1c05      	adds	r5, r0, #0
    16f4:	e001      	b.n	16fa <system_gclk_gen_get_hz+0x6a>
    16f6:	3401      	adds	r4, #1
    16f8:	40e5      	lsrs	r5, r4
    16fa:	1c28      	adds	r0, r5, #0
    16fc:	bd70      	pop	{r4, r5, r6, pc}
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	40000c00 	.word	0x40000c00
    1704:	00000f65 	.word	0x00000f65
    1708:	40000c04 	.word	0x40000c04
    170c:	00001049 	.word	0x00001049
    1710:	40000c08 	.word	0x40000c08
    1714:	00000fa5 	.word	0x00000fa5
    1718:	000035ad 	.word	0x000035ad

0000171c <system_gclk_chan_enable>:
    171c:	b510      	push	{r4, lr}
    171e:	1c04      	adds	r4, r0, #0
    1720:	4b06      	ldr	r3, [pc, #24]	; (173c <system_gclk_chan_enable+0x20>)
    1722:	4798      	blx	r3
    1724:	4b06      	ldr	r3, [pc, #24]	; (1740 <system_gclk_chan_enable+0x24>)
    1726:	701c      	strb	r4, [r3, #0]
    1728:	4a06      	ldr	r2, [pc, #24]	; (1744 <system_gclk_chan_enable+0x28>)
    172a:	8851      	ldrh	r1, [r2, #2]
    172c:	2380      	movs	r3, #128	; 0x80
    172e:	01db      	lsls	r3, r3, #7
    1730:	430b      	orrs	r3, r1
    1732:	8053      	strh	r3, [r2, #2]
    1734:	4b04      	ldr	r3, [pc, #16]	; (1748 <system_gclk_chan_enable+0x2c>)
    1736:	4798      	blx	r3
    1738:	bd10      	pop	{r4, pc}
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	00000f65 	.word	0x00000f65
    1740:	40000c02 	.word	0x40000c02
    1744:	40000c00 	.word	0x40000c00
    1748:	00000fa5 	.word	0x00000fa5

0000174c <system_gclk_chan_disable>:
    174c:	b510      	push	{r4, lr}
    174e:	1c04      	adds	r4, r0, #0
    1750:	4b0f      	ldr	r3, [pc, #60]	; (1790 <system_gclk_chan_disable+0x44>)
    1752:	4798      	blx	r3
    1754:	4b0f      	ldr	r3, [pc, #60]	; (1794 <system_gclk_chan_disable+0x48>)
    1756:	701c      	strb	r4, [r3, #0]
    1758:	4b0f      	ldr	r3, [pc, #60]	; (1798 <system_gclk_chan_disable+0x4c>)
    175a:	885a      	ldrh	r2, [r3, #2]
    175c:	0512      	lsls	r2, r2, #20
    175e:	0f10      	lsrs	r0, r2, #28
    1760:	8859      	ldrh	r1, [r3, #2]
    1762:	4a0e      	ldr	r2, [pc, #56]	; (179c <system_gclk_chan_disable+0x50>)
    1764:	400a      	ands	r2, r1
    1766:	805a      	strh	r2, [r3, #2]
    1768:	8859      	ldrh	r1, [r3, #2]
    176a:	4a0d      	ldr	r2, [pc, #52]	; (17a0 <system_gclk_chan_disable+0x54>)
    176c:	400a      	ands	r2, r1
    176e:	805a      	strh	r2, [r3, #2]
    1770:	1c19      	adds	r1, r3, #0
    1772:	2280      	movs	r2, #128	; 0x80
    1774:	01d2      	lsls	r2, r2, #7
    1776:	884b      	ldrh	r3, [r1, #2]
    1778:	4213      	tst	r3, r2
    177a:	d1fc      	bne.n	1776 <system_gclk_chan_disable+0x2a>
    177c:	4906      	ldr	r1, [pc, #24]	; (1798 <system_gclk_chan_disable+0x4c>)
    177e:	0202      	lsls	r2, r0, #8
    1780:	8848      	ldrh	r0, [r1, #2]
    1782:	4b06      	ldr	r3, [pc, #24]	; (179c <system_gclk_chan_disable+0x50>)
    1784:	4003      	ands	r3, r0
    1786:	4313      	orrs	r3, r2
    1788:	804b      	strh	r3, [r1, #2]
    178a:	4b06      	ldr	r3, [pc, #24]	; (17a4 <system_gclk_chan_disable+0x58>)
    178c:	4798      	blx	r3
    178e:	bd10      	pop	{r4, pc}
    1790:	00000f65 	.word	0x00000f65
    1794:	40000c02 	.word	0x40000c02
    1798:	40000c00 	.word	0x40000c00
    179c:	fffff0ff 	.word	0xfffff0ff
    17a0:	ffffbfff 	.word	0xffffbfff
    17a4:	00000fa5 	.word	0x00000fa5

000017a8 <system_gclk_chan_set_config>:
    17a8:	b510      	push	{r4, lr}
    17aa:	780c      	ldrb	r4, [r1, #0]
    17ac:	0224      	lsls	r4, r4, #8
    17ae:	4304      	orrs	r4, r0
    17b0:	4b02      	ldr	r3, [pc, #8]	; (17bc <system_gclk_chan_set_config+0x14>)
    17b2:	4798      	blx	r3
    17b4:	b2a4      	uxth	r4, r4
    17b6:	4b02      	ldr	r3, [pc, #8]	; (17c0 <system_gclk_chan_set_config+0x18>)
    17b8:	805c      	strh	r4, [r3, #2]
    17ba:	bd10      	pop	{r4, pc}
    17bc:	0000174d 	.word	0x0000174d
    17c0:	40000c00 	.word	0x40000c00

000017c4 <system_gclk_chan_get_hz>:
    17c4:	b510      	push	{r4, lr}
    17c6:	1c04      	adds	r4, r0, #0
    17c8:	4b06      	ldr	r3, [pc, #24]	; (17e4 <system_gclk_chan_get_hz+0x20>)
    17ca:	4798      	blx	r3
    17cc:	4b06      	ldr	r3, [pc, #24]	; (17e8 <system_gclk_chan_get_hz+0x24>)
    17ce:	701c      	strb	r4, [r3, #0]
    17d0:	4b06      	ldr	r3, [pc, #24]	; (17ec <system_gclk_chan_get_hz+0x28>)
    17d2:	885c      	ldrh	r4, [r3, #2]
    17d4:	0524      	lsls	r4, r4, #20
    17d6:	0f24      	lsrs	r4, r4, #28
    17d8:	4b05      	ldr	r3, [pc, #20]	; (17f0 <system_gclk_chan_get_hz+0x2c>)
    17da:	4798      	blx	r3
    17dc:	1c20      	adds	r0, r4, #0
    17de:	4b05      	ldr	r3, [pc, #20]	; (17f4 <system_gclk_chan_get_hz+0x30>)
    17e0:	4798      	blx	r3
    17e2:	bd10      	pop	{r4, pc}
    17e4:	00000f65 	.word	0x00000f65
    17e8:	40000c02 	.word	0x40000c02
    17ec:	40000c00 	.word	0x40000c00
    17f0:	00000fa5 	.word	0x00000fa5
    17f4:	00001691 	.word	0x00001691

000017f8 <_system_pinmux_config>:
    17f8:	b530      	push	{r4, r5, lr}
    17fa:	78d3      	ldrb	r3, [r2, #3]
    17fc:	2b00      	cmp	r3, #0
    17fe:	d11e      	bne.n	183e <_system_pinmux_config+0x46>
    1800:	7814      	ldrb	r4, [r2, #0]
    1802:	2c80      	cmp	r4, #128	; 0x80
    1804:	d004      	beq.n	1810 <_system_pinmux_config+0x18>
    1806:	0624      	lsls	r4, r4, #24
    1808:	2380      	movs	r3, #128	; 0x80
    180a:	025b      	lsls	r3, r3, #9
    180c:	431c      	orrs	r4, r3
    180e:	e000      	b.n	1812 <_system_pinmux_config+0x1a>
    1810:	2400      	movs	r4, #0
    1812:	7853      	ldrb	r3, [r2, #1]
    1814:	2502      	movs	r5, #2
    1816:	43ab      	bics	r3, r5
    1818:	d10a      	bne.n	1830 <_system_pinmux_config+0x38>
    181a:	7893      	ldrb	r3, [r2, #2]
    181c:	2b00      	cmp	r3, #0
    181e:	d103      	bne.n	1828 <_system_pinmux_config+0x30>
    1820:	2380      	movs	r3, #128	; 0x80
    1822:	029b      	lsls	r3, r3, #10
    1824:	431c      	orrs	r4, r3
    1826:	e002      	b.n	182e <_system_pinmux_config+0x36>
    1828:	23c0      	movs	r3, #192	; 0xc0
    182a:	02db      	lsls	r3, r3, #11
    182c:	431c      	orrs	r4, r3
    182e:	6041      	str	r1, [r0, #4]
    1830:	7853      	ldrb	r3, [r2, #1]
    1832:	3b01      	subs	r3, #1
    1834:	2b01      	cmp	r3, #1
    1836:	d812      	bhi.n	185e <_system_pinmux_config+0x66>
    1838:	4b18      	ldr	r3, [pc, #96]	; (189c <_system_pinmux_config+0xa4>)
    183a:	401c      	ands	r4, r3
    183c:	e00f      	b.n	185e <_system_pinmux_config+0x66>
    183e:	6041      	str	r1, [r0, #4]
    1840:	040b      	lsls	r3, r1, #16
    1842:	0c1b      	lsrs	r3, r3, #16
    1844:	24a0      	movs	r4, #160	; 0xa0
    1846:	05e4      	lsls	r4, r4, #23
    1848:	4323      	orrs	r3, r4
    184a:	6283      	str	r3, [r0, #40]	; 0x28
    184c:	0c0b      	lsrs	r3, r1, #16
    184e:	24d0      	movs	r4, #208	; 0xd0
    1850:	0624      	lsls	r4, r4, #24
    1852:	4323      	orrs	r3, r4
    1854:	6283      	str	r3, [r0, #40]	; 0x28
    1856:	78d3      	ldrb	r3, [r2, #3]
    1858:	2b00      	cmp	r3, #0
    185a:	d018      	beq.n	188e <_system_pinmux_config+0x96>
    185c:	e01c      	b.n	1898 <_system_pinmux_config+0xa0>
    185e:	040b      	lsls	r3, r1, #16
    1860:	0c1b      	lsrs	r3, r3, #16
    1862:	25a0      	movs	r5, #160	; 0xa0
    1864:	05ed      	lsls	r5, r5, #23
    1866:	432b      	orrs	r3, r5
    1868:	4323      	orrs	r3, r4
    186a:	6283      	str	r3, [r0, #40]	; 0x28
    186c:	0c0b      	lsrs	r3, r1, #16
    186e:	25d0      	movs	r5, #208	; 0xd0
    1870:	062d      	lsls	r5, r5, #24
    1872:	432b      	orrs	r3, r5
    1874:	4323      	orrs	r3, r4
    1876:	6283      	str	r3, [r0, #40]	; 0x28
    1878:	78d3      	ldrb	r3, [r2, #3]
    187a:	2b00      	cmp	r3, #0
    187c:	d10c      	bne.n	1898 <_system_pinmux_config+0xa0>
    187e:	0363      	lsls	r3, r4, #13
    1880:	d505      	bpl.n	188e <_system_pinmux_config+0x96>
    1882:	7893      	ldrb	r3, [r2, #2]
    1884:	2b01      	cmp	r3, #1
    1886:	d101      	bne.n	188c <_system_pinmux_config+0x94>
    1888:	6181      	str	r1, [r0, #24]
    188a:	e000      	b.n	188e <_system_pinmux_config+0x96>
    188c:	6141      	str	r1, [r0, #20]
    188e:	7853      	ldrb	r3, [r2, #1]
    1890:	3b01      	subs	r3, #1
    1892:	2b01      	cmp	r3, #1
    1894:	d800      	bhi.n	1898 <_system_pinmux_config+0xa0>
    1896:	6081      	str	r1, [r0, #8]
    1898:	bd30      	pop	{r4, r5, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	fffbffff 	.word	0xfffbffff

000018a0 <system_pinmux_pin_set_config>:
    18a0:	b508      	push	{r3, lr}
    18a2:	1c03      	adds	r3, r0, #0
    18a4:	1c0a      	adds	r2, r1, #0
    18a6:	09c1      	lsrs	r1, r0, #7
    18a8:	2000      	movs	r0, #0
    18aa:	2900      	cmp	r1, #0
    18ac:	d104      	bne.n	18b8 <system_pinmux_pin_set_config+0x18>
    18ae:	0958      	lsrs	r0, r3, #5
    18b0:	01c0      	lsls	r0, r0, #7
    18b2:	4905      	ldr	r1, [pc, #20]	; (18c8 <system_pinmux_pin_set_config+0x28>)
    18b4:	468c      	mov	ip, r1
    18b6:	4460      	add	r0, ip
    18b8:	211f      	movs	r1, #31
    18ba:	400b      	ands	r3, r1
    18bc:	391e      	subs	r1, #30
    18be:	4099      	lsls	r1, r3
    18c0:	4b02      	ldr	r3, [pc, #8]	; (18cc <system_pinmux_pin_set_config+0x2c>)
    18c2:	4798      	blx	r3
    18c4:	bd08      	pop	{r3, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	41004400 	.word	0x41004400
    18cc:	000017f9 	.word	0x000017f9

000018d0 <_system_dummy_init>:
    18d0:	4770      	bx	lr
    18d2:	46c0      	nop			; (mov r8, r8)

000018d4 <system_init>:
    18d4:	b508      	push	{r3, lr}
    18d6:	4b05      	ldr	r3, [pc, #20]	; (18ec <system_init+0x18>)
    18d8:	4798      	blx	r3
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <system_init+0x1c>)
    18dc:	4798      	blx	r3
    18de:	4b05      	ldr	r3, [pc, #20]	; (18f4 <system_init+0x20>)
    18e0:	4798      	blx	r3
    18e2:	4b05      	ldr	r3, [pc, #20]	; (18f8 <system_init+0x24>)
    18e4:	4798      	blx	r3
    18e6:	4b05      	ldr	r3, [pc, #20]	; (18fc <system_init+0x28>)
    18e8:	4798      	blx	r3
    18ea:	bd08      	pop	{r3, pc}
    18ec:	000013a1 	.word	0x000013a1
    18f0:	00000fd5 	.word	0x00000fd5
    18f4:	000018d1 	.word	0x000018d1
    18f8:	000018d1 	.word	0x000018d1
    18fc:	000018d1 	.word	0x000018d1

00001900 <Dummy_Handler>:
    1900:	e7fe      	b.n	1900 <Dummy_Handler>
    1902:	46c0      	nop			; (mov r8, r8)

00001904 <Reset_Handler>:
    1904:	b570      	push	{r4, r5, r6, lr}
    1906:	4b2e      	ldr	r3, [pc, #184]	; (19c0 <Reset_Handler+0xbc>)
    1908:	4a2e      	ldr	r2, [pc, #184]	; (19c4 <Reset_Handler+0xc0>)
    190a:	429a      	cmp	r2, r3
    190c:	d003      	beq.n	1916 <Reset_Handler+0x12>
    190e:	4b2e      	ldr	r3, [pc, #184]	; (19c8 <Reset_Handler+0xc4>)
    1910:	4a2b      	ldr	r2, [pc, #172]	; (19c0 <Reset_Handler+0xbc>)
    1912:	429a      	cmp	r2, r3
    1914:	d304      	bcc.n	1920 <Reset_Handler+0x1c>
    1916:	4b2d      	ldr	r3, [pc, #180]	; (19cc <Reset_Handler+0xc8>)
    1918:	4a2d      	ldr	r2, [pc, #180]	; (19d0 <Reset_Handler+0xcc>)
    191a:	429a      	cmp	r2, r3
    191c:	d310      	bcc.n	1940 <Reset_Handler+0x3c>
    191e:	e01e      	b.n	195e <Reset_Handler+0x5a>
    1920:	4a2c      	ldr	r2, [pc, #176]	; (19d4 <Reset_Handler+0xd0>)
    1922:	4b29      	ldr	r3, [pc, #164]	; (19c8 <Reset_Handler+0xc4>)
    1924:	3303      	adds	r3, #3
    1926:	1a9b      	subs	r3, r3, r2
    1928:	089b      	lsrs	r3, r3, #2
    192a:	3301      	adds	r3, #1
    192c:	009b      	lsls	r3, r3, #2
    192e:	2200      	movs	r2, #0
    1930:	4823      	ldr	r0, [pc, #140]	; (19c0 <Reset_Handler+0xbc>)
    1932:	4924      	ldr	r1, [pc, #144]	; (19c4 <Reset_Handler+0xc0>)
    1934:	588c      	ldr	r4, [r1, r2]
    1936:	5084      	str	r4, [r0, r2]
    1938:	3204      	adds	r2, #4
    193a:	429a      	cmp	r2, r3
    193c:	d1fa      	bne.n	1934 <Reset_Handler+0x30>
    193e:	e7ea      	b.n	1916 <Reset_Handler+0x12>
    1940:	4a25      	ldr	r2, [pc, #148]	; (19d8 <Reset_Handler+0xd4>)
    1942:	4b22      	ldr	r3, [pc, #136]	; (19cc <Reset_Handler+0xc8>)
    1944:	3303      	adds	r3, #3
    1946:	1a9b      	subs	r3, r3, r2
    1948:	089b      	lsrs	r3, r3, #2
    194a:	3301      	adds	r3, #1
    194c:	009b      	lsls	r3, r3, #2
    194e:	2200      	movs	r2, #0
    1950:	481f      	ldr	r0, [pc, #124]	; (19d0 <Reset_Handler+0xcc>)
    1952:	2100      	movs	r1, #0
    1954:	1814      	adds	r4, r2, r0
    1956:	6021      	str	r1, [r4, #0]
    1958:	3204      	adds	r2, #4
    195a:	429a      	cmp	r2, r3
    195c:	d1fa      	bne.n	1954 <Reset_Handler+0x50>
    195e:	4a1f      	ldr	r2, [pc, #124]	; (19dc <Reset_Handler+0xd8>)
    1960:	21ff      	movs	r1, #255	; 0xff
    1962:	4b1f      	ldr	r3, [pc, #124]	; (19e0 <Reset_Handler+0xdc>)
    1964:	438b      	bics	r3, r1
    1966:	6093      	str	r3, [r2, #8]
    1968:	39fd      	subs	r1, #253	; 0xfd
    196a:	2390      	movs	r3, #144	; 0x90
    196c:	005b      	lsls	r3, r3, #1
    196e:	4a1d      	ldr	r2, [pc, #116]	; (19e4 <Reset_Handler+0xe0>)
    1970:	50d1      	str	r1, [r2, r3]
    1972:	481d      	ldr	r0, [pc, #116]	; (19e8 <Reset_Handler+0xe4>)
    1974:	78c3      	ldrb	r3, [r0, #3]
    1976:	2403      	movs	r4, #3
    1978:	43a3      	bics	r3, r4
    197a:	2202      	movs	r2, #2
    197c:	4313      	orrs	r3, r2
    197e:	70c3      	strb	r3, [r0, #3]
    1980:	78c3      	ldrb	r3, [r0, #3]
    1982:	260c      	movs	r6, #12
    1984:	43b3      	bics	r3, r6
    1986:	2108      	movs	r1, #8
    1988:	430b      	orrs	r3, r1
    198a:	70c3      	strb	r3, [r0, #3]
    198c:	4b17      	ldr	r3, [pc, #92]	; (19ec <Reset_Handler+0xe8>)
    198e:	7b98      	ldrb	r0, [r3, #14]
    1990:	2530      	movs	r5, #48	; 0x30
    1992:	43a8      	bics	r0, r5
    1994:	1c05      	adds	r5, r0, #0
    1996:	2020      	movs	r0, #32
    1998:	4328      	orrs	r0, r5
    199a:	7398      	strb	r0, [r3, #14]
    199c:	7b98      	ldrb	r0, [r3, #14]
    199e:	43b0      	bics	r0, r6
    19a0:	4301      	orrs	r1, r0
    19a2:	7399      	strb	r1, [r3, #14]
    19a4:	7b99      	ldrb	r1, [r3, #14]
    19a6:	43a1      	bics	r1, r4
    19a8:	430a      	orrs	r2, r1
    19aa:	739a      	strb	r2, [r3, #14]
    19ac:	4a10      	ldr	r2, [pc, #64]	; (19f0 <Reset_Handler+0xec>)
    19ae:	6851      	ldr	r1, [r2, #4]
    19b0:	2380      	movs	r3, #128	; 0x80
    19b2:	430b      	orrs	r3, r1
    19b4:	6053      	str	r3, [r2, #4]
    19b6:	4b0f      	ldr	r3, [pc, #60]	; (19f4 <Reset_Handler+0xf0>)
    19b8:	4798      	blx	r3
    19ba:	4b0f      	ldr	r3, [pc, #60]	; (19f8 <Reset_Handler+0xf4>)
    19bc:	4798      	blx	r3
    19be:	e7fe      	b.n	19be <Reset_Handler+0xba>
    19c0:	20000000 	.word	0x20000000
    19c4:	00004904 	.word	0x00004904
    19c8:	20000070 	.word	0x20000070
    19cc:	200001dc 	.word	0x200001dc
    19d0:	20000070 	.word	0x20000070
    19d4:	20000004 	.word	0x20000004
    19d8:	20000074 	.word	0x20000074
    19dc:	e000ed00 	.word	0xe000ed00
    19e0:	00000000 	.word	0x00000000
    19e4:	41007000 	.word	0x41007000
    19e8:	41005000 	.word	0x41005000
    19ec:	41004800 	.word	0x41004800
    19f0:	41004000 	.word	0x41004000
    19f4:	00003725 	.word	0x00003725
    19f8:	000034e9 	.word	0x000034e9

000019fc <_sbrk>:
    19fc:	1c03      	adds	r3, r0, #0
    19fe:	4a06      	ldr	r2, [pc, #24]	; (1a18 <_sbrk+0x1c>)
    1a00:	6812      	ldr	r2, [r2, #0]
    1a02:	2a00      	cmp	r2, #0
    1a04:	d102      	bne.n	1a0c <_sbrk+0x10>
    1a06:	4905      	ldr	r1, [pc, #20]	; (1a1c <_sbrk+0x20>)
    1a08:	4a03      	ldr	r2, [pc, #12]	; (1a18 <_sbrk+0x1c>)
    1a0a:	6011      	str	r1, [r2, #0]
    1a0c:	4a02      	ldr	r2, [pc, #8]	; (1a18 <_sbrk+0x1c>)
    1a0e:	6810      	ldr	r0, [r2, #0]
    1a10:	18c3      	adds	r3, r0, r3
    1a12:	6013      	str	r3, [r2, #0]
    1a14:	4770      	bx	lr
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	2000019c 	.word	0x2000019c
    1a1c:	200021e0 	.word	0x200021e0

00001a20 <_close>:
    1a20:	2001      	movs	r0, #1
    1a22:	4240      	negs	r0, r0
    1a24:	4770      	bx	lr
    1a26:	46c0      	nop			; (mov r8, r8)

00001a28 <_fstat>:
    1a28:	2380      	movs	r3, #128	; 0x80
    1a2a:	019b      	lsls	r3, r3, #6
    1a2c:	604b      	str	r3, [r1, #4]
    1a2e:	2000      	movs	r0, #0
    1a30:	4770      	bx	lr
    1a32:	46c0      	nop			; (mov r8, r8)

00001a34 <_isatty>:
    1a34:	2001      	movs	r0, #1
    1a36:	4770      	bx	lr

00001a38 <_lseek>:
    1a38:	2000      	movs	r0, #0
    1a3a:	4770      	bx	lr

00001a3c <green>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a3c:	4b76      	ldr	r3, [pc, #472]	; (1c18 <green+0x1dc>)
    1a3e:	2280      	movs	r2, #128	; 0x80
    1a40:	0192      	lsls	r2, r2, #6
    1a42:	619a      	str	r2, [r3, #24]

void green()
{
	//GREEN
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1a44:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a46:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	46c0      	nop			; (mov r8, r8)
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	46c0      	nop			; (mov r8, r8)
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	46c0      	nop			; (mov r8, r8)
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	46c0      	nop			; (mov r8, r8)
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	46c0      	nop			; (mov r8, r8)
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	46c0      	nop			; (mov r8, r8)
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	46c0      	nop			; (mov r8, r8)
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	46c0      	nop			; (mov r8, r8)
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a72:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1a74:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a76:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a78:	46c0      	nop			; (mov r8, r8)
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	46c0      	nop			; (mov r8, r8)
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	46c0      	nop			; (mov r8, r8)
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	46c0      	nop			; (mov r8, r8)
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	46c0      	nop			; (mov r8, r8)
    1a8a:	46c0      	nop			; (mov r8, r8)
    1a8c:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	46c0      	nop			; (mov r8, r8)
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	46c0      	nop			; (mov r8, r8)
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	46c0      	nop			; (mov r8, r8)
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	46c0      	nop			; (mov r8, r8)
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1aa2:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1aa4:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1aa6:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1aa8:	46c0      	nop			; (mov r8, r8)
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	46c0      	nop			; (mov r8, r8)
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	46c0      	nop			; (mov r8, r8)
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	46c0      	nop			; (mov r8, r8)
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	46c0      	nop			; (mov r8, r8)
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	46c0      	nop			; (mov r8, r8)
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	46c0      	nop			; (mov r8, r8)
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	46c0      	nop			; (mov r8, r8)
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	46c0      	nop			; (mov r8, r8)
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ad2:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1ad4:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ad6:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ad8:	46c0      	nop			; (mov r8, r8)
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	46c0      	nop			; (mov r8, r8)
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	46c0      	nop			; (mov r8, r8)
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	46c0      	nop			; (mov r8, r8)
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	46c0      	nop			; (mov r8, r8)
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	46c0      	nop			; (mov r8, r8)
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	46c0      	nop			; (mov r8, r8)
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	46c0      	nop			; (mov r8, r8)
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	46c0      	nop			; (mov r8, r8)
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b02:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1b04:	46c0      	nop			; (mov r8, r8)
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	46c0      	nop			; (mov r8, r8)
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	46c0      	nop			; (mov r8, r8)
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	46c0      	nop			; (mov r8, r8)
    1b12:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b14:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	46c0      	nop			; (mov r8, r8)
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	46c0      	nop			; (mov r8, r8)
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	46c0      	nop			; (mov r8, r8)
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	46c0      	nop			; (mov r8, r8)
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	46c0      	nop			; (mov r8, r8)
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b32:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1b34:	46c0      	nop			; (mov r8, r8)
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	46c0      	nop			; (mov r8, r8)
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	46c0      	nop			; (mov r8, r8)
    1b42:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b44:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    1b46:	46c0      	nop			; (mov r8, r8)
    1b48:	46c0      	nop			; (mov r8, r8)
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	46c0      	nop			; (mov r8, r8)
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	46c0      	nop			; (mov r8, r8)
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	46c0      	nop			; (mov r8, r8)
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	46c0      	nop			; (mov r8, r8)
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b62:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1b64:	46c0      	nop			; (mov r8, r8)
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	46c0      	nop			; (mov r8, r8)
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	46c0      	nop			; (mov r8, r8)
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	46c0      	nop			; (mov r8, r8)
    1b72:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b74:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	46c0      	nop			; (mov r8, r8)
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	46c0      	nop			; (mov r8, r8)
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	46c0      	nop			; (mov r8, r8)
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	46c0      	nop			; (mov r8, r8)
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	46c0      	nop			; (mov r8, r8)
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b92:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1b94:	46c0      	nop			; (mov r8, r8)
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	46c0      	nop			; (mov r8, r8)
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	46c0      	nop			; (mov r8, r8)
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	46c0      	nop			; (mov r8, r8)
    1ba2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ba4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    1ba6:	46c0      	nop			; (mov r8, r8)
    1ba8:	46c0      	nop			; (mov r8, r8)
    1baa:	46c0      	nop			; (mov r8, r8)
    1bac:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1bae:	619a      	str	r2, [r3, #24]
	
	//RED
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1bb0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1bb2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1bb4:	46c0      	nop			; (mov r8, r8)
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	46c0      	nop			; (mov r8, r8)
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	46c0      	nop			; (mov r8, r8)
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	46c0      	nop			; (mov r8, r8)
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	46c0      	nop			; (mov r8, r8)
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	46c0      	nop			; (mov r8, r8)
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	46c0      	nop			; (mov r8, r8)
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	46c0      	nop			; (mov r8, r8)
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	46c0      	nop			; (mov r8, r8)
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1bde:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1be0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1be2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1be4:	46c0      	nop			; (mov r8, r8)
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	46c0      	nop			; (mov r8, r8)
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	46c0      	nop			; (mov r8, r8)
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	46c0      	nop			; (mov r8, r8)
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	46c0      	nop			; (mov r8, r8)
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	46c0      	nop			; (mov r8, r8)
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	46c0      	nop			; (mov r8, r8)
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	46c0      	nop			; (mov r8, r8)
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	46c0      	nop			; (mov r8, r8)
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c0e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1c10:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c12:	615a      	str	r2, [r3, #20]
    1c14:	e002      	b.n	1c1c <green+0x1e0>
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	41004400 	.word	0x41004400
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c1c:	46c0      	nop			; (mov r8, r8)
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	46c0      	nop			; (mov r8, r8)
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	46c0      	nop			; (mov r8, r8)
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	46c0      	nop			; (mov r8, r8)
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	46c0      	nop			; (mov r8, r8)
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	46c0      	nop			; (mov r8, r8)
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	46c0      	nop			; (mov r8, r8)
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	46c0      	nop			; (mov r8, r8)
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	46c0      	nop			; (mov r8, r8)
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c46:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1c48:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c4a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c4c:	46c0      	nop			; (mov r8, r8)
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	46c0      	nop			; (mov r8, r8)
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	46c0      	nop			; (mov r8, r8)
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	46c0      	nop			; (mov r8, r8)
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	46c0      	nop			; (mov r8, r8)
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	46c0      	nop			; (mov r8, r8)
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	46c0      	nop			; (mov r8, r8)
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	46c0      	nop			; (mov r8, r8)
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	46c0      	nop			; (mov r8, r8)
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c76:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1c78:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c7a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c7c:	46c0      	nop			; (mov r8, r8)
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	46c0      	nop			; (mov r8, r8)
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	46c0      	nop			; (mov r8, r8)
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	46c0      	nop			; (mov r8, r8)
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	46c0      	nop			; (mov r8, r8)
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	46c0      	nop			; (mov r8, r8)
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	46c0      	nop			; (mov r8, r8)
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	46c0      	nop			; (mov r8, r8)
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	46c0      	nop			; (mov r8, r8)
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ca6:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1ca8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1caa:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1cac:	46c0      	nop			; (mov r8, r8)
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	46c0      	nop			; (mov r8, r8)
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	46c0      	nop			; (mov r8, r8)
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	46c0      	nop			; (mov r8, r8)
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	46c0      	nop			; (mov r8, r8)
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	46c0      	nop			; (mov r8, r8)
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	46c0      	nop			; (mov r8, r8)
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	46c0      	nop			; (mov r8, r8)
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	46c0      	nop			; (mov r8, r8)
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1cd6:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1cd8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1cda:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1cdc:	46c0      	nop			; (mov r8, r8)
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	46c0      	nop			; (mov r8, r8)
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	46c0      	nop			; (mov r8, r8)
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	46c0      	nop			; (mov r8, r8)
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	46c0      	nop			; (mov r8, r8)
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	46c0      	nop			; (mov r8, r8)
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	46c0      	nop			; (mov r8, r8)
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	46c0      	nop			; (mov r8, r8)
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	46c0      	nop			; (mov r8, r8)
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d06:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1d08:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d0a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d0c:	46c0      	nop			; (mov r8, r8)
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	46c0      	nop			; (mov r8, r8)
    1d12:	46c0      	nop			; (mov r8, r8)
    1d14:	46c0      	nop			; (mov r8, r8)
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	46c0      	nop			; (mov r8, r8)
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	46c0      	nop			; (mov r8, r8)
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	46c0      	nop			; (mov r8, r8)
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	46c0      	nop			; (mov r8, r8)
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	46c0      	nop			; (mov r8, r8)
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	46c0      	nop			; (mov r8, r8)
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d36:	619a      	str	r2, [r3, #24]
	
	//BLUE
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1d38:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d3a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d3c:	46c0      	nop			; (mov r8, r8)
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	46c0      	nop			; (mov r8, r8)
    1d42:	46c0      	nop			; (mov r8, r8)
    1d44:	46c0      	nop			; (mov r8, r8)
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	46c0      	nop			; (mov r8, r8)
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	46c0      	nop			; (mov r8, r8)
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	46c0      	nop			; (mov r8, r8)
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	46c0      	nop			; (mov r8, r8)
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	46c0      	nop			; (mov r8, r8)
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	46c0      	nop			; (mov r8, r8)
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d66:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1d68:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d6a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d6c:	46c0      	nop			; (mov r8, r8)
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	46c0      	nop			; (mov r8, r8)
    1d72:	46c0      	nop			; (mov r8, r8)
    1d74:	46c0      	nop			; (mov r8, r8)
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	46c0      	nop			; (mov r8, r8)
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	46c0      	nop			; (mov r8, r8)
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	46c0      	nop			; (mov r8, r8)
    1d86:	46c0      	nop			; (mov r8, r8)
    1d88:	46c0      	nop			; (mov r8, r8)
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	46c0      	nop			; (mov r8, r8)
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	46c0      	nop			; (mov r8, r8)
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d96:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1d98:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d9a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d9c:	46c0      	nop			; (mov r8, r8)
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	46c0      	nop			; (mov r8, r8)
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	46c0      	nop			; (mov r8, r8)
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	46c0      	nop			; (mov r8, r8)
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	46c0      	nop			; (mov r8, r8)
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	46c0      	nop			; (mov r8, r8)
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	46c0      	nop			; (mov r8, r8)
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	46c0      	nop			; (mov r8, r8)
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	46c0      	nop			; (mov r8, r8)
    1dc2:	46c0      	nop			; (mov r8, r8)
    1dc4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1dc6:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1dc8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1dca:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1dcc:	46c0      	nop			; (mov r8, r8)
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	46c0      	nop			; (mov r8, r8)
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	46c0      	nop			; (mov r8, r8)
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	46c0      	nop			; (mov r8, r8)
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	46c0      	nop			; (mov r8, r8)
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	46c0      	nop			; (mov r8, r8)
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	46c0      	nop			; (mov r8, r8)
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	46c0      	nop			; (mov r8, r8)
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	46c0      	nop			; (mov r8, r8)
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1df6:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1df8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1dfa:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1dfc:	46c0      	nop			; (mov r8, r8)
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	46c0      	nop			; (mov r8, r8)
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	46c0      	nop			; (mov r8, r8)
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	46c0      	nop			; (mov r8, r8)
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	46c0      	nop			; (mov r8, r8)
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	46c0      	nop			; (mov r8, r8)
    1e16:	46c0      	nop			; (mov r8, r8)
    1e18:	46c0      	nop			; (mov r8, r8)
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	46c0      	nop			; (mov r8, r8)
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	46c0      	nop			; (mov r8, r8)
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1e26:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1e28:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e2a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e2c:	46c0      	nop			; (mov r8, r8)
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	46c0      	nop			; (mov r8, r8)
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	46c0      	nop			; (mov r8, r8)
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	46c0      	nop			; (mov r8, r8)
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	46c0      	nop			; (mov r8, r8)
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	46c0      	nop			; (mov r8, r8)
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	46c0      	nop			; (mov r8, r8)
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	46c0      	nop			; (mov r8, r8)
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	46c0      	nop			; (mov r8, r8)
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1e56:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1e58:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e5a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e5c:	46c0      	nop			; (mov r8, r8)
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	46c0      	nop			; (mov r8, r8)
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	46c0      	nop			; (mov r8, r8)
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	46c0      	nop			; (mov r8, r8)
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	46c0      	nop			; (mov r8, r8)
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	46c0      	nop			; (mov r8, r8)
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	46c0      	nop			; (mov r8, r8)
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	46c0      	nop			; (mov r8, r8)
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	46c0      	nop			; (mov r8, r8)
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1e86:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1e88:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e8a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e8c:	46c0      	nop			; (mov r8, r8)
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	46c0      	nop			; (mov r8, r8)
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	46c0      	nop			; (mov r8, r8)
    1e96:	46c0      	nop			; (mov r8, r8)
    1e98:	46c0      	nop			; (mov r8, r8)
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	46c0      	nop			; (mov r8, r8)
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	46c0      	nop			; (mov r8, r8)
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	46c0      	nop			; (mov r8, r8)
    1eaa:	46c0      	nop			; (mov r8, r8)
    1eac:	46c0      	nop			; (mov r8, r8)
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	46c0      	nop			; (mov r8, r8)
    1eb2:	46c0      	nop			; (mov r8, r8)
    1eb4:	46c0      	nop			; (mov r8, r8)
}
    1eb6:	4770      	bx	lr

00001eb8 <red>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1eb8:	4b74      	ldr	r3, [pc, #464]	; (208c <STACK_SIZE+0x8c>)
    1eba:	2280      	movs	r2, #128	; 0x80
    1ebc:	0192      	lsls	r2, r2, #6
    1ebe:	619a      	str	r2, [r3, #24]

void red()
{
	//GREEN
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1ec0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ec2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ec4:	46c0      	nop			; (mov r8, r8)
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	46c0      	nop			; (mov r8, r8)
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	46c0      	nop			; (mov r8, r8)
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	46c0      	nop			; (mov r8, r8)
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	46c0      	nop			; (mov r8, r8)
    1ed6:	46c0      	nop			; (mov r8, r8)
    1ed8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	46c0      	nop			; (mov r8, r8)
    1ede:	46c0      	nop			; (mov r8, r8)
    1ee0:	46c0      	nop			; (mov r8, r8)
    1ee2:	46c0      	nop			; (mov r8, r8)
    1ee4:	46c0      	nop			; (mov r8, r8)
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	46c0      	nop			; (mov r8, r8)
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1eee:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1ef0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ef2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ef4:	46c0      	nop			; (mov r8, r8)
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	46c0      	nop			; (mov r8, r8)
    1efa:	46c0      	nop			; (mov r8, r8)
    1efc:	46c0      	nop			; (mov r8, r8)
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	46c0      	nop			; (mov r8, r8)
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	46c0      	nop			; (mov r8, r8)
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	46c0      	nop			; (mov r8, r8)
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	46c0      	nop			; (mov r8, r8)
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	46c0      	nop			; (mov r8, r8)
    1f16:	46c0      	nop			; (mov r8, r8)
    1f18:	46c0      	nop			; (mov r8, r8)
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1f1e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1f20:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1f22:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1f24:	46c0      	nop			; (mov r8, r8)
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	46c0      	nop			; (mov r8, r8)
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	46c0      	nop			; (mov r8, r8)
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	46c0      	nop			; (mov r8, r8)
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	46c0      	nop			; (mov r8, r8)
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	46c0      	nop			; (mov r8, r8)
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	46c0      	nop			; (mov r8, r8)
    1f42:	46c0      	nop			; (mov r8, r8)
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	46c0      	nop			; (mov r8, r8)
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1f4e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1f50:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1f52:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1f54:	46c0      	nop			; (mov r8, r8)
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	46c0      	nop			; (mov r8, r8)
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	46c0      	nop			; (mov r8, r8)
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	46c0      	nop			; (mov r8, r8)
    1f62:	46c0      	nop			; (mov r8, r8)
    1f64:	46c0      	nop			; (mov r8, r8)
    1f66:	46c0      	nop			; (mov r8, r8)
    1f68:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	46c0      	nop			; (mov r8, r8)
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	46c0      	nop			; (mov r8, r8)
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	46c0      	nop			; (mov r8, r8)
    1f76:	46c0      	nop			; (mov r8, r8)
    1f78:	46c0      	nop			; (mov r8, r8)
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1f7e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1f80:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1f82:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1f84:	46c0      	nop			; (mov r8, r8)
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	46c0      	nop			; (mov r8, r8)
    1f8a:	46c0      	nop			; (mov r8, r8)
    1f8c:	46c0      	nop			; (mov r8, r8)
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	46c0      	nop			; (mov r8, r8)
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	46c0      	nop			; (mov r8, r8)
    1f96:	46c0      	nop			; (mov r8, r8)
    1f98:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	46c0      	nop			; (mov r8, r8)
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	46c0      	nop			; (mov r8, r8)
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	46c0      	nop			; (mov r8, r8)
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	46c0      	nop			; (mov r8, r8)
    1faa:	46c0      	nop			; (mov r8, r8)
    1fac:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1fae:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1fb0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1fb2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1fb4:	46c0      	nop			; (mov r8, r8)
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	46c0      	nop			; (mov r8, r8)
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	46c0      	nop			; (mov r8, r8)
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	46c0      	nop			; (mov r8, r8)
    1fc2:	46c0      	nop			; (mov r8, r8)
    1fc4:	46c0      	nop			; (mov r8, r8)
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	46c0      	nop			; (mov r8, r8)
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	46c0      	nop			; (mov r8, r8)
    1fd2:	46c0      	nop			; (mov r8, r8)
    1fd4:	46c0      	nop			; (mov r8, r8)
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	46c0      	nop			; (mov r8, r8)
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1fde:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    1fe0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1fe2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1fe4:	46c0      	nop			; (mov r8, r8)
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	46c0      	nop			; (mov r8, r8)
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	46c0      	nop			; (mov r8, r8)
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	46c0      	nop			; (mov r8, r8)
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	46c0      	nop			; (mov r8, r8)
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ffa:	46c0      	nop			; (mov r8, r8)
    1ffc:	46c0      	nop			; (mov r8, r8)
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	46c0      	nop			; (mov r8, r8)
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	46c0      	nop			; (mov r8, r8)
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	46c0      	nop			; (mov r8, r8)
    200a:	46c0      	nop			; (mov r8, r8)
    200c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    200e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2010:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2012:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2014:	46c0      	nop			; (mov r8, r8)
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	46c0      	nop			; (mov r8, r8)
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	46c0      	nop			; (mov r8, r8)
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	46c0      	nop			; (mov r8, r8)
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	46c0      	nop			; (mov r8, r8)
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	46c0      	nop			; (mov r8, r8)
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	46c0      	nop			; (mov r8, r8)
    2032:	46c0      	nop			; (mov r8, r8)
    2034:	46c0      	nop			; (mov r8, r8)
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	46c0      	nop			; (mov r8, r8)
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    203e:	619a      	str	r2, [r3, #24]
	
	//RED
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2040:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2042:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2044:	46c0      	nop			; (mov r8, r8)
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	46c0      	nop			; (mov r8, r8)
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	46c0      	nop			; (mov r8, r8)
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	46c0      	nop			; (mov r8, r8)
    2052:	46c0      	nop			; (mov r8, r8)
    2054:	46c0      	nop			; (mov r8, r8)
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	46c0      	nop			; (mov r8, r8)
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	46c0      	nop			; (mov r8, r8)
    2062:	46c0      	nop			; (mov r8, r8)
    2064:	46c0      	nop			; (mov r8, r8)
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	46c0      	nop			; (mov r8, r8)
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    206e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2070:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2072:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2074:	46c0      	nop			; (mov r8, r8)
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	46c0      	nop			; (mov r8, r8)
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	46c0      	nop			; (mov r8, r8)
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	46c0      	nop			; (mov r8, r8)
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	46c0      	nop			; (mov r8, r8)
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	46c0      	nop			; (mov r8, r8)
    208a:	e001      	b.n	2090 <STACK_SIZE+0x90>
    208c:	41004400 	.word	0x41004400
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2090:	46c0      	nop			; (mov r8, r8)
    2092:	46c0      	nop			; (mov r8, r8)
    2094:	46c0      	nop			; (mov r8, r8)
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	46c0      	nop			; (mov r8, r8)
    209a:	46c0      	nop			; (mov r8, r8)
    209c:	46c0      	nop			; (mov r8, r8)
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	46c0      	nop			; (mov r8, r8)
    20a2:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    20a4:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    20a6:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    20a8:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    20aa:	46c0      	nop			; (mov r8, r8)
    20ac:	46c0      	nop			; (mov r8, r8)
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	46c0      	nop			; (mov r8, r8)
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	46c0      	nop			; (mov r8, r8)
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	46c0      	nop			; (mov r8, r8)
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	46c0      	nop			; (mov r8, r8)
    20be:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    20c0:	46c0      	nop			; (mov r8, r8)
    20c2:	46c0      	nop			; (mov r8, r8)
    20c4:	46c0      	nop			; (mov r8, r8)
    20c6:	46c0      	nop			; (mov r8, r8)
    20c8:	46c0      	nop			; (mov r8, r8)
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	46c0      	nop			; (mov r8, r8)
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	46c0      	nop			; (mov r8, r8)
    20d2:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    20d4:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    20d6:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    20d8:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	46c0      	nop			; (mov r8, r8)
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	46c0      	nop			; (mov r8, r8)
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	46c0      	nop			; (mov r8, r8)
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	46c0      	nop			; (mov r8, r8)
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	46c0      	nop			; (mov r8, r8)
    20ee:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    20f0:	46c0      	nop			; (mov r8, r8)
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	46c0      	nop			; (mov r8, r8)
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	46c0      	nop			; (mov r8, r8)
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	46c0      	nop			; (mov r8, r8)
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	46c0      	nop			; (mov r8, r8)
    2102:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2104:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	46c0      	nop			; (mov r8, r8)
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	46c0      	nop			; (mov r8, r8)
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	46c0      	nop			; (mov r8, r8)
    2112:	46c0      	nop			; (mov r8, r8)
    2114:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2116:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2118:	46c0      	nop			; (mov r8, r8)
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	46c0      	nop			; (mov r8, r8)
    211e:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2120:	46c0      	nop			; (mov r8, r8)
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	46c0      	nop			; (mov r8, r8)
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	46c0      	nop			; (mov r8, r8)
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	46c0      	nop			; (mov r8, r8)
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	46c0      	nop			; (mov r8, r8)
    2132:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2134:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	46c0      	nop			; (mov r8, r8)
    213a:	46c0      	nop			; (mov r8, r8)
    213c:	46c0      	nop			; (mov r8, r8)
    213e:	46c0      	nop			; (mov r8, r8)
    2140:	46c0      	nop			; (mov r8, r8)
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2146:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2148:	46c0      	nop			; (mov r8, r8)
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	46c0      	nop			; (mov r8, r8)
    214e:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2150:	46c0      	nop			; (mov r8, r8)
    2152:	46c0      	nop			; (mov r8, r8)
    2154:	46c0      	nop			; (mov r8, r8)
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	46c0      	nop			; (mov r8, r8)
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	46c0      	nop			; (mov r8, r8)
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	46c0      	nop			; (mov r8, r8)
    2162:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2164:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	46c0      	nop			; (mov r8, r8)
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	46c0      	nop			; (mov r8, r8)
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	46c0      	nop			; (mov r8, r8)
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2176:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2178:	46c0      	nop			; (mov r8, r8)
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	46c0      	nop			; (mov r8, r8)
    217e:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2180:	46c0      	nop			; (mov r8, r8)
    2182:	46c0      	nop			; (mov r8, r8)
    2184:	46c0      	nop			; (mov r8, r8)
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	46c0      	nop			; (mov r8, r8)
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	46c0      	nop			; (mov r8, r8)
    218e:	46c0      	nop			; (mov r8, r8)
    2190:	46c0      	nop			; (mov r8, r8)
    2192:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2194:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	46c0      	nop			; (mov r8, r8)
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	46c0      	nop			; (mov r8, r8)
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	46c0      	nop			; (mov r8, r8)
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21a6:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    21a8:	46c0      	nop			; (mov r8, r8)
    21aa:	46c0      	nop			; (mov r8, r8)
    21ac:	46c0      	nop			; (mov r8, r8)
    21ae:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    21b0:	619a      	str	r2, [r3, #24]
	
	//BLUE
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    21b2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21b4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	46c0      	nop			; (mov r8, r8)
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	46c0      	nop			; (mov r8, r8)
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	46c0      	nop			; (mov r8, r8)
    21c2:	46c0      	nop			; (mov r8, r8)
    21c4:	46c0      	nop			; (mov r8, r8)
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	46c0      	nop			; (mov r8, r8)
    21ca:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    21cc:	46c0      	nop			; (mov r8, r8)
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	46c0      	nop			; (mov r8, r8)
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	46c0      	nop			; (mov r8, r8)
    21d6:	46c0      	nop			; (mov r8, r8)
    21d8:	46c0      	nop			; (mov r8, r8)
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	46c0      	nop			; (mov r8, r8)
    21de:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    21e0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    21e2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    21e4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	46c0      	nop			; (mov r8, r8)
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	46c0      	nop			; (mov r8, r8)
    21ee:	46c0      	nop			; (mov r8, r8)
    21f0:	46c0      	nop			; (mov r8, r8)
    21f2:	46c0      	nop			; (mov r8, r8)
    21f4:	46c0      	nop			; (mov r8, r8)
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	46c0      	nop			; (mov r8, r8)
    21fa:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    21fc:	46c0      	nop			; (mov r8, r8)
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	46c0      	nop			; (mov r8, r8)
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	46c0      	nop			; (mov r8, r8)
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	46c0      	nop			; (mov r8, r8)
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	46c0      	nop			; (mov r8, r8)
    220e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2210:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2212:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2214:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	46c0      	nop			; (mov r8, r8)
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	46c0      	nop			; (mov r8, r8)
    221e:	46c0      	nop			; (mov r8, r8)
    2220:	46c0      	nop			; (mov r8, r8)
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	46c0      	nop			; (mov r8, r8)
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	46c0      	nop			; (mov r8, r8)
    222a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    222c:	46c0      	nop			; (mov r8, r8)
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	46c0      	nop			; (mov r8, r8)
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	46c0      	nop			; (mov r8, r8)
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	46c0      	nop			; (mov r8, r8)
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	46c0      	nop			; (mov r8, r8)
    223e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2240:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2242:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2244:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	46c0      	nop			; (mov r8, r8)
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	46c0      	nop			; (mov r8, r8)
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	46c0      	nop			; (mov r8, r8)
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	46c0      	nop			; (mov r8, r8)
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	46c0      	nop			; (mov r8, r8)
    225a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    225c:	46c0      	nop			; (mov r8, r8)
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	46c0      	nop			; (mov r8, r8)
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	46c0      	nop			; (mov r8, r8)
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	46c0      	nop			; (mov r8, r8)
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	46c0      	nop			; (mov r8, r8)
    226e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2270:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2272:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2274:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	46c0      	nop			; (mov r8, r8)
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	46c0      	nop			; (mov r8, r8)
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	46c0      	nop			; (mov r8, r8)
    2282:	46c0      	nop			; (mov r8, r8)
    2284:	46c0      	nop			; (mov r8, r8)
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	46c0      	nop			; (mov r8, r8)
    228a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    228c:	46c0      	nop			; (mov r8, r8)
    228e:	46c0      	nop			; (mov r8, r8)
    2290:	46c0      	nop			; (mov r8, r8)
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	46c0      	nop			; (mov r8, r8)
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	46c0      	nop			; (mov r8, r8)
    229a:	46c0      	nop			; (mov r8, r8)
    229c:	46c0      	nop			; (mov r8, r8)
    229e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    22a0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    22a2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    22a4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	46c0      	nop			; (mov r8, r8)
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	46c0      	nop			; (mov r8, r8)
    22ae:	46c0      	nop			; (mov r8, r8)
    22b0:	46c0      	nop			; (mov r8, r8)
    22b2:	46c0      	nop			; (mov r8, r8)
    22b4:	46c0      	nop			; (mov r8, r8)
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	46c0      	nop			; (mov r8, r8)
    22ba:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    22bc:	46c0      	nop			; (mov r8, r8)
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	46c0      	nop			; (mov r8, r8)
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	46c0      	nop			; (mov r8, r8)
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	46c0      	nop			; (mov r8, r8)
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	46c0      	nop			; (mov r8, r8)
    22ce:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    22d0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    22d2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    22d4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	46c0      	nop			; (mov r8, r8)
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	46c0      	nop			; (mov r8, r8)
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	46c0      	nop			; (mov r8, r8)
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	46c0      	nop			; (mov r8, r8)
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	46c0      	nop			; (mov r8, r8)
    22ea:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    22ec:	46c0      	nop			; (mov r8, r8)
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	46c0      	nop			; (mov r8, r8)
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	46c0      	nop			; (mov r8, r8)
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	46c0      	nop			; (mov r8, r8)
    22fa:	46c0      	nop			; (mov r8, r8)
    22fc:	46c0      	nop			; (mov r8, r8)
    22fe:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2300:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2302:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2304:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	46c0      	nop			; (mov r8, r8)
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	46c0      	nop			; (mov r8, r8)
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	46c0      	nop			; (mov r8, r8)
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	46c0      	nop			; (mov r8, r8)
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	46c0      	nop			; (mov r8, r8)
    231a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    231c:	46c0      	nop			; (mov r8, r8)
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	46c0      	nop			; (mov r8, r8)
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	46c0      	nop			; (mov r8, r8)
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	46c0      	nop			; (mov r8, r8)
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	46c0      	nop			; (mov r8, r8)
    232e:	46c0      	nop			; (mov r8, r8)
	
	
	
	
}
    2330:	4770      	bx	lr
    2332:	46c0      	nop			; (mov r8, r8)

00002334 <blue>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2334:	4b74      	ldr	r3, [pc, #464]	; (2508 <blue+0x1d4>)
    2336:	2280      	movs	r2, #128	; 0x80
    2338:	0192      	lsls	r2, r2, #6
    233a:	619a      	str	r2, [r3, #24]

void blue()
{
	//GREEN
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    233c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    233e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2340:	46c0      	nop			; (mov r8, r8)
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	46c0      	nop			; (mov r8, r8)
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	46c0      	nop			; (mov r8, r8)
    234a:	46c0      	nop			; (mov r8, r8)
    234c:	46c0      	nop			; (mov r8, r8)
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	46c0      	nop			; (mov r8, r8)
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2356:	46c0      	nop			; (mov r8, r8)
    2358:	46c0      	nop			; (mov r8, r8)
    235a:	46c0      	nop			; (mov r8, r8)
    235c:	46c0      	nop			; (mov r8, r8)
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	46c0      	nop			; (mov r8, r8)
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	46c0      	nop			; (mov r8, r8)
    2366:	46c0      	nop			; (mov r8, r8)
    2368:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    236a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    236c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    236e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2370:	46c0      	nop			; (mov r8, r8)
    2372:	46c0      	nop			; (mov r8, r8)
    2374:	46c0      	nop			; (mov r8, r8)
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	46c0      	nop			; (mov r8, r8)
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	46c0      	nop			; (mov r8, r8)
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	46c0      	nop			; (mov r8, r8)
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	46c0      	nop			; (mov r8, r8)
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	46c0      	nop			; (mov r8, r8)
    238e:	46c0      	nop			; (mov r8, r8)
    2390:	46c0      	nop			; (mov r8, r8)
    2392:	46c0      	nop			; (mov r8, r8)
    2394:	46c0      	nop			; (mov r8, r8)
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    239a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    239c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    239e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    23a0:	46c0      	nop			; (mov r8, r8)
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	46c0      	nop			; (mov r8, r8)
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	46c0      	nop			; (mov r8, r8)
    23aa:	46c0      	nop			; (mov r8, r8)
    23ac:	46c0      	nop			; (mov r8, r8)
    23ae:	46c0      	nop			; (mov r8, r8)
    23b0:	46c0      	nop			; (mov r8, r8)
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	46c0      	nop			; (mov r8, r8)
    23ba:	46c0      	nop			; (mov r8, r8)
    23bc:	46c0      	nop			; (mov r8, r8)
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	46c0      	nop			; (mov r8, r8)
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	46c0      	nop			; (mov r8, r8)
    23c6:	46c0      	nop			; (mov r8, r8)
    23c8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    23ca:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    23cc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    23ce:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    23d0:	46c0      	nop			; (mov r8, r8)
    23d2:	46c0      	nop			; (mov r8, r8)
    23d4:	46c0      	nop			; (mov r8, r8)
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	46c0      	nop			; (mov r8, r8)
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	46c0      	nop			; (mov r8, r8)
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	46c0      	nop			; (mov r8, r8)
    23e2:	46c0      	nop			; (mov r8, r8)
    23e4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	46c0      	nop			; (mov r8, r8)
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	46c0      	nop			; (mov r8, r8)
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	46c0      	nop			; (mov r8, r8)
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	46c0      	nop			; (mov r8, r8)
    23f6:	46c0      	nop			; (mov r8, r8)
    23f8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    23fa:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    23fc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    23fe:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2400:	46c0      	nop			; (mov r8, r8)
    2402:	46c0      	nop			; (mov r8, r8)
    2404:	46c0      	nop			; (mov r8, r8)
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	46c0      	nop			; (mov r8, r8)
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	46c0      	nop			; (mov r8, r8)
    240e:	46c0      	nop			; (mov r8, r8)
    2410:	46c0      	nop			; (mov r8, r8)
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	46c0      	nop			; (mov r8, r8)
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	46c0      	nop			; (mov r8, r8)
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	46c0      	nop			; (mov r8, r8)
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	46c0      	nop			; (mov r8, r8)
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    242a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    242c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    242e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2430:	46c0      	nop			; (mov r8, r8)
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	46c0      	nop			; (mov r8, r8)
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	46c0      	nop			; (mov r8, r8)
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	46c0      	nop			; (mov r8, r8)
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	46c0      	nop			; (mov r8, r8)
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	46c0      	nop			; (mov r8, r8)
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	46c0      	nop			; (mov r8, r8)
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	46c0      	nop			; (mov r8, r8)
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	46c0      	nop			; (mov r8, r8)
    2456:	46c0      	nop			; (mov r8, r8)
    2458:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    245a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    245c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    245e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2460:	46c0      	nop			; (mov r8, r8)
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	46c0      	nop			; (mov r8, r8)
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	46c0      	nop			; (mov r8, r8)
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	46c0      	nop			; (mov r8, r8)
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	46c0      	nop			; (mov r8, r8)
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	46c0      	nop			; (mov r8, r8)
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	46c0      	nop			; (mov r8, r8)
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	46c0      	nop			; (mov r8, r8)
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	46c0      	nop			; (mov r8, r8)
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    248a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    248c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    248e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2490:	46c0      	nop			; (mov r8, r8)
    2492:	46c0      	nop			; (mov r8, r8)
    2494:	46c0      	nop			; (mov r8, r8)
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	46c0      	nop			; (mov r8, r8)
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	46c0      	nop			; (mov r8, r8)
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	46c0      	nop			; (mov r8, r8)
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    24a6:	46c0      	nop			; (mov r8, r8)
    24a8:	46c0      	nop			; (mov r8, r8)
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	46c0      	nop			; (mov r8, r8)
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	46c0      	nop			; (mov r8, r8)
    24b2:	46c0      	nop			; (mov r8, r8)
    24b4:	46c0      	nop			; (mov r8, r8)
    24b6:	46c0      	nop			; (mov r8, r8)
    24b8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    24ba:	619a      	str	r2, [r3, #24]
	
	//RED
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    24bc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    24be:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    24c0:	46c0      	nop			; (mov r8, r8)
    24c2:	46c0      	nop			; (mov r8, r8)
    24c4:	46c0      	nop			; (mov r8, r8)
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	46c0      	nop			; (mov r8, r8)
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	46c0      	nop			; (mov r8, r8)
    24ce:	46c0      	nop			; (mov r8, r8)
    24d0:	46c0      	nop			; (mov r8, r8)
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	46c0      	nop			; (mov r8, r8)
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	46c0      	nop			; (mov r8, r8)
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	46c0      	nop			; (mov r8, r8)
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	46c0      	nop			; (mov r8, r8)
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    24ea:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    24ec:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    24ee:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    24f0:	46c0      	nop			; (mov r8, r8)
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	46c0      	nop			; (mov r8, r8)
    24f6:	46c0      	nop			; (mov r8, r8)
    24f8:	46c0      	nop			; (mov r8, r8)
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	46c0      	nop			; (mov r8, r8)
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	46c0      	nop			; (mov r8, r8)
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	46c0      	nop			; (mov r8, r8)
    2506:	e001      	b.n	250c <blue+0x1d8>
    2508:	41004400 	.word	0x41004400
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    250c:	46c0      	nop			; (mov r8, r8)
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	46c0      	nop			; (mov r8, r8)
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	46c0      	nop			; (mov r8, r8)
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	46c0      	nop			; (mov r8, r8)
    251a:	46c0      	nop			; (mov r8, r8)
    251c:	46c0      	nop			; (mov r8, r8)
    251e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2520:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2522:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2524:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2526:	46c0      	nop			; (mov r8, r8)
    2528:	46c0      	nop			; (mov r8, r8)
    252a:	46c0      	nop			; (mov r8, r8)
    252c:	46c0      	nop			; (mov r8, r8)
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	46c0      	nop			; (mov r8, r8)
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	46c0      	nop			; (mov r8, r8)
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	46c0      	nop			; (mov r8, r8)
    253a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    253c:	46c0      	nop			; (mov r8, r8)
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	46c0      	nop			; (mov r8, r8)
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	46c0      	nop			; (mov r8, r8)
    2546:	46c0      	nop			; (mov r8, r8)
    2548:	46c0      	nop			; (mov r8, r8)
    254a:	46c0      	nop			; (mov r8, r8)
    254c:	46c0      	nop			; (mov r8, r8)
    254e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2550:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2552:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2554:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	46c0      	nop			; (mov r8, r8)
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	46c0      	nop			; (mov r8, r8)
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	46c0      	nop			; (mov r8, r8)
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	46c0      	nop			; (mov r8, r8)
    2566:	46c0      	nop			; (mov r8, r8)
    2568:	46c0      	nop			; (mov r8, r8)
    256a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    256c:	46c0      	nop			; (mov r8, r8)
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	46c0      	nop			; (mov r8, r8)
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	46c0      	nop			; (mov r8, r8)
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	46c0      	nop			; (mov r8, r8)
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	46c0      	nop			; (mov r8, r8)
    257e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2580:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2582:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2584:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	46c0      	nop			; (mov r8, r8)
    258a:	46c0      	nop			; (mov r8, r8)
    258c:	46c0      	nop			; (mov r8, r8)
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	46c0      	nop			; (mov r8, r8)
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	46c0      	nop			; (mov r8, r8)
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	46c0      	nop			; (mov r8, r8)
    259a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    259c:	46c0      	nop			; (mov r8, r8)
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	46c0      	nop			; (mov r8, r8)
    25a2:	46c0      	nop			; (mov r8, r8)
    25a4:	46c0      	nop			; (mov r8, r8)
    25a6:	46c0      	nop			; (mov r8, r8)
    25a8:	46c0      	nop			; (mov r8, r8)
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	46c0      	nop			; (mov r8, r8)
    25ae:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    25b0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    25b2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    25b4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	46c0      	nop			; (mov r8, r8)
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	46c0      	nop			; (mov r8, r8)
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	46c0      	nop			; (mov r8, r8)
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	46c0      	nop			; (mov r8, r8)
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	46c0      	nop			; (mov r8, r8)
    25ca:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    25cc:	46c0      	nop			; (mov r8, r8)
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	46c0      	nop			; (mov r8, r8)
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	46c0      	nop			; (mov r8, r8)
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	46c0      	nop			; (mov r8, r8)
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	46c0      	nop			; (mov r8, r8)
    25de:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    25e0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    25e2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    25e4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    25e6:	46c0      	nop			; (mov r8, r8)
    25e8:	46c0      	nop			; (mov r8, r8)
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	46c0      	nop			; (mov r8, r8)
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	46c0      	nop			; (mov r8, r8)
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	46c0      	nop			; (mov r8, r8)
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	46c0      	nop			; (mov r8, r8)
    25fa:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    25fc:	46c0      	nop			; (mov r8, r8)
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	46c0      	nop			; (mov r8, r8)
    2602:	46c0      	nop			; (mov r8, r8)
    2604:	46c0      	nop			; (mov r8, r8)
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	46c0      	nop			; (mov r8, r8)
    260a:	46c0      	nop			; (mov r8, r8)
    260c:	46c0      	nop			; (mov r8, r8)
    260e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2610:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2612:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2614:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	46c0      	nop			; (mov r8, r8)
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	46c0      	nop			; (mov r8, r8)
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	46c0      	nop			; (mov r8, r8)
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	46c0      	nop			; (mov r8, r8)
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	46c0      	nop			; (mov r8, r8)
    262a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    262c:	46c0      	nop			; (mov r8, r8)
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	46c0      	nop			; (mov r8, r8)
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	46c0      	nop			; (mov r8, r8)
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	46c0      	nop			; (mov r8, r8)
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	46c0      	nop			; (mov r8, r8)
    263e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2640:	619a      	str	r2, [r3, #24]
	
	//BLUE
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2642:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2644:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	46c0      	nop			; (mov r8, r8)
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	46c0      	nop			; (mov r8, r8)
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	46c0      	nop			; (mov r8, r8)
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	46c0      	nop			; (mov r8, r8)
    2656:	46c0      	nop			; (mov r8, r8)
    2658:	46c0      	nop			; (mov r8, r8)
    265a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    265c:	46c0      	nop			; (mov r8, r8)
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	46c0      	nop			; (mov r8, r8)
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	46c0      	nop			; (mov r8, r8)
    2666:	46c0      	nop			; (mov r8, r8)
    2668:	46c0      	nop			; (mov r8, r8)
    266a:	46c0      	nop			; (mov r8, r8)
    266c:	46c0      	nop			; (mov r8, r8)
    266e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2670:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2672:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2674:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	46c0      	nop			; (mov r8, r8)
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	46c0      	nop			; (mov r8, r8)
    267e:	46c0      	nop			; (mov r8, r8)
    2680:	46c0      	nop			; (mov r8, r8)
    2682:	46c0      	nop			; (mov r8, r8)
    2684:	46c0      	nop			; (mov r8, r8)
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	46c0      	nop			; (mov r8, r8)
    268a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    268c:	46c0      	nop			; (mov r8, r8)
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	46c0      	nop			; (mov r8, r8)
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	46c0      	nop			; (mov r8, r8)
    2696:	46c0      	nop			; (mov r8, r8)
    2698:	46c0      	nop			; (mov r8, r8)
    269a:	46c0      	nop			; (mov r8, r8)
    269c:	46c0      	nop			; (mov r8, r8)
    269e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    26a0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    26a2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    26a4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	46c0      	nop			; (mov r8, r8)
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	46c0      	nop			; (mov r8, r8)
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	46c0      	nop			; (mov r8, r8)
    26b2:	46c0      	nop			; (mov r8, r8)
    26b4:	46c0      	nop			; (mov r8, r8)
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	46c0      	nop			; (mov r8, r8)
    26ba:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    26bc:	46c0      	nop			; (mov r8, r8)
    26be:	46c0      	nop			; (mov r8, r8)
    26c0:	46c0      	nop			; (mov r8, r8)
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	46c0      	nop			; (mov r8, r8)
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	46c0      	nop			; (mov r8, r8)
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	46c0      	nop			; (mov r8, r8)
    26ce:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    26d0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    26d2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    26d4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	46c0      	nop			; (mov r8, r8)
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	46c0      	nop			; (mov r8, r8)
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	46c0      	nop			; (mov r8, r8)
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	46c0      	nop			; (mov r8, r8)
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	46c0      	nop			; (mov r8, r8)
    26ea:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    26ec:	46c0      	nop			; (mov r8, r8)
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	46c0      	nop			; (mov r8, r8)
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	46c0      	nop			; (mov r8, r8)
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	46c0      	nop			; (mov r8, r8)
    26fe:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2700:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	46c0      	nop			; (mov r8, r8)
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	46c0      	nop			; (mov r8, r8)
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	46c0      	nop			; (mov r8, r8)
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2712:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2714:	46c0      	nop			; (mov r8, r8)
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	46c0      	nop			; (mov r8, r8)
    271a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    271c:	46c0      	nop			; (mov r8, r8)
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	46c0      	nop			; (mov r8, r8)
    2722:	46c0      	nop			; (mov r8, r8)
    2724:	46c0      	nop			; (mov r8, r8)
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	46c0      	nop			; (mov r8, r8)
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	46c0      	nop			; (mov r8, r8)
    272e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2730:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	46c0      	nop			; (mov r8, r8)
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	46c0      	nop			; (mov r8, r8)
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	46c0      	nop			; (mov r8, r8)
    273e:	46c0      	nop			; (mov r8, r8)
    2740:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2742:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2744:	46c0      	nop			; (mov r8, r8)
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	46c0      	nop			; (mov r8, r8)
    274a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    274c:	46c0      	nop			; (mov r8, r8)
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	46c0      	nop			; (mov r8, r8)
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	46c0      	nop			; (mov r8, r8)
    2756:	46c0      	nop			; (mov r8, r8)
    2758:	46c0      	nop			; (mov r8, r8)
    275a:	46c0      	nop			; (mov r8, r8)
    275c:	46c0      	nop			; (mov r8, r8)
    275e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2760:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	46c0      	nop			; (mov r8, r8)
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	46c0      	nop			; (mov r8, r8)
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	46c0      	nop			; (mov r8, r8)
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2772:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2774:	46c0      	nop			; (mov r8, r8)
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	46c0      	nop			; (mov r8, r8)
    277a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    277c:	46c0      	nop			; (mov r8, r8)
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	46c0      	nop			; (mov r8, r8)
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	46c0      	nop			; (mov r8, r8)
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	46c0      	nop			; (mov r8, r8)
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	46c0      	nop			; (mov r8, r8)
    278e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2790:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	46c0      	nop			; (mov r8, r8)
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	46c0      	nop			; (mov r8, r8)
    279a:	46c0      	nop			; (mov r8, r8)
    279c:	46c0      	nop			; (mov r8, r8)
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    27a2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    27a4:	46c0      	nop			; (mov r8, r8)
    27a6:	46c0      	nop			; (mov r8, r8)
    27a8:	46c0      	nop			; (mov r8, r8)
    27aa:	46c0      	nop			; (mov r8, r8)
	
}
    27ac:	4770      	bx	lr
    27ae:	46c0      	nop			; (mov r8, r8)

000027b0 <cyan>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    27b0:	4b76      	ldr	r3, [pc, #472]	; (298c <cyan+0x1dc>)
    27b2:	2280      	movs	r2, #128	; 0x80
    27b4:	0192      	lsls	r2, r2, #6
    27b6:	619a      	str	r2, [r3, #24]

void cyan(void)
{
	//GREEN
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    27b8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    27ba:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    27bc:	46c0      	nop			; (mov r8, r8)
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	46c0      	nop			; (mov r8, r8)
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	46c0      	nop			; (mov r8, r8)
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	46c0      	nop			; (mov r8, r8)
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	46c0      	nop			; (mov r8, r8)
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	46c0      	nop			; (mov r8, r8)
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	46c0      	nop			; (mov r8, r8)
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	46c0      	nop			; (mov r8, r8)
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	46c0      	nop			; (mov r8, r8)
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    27e6:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    27e8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    27ea:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    27ec:	46c0      	nop			; (mov r8, r8)
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	46c0      	nop			; (mov r8, r8)
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	46c0      	nop			; (mov r8, r8)
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	46c0      	nop			; (mov r8, r8)
    27fa:	46c0      	nop			; (mov r8, r8)
    27fc:	46c0      	nop			; (mov r8, r8)
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2802:	46c0      	nop			; (mov r8, r8)
    2804:	46c0      	nop			; (mov r8, r8)
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	46c0      	nop			; (mov r8, r8)
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	46c0      	nop			; (mov r8, r8)
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	46c0      	nop			; (mov r8, r8)
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2816:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2818:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    281a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    281c:	46c0      	nop			; (mov r8, r8)
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	46c0      	nop			; (mov r8, r8)
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	46c0      	nop			; (mov r8, r8)
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	46c0      	nop			; (mov r8, r8)
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	46c0      	nop			; (mov r8, r8)
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2832:	46c0      	nop			; (mov r8, r8)
    2834:	46c0      	nop			; (mov r8, r8)
    2836:	46c0      	nop			; (mov r8, r8)
    2838:	46c0      	nop			; (mov r8, r8)
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	46c0      	nop			; (mov r8, r8)
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	46c0      	nop			; (mov r8, r8)
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2846:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2848:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    284a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    284c:	46c0      	nop			; (mov r8, r8)
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	46c0      	nop			; (mov r8, r8)
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	46c0      	nop			; (mov r8, r8)
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	46c0      	nop			; (mov r8, r8)
    285a:	46c0      	nop			; (mov r8, r8)
    285c:	46c0      	nop			; (mov r8, r8)
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	46c0      	nop			; (mov r8, r8)
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	46c0      	nop			; (mov r8, r8)
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	46c0      	nop			; (mov r8, r8)
    286e:	46c0      	nop			; (mov r8, r8)
    2870:	46c0      	nop			; (mov r8, r8)
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2876:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2878:	46c0      	nop			; (mov r8, r8)
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	46c0      	nop			; (mov r8, r8)
    287e:	46c0      	nop			; (mov r8, r8)
    2880:	46c0      	nop			; (mov r8, r8)
    2882:	46c0      	nop			; (mov r8, r8)
    2884:	46c0      	nop			; (mov r8, r8)
    2886:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2888:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	46c0      	nop			; (mov r8, r8)
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	46c0      	nop			; (mov r8, r8)
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	46c0      	nop			; (mov r8, r8)
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	46c0      	nop			; (mov r8, r8)
    289e:	46c0      	nop			; (mov r8, r8)
    28a0:	46c0      	nop			; (mov r8, r8)
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    28a6:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    28a8:	46c0      	nop			; (mov r8, r8)
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	46c0      	nop			; (mov r8, r8)
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	46c0      	nop			; (mov r8, r8)
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	46c0      	nop			; (mov r8, r8)
    28b6:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    28b8:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    28ba:	46c0      	nop			; (mov r8, r8)
    28bc:	46c0      	nop			; (mov r8, r8)
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	46c0      	nop			; (mov r8, r8)
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	46c0      	nop			; (mov r8, r8)
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	46c0      	nop			; (mov r8, r8)
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	46c0      	nop			; (mov r8, r8)
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    28d6:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    28d8:	46c0      	nop			; (mov r8, r8)
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	46c0      	nop			; (mov r8, r8)
    28de:	46c0      	nop			; (mov r8, r8)
    28e0:	46c0      	nop			; (mov r8, r8)
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	46c0      	nop			; (mov r8, r8)
    28e6:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    28e8:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    28ea:	46c0      	nop			; (mov r8, r8)
    28ec:	46c0      	nop			; (mov r8, r8)
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    28f2:	46c0      	nop			; (mov r8, r8)
    28f4:	46c0      	nop			; (mov r8, r8)
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	46c0      	nop			; (mov r8, r8)
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	46c0      	nop			; (mov r8, r8)
    28fe:	46c0      	nop			; (mov r8, r8)
    2900:	46c0      	nop			; (mov r8, r8)
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2906:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2908:	46c0      	nop			; (mov r8, r8)
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	46c0      	nop			; (mov r8, r8)
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	46c0      	nop			; (mov r8, r8)
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	46c0      	nop			; (mov r8, r8)
    2916:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2918:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	46c0      	nop			; (mov r8, r8)
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2922:	619a      	str	r2, [r3, #24]
	
	//RED
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2924:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2926:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2928:	46c0      	nop			; (mov r8, r8)
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	46c0      	nop			; (mov r8, r8)
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	46c0      	nop			; (mov r8, r8)
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	46c0      	nop			; (mov r8, r8)
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	46c0      	nop			; (mov r8, r8)
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	46c0      	nop			; (mov r8, r8)
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	46c0      	nop			; (mov r8, r8)
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	46c0      	nop			; (mov r8, r8)
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	46c0      	nop			; (mov r8, r8)
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2952:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2954:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2956:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2958:	46c0      	nop			; (mov r8, r8)
    295a:	46c0      	nop			; (mov r8, r8)
    295c:	46c0      	nop			; (mov r8, r8)
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	46c0      	nop			; (mov r8, r8)
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	46c0      	nop			; (mov r8, r8)
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	46c0      	nop			; (mov r8, r8)
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	46c0      	nop			; (mov r8, r8)
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	46c0      	nop			; (mov r8, r8)
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	46c0      	nop			; (mov r8, r8)
    297a:	46c0      	nop			; (mov r8, r8)
    297c:	46c0      	nop			; (mov r8, r8)
    297e:	46c0      	nop			; (mov r8, r8)
    2980:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2982:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2984:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2986:	615a      	str	r2, [r3, #20]
    2988:	e002      	b.n	2990 <cyan+0x1e0>
    298a:	46c0      	nop			; (mov r8, r8)
    298c:	41004400 	.word	0x41004400
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2990:	46c0      	nop			; (mov r8, r8)
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	46c0      	nop			; (mov r8, r8)
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	46c0      	nop			; (mov r8, r8)
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	46c0      	nop			; (mov r8, r8)
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	46c0      	nop			; (mov r8, r8)
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    29a6:	46c0      	nop			; (mov r8, r8)
    29a8:	46c0      	nop			; (mov r8, r8)
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	46c0      	nop			; (mov r8, r8)
    29ae:	46c0      	nop			; (mov r8, r8)
    29b0:	46c0      	nop			; (mov r8, r8)
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	46c0      	nop			; (mov r8, r8)
    29b6:	46c0      	nop			; (mov r8, r8)
    29b8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    29ba:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    29bc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29be:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    29c0:	46c0      	nop			; (mov r8, r8)
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	46c0      	nop			; (mov r8, r8)
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	46c0      	nop			; (mov r8, r8)
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	46c0      	nop			; (mov r8, r8)
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	46c0      	nop			; (mov r8, r8)
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	46c0      	nop			; (mov r8, r8)
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	46c0      	nop			; (mov r8, r8)
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	46c0      	nop			; (mov r8, r8)
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	46c0      	nop			; (mov r8, r8)
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    29ea:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    29ec:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29ee:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    29f0:	46c0      	nop			; (mov r8, r8)
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	46c0      	nop			; (mov r8, r8)
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	46c0      	nop			; (mov r8, r8)
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	46c0      	nop			; (mov r8, r8)
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	46c0      	nop			; (mov r8, r8)
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	46c0      	nop			; (mov r8, r8)
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	46c0      	nop			; (mov r8, r8)
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	46c0      	nop			; (mov r8, r8)
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	46c0      	nop			; (mov r8, r8)
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2a1a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2a1c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2a1e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2a20:	46c0      	nop			; (mov r8, r8)
    2a22:	46c0      	nop			; (mov r8, r8)
    2a24:	46c0      	nop			; (mov r8, r8)
    2a26:	46c0      	nop			; (mov r8, r8)
    2a28:	46c0      	nop			; (mov r8, r8)
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	46c0      	nop			; (mov r8, r8)
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	46c0      	nop			; (mov r8, r8)
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	46c0      	nop			; (mov r8, r8)
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	46c0      	nop			; (mov r8, r8)
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	46c0      	nop			; (mov r8, r8)
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	46c0      	nop			; (mov r8, r8)
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2a4a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2a4c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2a4e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2a50:	46c0      	nop			; (mov r8, r8)
    2a52:	46c0      	nop			; (mov r8, r8)
    2a54:	46c0      	nop			; (mov r8, r8)
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	46c0      	nop			; (mov r8, r8)
    2a5a:	46c0      	nop			; (mov r8, r8)
    2a5c:	46c0      	nop			; (mov r8, r8)
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	46c0      	nop			; (mov r8, r8)
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	46c0      	nop			; (mov r8, r8)
    2a6a:	46c0      	nop			; (mov r8, r8)
    2a6c:	46c0      	nop			; (mov r8, r8)
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	46c0      	nop			; (mov r8, r8)
    2a72:	46c0      	nop			; (mov r8, r8)
    2a74:	46c0      	nop			; (mov r8, r8)
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2a7a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2a7c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2a7e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2a80:	46c0      	nop			; (mov r8, r8)
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	46c0      	nop			; (mov r8, r8)
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	46c0      	nop			; (mov r8, r8)
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	46c0      	nop			; (mov r8, r8)
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	46c0      	nop			; (mov r8, r8)
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	46c0      	nop			; (mov r8, r8)
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	46c0      	nop			; (mov r8, r8)
    2a9e:	46c0      	nop			; (mov r8, r8)
    2aa0:	46c0      	nop			; (mov r8, r8)
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	46c0      	nop			; (mov r8, r8)
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2aaa:	619a      	str	r2, [r3, #24]
	
	//BLUE
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2aac:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2aae:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2ab0:	46c0      	nop			; (mov r8, r8)
    2ab2:	46c0      	nop			; (mov r8, r8)
    2ab4:	46c0      	nop			; (mov r8, r8)
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	46c0      	nop			; (mov r8, r8)
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	46c0      	nop			; (mov r8, r8)
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	46c0      	nop			; (mov r8, r8)
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	46c0      	nop			; (mov r8, r8)
    2aca:	46c0      	nop			; (mov r8, r8)
    2acc:	46c0      	nop			; (mov r8, r8)
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	46c0      	nop			; (mov r8, r8)
    2ad2:	46c0      	nop			; (mov r8, r8)
    2ad4:	46c0      	nop			; (mov r8, r8)
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2ada:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2adc:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ade:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2ae0:	46c0      	nop			; (mov r8, r8)
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	46c0      	nop			; (mov r8, r8)
    2ae6:	46c0      	nop			; (mov r8, r8)
    2ae8:	46c0      	nop			; (mov r8, r8)
    2aea:	46c0      	nop			; (mov r8, r8)
    2aec:	46c0      	nop			; (mov r8, r8)
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	46c0      	nop			; (mov r8, r8)
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	46c0      	nop			; (mov r8, r8)
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	46c0      	nop			; (mov r8, r8)
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	46c0      	nop			; (mov r8, r8)
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	46c0      	nop			; (mov r8, r8)
    2b06:	46c0      	nop			; (mov r8, r8)
    2b08:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b0a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2b0c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b0e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2b10:	46c0      	nop			; (mov r8, r8)
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	46c0      	nop			; (mov r8, r8)
    2b16:	46c0      	nop			; (mov r8, r8)
    2b18:	46c0      	nop			; (mov r8, r8)
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	46c0      	nop			; (mov r8, r8)
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	46c0      	nop			; (mov r8, r8)
    2b22:	46c0      	nop			; (mov r8, r8)
    2b24:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	46c0      	nop			; (mov r8, r8)
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	46c0      	nop			; (mov r8, r8)
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	46c0      	nop			; (mov r8, r8)
    2b32:	46c0      	nop			; (mov r8, r8)
    2b34:	46c0      	nop			; (mov r8, r8)
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b3a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2b3c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b3e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2b40:	46c0      	nop			; (mov r8, r8)
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	46c0      	nop			; (mov r8, r8)
    2b46:	46c0      	nop			; (mov r8, r8)
    2b48:	46c0      	nop			; (mov r8, r8)
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	46c0      	nop			; (mov r8, r8)
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	46c0      	nop			; (mov r8, r8)
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	46c0      	nop			; (mov r8, r8)
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	46c0      	nop			; (mov r8, r8)
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	46c0      	nop			; (mov r8, r8)
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	46c0      	nop			; (mov r8, r8)
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b6a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2b6c:	46c0      	nop			; (mov r8, r8)
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	46c0      	nop			; (mov r8, r8)
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	46c0      	nop			; (mov r8, r8)
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	46c0      	nop			; (mov r8, r8)
    2b7a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2b7c:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	46c0      	nop			; (mov r8, r8)
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	46c0      	nop			; (mov r8, r8)
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	46c0      	nop			; (mov r8, r8)
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	46c0      	nop			; (mov r8, r8)
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	46c0      	nop			; (mov r8, r8)
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2b9a:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2b9c:	46c0      	nop			; (mov r8, r8)
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	46c0      	nop			; (mov r8, r8)
    2ba2:	46c0      	nop			; (mov r8, r8)
    2ba4:	46c0      	nop			; (mov r8, r8)
    2ba6:	46c0      	nop			; (mov r8, r8)
    2ba8:	46c0      	nop			; (mov r8, r8)
    2baa:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2bac:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	46c0      	nop			; (mov r8, r8)
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	46c0      	nop			; (mov r8, r8)
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	46c0      	nop			; (mov r8, r8)
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	46c0      	nop			; (mov r8, r8)
    2bc2:	46c0      	nop			; (mov r8, r8)
    2bc4:	46c0      	nop			; (mov r8, r8)
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2bca:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2bcc:	46c0      	nop			; (mov r8, r8)
    2bce:	46c0      	nop			; (mov r8, r8)
    2bd0:	46c0      	nop			; (mov r8, r8)
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	46c0      	nop			; (mov r8, r8)
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	46c0      	nop			; (mov r8, r8)
    2bda:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2bdc:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	46c0      	nop			; (mov r8, r8)
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	46c0      	nop			; (mov r8, r8)
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	46c0      	nop			; (mov r8, r8)
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	46c0      	nop			; (mov r8, r8)
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	46c0      	nop			; (mov r8, r8)
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2bfa:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2bfc:	46c0      	nop			; (mov r8, r8)
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	46c0      	nop			; (mov r8, r8)
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	46c0      	nop			; (mov r8, r8)
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	46c0      	nop			; (mov r8, r8)
    2c0a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2c0c:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	46c0      	nop			; (mov r8, r8)
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	46c0      	nop			; (mov r8, r8)
}
    2c16:	4770      	bx	lr

00002c18 <yellow>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2c18:	4b74      	ldr	r3, [pc, #464]	; (2dec <yellow+0x1d4>)
    2c1a:	2280      	movs	r2, #128	; 0x80
    2c1c:	0192      	lsls	r2, r2, #6
    2c1e:	619a      	str	r2, [r3, #24]

void yellow()
{
	//GREEN
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2c20:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2c22:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2c24:	46c0      	nop			; (mov r8, r8)
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	46c0      	nop			; (mov r8, r8)
    2c2a:	46c0      	nop			; (mov r8, r8)
    2c2c:	46c0      	nop			; (mov r8, r8)
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	46c0      	nop			; (mov r8, r8)
    2c32:	46c0      	nop			; (mov r8, r8)
    2c34:	46c0      	nop			; (mov r8, r8)
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2c3a:	46c0      	nop			; (mov r8, r8)
    2c3c:	46c0      	nop			; (mov r8, r8)
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	46c0      	nop			; (mov r8, r8)
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	46c0      	nop			; (mov r8, r8)
    2c46:	46c0      	nop			; (mov r8, r8)
    2c48:	46c0      	nop			; (mov r8, r8)
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2c4e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2c50:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2c52:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2c54:	46c0      	nop			; (mov r8, r8)
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	46c0      	nop			; (mov r8, r8)
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	46c0      	nop			; (mov r8, r8)
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	46c0      	nop			; (mov r8, r8)
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	46c0      	nop			; (mov r8, r8)
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	46c0      	nop			; (mov r8, r8)
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	46c0      	nop			; (mov r8, r8)
    2c72:	46c0      	nop			; (mov r8, r8)
    2c74:	46c0      	nop			; (mov r8, r8)
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	46c0      	nop			; (mov r8, r8)
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2c7e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2c80:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2c82:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2c84:	46c0      	nop			; (mov r8, r8)
    2c86:	46c0      	nop			; (mov r8, r8)
    2c88:	46c0      	nop			; (mov r8, r8)
    2c8a:	46c0      	nop			; (mov r8, r8)
    2c8c:	46c0      	nop			; (mov r8, r8)
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	46c0      	nop			; (mov r8, r8)
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	46c0      	nop			; (mov r8, r8)
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2c9a:	46c0      	nop			; (mov r8, r8)
    2c9c:	46c0      	nop			; (mov r8, r8)
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	46c0      	nop			; (mov r8, r8)
    2ca2:	46c0      	nop			; (mov r8, r8)
    2ca4:	46c0      	nop			; (mov r8, r8)
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	46c0      	nop			; (mov r8, r8)
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2cae:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2cb0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2cb2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2cb4:	46c0      	nop			; (mov r8, r8)
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	46c0      	nop			; (mov r8, r8)
    2cba:	46c0      	nop			; (mov r8, r8)
    2cbc:	46c0      	nop			; (mov r8, r8)
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	46c0      	nop			; (mov r8, r8)
    2cc2:	46c0      	nop			; (mov r8, r8)
    2cc4:	46c0      	nop			; (mov r8, r8)
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	46c0      	nop			; (mov r8, r8)
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	46c0      	nop			; (mov r8, r8)
    2cd2:	46c0      	nop			; (mov r8, r8)
    2cd4:	46c0      	nop			; (mov r8, r8)
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	46c0      	nop			; (mov r8, r8)
    2cda:	46c0      	nop			; (mov r8, r8)
    2cdc:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2cde:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2ce0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ce2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2ce4:	46c0      	nop			; (mov r8, r8)
    2ce6:	46c0      	nop			; (mov r8, r8)
    2ce8:	46c0      	nop			; (mov r8, r8)
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	46c0      	nop			; (mov r8, r8)
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	46c0      	nop			; (mov r8, r8)
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	46c0      	nop			; (mov r8, r8)
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	46c0      	nop			; (mov r8, r8)
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	46c0      	nop			; (mov r8, r8)
    2d02:	46c0      	nop			; (mov r8, r8)
    2d04:	46c0      	nop			; (mov r8, r8)
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	46c0      	nop			; (mov r8, r8)
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2d0e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2d10:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2d12:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2d14:	46c0      	nop			; (mov r8, r8)
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	46c0      	nop			; (mov r8, r8)
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	46c0      	nop			; (mov r8, r8)
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	46c0      	nop			; (mov r8, r8)
    2d22:	46c0      	nop			; (mov r8, r8)
    2d24:	46c0      	nop			; (mov r8, r8)
    2d26:	46c0      	nop			; (mov r8, r8)
    2d28:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	46c0      	nop			; (mov r8, r8)
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	46c0      	nop			; (mov r8, r8)
    2d32:	46c0      	nop			; (mov r8, r8)
    2d34:	46c0      	nop			; (mov r8, r8)
    2d36:	46c0      	nop			; (mov r8, r8)
    2d38:	46c0      	nop			; (mov r8, r8)
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2d3e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2d40:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2d42:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2d44:	46c0      	nop			; (mov r8, r8)
    2d46:	46c0      	nop			; (mov r8, r8)
    2d48:	46c0      	nop			; (mov r8, r8)
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	46c0      	nop			; (mov r8, r8)
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	46c0      	nop			; (mov r8, r8)
    2d52:	46c0      	nop			; (mov r8, r8)
    2d54:	46c0      	nop			; (mov r8, r8)
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2d5a:	46c0      	nop			; (mov r8, r8)
    2d5c:	46c0      	nop			; (mov r8, r8)
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	46c0      	nop			; (mov r8, r8)
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	46c0      	nop			; (mov r8, r8)
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	46c0      	nop			; (mov r8, r8)
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2d6e:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2d70:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2d72:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2d74:	46c0      	nop			; (mov r8, r8)
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	46c0      	nop			; (mov r8, r8)
    2d7a:	46c0      	nop			; (mov r8, r8)
    2d7c:	46c0      	nop			; (mov r8, r8)
    2d7e:	46c0      	nop			; (mov r8, r8)
    2d80:	46c0      	nop			; (mov r8, r8)
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	46c0      	nop			; (mov r8, r8)
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	46c0      	nop			; (mov r8, r8)
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	46c0      	nop			; (mov r8, r8)
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	46c0      	nop			; (mov r8, r8)
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	46c0      	nop			; (mov r8, r8)
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2d9e:	619a      	str	r2, [r3, #24]
	
	
	//RED
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2da0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2da2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2da4:	46c0      	nop			; (mov r8, r8)
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	46c0      	nop			; (mov r8, r8)
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	46c0      	nop			; (mov r8, r8)
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	46c0      	nop			; (mov r8, r8)
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	46c0      	nop			; (mov r8, r8)
    2db6:	46c0      	nop			; (mov r8, r8)
    2db8:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	46c0      	nop			; (mov r8, r8)
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	46c0      	nop			; (mov r8, r8)
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	46c0      	nop			; (mov r8, r8)
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	46c0      	nop			; (mov r8, r8)
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2dce:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2dd0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2dd2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2dd4:	46c0      	nop			; (mov r8, r8)
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	46c0      	nop			; (mov r8, r8)
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	46c0      	nop			; (mov r8, r8)
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	46c0      	nop			; (mov r8, r8)
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	46c0      	nop			; (mov r8, r8)
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	e001      	b.n	2df0 <yellow+0x1d8>
    2dec:	41004400 	.word	0x41004400
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2df0:	46c0      	nop			; (mov r8, r8)
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	46c0      	nop			; (mov r8, r8)
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	46c0      	nop			; (mov r8, r8)
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	46c0      	nop			; (mov r8, r8)
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	46c0      	nop			; (mov r8, r8)
    2e02:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2e04:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2e06:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2e08:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	46c0      	nop			; (mov r8, r8)
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	46c0      	nop			; (mov r8, r8)
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	46c0      	nop			; (mov r8, r8)
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	46c0      	nop			; (mov r8, r8)
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	46c0      	nop			; (mov r8, r8)
    2e1e:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2e20:	46c0      	nop			; (mov r8, r8)
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	46c0      	nop			; (mov r8, r8)
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	46c0      	nop			; (mov r8, r8)
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	46c0      	nop			; (mov r8, r8)
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	46c0      	nop			; (mov r8, r8)
    2e32:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2e34:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2e36:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2e38:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2e3a:	46c0      	nop			; (mov r8, r8)
    2e3c:	46c0      	nop			; (mov r8, r8)
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	46c0      	nop			; (mov r8, r8)
    2e42:	46c0      	nop			; (mov r8, r8)
    2e44:	46c0      	nop			; (mov r8, r8)
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	46c0      	nop			; (mov r8, r8)
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	46c0      	nop			; (mov r8, r8)
    2e4e:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2e50:	46c0      	nop			; (mov r8, r8)
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	46c0      	nop			; (mov r8, r8)
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	46c0      	nop			; (mov r8, r8)
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	46c0      	nop			; (mov r8, r8)
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	46c0      	nop			; (mov r8, r8)
    2e62:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2e64:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	46c0      	nop			; (mov r8, r8)
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	46c0      	nop			; (mov r8, r8)
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	46c0      	nop			; (mov r8, r8)
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2e76:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2e78:	46c0      	nop			; (mov r8, r8)
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	46c0      	nop			; (mov r8, r8)
    2e7e:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2e80:	46c0      	nop			; (mov r8, r8)
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	46c0      	nop			; (mov r8, r8)
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	46c0      	nop			; (mov r8, r8)
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	46c0      	nop			; (mov r8, r8)
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	46c0      	nop			; (mov r8, r8)
    2e92:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2e94:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	46c0      	nop			; (mov r8, r8)
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	46c0      	nop			; (mov r8, r8)
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	46c0      	nop			; (mov r8, r8)
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ea6:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2ea8:	46c0      	nop			; (mov r8, r8)
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	46c0      	nop			; (mov r8, r8)
    2eae:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2eb0:	46c0      	nop			; (mov r8, r8)
    2eb2:	46c0      	nop			; (mov r8, r8)
    2eb4:	46c0      	nop			; (mov r8, r8)
    2eb6:	46c0      	nop			; (mov r8, r8)
    2eb8:	46c0      	nop			; (mov r8, r8)
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	46c0      	nop			; (mov r8, r8)
    2ebe:	46c0      	nop			; (mov r8, r8)
    2ec0:	46c0      	nop			; (mov r8, r8)
    2ec2:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2ec4:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	46c0      	nop			; (mov r8, r8)
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	46c0      	nop			; (mov r8, r8)
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	46c0      	nop			; (mov r8, r8)
    2ed2:	46c0      	nop			; (mov r8, r8)
    2ed4:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2ed6:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2ed8:	46c0      	nop			; (mov r8, r8)
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	46c0      	nop			; (mov r8, r8)
    2ede:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2ee0:	46c0      	nop			; (mov r8, r8)
    2ee2:	46c0      	nop			; (mov r8, r8)
    2ee4:	46c0      	nop			; (mov r8, r8)
    2ee6:	46c0      	nop			; (mov r8, r8)
    2ee8:	46c0      	nop			; (mov r8, r8)
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	46c0      	nop			; (mov r8, r8)
    2eee:	46c0      	nop			; (mov r8, r8)
    2ef0:	46c0      	nop			; (mov r8, r8)
    2ef2:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2ef4:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2ef6:	46c0      	nop			; (mov r8, r8)
    2ef8:	46c0      	nop			; (mov r8, r8)
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	46c0      	nop			; (mov r8, r8)
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	46c0      	nop			; (mov r8, r8)
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f06:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2f08:	46c0      	nop			; (mov r8, r8)
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	46c0      	nop			; (mov r8, r8)
    2f0e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2f10:	619a      	str	r2, [r3, #24]

	//BLUE
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2f12:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f14:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	46c0      	nop			; (mov r8, r8)
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	46c0      	nop			; (mov r8, r8)
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	46c0      	nop			; (mov r8, r8)
    2f22:	46c0      	nop			; (mov r8, r8)
    2f24:	46c0      	nop			; (mov r8, r8)
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	46c0      	nop			; (mov r8, r8)
    2f2a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2f2c:	46c0      	nop			; (mov r8, r8)
    2f2e:	46c0      	nop			; (mov r8, r8)
    2f30:	46c0      	nop			; (mov r8, r8)
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	46c0      	nop			; (mov r8, r8)
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	46c0      	nop			; (mov r8, r8)
    2f3a:	46c0      	nop			; (mov r8, r8)
    2f3c:	46c0      	nop			; (mov r8, r8)
    2f3e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2f40:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2f42:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f44:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2f46:	46c0      	nop			; (mov r8, r8)
    2f48:	46c0      	nop			; (mov r8, r8)
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	46c0      	nop			; (mov r8, r8)
    2f4e:	46c0      	nop			; (mov r8, r8)
    2f50:	46c0      	nop			; (mov r8, r8)
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	46c0      	nop			; (mov r8, r8)
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	46c0      	nop			; (mov r8, r8)
    2f5a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2f5c:	46c0      	nop			; (mov r8, r8)
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	46c0      	nop			; (mov r8, r8)
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	46c0      	nop			; (mov r8, r8)
    2f66:	46c0      	nop			; (mov r8, r8)
    2f68:	46c0      	nop			; (mov r8, r8)
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	46c0      	nop			; (mov r8, r8)
    2f6e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2f70:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2f72:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f74:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2f76:	46c0      	nop			; (mov r8, r8)
    2f78:	46c0      	nop			; (mov r8, r8)
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	46c0      	nop			; (mov r8, r8)
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	46c0      	nop			; (mov r8, r8)
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	46c0      	nop			; (mov r8, r8)
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	46c0      	nop			; (mov r8, r8)
    2f8a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2f8c:	46c0      	nop			; (mov r8, r8)
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	46c0      	nop			; (mov r8, r8)
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	46c0      	nop			; (mov r8, r8)
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	46c0      	nop			; (mov r8, r8)
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	46c0      	nop			; (mov r8, r8)
    2f9e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2fa0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;");
    2fa2:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2fa4:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	46c0      	nop			; (mov r8, r8)
    2faa:	46c0      	nop			; (mov r8, r8)
    2fac:	46c0      	nop			; (mov r8, r8)
    2fae:	46c0      	nop			; (mov r8, r8)
    2fb0:	46c0      	nop			; (mov r8, r8)
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	46c0      	nop			; (mov r8, r8)
    2fb6:	46c0      	nop			; (mov r8, r8)
    2fb8:	46c0      	nop			; (mov r8, r8)
    2fba:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2fbc:	46c0      	nop			; (mov r8, r8)
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	46c0      	nop			; (mov r8, r8)
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	46c0      	nop			; (mov r8, r8)
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	46c0      	nop			; (mov r8, r8)
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	46c0      	nop			; (mov r8, r8)
    2fce:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2fd0:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    2fd2:	46c0      	nop			; (mov r8, r8)
    2fd4:	46c0      	nop			; (mov r8, r8)
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	46c0      	nop			; (mov r8, r8)
    2fda:	46c0      	nop			; (mov r8, r8)
    2fdc:	46c0      	nop			; (mov r8, r8)
    2fde:	46c0      	nop			; (mov r8, r8)
    2fe0:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2fe2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    2fe4:	46c0      	nop			; (mov r8, r8)
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	46c0      	nop			; (mov r8, r8)
    2fea:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    2fec:	46c0      	nop			; (mov r8, r8)
    2fee:	46c0      	nop			; (mov r8, r8)
    2ff0:	46c0      	nop			; (mov r8, r8)
    2ff2:	46c0      	nop			; (mov r8, r8)
    2ff4:	46c0      	nop			; (mov r8, r8)
    2ff6:	46c0      	nop			; (mov r8, r8)
    2ff8:	46c0      	nop			; (mov r8, r8)
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	46c0      	nop			; (mov r8, r8)
    2ffe:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3000:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    3002:	46c0      	nop			; (mov r8, r8)
    3004:	46c0      	nop			; (mov r8, r8)
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	46c0      	nop			; (mov r8, r8)
    300a:	46c0      	nop			; (mov r8, r8)
    300c:	46c0      	nop			; (mov r8, r8)
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3012:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    3014:	46c0      	nop			; (mov r8, r8)
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	46c0      	nop			; (mov r8, r8)
    301a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    301c:	46c0      	nop			; (mov r8, r8)
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	46c0      	nop			; (mov r8, r8)
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	46c0      	nop			; (mov r8, r8)
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	46c0      	nop			; (mov r8, r8)
    302a:	46c0      	nop			; (mov r8, r8)
    302c:	46c0      	nop			; (mov r8, r8)
    302e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3030:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    3032:	46c0      	nop			; (mov r8, r8)
    3034:	46c0      	nop			; (mov r8, r8)
    3036:	46c0      	nop			; (mov r8, r8)
    3038:	46c0      	nop			; (mov r8, r8)
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	46c0      	nop			; (mov r8, r8)
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3042:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    3044:	46c0      	nop			; (mov r8, r8)
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	46c0      	nop			; (mov r8, r8)
    304a:	46c0      	nop			; (mov r8, r8)
	
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    304c:	46c0      	nop			; (mov r8, r8)
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	46c0      	nop			; (mov r8, r8)
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	46c0      	nop			; (mov r8, r8)
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	46c0      	nop			; (mov r8, r8)
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	46c0      	nop			; (mov r8, r8)
    305e:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3060:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PA13, true);
	asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    3062:	46c0      	nop			; (mov r8, r8)
    3064:	46c0      	nop			; (mov r8, r8)
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	46c0      	nop			; (mov r8, r8)
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	46c0      	nop			; (mov r8, r8)
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3072:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(PIN_PA13, false);
	asm( "nop;nop;nop;nop;");
    3074:	46c0      	nop			; (mov r8, r8)
    3076:	46c0      	nop			; (mov r8, r8)
    3078:	46c0      	nop			; (mov r8, r8)
    307a:	46c0      	nop			; (mov r8, r8)
}
    307c:	4770      	bx	lr
    307e:	46c0      	nop			; (mov r8, r8)

00003080 <magenta>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3080:	4b76      	ldr	r3, [pc, #472]	; (325c <magenta+0x1dc>)
    3082:	2280      	movs	r2, #128	; 0x80
    3084:	0192      	lsls	r2, r2, #6
    3086:	619a      	str	r2, [r3, #24]
	{

		
		//GREEN
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3088:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    308a:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    308c:	46c0      	nop			; (mov r8, r8)
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	46c0      	nop			; (mov r8, r8)
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	46c0      	nop			; (mov r8, r8)
    3096:	46c0      	nop			; (mov r8, r8)
    3098:	46c0      	nop			; (mov r8, r8)
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	46c0      	nop			; (mov r8, r8)
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    30a2:	46c0      	nop			; (mov r8, r8)
    30a4:	46c0      	nop			; (mov r8, r8)
    30a6:	46c0      	nop			; (mov r8, r8)
    30a8:	46c0      	nop			; (mov r8, r8)
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	46c0      	nop			; (mov r8, r8)
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	46c0      	nop			; (mov r8, r8)
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    30b6:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    30b8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    30ba:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    30bc:	46c0      	nop			; (mov r8, r8)
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	46c0      	nop			; (mov r8, r8)
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	46c0      	nop			; (mov r8, r8)
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	46c0      	nop			; (mov r8, r8)
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	46c0      	nop			; (mov r8, r8)
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	46c0      	nop			; (mov r8, r8)
    30d6:	46c0      	nop			; (mov r8, r8)
    30d8:	46c0      	nop			; (mov r8, r8)
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	46c0      	nop			; (mov r8, r8)
    30de:	46c0      	nop			; (mov r8, r8)
    30e0:	46c0      	nop			; (mov r8, r8)
    30e2:	46c0      	nop			; (mov r8, r8)
    30e4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    30e6:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    30e8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    30ea:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    30ec:	46c0      	nop			; (mov r8, r8)
    30ee:	46c0      	nop			; (mov r8, r8)
    30f0:	46c0      	nop			; (mov r8, r8)
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	46c0      	nop			; (mov r8, r8)
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	46c0      	nop			; (mov r8, r8)
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	46c0      	nop			; (mov r8, r8)
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	46c0      	nop			; (mov r8, r8)
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	46c0      	nop			; (mov r8, r8)
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	46c0      	nop			; (mov r8, r8)
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	46c0      	nop			; (mov r8, r8)
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3116:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3118:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    311a:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    311c:	46c0      	nop			; (mov r8, r8)
    311e:	46c0      	nop			; (mov r8, r8)
    3120:	46c0      	nop			; (mov r8, r8)
    3122:	46c0      	nop			; (mov r8, r8)
    3124:	46c0      	nop			; (mov r8, r8)
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	46c0      	nop			; (mov r8, r8)
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	46c0      	nop			; (mov r8, r8)
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	46c0      	nop			; (mov r8, r8)
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	46c0      	nop			; (mov r8, r8)
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	46c0      	nop			; (mov r8, r8)
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	46c0      	nop			; (mov r8, r8)
    3142:	46c0      	nop			; (mov r8, r8)
    3144:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3146:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    3148:	46c0      	nop			; (mov r8, r8)
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	46c0      	nop			; (mov r8, r8)
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	46c0      	nop			; (mov r8, r8)
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	46c0      	nop			; (mov r8, r8)
    3156:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3158:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    315a:	46c0      	nop			; (mov r8, r8)
    315c:	46c0      	nop			; (mov r8, r8)
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	46c0      	nop			; (mov r8, r8)
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	46c0      	nop			; (mov r8, r8)
    316a:	46c0      	nop			; (mov r8, r8)
    316c:	46c0      	nop			; (mov r8, r8)
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	46c0      	nop			; (mov r8, r8)
    3172:	46c0      	nop			; (mov r8, r8)
    3174:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3176:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    3178:	46c0      	nop			; (mov r8, r8)
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	46c0      	nop			; (mov r8, r8)
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	46c0      	nop			; (mov r8, r8)
    3182:	46c0      	nop			; (mov r8, r8)
    3184:	46c0      	nop			; (mov r8, r8)
    3186:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3188:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    318a:	46c0      	nop			; (mov r8, r8)
    318c:	46c0      	nop			; (mov r8, r8)
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3192:	46c0      	nop			; (mov r8, r8)
    3194:	46c0      	nop			; (mov r8, r8)
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	46c0      	nop			; (mov r8, r8)
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	46c0      	nop			; (mov r8, r8)
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	46c0      	nop			; (mov r8, r8)
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    31a6:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    31a8:	46c0      	nop			; (mov r8, r8)
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	46c0      	nop			; (mov r8, r8)
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	46c0      	nop			; (mov r8, r8)
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	46c0      	nop			; (mov r8, r8)
    31b6:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    31b8:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	46c0      	nop			; (mov r8, r8)
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	46c0      	nop			; (mov r8, r8)
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	46c0      	nop			; (mov r8, r8)
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	46c0      	nop			; (mov r8, r8)
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	46c0      	nop			; (mov r8, r8)
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    31d6:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    31d8:	46c0      	nop			; (mov r8, r8)
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	46c0      	nop			; (mov r8, r8)
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	46c0      	nop			; (mov r8, r8)
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	46c0      	nop			; (mov r8, r8)
    31e6:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    31e8:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    31ea:	46c0      	nop			; (mov r8, r8)
    31ec:	46c0      	nop			; (mov r8, r8)
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    31f2:	619a      	str	r2, [r3, #24]

		//RED
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    31f4:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    31f6:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    31f8:	46c0      	nop			; (mov r8, r8)
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	46c0      	nop			; (mov r8, r8)
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	46c0      	nop			; (mov r8, r8)
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	46c0      	nop			; (mov r8, r8)
    320a:	46c0      	nop			; (mov r8, r8)
    320c:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	46c0      	nop			; (mov r8, r8)
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	46c0      	nop			; (mov r8, r8)
    3216:	46c0      	nop			; (mov r8, r8)
    3218:	46c0      	nop			; (mov r8, r8)
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	46c0      	nop			; (mov r8, r8)
    321e:	46c0      	nop			; (mov r8, r8)
    3220:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3222:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3224:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3226:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3228:	46c0      	nop			; (mov r8, r8)
    322a:	46c0      	nop			; (mov r8, r8)
    322c:	46c0      	nop			; (mov r8, r8)
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	46c0      	nop			; (mov r8, r8)
    3232:	46c0      	nop			; (mov r8, r8)
    3234:	46c0      	nop			; (mov r8, r8)
    3236:	46c0      	nop			; (mov r8, r8)
    3238:	46c0      	nop			; (mov r8, r8)
    323a:	46c0      	nop			; (mov r8, r8)
    323c:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    323e:	46c0      	nop			; (mov r8, r8)
    3240:	46c0      	nop			; (mov r8, r8)
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	46c0      	nop			; (mov r8, r8)
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	46c0      	nop			; (mov r8, r8)
    324a:	46c0      	nop			; (mov r8, r8)
    324c:	46c0      	nop			; (mov r8, r8)
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3252:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3254:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3256:	615a      	str	r2, [r3, #20]
    3258:	e002      	b.n	3260 <magenta+0x1e0>
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	41004400 	.word	0x41004400
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3260:	46c0      	nop			; (mov r8, r8)
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	46c0      	nop			; (mov r8, r8)
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	46c0      	nop			; (mov r8, r8)
    326a:	46c0      	nop			; (mov r8, r8)
    326c:	46c0      	nop			; (mov r8, r8)
    326e:	46c0      	nop			; (mov r8, r8)
    3270:	46c0      	nop			; (mov r8, r8)
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	46c0      	nop			; (mov r8, r8)
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	46c0      	nop			; (mov r8, r8)
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	46c0      	nop			; (mov r8, r8)
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	46c0      	nop			; (mov r8, r8)
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    328a:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    328c:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    328e:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3290:	46c0      	nop			; (mov r8, r8)
    3292:	46c0      	nop			; (mov r8, r8)
    3294:	46c0      	nop			; (mov r8, r8)
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	46c0      	nop			; (mov r8, r8)
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	46c0      	nop			; (mov r8, r8)
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	46c0      	nop			; (mov r8, r8)
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    32a6:	46c0      	nop			; (mov r8, r8)
    32a8:	46c0      	nop			; (mov r8, r8)
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	46c0      	nop			; (mov r8, r8)
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	46c0      	nop			; (mov r8, r8)
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	46c0      	nop			; (mov r8, r8)
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    32ba:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    32bc:	46c0      	nop			; (mov r8, r8)
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	46c0      	nop			; (mov r8, r8)
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	46c0      	nop			; (mov r8, r8)
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	46c0      	nop			; (mov r8, r8)
    32ca:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    32cc:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    32ce:	46c0      	nop			; (mov r8, r8)
    32d0:	46c0      	nop			; (mov r8, r8)
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	46c0      	nop			; (mov r8, r8)
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	46c0      	nop			; (mov r8, r8)
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	46c0      	nop			; (mov r8, r8)
    32e2:	46c0      	nop			; (mov r8, r8)
    32e4:	46c0      	nop			; (mov r8, r8)
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    32ea:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    32ec:	46c0      	nop			; (mov r8, r8)
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	46c0      	nop			; (mov r8, r8)
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	46c0      	nop			; (mov r8, r8)
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	46c0      	nop			; (mov r8, r8)
    32fa:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    32fc:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	46c0      	nop			; (mov r8, r8)
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	46c0      	nop			; (mov r8, r8)
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	46c0      	nop			; (mov r8, r8)
    330e:	46c0      	nop			; (mov r8, r8)
    3310:	46c0      	nop			; (mov r8, r8)
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	46c0      	nop			; (mov r8, r8)
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    331a:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    331c:	46c0      	nop			; (mov r8, r8)
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	46c0      	nop			; (mov r8, r8)
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	46c0      	nop			; (mov r8, r8)
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	46c0      	nop			; (mov r8, r8)
    332a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    332c:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	46c0      	nop			; (mov r8, r8)
    3332:	46c0      	nop			; (mov r8, r8)
    3334:	46c0      	nop			; (mov r8, r8)
		
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	46c0      	nop			; (mov r8, r8)
    333a:	46c0      	nop			; (mov r8, r8)
    333c:	46c0      	nop			; (mov r8, r8)
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	46c0      	nop			; (mov r8, r8)
    3342:	46c0      	nop			; (mov r8, r8)
    3344:	46c0      	nop			; (mov r8, r8)
    3346:	46c0      	nop			; (mov r8, r8)
    3348:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    334a:	619a      	str	r2, [r3, #24]
		
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    334c:	46c0      	nop			; (mov r8, r8)
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	46c0      	nop			; (mov r8, r8)
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	46c0      	nop			; (mov r8, r8)
    3356:	46c0      	nop			; (mov r8, r8)
    3358:	46c0      	nop			; (mov r8, r8)
    335a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    335c:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;");
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	46c0      	nop			; (mov r8, r8)
    3362:	46c0      	nop			; (mov r8, r8)
    3364:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3366:	619a      	str	r2, [r3, #24]
		
		//BLUE
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3368:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    336a:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    336c:	46c0      	nop			; (mov r8, r8)
    336e:	46c0      	nop			; (mov r8, r8)
    3370:	46c0      	nop			; (mov r8, r8)
    3372:	46c0      	nop			; (mov r8, r8)
    3374:	46c0      	nop			; (mov r8, r8)
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	46c0      	nop			; (mov r8, r8)
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	46c0      	nop			; (mov r8, r8)
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	46c0      	nop			; (mov r8, r8)
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	46c0      	nop			; (mov r8, r8)
    338a:	46c0      	nop			; (mov r8, r8)
    338c:	46c0      	nop			; (mov r8, r8)
    338e:	46c0      	nop			; (mov r8, r8)
    3390:	46c0      	nop			; (mov r8, r8)
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3396:	619a      	str	r2, [r3, #24]
				
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3398:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    339a:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    339c:	46c0      	nop			; (mov r8, r8)
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	46c0      	nop			; (mov r8, r8)
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	46c0      	nop			; (mov r8, r8)
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	46c0      	nop			; (mov r8, r8)
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	46c0      	nop			; (mov r8, r8)
    33ae:	46c0      	nop			; (mov r8, r8)
    33b0:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    33b2:	46c0      	nop			; (mov r8, r8)
    33b4:	46c0      	nop			; (mov r8, r8)
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	46c0      	nop			; (mov r8, r8)
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	46c0      	nop			; (mov r8, r8)
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	46c0      	nop			; (mov r8, r8)
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    33c6:	619a      	str	r2, [r3, #24]
				
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    33c8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    33ca:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    33cc:	46c0      	nop			; (mov r8, r8)
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	46c0      	nop			; (mov r8, r8)
    33d2:	46c0      	nop			; (mov r8, r8)
    33d4:	46c0      	nop			; (mov r8, r8)
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	46c0      	nop			; (mov r8, r8)
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	46c0      	nop			; (mov r8, r8)
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	46c0      	nop			; (mov r8, r8)
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	46c0      	nop			; (mov r8, r8)
    33ea:	46c0      	nop			; (mov r8, r8)
    33ec:	46c0      	nop			; (mov r8, r8)
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	46c0      	nop			; (mov r8, r8)
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    33f6:	619a      	str	r2, [r3, #24]
				
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    33f8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    33fa:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    33fc:	46c0      	nop			; (mov r8, r8)
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	46c0      	nop			; (mov r8, r8)
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	46c0      	nop			; (mov r8, r8)
    3406:	46c0      	nop			; (mov r8, r8)
    3408:	46c0      	nop			; (mov r8, r8)
    340a:	46c0      	nop			; (mov r8, r8)
    340c:	46c0      	nop			; (mov r8, r8)
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	46c0      	nop			; (mov r8, r8)
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	46c0      	nop			; (mov r8, r8)
    341a:	46c0      	nop			; (mov r8, r8)
    341c:	46c0      	nop			; (mov r8, r8)
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	46c0      	nop			; (mov r8, r8)
    3422:	46c0      	nop			; (mov r8, r8)
    3424:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3426:	619a      	str	r2, [r3, #24]
				
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3428:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    342a:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    342c:	46c0      	nop			; (mov r8, r8)
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	46c0      	nop			; (mov r8, r8)
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	46c0      	nop			; (mov r8, r8)
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	46c0      	nop			; (mov r8, r8)
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	46c0      	nop			; (mov r8, r8)
    343e:	46c0      	nop			; (mov r8, r8)
    3440:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	46c0      	nop			; (mov r8, r8)
    3446:	46c0      	nop			; (mov r8, r8)
    3448:	46c0      	nop			; (mov r8, r8)
    344a:	46c0      	nop			; (mov r8, r8)
    344c:	46c0      	nop			; (mov r8, r8)
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	46c0      	nop			; (mov r8, r8)
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3456:	619a      	str	r2, [r3, #24]
				
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3458:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    345a:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    345c:	46c0      	nop			; (mov r8, r8)
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	46c0      	nop			; (mov r8, r8)
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	46c0      	nop			; (mov r8, r8)
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	46c0      	nop			; (mov r8, r8)
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	46c0      	nop			; (mov r8, r8)
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    3472:	46c0      	nop			; (mov r8, r8)
    3474:	46c0      	nop			; (mov r8, r8)
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	46c0      	nop			; (mov r8, r8)
    347a:	46c0      	nop			; (mov r8, r8)
    347c:	46c0      	nop			; (mov r8, r8)
    347e:	46c0      	nop			; (mov r8, r8)
    3480:	46c0      	nop			; (mov r8, r8)
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    3486:	619a      	str	r2, [r3, #24]
				
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    3488:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    348a:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    348c:	46c0      	nop			; (mov r8, r8)
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	46c0      	nop			; (mov r8, r8)
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	46c0      	nop			; (mov r8, r8)
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	46c0      	nop			; (mov r8, r8)
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	46c0      	nop			; (mov r8, r8)
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	46c0      	nop			; (mov r8, r8)
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	46c0      	nop			; (mov r8, r8)
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	46c0      	nop			; (mov r8, r8)
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	46c0      	nop			; (mov r8, r8)
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    34b6:	619a      	str	r2, [r3, #24]
				
		port_pin_set_output_level(PIN_PA13, true);
		asm( "nop;");
    34b8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    34ba:	615a      	str	r2, [r3, #20]
		port_pin_set_output_level(PIN_PA13, false);
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    34bc:	46c0      	nop			; (mov r8, r8)
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	46c0      	nop			; (mov r8, r8)
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	46c0      	nop			; (mov r8, r8)
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	46c0      	nop			; (mov r8, r8)
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	46c0      	nop			; (mov r8, r8)
    34ce:	46c0      	nop			; (mov r8, r8)
    34d0:	46c0      	nop			; (mov r8, r8)
				
		asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	46c0      	nop			; (mov r8, r8)
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	46c0      	nop			; (mov r8, r8)
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	46c0      	nop			; (mov r8, r8)
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	46c0      	nop			; (mov r8, r8)
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	46c0      	nop			; (mov r8, r8)
	
}
    34e6:	4770      	bx	lr

000034e8 <main>:

}
	
	
int main (void)
{
    34e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ea:	4657      	mov	r7, sl
    34ec:	464e      	mov	r6, r9
    34ee:	4645      	mov	r5, r8
    34f0:	b4e0      	push	{r5, r6, r7}
    34f2:	b0a6      	sub	sp, #152	; 0x98
	system_init();
    34f4:	4b22      	ldr	r3, [pc, #136]	; (3580 <main+0x98>)
    34f6:	4798      	blx	r3
	
	sio2host_init();
    34f8:	4b22      	ldr	r3, [pc, #136]	; (3584 <main+0x9c>)
    34fa:	4798      	blx	r3
	
	//configure_tc();
	
	delay_init();
    34fc:	4b22      	ldr	r3, [pc, #136]	; (3588 <main+0xa0>)
    34fe:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3500:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3502:	f3bf 8f5f 	dmb	sy
	
	//system_interrupt_enable_global();
	
	cpu_irq_disable();
    3506:	2200      	movs	r2, #0
    3508:	4b20      	ldr	r3, [pc, #128]	; (358c <main+0xa4>)
    350a:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    350c:	f3ef 8310 	mrs	r3, PRIMASK
	
	bool inter = false;
	
	inter = system_interrupt_is_global_enabled();
	printf(" Interrups state: %s ", inter?"1":"0");
    3510:	2b00      	cmp	r3, #0
    3512:	d001      	beq.n	3518 <main+0x30>
    3514:	491e      	ldr	r1, [pc, #120]	; (3590 <main+0xa8>)
    3516:	e000      	b.n	351a <main+0x32>
    3518:	491e      	ldr	r1, [pc, #120]	; (3594 <main+0xac>)
    351a:	481f      	ldr	r0, [pc, #124]	; (3598 <main+0xb0>)
    351c:	4b1f      	ldr	r3, [pc, #124]	; (359c <main+0xb4>)
    351e:	4798      	blx	r3
		Neopixel_showColor(20,0,0);
		
	}*/

	
	void (*p[6][6])() ={{red, cyan, green, blue,yellow,magenta},{cyan, green, blue,yellow,magenta,red},{green, blue,yellow,magenta,red, cyan},{blue,yellow,magenta,red, cyan, green},{yellow,magenta,red, cyan, green, blue},{magenta,red, cyan, green, blue,yellow}};
    3520:	a802      	add	r0, sp, #8
    3522:	491f      	ldr	r1, [pc, #124]	; (35a0 <main+0xb8>)
    3524:	2290      	movs	r2, #144	; 0x90
    3526:	4b1f      	ldr	r3, [pc, #124]	; (35a4 <main+0xbc>)
    3528:	4798      	blx	r3
	int j = 0;
    352a:	2700      	movs	r7, #0
	//delay_ms(10);	
	(*p[j][4]) ();
	(*p[j][5]) ();
	}
	
	delay_ms(200);	
    352c:	4b1e      	ldr	r3, [pc, #120]	; (35a8 <main+0xc0>)
    352e:	469a      	mov	sl, r3
	j++;
	if (j>5){
		j=0;
    3530:	2305      	movs	r3, #5
    3532:	4698      	mov	r8, r3
    3534:	17db      	asrs	r3, r3, #31
    3536:	4699      	mov	r9, r3
		
	}*/

	
	void (*p[6][6])() ={{red, cyan, green, blue,yellow,magenta},{cyan, green, blue,yellow,magenta,red},{green, blue,yellow,magenta,red, cyan},{blue,yellow,magenta,red, cyan, green},{yellow,magenta,red, cyan, green, blue},{magenta,red, cyan, green, blue,yellow}};
	int j = 0;
    3538:	2503      	movs	r5, #3
{
	for(int i = 0; i < 3;i++){
	//green();
	//delay_ms(tiempo);
	//blue();
	(*p[j][0]) ();
    353a:	007e      	lsls	r6, r7, #1
    353c:	19f6      	adds	r6, r6, r7
    353e:	00f6      	lsls	r6, r6, #3
	//delay_ms(tiempo);
	(*p[j][1]) ();
    3540:	1c34      	adds	r4, r6, #0
    3542:	ab02      	add	r3, sp, #8
    3544:	469c      	mov	ip, r3
    3546:	4464      	add	r4, ip
{
	for(int i = 0; i < 3;i++){
	//green();
	//delay_ms(tiempo);
	//blue();
	(*p[j][0]) ();
    3548:	ab02      	add	r3, sp, #8
    354a:	58f3      	ldr	r3, [r6, r3]
    354c:	9301      	str	r3, [sp, #4]
    354e:	4798      	blx	r3
	//delay_ms(tiempo);
	(*p[j][1]) ();
    3550:	6863      	ldr	r3, [r4, #4]
    3552:	4798      	blx	r3
	//red();
	(*p[j][2]) ();
    3554:	68a3      	ldr	r3, [r4, #8]
    3556:	4798      	blx	r3
	//cyan();
	(*p[j][3]) ();
    3558:	68e3      	ldr	r3, [r4, #12]
    355a:	4798      	blx	r3
	//delay_ms(10);	
	(*p[j][4]) ();
    355c:	6923      	ldr	r3, [r4, #16]
    355e:	4798      	blx	r3
	(*p[j][5]) ();
    3560:	6963      	ldr	r3, [r4, #20]
    3562:	4798      	blx	r3
    3564:	3d01      	subs	r5, #1
	int j = 0;
	
	
	while (1)
{
	for(int i = 0; i < 3;i++){
    3566:	2d00      	cmp	r5, #0
    3568:	d1ee      	bne.n	3548 <main+0x60>
	//delay_ms(10);	
	(*p[j][4]) ();
	(*p[j][5]) ();
	}
	
	delay_ms(200);	
    356a:	20c8      	movs	r0, #200	; 0xc8
    356c:	47d0      	blx	sl
	j++;
    356e:	3701      	adds	r7, #1
	if (j>5){
		j=0;
    3570:	0ffb      	lsrs	r3, r7, #31
    3572:	464a      	mov	r2, r9
    3574:	4641      	mov	r1, r8
    3576:	42b9      	cmp	r1, r7
    3578:	4153      	adcs	r3, r2
    357a:	425b      	negs	r3, r3
    357c:	401f      	ands	r7, r3
    357e:	e7db      	b.n	3538 <main+0x50>
    3580:	000018d5 	.word	0x000018d5
    3584:	000006b5 	.word	0x000006b5
    3588:	00000115 	.word	0x00000115
    358c:	20000008 	.word	0x20000008
    3590:	0000482c 	.word	0x0000482c
    3594:	00004828 	.word	0x00004828
    3598:	00004830 	.word	0x00004830
    359c:	00003795 	.word	0x00003795
    35a0:	00004760 	.word	0x00004760
    35a4:	00003771 	.word	0x00003771
    35a8:	00000151 	.word	0x00000151

000035ac <__aeabi_uidiv>:
    35ac:	2200      	movs	r2, #0
    35ae:	0843      	lsrs	r3, r0, #1
    35b0:	428b      	cmp	r3, r1
    35b2:	d374      	bcc.n	369e <__aeabi_uidiv+0xf2>
    35b4:	0903      	lsrs	r3, r0, #4
    35b6:	428b      	cmp	r3, r1
    35b8:	d35f      	bcc.n	367a <__aeabi_uidiv+0xce>
    35ba:	0a03      	lsrs	r3, r0, #8
    35bc:	428b      	cmp	r3, r1
    35be:	d344      	bcc.n	364a <__aeabi_uidiv+0x9e>
    35c0:	0b03      	lsrs	r3, r0, #12
    35c2:	428b      	cmp	r3, r1
    35c4:	d328      	bcc.n	3618 <__aeabi_uidiv+0x6c>
    35c6:	0c03      	lsrs	r3, r0, #16
    35c8:	428b      	cmp	r3, r1
    35ca:	d30d      	bcc.n	35e8 <__aeabi_uidiv+0x3c>
    35cc:	22ff      	movs	r2, #255	; 0xff
    35ce:	0209      	lsls	r1, r1, #8
    35d0:	ba12      	rev	r2, r2
    35d2:	0c03      	lsrs	r3, r0, #16
    35d4:	428b      	cmp	r3, r1
    35d6:	d302      	bcc.n	35de <__aeabi_uidiv+0x32>
    35d8:	1212      	asrs	r2, r2, #8
    35da:	0209      	lsls	r1, r1, #8
    35dc:	d065      	beq.n	36aa <__aeabi_uidiv+0xfe>
    35de:	0b03      	lsrs	r3, r0, #12
    35e0:	428b      	cmp	r3, r1
    35e2:	d319      	bcc.n	3618 <__aeabi_uidiv+0x6c>
    35e4:	e000      	b.n	35e8 <__aeabi_uidiv+0x3c>
    35e6:	0a09      	lsrs	r1, r1, #8
    35e8:	0bc3      	lsrs	r3, r0, #15
    35ea:	428b      	cmp	r3, r1
    35ec:	d301      	bcc.n	35f2 <__aeabi_uidiv+0x46>
    35ee:	03cb      	lsls	r3, r1, #15
    35f0:	1ac0      	subs	r0, r0, r3
    35f2:	4152      	adcs	r2, r2
    35f4:	0b83      	lsrs	r3, r0, #14
    35f6:	428b      	cmp	r3, r1
    35f8:	d301      	bcc.n	35fe <__aeabi_uidiv+0x52>
    35fa:	038b      	lsls	r3, r1, #14
    35fc:	1ac0      	subs	r0, r0, r3
    35fe:	4152      	adcs	r2, r2
    3600:	0b43      	lsrs	r3, r0, #13
    3602:	428b      	cmp	r3, r1
    3604:	d301      	bcc.n	360a <__aeabi_uidiv+0x5e>
    3606:	034b      	lsls	r3, r1, #13
    3608:	1ac0      	subs	r0, r0, r3
    360a:	4152      	adcs	r2, r2
    360c:	0b03      	lsrs	r3, r0, #12
    360e:	428b      	cmp	r3, r1
    3610:	d301      	bcc.n	3616 <__aeabi_uidiv+0x6a>
    3612:	030b      	lsls	r3, r1, #12
    3614:	1ac0      	subs	r0, r0, r3
    3616:	4152      	adcs	r2, r2
    3618:	0ac3      	lsrs	r3, r0, #11
    361a:	428b      	cmp	r3, r1
    361c:	d301      	bcc.n	3622 <__aeabi_uidiv+0x76>
    361e:	02cb      	lsls	r3, r1, #11
    3620:	1ac0      	subs	r0, r0, r3
    3622:	4152      	adcs	r2, r2
    3624:	0a83      	lsrs	r3, r0, #10
    3626:	428b      	cmp	r3, r1
    3628:	d301      	bcc.n	362e <__aeabi_uidiv+0x82>
    362a:	028b      	lsls	r3, r1, #10
    362c:	1ac0      	subs	r0, r0, r3
    362e:	4152      	adcs	r2, r2
    3630:	0a43      	lsrs	r3, r0, #9
    3632:	428b      	cmp	r3, r1
    3634:	d301      	bcc.n	363a <__aeabi_uidiv+0x8e>
    3636:	024b      	lsls	r3, r1, #9
    3638:	1ac0      	subs	r0, r0, r3
    363a:	4152      	adcs	r2, r2
    363c:	0a03      	lsrs	r3, r0, #8
    363e:	428b      	cmp	r3, r1
    3640:	d301      	bcc.n	3646 <__aeabi_uidiv+0x9a>
    3642:	020b      	lsls	r3, r1, #8
    3644:	1ac0      	subs	r0, r0, r3
    3646:	4152      	adcs	r2, r2
    3648:	d2cd      	bcs.n	35e6 <__aeabi_uidiv+0x3a>
    364a:	09c3      	lsrs	r3, r0, #7
    364c:	428b      	cmp	r3, r1
    364e:	d301      	bcc.n	3654 <__aeabi_uidiv+0xa8>
    3650:	01cb      	lsls	r3, r1, #7
    3652:	1ac0      	subs	r0, r0, r3
    3654:	4152      	adcs	r2, r2
    3656:	0983      	lsrs	r3, r0, #6
    3658:	428b      	cmp	r3, r1
    365a:	d301      	bcc.n	3660 <__aeabi_uidiv+0xb4>
    365c:	018b      	lsls	r3, r1, #6
    365e:	1ac0      	subs	r0, r0, r3
    3660:	4152      	adcs	r2, r2
    3662:	0943      	lsrs	r3, r0, #5
    3664:	428b      	cmp	r3, r1
    3666:	d301      	bcc.n	366c <__aeabi_uidiv+0xc0>
    3668:	014b      	lsls	r3, r1, #5
    366a:	1ac0      	subs	r0, r0, r3
    366c:	4152      	adcs	r2, r2
    366e:	0903      	lsrs	r3, r0, #4
    3670:	428b      	cmp	r3, r1
    3672:	d301      	bcc.n	3678 <__aeabi_uidiv+0xcc>
    3674:	010b      	lsls	r3, r1, #4
    3676:	1ac0      	subs	r0, r0, r3
    3678:	4152      	adcs	r2, r2
    367a:	08c3      	lsrs	r3, r0, #3
    367c:	428b      	cmp	r3, r1
    367e:	d301      	bcc.n	3684 <__aeabi_uidiv+0xd8>
    3680:	00cb      	lsls	r3, r1, #3
    3682:	1ac0      	subs	r0, r0, r3
    3684:	4152      	adcs	r2, r2
    3686:	0883      	lsrs	r3, r0, #2
    3688:	428b      	cmp	r3, r1
    368a:	d301      	bcc.n	3690 <__aeabi_uidiv+0xe4>
    368c:	008b      	lsls	r3, r1, #2
    368e:	1ac0      	subs	r0, r0, r3
    3690:	4152      	adcs	r2, r2
    3692:	0843      	lsrs	r3, r0, #1
    3694:	428b      	cmp	r3, r1
    3696:	d301      	bcc.n	369c <__aeabi_uidiv+0xf0>
    3698:	004b      	lsls	r3, r1, #1
    369a:	1ac0      	subs	r0, r0, r3
    369c:	4152      	adcs	r2, r2
    369e:	1a41      	subs	r1, r0, r1
    36a0:	d200      	bcs.n	36a4 <__aeabi_uidiv+0xf8>
    36a2:	4601      	mov	r1, r0
    36a4:	4152      	adcs	r2, r2
    36a6:	4610      	mov	r0, r2
    36a8:	4770      	bx	lr
    36aa:	e7ff      	b.n	36ac <__aeabi_uidiv+0x100>
    36ac:	b501      	push	{r0, lr}
    36ae:	2000      	movs	r0, #0
    36b0:	f000 f80c 	bl	36cc <__aeabi_idiv0>
    36b4:	bd02      	pop	{r1, pc}
    36b6:	46c0      	nop			; (mov r8, r8)

000036b8 <__aeabi_uidivmod>:
    36b8:	2900      	cmp	r1, #0
    36ba:	d0f7      	beq.n	36ac <__aeabi_uidiv+0x100>
    36bc:	b503      	push	{r0, r1, lr}
    36be:	f7ff ff75 	bl	35ac <__aeabi_uidiv>
    36c2:	bc0e      	pop	{r1, r2, r3}
    36c4:	4342      	muls	r2, r0
    36c6:	1a89      	subs	r1, r1, r2
    36c8:	4718      	bx	r3
    36ca:	46c0      	nop			; (mov r8, r8)

000036cc <__aeabi_idiv0>:
    36cc:	4770      	bx	lr
    36ce:	46c0      	nop			; (mov r8, r8)

000036d0 <__aeabi_lmul>:
    36d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d2:	464f      	mov	r7, r9
    36d4:	4646      	mov	r6, r8
    36d6:	0405      	lsls	r5, r0, #16
    36d8:	0c2d      	lsrs	r5, r5, #16
    36da:	1c2c      	adds	r4, r5, #0
    36dc:	b4c0      	push	{r6, r7}
    36de:	0417      	lsls	r7, r2, #16
    36e0:	0c16      	lsrs	r6, r2, #16
    36e2:	0c3f      	lsrs	r7, r7, #16
    36e4:	4699      	mov	r9, r3
    36e6:	0c03      	lsrs	r3, r0, #16
    36e8:	437c      	muls	r4, r7
    36ea:	4375      	muls	r5, r6
    36ec:	435f      	muls	r7, r3
    36ee:	4373      	muls	r3, r6
    36f0:	197d      	adds	r5, r7, r5
    36f2:	0c26      	lsrs	r6, r4, #16
    36f4:	19ad      	adds	r5, r5, r6
    36f6:	469c      	mov	ip, r3
    36f8:	42af      	cmp	r7, r5
    36fa:	d903      	bls.n	3704 <__aeabi_lmul+0x34>
    36fc:	2380      	movs	r3, #128	; 0x80
    36fe:	025b      	lsls	r3, r3, #9
    3700:	4698      	mov	r8, r3
    3702:	44c4      	add	ip, r8
    3704:	464b      	mov	r3, r9
    3706:	4351      	muls	r1, r2
    3708:	4343      	muls	r3, r0
    370a:	0424      	lsls	r4, r4, #16
    370c:	0c2e      	lsrs	r6, r5, #16
    370e:	0c24      	lsrs	r4, r4, #16
    3710:	042d      	lsls	r5, r5, #16
    3712:	4466      	add	r6, ip
    3714:	192c      	adds	r4, r5, r4
    3716:	1859      	adds	r1, r3, r1
    3718:	1989      	adds	r1, r1, r6
    371a:	1c20      	adds	r0, r4, #0
    371c:	bc0c      	pop	{r2, r3}
    371e:	4690      	mov	r8, r2
    3720:	4699      	mov	r9, r3
    3722:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003724 <__libc_init_array>:
    3724:	4b0e      	ldr	r3, [pc, #56]	; (3760 <__libc_init_array+0x3c>)
    3726:	b570      	push	{r4, r5, r6, lr}
    3728:	2500      	movs	r5, #0
    372a:	1c1e      	adds	r6, r3, #0
    372c:	4c0d      	ldr	r4, [pc, #52]	; (3764 <__libc_init_array+0x40>)
    372e:	1ae4      	subs	r4, r4, r3
    3730:	10a4      	asrs	r4, r4, #2
    3732:	42a5      	cmp	r5, r4
    3734:	d004      	beq.n	3740 <__libc_init_array+0x1c>
    3736:	00ab      	lsls	r3, r5, #2
    3738:	58f3      	ldr	r3, [r6, r3]
    373a:	4798      	blx	r3
    373c:	3501      	adds	r5, #1
    373e:	e7f8      	b.n	3732 <__libc_init_array+0xe>
    3740:	f001 f8d0 	bl	48e4 <_init>
    3744:	4b08      	ldr	r3, [pc, #32]	; (3768 <__libc_init_array+0x44>)
    3746:	2500      	movs	r5, #0
    3748:	1c1e      	adds	r6, r3, #0
    374a:	4c08      	ldr	r4, [pc, #32]	; (376c <__libc_init_array+0x48>)
    374c:	1ae4      	subs	r4, r4, r3
    374e:	10a4      	asrs	r4, r4, #2
    3750:	42a5      	cmp	r5, r4
    3752:	d004      	beq.n	375e <__libc_init_array+0x3a>
    3754:	00ab      	lsls	r3, r5, #2
    3756:	58f3      	ldr	r3, [r6, r3]
    3758:	4798      	blx	r3
    375a:	3501      	adds	r5, #1
    375c:	e7f8      	b.n	3750 <__libc_init_array+0x2c>
    375e:	bd70      	pop	{r4, r5, r6, pc}
    3760:	000048f0 	.word	0x000048f0
    3764:	000048f0 	.word	0x000048f0
    3768:	000048f0 	.word	0x000048f0
    376c:	000048f4 	.word	0x000048f4

00003770 <memcpy>:
    3770:	2300      	movs	r3, #0
    3772:	b510      	push	{r4, lr}
    3774:	4293      	cmp	r3, r2
    3776:	d003      	beq.n	3780 <memcpy+0x10>
    3778:	5ccc      	ldrb	r4, [r1, r3]
    377a:	54c4      	strb	r4, [r0, r3]
    377c:	3301      	adds	r3, #1
    377e:	e7f9      	b.n	3774 <memcpy+0x4>
    3780:	bd10      	pop	{r4, pc}

00003782 <memset>:
    3782:	1c03      	adds	r3, r0, #0
    3784:	1882      	adds	r2, r0, r2
    3786:	4293      	cmp	r3, r2
    3788:	d002      	beq.n	3790 <memset+0xe>
    378a:	7019      	strb	r1, [r3, #0]
    378c:	3301      	adds	r3, #1
    378e:	e7fa      	b.n	3786 <memset+0x4>
    3790:	4770      	bx	lr
	...

00003794 <iprintf>:
    3794:	b40f      	push	{r0, r1, r2, r3}
    3796:	4b0b      	ldr	r3, [pc, #44]	; (37c4 <iprintf+0x30>)
    3798:	b513      	push	{r0, r1, r4, lr}
    379a:	681c      	ldr	r4, [r3, #0]
    379c:	2c00      	cmp	r4, #0
    379e:	d005      	beq.n	37ac <iprintf+0x18>
    37a0:	69a3      	ldr	r3, [r4, #24]
    37a2:	2b00      	cmp	r3, #0
    37a4:	d102      	bne.n	37ac <iprintf+0x18>
    37a6:	1c20      	adds	r0, r4, #0
    37a8:	f000 f996 	bl	3ad8 <__sinit>
    37ac:	ab05      	add	r3, sp, #20
    37ae:	1c20      	adds	r0, r4, #0
    37b0:	68a1      	ldr	r1, [r4, #8]
    37b2:	9a04      	ldr	r2, [sp, #16]
    37b4:	9301      	str	r3, [sp, #4]
    37b6:	f000 faf1 	bl	3d9c <_vfiprintf_r>
    37ba:	bc16      	pop	{r1, r2, r4}
    37bc:	bc08      	pop	{r3}
    37be:	b004      	add	sp, #16
    37c0:	4718      	bx	r3
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	2000006c 	.word	0x2000006c

000037c8 <setbuf>:
    37c8:	b508      	push	{r3, lr}
    37ca:	424a      	negs	r2, r1
    37cc:	414a      	adcs	r2, r1
    37ce:	2380      	movs	r3, #128	; 0x80
    37d0:	0052      	lsls	r2, r2, #1
    37d2:	00db      	lsls	r3, r3, #3
    37d4:	f000 f802 	bl	37dc <setvbuf>
    37d8:	bd08      	pop	{r3, pc}
	...

000037dc <setvbuf>:
    37dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    37de:	1c1e      	adds	r6, r3, #0
    37e0:	4b3c      	ldr	r3, [pc, #240]	; (38d4 <setvbuf+0xf8>)
    37e2:	1c04      	adds	r4, r0, #0
    37e4:	681d      	ldr	r5, [r3, #0]
    37e6:	1c0f      	adds	r7, r1, #0
    37e8:	9201      	str	r2, [sp, #4]
    37ea:	2d00      	cmp	r5, #0
    37ec:	d005      	beq.n	37fa <setvbuf+0x1e>
    37ee:	69ab      	ldr	r3, [r5, #24]
    37f0:	2b00      	cmp	r3, #0
    37f2:	d102      	bne.n	37fa <setvbuf+0x1e>
    37f4:	1c28      	adds	r0, r5, #0
    37f6:	f000 f96f 	bl	3ad8 <__sinit>
    37fa:	4b37      	ldr	r3, [pc, #220]	; (38d8 <setvbuf+0xfc>)
    37fc:	429c      	cmp	r4, r3
    37fe:	d101      	bne.n	3804 <setvbuf+0x28>
    3800:	686c      	ldr	r4, [r5, #4]
    3802:	e008      	b.n	3816 <setvbuf+0x3a>
    3804:	4b35      	ldr	r3, [pc, #212]	; (38dc <setvbuf+0x100>)
    3806:	429c      	cmp	r4, r3
    3808:	d101      	bne.n	380e <setvbuf+0x32>
    380a:	68ac      	ldr	r4, [r5, #8]
    380c:	e003      	b.n	3816 <setvbuf+0x3a>
    380e:	4b34      	ldr	r3, [pc, #208]	; (38e0 <setvbuf+0x104>)
    3810:	429c      	cmp	r4, r3
    3812:	d100      	bne.n	3816 <setvbuf+0x3a>
    3814:	68ec      	ldr	r4, [r5, #12]
    3816:	9b01      	ldr	r3, [sp, #4]
    3818:	2b02      	cmp	r3, #2
    381a:	d858      	bhi.n	38ce <setvbuf+0xf2>
    381c:	2e00      	cmp	r6, #0
    381e:	db56      	blt.n	38ce <setvbuf+0xf2>
    3820:	1c28      	adds	r0, r5, #0
    3822:	1c21      	adds	r1, r4, #0
    3824:	f000 f8ea 	bl	39fc <_fflush_r>
    3828:	2300      	movs	r3, #0
    382a:	6063      	str	r3, [r4, #4]
    382c:	61a3      	str	r3, [r4, #24]
    382e:	89a3      	ldrh	r3, [r4, #12]
    3830:	061b      	lsls	r3, r3, #24
    3832:	d503      	bpl.n	383c <setvbuf+0x60>
    3834:	1c28      	adds	r0, r5, #0
    3836:	6921      	ldr	r1, [r4, #16]
    3838:	f000 f9ea 	bl	3c10 <_free_r>
    383c:	2283      	movs	r2, #131	; 0x83
    383e:	89a3      	ldrh	r3, [r4, #12]
    3840:	4393      	bics	r3, r2
    3842:	81a3      	strh	r3, [r4, #12]
    3844:	9b01      	ldr	r3, [sp, #4]
    3846:	2b02      	cmp	r3, #2
    3848:	d013      	beq.n	3872 <setvbuf+0x96>
    384a:	2f00      	cmp	r7, #0
    384c:	d125      	bne.n	389a <setvbuf+0xbe>
    384e:	2e00      	cmp	r6, #0
    3850:	d101      	bne.n	3856 <setvbuf+0x7a>
    3852:	2680      	movs	r6, #128	; 0x80
    3854:	00f6      	lsls	r6, r6, #3
    3856:	1c30      	adds	r0, r6, #0
    3858:	f000 f9d0 	bl	3bfc <malloc>
    385c:	1e07      	subs	r7, r0, #0
    385e:	d118      	bne.n	3892 <setvbuf+0xb6>
    3860:	2080      	movs	r0, #128	; 0x80
    3862:	00c0      	lsls	r0, r0, #3
    3864:	f000 f9ca 	bl	3bfc <malloc>
    3868:	1e07      	subs	r7, r0, #0
    386a:	d110      	bne.n	388e <setvbuf+0xb2>
    386c:	2001      	movs	r0, #1
    386e:	4240      	negs	r0, r0
    3870:	e000      	b.n	3874 <setvbuf+0x98>
    3872:	2000      	movs	r0, #0
    3874:	2202      	movs	r2, #2
    3876:	89a3      	ldrh	r3, [r4, #12]
    3878:	4313      	orrs	r3, r2
    387a:	81a3      	strh	r3, [r4, #12]
    387c:	2300      	movs	r3, #0
    387e:	60a3      	str	r3, [r4, #8]
    3880:	1c23      	adds	r3, r4, #0
    3882:	3347      	adds	r3, #71	; 0x47
    3884:	6023      	str	r3, [r4, #0]
    3886:	6123      	str	r3, [r4, #16]
    3888:	2301      	movs	r3, #1
    388a:	6163      	str	r3, [r4, #20]
    388c:	e021      	b.n	38d2 <setvbuf+0xf6>
    388e:	2680      	movs	r6, #128	; 0x80
    3890:	00f6      	lsls	r6, r6, #3
    3892:	2280      	movs	r2, #128	; 0x80
    3894:	89a3      	ldrh	r3, [r4, #12]
    3896:	4313      	orrs	r3, r2
    3898:	81a3      	strh	r3, [r4, #12]
    389a:	9b01      	ldr	r3, [sp, #4]
    389c:	2b01      	cmp	r3, #1
    389e:	d105      	bne.n	38ac <setvbuf+0xd0>
    38a0:	89a3      	ldrh	r3, [r4, #12]
    38a2:	9a01      	ldr	r2, [sp, #4]
    38a4:	431a      	orrs	r2, r3
    38a6:	4273      	negs	r3, r6
    38a8:	81a2      	strh	r2, [r4, #12]
    38aa:	61a3      	str	r3, [r4, #24]
    38ac:	4b0d      	ldr	r3, [pc, #52]	; (38e4 <setvbuf+0x108>)
    38ae:	2000      	movs	r0, #0
    38b0:	62ab      	str	r3, [r5, #40]	; 0x28
    38b2:	89a2      	ldrh	r2, [r4, #12]
    38b4:	6027      	str	r7, [r4, #0]
    38b6:	6127      	str	r7, [r4, #16]
    38b8:	6166      	str	r6, [r4, #20]
    38ba:	0713      	lsls	r3, r2, #28
    38bc:	d509      	bpl.n	38d2 <setvbuf+0xf6>
    38be:	2303      	movs	r3, #3
    38c0:	401a      	ands	r2, r3
    38c2:	4253      	negs	r3, r2
    38c4:	4153      	adcs	r3, r2
    38c6:	425b      	negs	r3, r3
    38c8:	401e      	ands	r6, r3
    38ca:	60a6      	str	r6, [r4, #8]
    38cc:	e001      	b.n	38d2 <setvbuf+0xf6>
    38ce:	2001      	movs	r0, #1
    38d0:	4240      	negs	r0, r0
    38d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    38d4:	2000006c 	.word	0x2000006c
    38d8:	00004850 	.word	0x00004850
    38dc:	00004870 	.word	0x00004870
    38e0:	00004890 	.word	0x00004890
    38e4:	00003a55 	.word	0x00003a55

000038e8 <__sflush_r>:
    38e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38ea:	898a      	ldrh	r2, [r1, #12]
    38ec:	1c05      	adds	r5, r0, #0
    38ee:	1c0c      	adds	r4, r1, #0
    38f0:	0713      	lsls	r3, r2, #28
    38f2:	d45e      	bmi.n	39b2 <__sflush_r+0xca>
    38f4:	684b      	ldr	r3, [r1, #4]
    38f6:	2b00      	cmp	r3, #0
    38f8:	dc02      	bgt.n	3900 <__sflush_r+0x18>
    38fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    38fc:	2b00      	cmp	r3, #0
    38fe:	dd1a      	ble.n	3936 <__sflush_r+0x4e>
    3900:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3902:	2f00      	cmp	r7, #0
    3904:	d017      	beq.n	3936 <__sflush_r+0x4e>
    3906:	2300      	movs	r3, #0
    3908:	682e      	ldr	r6, [r5, #0]
    390a:	602b      	str	r3, [r5, #0]
    390c:	2380      	movs	r3, #128	; 0x80
    390e:	015b      	lsls	r3, r3, #5
    3910:	401a      	ands	r2, r3
    3912:	d001      	beq.n	3918 <__sflush_r+0x30>
    3914:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3916:	e015      	b.n	3944 <__sflush_r+0x5c>
    3918:	1c28      	adds	r0, r5, #0
    391a:	6a21      	ldr	r1, [r4, #32]
    391c:	2301      	movs	r3, #1
    391e:	47b8      	blx	r7
    3920:	1c02      	adds	r2, r0, #0
    3922:	1c43      	adds	r3, r0, #1
    3924:	d10e      	bne.n	3944 <__sflush_r+0x5c>
    3926:	682b      	ldr	r3, [r5, #0]
    3928:	2b00      	cmp	r3, #0
    392a:	d00b      	beq.n	3944 <__sflush_r+0x5c>
    392c:	2b1d      	cmp	r3, #29
    392e:	d001      	beq.n	3934 <__sflush_r+0x4c>
    3930:	2b16      	cmp	r3, #22
    3932:	d102      	bne.n	393a <__sflush_r+0x52>
    3934:	602e      	str	r6, [r5, #0]
    3936:	2000      	movs	r0, #0
    3938:	e05e      	b.n	39f8 <__sflush_r+0x110>
    393a:	2140      	movs	r1, #64	; 0x40
    393c:	89a3      	ldrh	r3, [r4, #12]
    393e:	430b      	orrs	r3, r1
    3940:	81a3      	strh	r3, [r4, #12]
    3942:	e059      	b.n	39f8 <__sflush_r+0x110>
    3944:	89a3      	ldrh	r3, [r4, #12]
    3946:	075b      	lsls	r3, r3, #29
    3948:	d506      	bpl.n	3958 <__sflush_r+0x70>
    394a:	6863      	ldr	r3, [r4, #4]
    394c:	1ad2      	subs	r2, r2, r3
    394e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3950:	2b00      	cmp	r3, #0
    3952:	d001      	beq.n	3958 <__sflush_r+0x70>
    3954:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3956:	1ad2      	subs	r2, r2, r3
    3958:	2300      	movs	r3, #0
    395a:	1c28      	adds	r0, r5, #0
    395c:	6a21      	ldr	r1, [r4, #32]
    395e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3960:	47b8      	blx	r7
    3962:	89a3      	ldrh	r3, [r4, #12]
    3964:	1c42      	adds	r2, r0, #1
    3966:	d106      	bne.n	3976 <__sflush_r+0x8e>
    3968:	682a      	ldr	r2, [r5, #0]
    396a:	2a00      	cmp	r2, #0
    396c:	d003      	beq.n	3976 <__sflush_r+0x8e>
    396e:	2a1d      	cmp	r2, #29
    3970:	d001      	beq.n	3976 <__sflush_r+0x8e>
    3972:	2a16      	cmp	r2, #22
    3974:	d119      	bne.n	39aa <__sflush_r+0xc2>
    3976:	2200      	movs	r2, #0
    3978:	6062      	str	r2, [r4, #4]
    397a:	6922      	ldr	r2, [r4, #16]
    397c:	6022      	str	r2, [r4, #0]
    397e:	04db      	lsls	r3, r3, #19
    3980:	d505      	bpl.n	398e <__sflush_r+0xa6>
    3982:	1c43      	adds	r3, r0, #1
    3984:	d102      	bne.n	398c <__sflush_r+0xa4>
    3986:	682b      	ldr	r3, [r5, #0]
    3988:	2b00      	cmp	r3, #0
    398a:	d100      	bne.n	398e <__sflush_r+0xa6>
    398c:	6560      	str	r0, [r4, #84]	; 0x54
    398e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3990:	602e      	str	r6, [r5, #0]
    3992:	2900      	cmp	r1, #0
    3994:	d0cf      	beq.n	3936 <__sflush_r+0x4e>
    3996:	1c23      	adds	r3, r4, #0
    3998:	3344      	adds	r3, #68	; 0x44
    399a:	4299      	cmp	r1, r3
    399c:	d002      	beq.n	39a4 <__sflush_r+0xbc>
    399e:	1c28      	adds	r0, r5, #0
    39a0:	f000 f936 	bl	3c10 <_free_r>
    39a4:	2000      	movs	r0, #0
    39a6:	6360      	str	r0, [r4, #52]	; 0x34
    39a8:	e026      	b.n	39f8 <__sflush_r+0x110>
    39aa:	2240      	movs	r2, #64	; 0x40
    39ac:	4313      	orrs	r3, r2
    39ae:	81a3      	strh	r3, [r4, #12]
    39b0:	e022      	b.n	39f8 <__sflush_r+0x110>
    39b2:	690f      	ldr	r7, [r1, #16]
    39b4:	2f00      	cmp	r7, #0
    39b6:	d0be      	beq.n	3936 <__sflush_r+0x4e>
    39b8:	680b      	ldr	r3, [r1, #0]
    39ba:	600f      	str	r7, [r1, #0]
    39bc:	1bdb      	subs	r3, r3, r7
    39be:	9301      	str	r3, [sp, #4]
    39c0:	2300      	movs	r3, #0
    39c2:	0792      	lsls	r2, r2, #30
    39c4:	d100      	bne.n	39c8 <__sflush_r+0xe0>
    39c6:	694b      	ldr	r3, [r1, #20]
    39c8:	60a3      	str	r3, [r4, #8]
    39ca:	9b01      	ldr	r3, [sp, #4]
    39cc:	2b00      	cmp	r3, #0
    39ce:	ddb2      	ble.n	3936 <__sflush_r+0x4e>
    39d0:	1c28      	adds	r0, r5, #0
    39d2:	6a21      	ldr	r1, [r4, #32]
    39d4:	1c3a      	adds	r2, r7, #0
    39d6:	9b01      	ldr	r3, [sp, #4]
    39d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    39da:	47b0      	blx	r6
    39dc:	2800      	cmp	r0, #0
    39de:	dc06      	bgt.n	39ee <__sflush_r+0x106>
    39e0:	2240      	movs	r2, #64	; 0x40
    39e2:	2001      	movs	r0, #1
    39e4:	89a3      	ldrh	r3, [r4, #12]
    39e6:	4240      	negs	r0, r0
    39e8:	4313      	orrs	r3, r2
    39ea:	81a3      	strh	r3, [r4, #12]
    39ec:	e004      	b.n	39f8 <__sflush_r+0x110>
    39ee:	9b01      	ldr	r3, [sp, #4]
    39f0:	183f      	adds	r7, r7, r0
    39f2:	1a1b      	subs	r3, r3, r0
    39f4:	9301      	str	r3, [sp, #4]
    39f6:	e7e8      	b.n	39ca <__sflush_r+0xe2>
    39f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000039fc <_fflush_r>:
    39fc:	b538      	push	{r3, r4, r5, lr}
    39fe:	690b      	ldr	r3, [r1, #16]
    3a00:	1c05      	adds	r5, r0, #0
    3a02:	1c0c      	adds	r4, r1, #0
    3a04:	2b00      	cmp	r3, #0
    3a06:	d101      	bne.n	3a0c <_fflush_r+0x10>
    3a08:	2000      	movs	r0, #0
    3a0a:	e01c      	b.n	3a46 <_fflush_r+0x4a>
    3a0c:	2800      	cmp	r0, #0
    3a0e:	d004      	beq.n	3a1a <_fflush_r+0x1e>
    3a10:	6983      	ldr	r3, [r0, #24]
    3a12:	2b00      	cmp	r3, #0
    3a14:	d101      	bne.n	3a1a <_fflush_r+0x1e>
    3a16:	f000 f85f 	bl	3ad8 <__sinit>
    3a1a:	4b0b      	ldr	r3, [pc, #44]	; (3a48 <_fflush_r+0x4c>)
    3a1c:	429c      	cmp	r4, r3
    3a1e:	d101      	bne.n	3a24 <_fflush_r+0x28>
    3a20:	686c      	ldr	r4, [r5, #4]
    3a22:	e008      	b.n	3a36 <_fflush_r+0x3a>
    3a24:	4b09      	ldr	r3, [pc, #36]	; (3a4c <_fflush_r+0x50>)
    3a26:	429c      	cmp	r4, r3
    3a28:	d101      	bne.n	3a2e <_fflush_r+0x32>
    3a2a:	68ac      	ldr	r4, [r5, #8]
    3a2c:	e003      	b.n	3a36 <_fflush_r+0x3a>
    3a2e:	4b08      	ldr	r3, [pc, #32]	; (3a50 <_fflush_r+0x54>)
    3a30:	429c      	cmp	r4, r3
    3a32:	d100      	bne.n	3a36 <_fflush_r+0x3a>
    3a34:	68ec      	ldr	r4, [r5, #12]
    3a36:	220c      	movs	r2, #12
    3a38:	5ea3      	ldrsh	r3, [r4, r2]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d0e4      	beq.n	3a08 <_fflush_r+0xc>
    3a3e:	1c28      	adds	r0, r5, #0
    3a40:	1c21      	adds	r1, r4, #0
    3a42:	f7ff ff51 	bl	38e8 <__sflush_r>
    3a46:	bd38      	pop	{r3, r4, r5, pc}
    3a48:	00004850 	.word	0x00004850
    3a4c:	00004870 	.word	0x00004870
    3a50:	00004890 	.word	0x00004890

00003a54 <_cleanup_r>:
    3a54:	b508      	push	{r3, lr}
    3a56:	4902      	ldr	r1, [pc, #8]	; (3a60 <_cleanup_r+0xc>)
    3a58:	f000 f8ae 	bl	3bb8 <_fwalk_reent>
    3a5c:	bd08      	pop	{r3, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	000039fd 	.word	0x000039fd

00003a64 <std.isra.0>:
    3a64:	2300      	movs	r3, #0
    3a66:	b510      	push	{r4, lr}
    3a68:	1c04      	adds	r4, r0, #0
    3a6a:	6003      	str	r3, [r0, #0]
    3a6c:	6043      	str	r3, [r0, #4]
    3a6e:	6083      	str	r3, [r0, #8]
    3a70:	8181      	strh	r1, [r0, #12]
    3a72:	6643      	str	r3, [r0, #100]	; 0x64
    3a74:	81c2      	strh	r2, [r0, #14]
    3a76:	6103      	str	r3, [r0, #16]
    3a78:	6143      	str	r3, [r0, #20]
    3a7a:	6183      	str	r3, [r0, #24]
    3a7c:	1c19      	adds	r1, r3, #0
    3a7e:	2208      	movs	r2, #8
    3a80:	305c      	adds	r0, #92	; 0x5c
    3a82:	f7ff fe7e 	bl	3782 <memset>
    3a86:	4b05      	ldr	r3, [pc, #20]	; (3a9c <std.isra.0+0x38>)
    3a88:	6224      	str	r4, [r4, #32]
    3a8a:	6263      	str	r3, [r4, #36]	; 0x24
    3a8c:	4b04      	ldr	r3, [pc, #16]	; (3aa0 <std.isra.0+0x3c>)
    3a8e:	62a3      	str	r3, [r4, #40]	; 0x28
    3a90:	4b04      	ldr	r3, [pc, #16]	; (3aa4 <std.isra.0+0x40>)
    3a92:	62e3      	str	r3, [r4, #44]	; 0x2c
    3a94:	4b04      	ldr	r3, [pc, #16]	; (3aa8 <std.isra.0+0x44>)
    3a96:	6323      	str	r3, [r4, #48]	; 0x30
    3a98:	bd10      	pop	{r4, pc}
    3a9a:	46c0      	nop			; (mov r8, r8)
    3a9c:	000042ed 	.word	0x000042ed
    3aa0:	00004315 	.word	0x00004315
    3aa4:	0000434d 	.word	0x0000434d
    3aa8:	00004379 	.word	0x00004379

00003aac <__sfmoreglue>:
    3aac:	b570      	push	{r4, r5, r6, lr}
    3aae:	2568      	movs	r5, #104	; 0x68
    3ab0:	1e4b      	subs	r3, r1, #1
    3ab2:	435d      	muls	r5, r3
    3ab4:	1c0e      	adds	r6, r1, #0
    3ab6:	1c29      	adds	r1, r5, #0
    3ab8:	3174      	adds	r1, #116	; 0x74
    3aba:	f000 f8ef 	bl	3c9c <_malloc_r>
    3abe:	1e04      	subs	r4, r0, #0
    3ac0:	d008      	beq.n	3ad4 <__sfmoreglue+0x28>
    3ac2:	2100      	movs	r1, #0
    3ac4:	1c2a      	adds	r2, r5, #0
    3ac6:	6001      	str	r1, [r0, #0]
    3ac8:	6046      	str	r6, [r0, #4]
    3aca:	300c      	adds	r0, #12
    3acc:	60a0      	str	r0, [r4, #8]
    3ace:	3268      	adds	r2, #104	; 0x68
    3ad0:	f7ff fe57 	bl	3782 <memset>
    3ad4:	1c20      	adds	r0, r4, #0
    3ad6:	bd70      	pop	{r4, r5, r6, pc}

00003ad8 <__sinit>:
    3ad8:	6983      	ldr	r3, [r0, #24]
    3ada:	b513      	push	{r0, r1, r4, lr}
    3adc:	2b00      	cmp	r3, #0
    3ade:	d128      	bne.n	3b32 <__sinit+0x5a>
    3ae0:	6483      	str	r3, [r0, #72]	; 0x48
    3ae2:	64c3      	str	r3, [r0, #76]	; 0x4c
    3ae4:	6503      	str	r3, [r0, #80]	; 0x50
    3ae6:	4b13      	ldr	r3, [pc, #76]	; (3b34 <__sinit+0x5c>)
    3ae8:	4a13      	ldr	r2, [pc, #76]	; (3b38 <__sinit+0x60>)
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	6282      	str	r2, [r0, #40]	; 0x28
    3aee:	9301      	str	r3, [sp, #4]
    3af0:	4298      	cmp	r0, r3
    3af2:	d101      	bne.n	3af8 <__sinit+0x20>
    3af4:	2301      	movs	r3, #1
    3af6:	6183      	str	r3, [r0, #24]
    3af8:	1c04      	adds	r4, r0, #0
    3afa:	f000 f81f 	bl	3b3c <__sfp>
    3afe:	6060      	str	r0, [r4, #4]
    3b00:	1c20      	adds	r0, r4, #0
    3b02:	f000 f81b 	bl	3b3c <__sfp>
    3b06:	60a0      	str	r0, [r4, #8]
    3b08:	1c20      	adds	r0, r4, #0
    3b0a:	f000 f817 	bl	3b3c <__sfp>
    3b0e:	2104      	movs	r1, #4
    3b10:	60e0      	str	r0, [r4, #12]
    3b12:	2200      	movs	r2, #0
    3b14:	6860      	ldr	r0, [r4, #4]
    3b16:	f7ff ffa5 	bl	3a64 <std.isra.0>
    3b1a:	68a0      	ldr	r0, [r4, #8]
    3b1c:	2109      	movs	r1, #9
    3b1e:	2201      	movs	r2, #1
    3b20:	f7ff ffa0 	bl	3a64 <std.isra.0>
    3b24:	68e0      	ldr	r0, [r4, #12]
    3b26:	2112      	movs	r1, #18
    3b28:	2202      	movs	r2, #2
    3b2a:	f7ff ff9b 	bl	3a64 <std.isra.0>
    3b2e:	2301      	movs	r3, #1
    3b30:	61a3      	str	r3, [r4, #24]
    3b32:	bd13      	pop	{r0, r1, r4, pc}
    3b34:	0000484c 	.word	0x0000484c
    3b38:	00003a55 	.word	0x00003a55

00003b3c <__sfp>:
    3b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b3e:	4b1d      	ldr	r3, [pc, #116]	; (3bb4 <__sfp+0x78>)
    3b40:	1c06      	adds	r6, r0, #0
    3b42:	681d      	ldr	r5, [r3, #0]
    3b44:	69ab      	ldr	r3, [r5, #24]
    3b46:	2b00      	cmp	r3, #0
    3b48:	d102      	bne.n	3b50 <__sfp+0x14>
    3b4a:	1c28      	adds	r0, r5, #0
    3b4c:	f7ff ffc4 	bl	3ad8 <__sinit>
    3b50:	3548      	adds	r5, #72	; 0x48
    3b52:	68ac      	ldr	r4, [r5, #8]
    3b54:	686b      	ldr	r3, [r5, #4]
    3b56:	3b01      	subs	r3, #1
    3b58:	d405      	bmi.n	3b66 <__sfp+0x2a>
    3b5a:	220c      	movs	r2, #12
    3b5c:	5ea7      	ldrsh	r7, [r4, r2]
    3b5e:	2f00      	cmp	r7, #0
    3b60:	d010      	beq.n	3b84 <__sfp+0x48>
    3b62:	3468      	adds	r4, #104	; 0x68
    3b64:	e7f7      	b.n	3b56 <__sfp+0x1a>
    3b66:	682b      	ldr	r3, [r5, #0]
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d106      	bne.n	3b7a <__sfp+0x3e>
    3b6c:	1c30      	adds	r0, r6, #0
    3b6e:	2104      	movs	r1, #4
    3b70:	f7ff ff9c 	bl	3aac <__sfmoreglue>
    3b74:	6028      	str	r0, [r5, #0]
    3b76:	2800      	cmp	r0, #0
    3b78:	d001      	beq.n	3b7e <__sfp+0x42>
    3b7a:	682d      	ldr	r5, [r5, #0]
    3b7c:	e7e9      	b.n	3b52 <__sfp+0x16>
    3b7e:	230c      	movs	r3, #12
    3b80:	6033      	str	r3, [r6, #0]
    3b82:	e016      	b.n	3bb2 <__sfp+0x76>
    3b84:	2301      	movs	r3, #1
    3b86:	1c20      	adds	r0, r4, #0
    3b88:	425b      	negs	r3, r3
    3b8a:	81e3      	strh	r3, [r4, #14]
    3b8c:	3302      	adds	r3, #2
    3b8e:	81a3      	strh	r3, [r4, #12]
    3b90:	6667      	str	r7, [r4, #100]	; 0x64
    3b92:	6027      	str	r7, [r4, #0]
    3b94:	60a7      	str	r7, [r4, #8]
    3b96:	6067      	str	r7, [r4, #4]
    3b98:	6127      	str	r7, [r4, #16]
    3b9a:	6167      	str	r7, [r4, #20]
    3b9c:	61a7      	str	r7, [r4, #24]
    3b9e:	305c      	adds	r0, #92	; 0x5c
    3ba0:	1c39      	adds	r1, r7, #0
    3ba2:	2208      	movs	r2, #8
    3ba4:	f7ff fded 	bl	3782 <memset>
    3ba8:	1c20      	adds	r0, r4, #0
    3baa:	6367      	str	r7, [r4, #52]	; 0x34
    3bac:	63a7      	str	r7, [r4, #56]	; 0x38
    3bae:	64a7      	str	r7, [r4, #72]	; 0x48
    3bb0:	64e7      	str	r7, [r4, #76]	; 0x4c
    3bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bb4:	0000484c 	.word	0x0000484c

00003bb8 <_fwalk_reent>:
    3bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bba:	1c04      	adds	r4, r0, #0
    3bbc:	1c07      	adds	r7, r0, #0
    3bbe:	2600      	movs	r6, #0
    3bc0:	9101      	str	r1, [sp, #4]
    3bc2:	3448      	adds	r4, #72	; 0x48
    3bc4:	2c00      	cmp	r4, #0
    3bc6:	d016      	beq.n	3bf6 <_fwalk_reent+0x3e>
    3bc8:	6863      	ldr	r3, [r4, #4]
    3bca:	68a5      	ldr	r5, [r4, #8]
    3bcc:	9300      	str	r3, [sp, #0]
    3bce:	9b00      	ldr	r3, [sp, #0]
    3bd0:	3b01      	subs	r3, #1
    3bd2:	9300      	str	r3, [sp, #0]
    3bd4:	d40d      	bmi.n	3bf2 <_fwalk_reent+0x3a>
    3bd6:	89ab      	ldrh	r3, [r5, #12]
    3bd8:	2b01      	cmp	r3, #1
    3bda:	d908      	bls.n	3bee <_fwalk_reent+0x36>
    3bdc:	220e      	movs	r2, #14
    3bde:	5eab      	ldrsh	r3, [r5, r2]
    3be0:	3301      	adds	r3, #1
    3be2:	d004      	beq.n	3bee <_fwalk_reent+0x36>
    3be4:	1c38      	adds	r0, r7, #0
    3be6:	1c29      	adds	r1, r5, #0
    3be8:	9b01      	ldr	r3, [sp, #4]
    3bea:	4798      	blx	r3
    3bec:	4306      	orrs	r6, r0
    3bee:	3568      	adds	r5, #104	; 0x68
    3bf0:	e7ed      	b.n	3bce <_fwalk_reent+0x16>
    3bf2:	6824      	ldr	r4, [r4, #0]
    3bf4:	e7e6      	b.n	3bc4 <_fwalk_reent+0xc>
    3bf6:	1c30      	adds	r0, r6, #0
    3bf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003bfc <malloc>:
    3bfc:	b508      	push	{r3, lr}
    3bfe:	4b03      	ldr	r3, [pc, #12]	; (3c0c <malloc+0x10>)
    3c00:	1c01      	adds	r1, r0, #0
    3c02:	6818      	ldr	r0, [r3, #0]
    3c04:	f000 f84a 	bl	3c9c <_malloc_r>
    3c08:	bd08      	pop	{r3, pc}
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	2000006c 	.word	0x2000006c

00003c10 <_free_r>:
    3c10:	b530      	push	{r4, r5, lr}
    3c12:	2900      	cmp	r1, #0
    3c14:	d03e      	beq.n	3c94 <_free_r+0x84>
    3c16:	3904      	subs	r1, #4
    3c18:	680b      	ldr	r3, [r1, #0]
    3c1a:	2b00      	cmp	r3, #0
    3c1c:	da00      	bge.n	3c20 <_free_r+0x10>
    3c1e:	18c9      	adds	r1, r1, r3
    3c20:	4a1d      	ldr	r2, [pc, #116]	; (3c98 <_free_r+0x88>)
    3c22:	6813      	ldr	r3, [r2, #0]
    3c24:	1c14      	adds	r4, r2, #0
    3c26:	2b00      	cmp	r3, #0
    3c28:	d102      	bne.n	3c30 <_free_r+0x20>
    3c2a:	604b      	str	r3, [r1, #4]
    3c2c:	6011      	str	r1, [r2, #0]
    3c2e:	e031      	b.n	3c94 <_free_r+0x84>
    3c30:	4299      	cmp	r1, r3
    3c32:	d20d      	bcs.n	3c50 <_free_r+0x40>
    3c34:	6808      	ldr	r0, [r1, #0]
    3c36:	180a      	adds	r2, r1, r0
    3c38:	429a      	cmp	r2, r3
    3c3a:	d103      	bne.n	3c44 <_free_r+0x34>
    3c3c:	6813      	ldr	r3, [r2, #0]
    3c3e:	18c3      	adds	r3, r0, r3
    3c40:	600b      	str	r3, [r1, #0]
    3c42:	6853      	ldr	r3, [r2, #4]
    3c44:	604b      	str	r3, [r1, #4]
    3c46:	6021      	str	r1, [r4, #0]
    3c48:	e024      	b.n	3c94 <_free_r+0x84>
    3c4a:	428a      	cmp	r2, r1
    3c4c:	d803      	bhi.n	3c56 <_free_r+0x46>
    3c4e:	1c13      	adds	r3, r2, #0
    3c50:	685a      	ldr	r2, [r3, #4]
    3c52:	2a00      	cmp	r2, #0
    3c54:	d1f9      	bne.n	3c4a <_free_r+0x3a>
    3c56:	681d      	ldr	r5, [r3, #0]
    3c58:	195c      	adds	r4, r3, r5
    3c5a:	428c      	cmp	r4, r1
    3c5c:	d10b      	bne.n	3c76 <_free_r+0x66>
    3c5e:	6809      	ldr	r1, [r1, #0]
    3c60:	1869      	adds	r1, r5, r1
    3c62:	1858      	adds	r0, r3, r1
    3c64:	6019      	str	r1, [r3, #0]
    3c66:	4290      	cmp	r0, r2
    3c68:	d114      	bne.n	3c94 <_free_r+0x84>
    3c6a:	6810      	ldr	r0, [r2, #0]
    3c6c:	6852      	ldr	r2, [r2, #4]
    3c6e:	1809      	adds	r1, r1, r0
    3c70:	6019      	str	r1, [r3, #0]
    3c72:	605a      	str	r2, [r3, #4]
    3c74:	e00e      	b.n	3c94 <_free_r+0x84>
    3c76:	428c      	cmp	r4, r1
    3c78:	d902      	bls.n	3c80 <_free_r+0x70>
    3c7a:	230c      	movs	r3, #12
    3c7c:	6003      	str	r3, [r0, #0]
    3c7e:	e009      	b.n	3c94 <_free_r+0x84>
    3c80:	6808      	ldr	r0, [r1, #0]
    3c82:	180c      	adds	r4, r1, r0
    3c84:	4294      	cmp	r4, r2
    3c86:	d103      	bne.n	3c90 <_free_r+0x80>
    3c88:	6814      	ldr	r4, [r2, #0]
    3c8a:	6852      	ldr	r2, [r2, #4]
    3c8c:	1900      	adds	r0, r0, r4
    3c8e:	6008      	str	r0, [r1, #0]
    3c90:	604a      	str	r2, [r1, #4]
    3c92:	6059      	str	r1, [r3, #4]
    3c94:	bd30      	pop	{r4, r5, pc}
    3c96:	46c0      	nop			; (mov r8, r8)
    3c98:	200001a4 	.word	0x200001a4

00003c9c <_malloc_r>:
    3c9c:	2303      	movs	r3, #3
    3c9e:	b570      	push	{r4, r5, r6, lr}
    3ca0:	1ccc      	adds	r4, r1, #3
    3ca2:	439c      	bics	r4, r3
    3ca4:	3408      	adds	r4, #8
    3ca6:	1c05      	adds	r5, r0, #0
    3ca8:	2c0c      	cmp	r4, #12
    3caa:	d201      	bcs.n	3cb0 <_malloc_r+0x14>
    3cac:	240c      	movs	r4, #12
    3cae:	e005      	b.n	3cbc <_malloc_r+0x20>
    3cb0:	2c00      	cmp	r4, #0
    3cb2:	da03      	bge.n	3cbc <_malloc_r+0x20>
    3cb4:	230c      	movs	r3, #12
    3cb6:	2000      	movs	r0, #0
    3cb8:	602b      	str	r3, [r5, #0]
    3cba:	e042      	b.n	3d42 <_malloc_r+0xa6>
    3cbc:	428c      	cmp	r4, r1
    3cbe:	d3f9      	bcc.n	3cb4 <_malloc_r+0x18>
    3cc0:	4a20      	ldr	r2, [pc, #128]	; (3d44 <_malloc_r+0xa8>)
    3cc2:	6813      	ldr	r3, [r2, #0]
    3cc4:	1c10      	adds	r0, r2, #0
    3cc6:	1c19      	adds	r1, r3, #0
    3cc8:	2900      	cmp	r1, #0
    3cca:	d013      	beq.n	3cf4 <_malloc_r+0x58>
    3ccc:	680a      	ldr	r2, [r1, #0]
    3cce:	1b12      	subs	r2, r2, r4
    3cd0:	d40d      	bmi.n	3cee <_malloc_r+0x52>
    3cd2:	2a0b      	cmp	r2, #11
    3cd4:	d902      	bls.n	3cdc <_malloc_r+0x40>
    3cd6:	600a      	str	r2, [r1, #0]
    3cd8:	188b      	adds	r3, r1, r2
    3cda:	e01f      	b.n	3d1c <_malloc_r+0x80>
    3cdc:	428b      	cmp	r3, r1
    3cde:	d102      	bne.n	3ce6 <_malloc_r+0x4a>
    3ce0:	685a      	ldr	r2, [r3, #4]
    3ce2:	6002      	str	r2, [r0, #0]
    3ce4:	e01b      	b.n	3d1e <_malloc_r+0x82>
    3ce6:	684a      	ldr	r2, [r1, #4]
    3ce8:	605a      	str	r2, [r3, #4]
    3cea:	1c0b      	adds	r3, r1, #0
    3cec:	e017      	b.n	3d1e <_malloc_r+0x82>
    3cee:	1c0b      	adds	r3, r1, #0
    3cf0:	6849      	ldr	r1, [r1, #4]
    3cf2:	e7e9      	b.n	3cc8 <_malloc_r+0x2c>
    3cf4:	4e14      	ldr	r6, [pc, #80]	; (3d48 <_malloc_r+0xac>)
    3cf6:	6833      	ldr	r3, [r6, #0]
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d103      	bne.n	3d04 <_malloc_r+0x68>
    3cfc:	1c28      	adds	r0, r5, #0
    3cfe:	f000 fae3 	bl	42c8 <_sbrk_r>
    3d02:	6030      	str	r0, [r6, #0]
    3d04:	1c28      	adds	r0, r5, #0
    3d06:	1c21      	adds	r1, r4, #0
    3d08:	f000 fade 	bl	42c8 <_sbrk_r>
    3d0c:	1c03      	adds	r3, r0, #0
    3d0e:	1c42      	adds	r2, r0, #1
    3d10:	d0d0      	beq.n	3cb4 <_malloc_r+0x18>
    3d12:	2203      	movs	r2, #3
    3d14:	1cc6      	adds	r6, r0, #3
    3d16:	4396      	bics	r6, r2
    3d18:	4286      	cmp	r6, r0
    3d1a:	d10a      	bne.n	3d32 <_malloc_r+0x96>
    3d1c:	601c      	str	r4, [r3, #0]
    3d1e:	1c18      	adds	r0, r3, #0
    3d20:	2107      	movs	r1, #7
    3d22:	300b      	adds	r0, #11
    3d24:	1d1a      	adds	r2, r3, #4
    3d26:	4388      	bics	r0, r1
    3d28:	1a82      	subs	r2, r0, r2
    3d2a:	d00a      	beq.n	3d42 <_malloc_r+0xa6>
    3d2c:	4251      	negs	r1, r2
    3d2e:	5099      	str	r1, [r3, r2]
    3d30:	e007      	b.n	3d42 <_malloc_r+0xa6>
    3d32:	1a31      	subs	r1, r6, r0
    3d34:	1c28      	adds	r0, r5, #0
    3d36:	f000 fac7 	bl	42c8 <_sbrk_r>
    3d3a:	1c43      	adds	r3, r0, #1
    3d3c:	d0ba      	beq.n	3cb4 <_malloc_r+0x18>
    3d3e:	1c33      	adds	r3, r6, #0
    3d40:	e7ec      	b.n	3d1c <_malloc_r+0x80>
    3d42:	bd70      	pop	{r4, r5, r6, pc}
    3d44:	200001a4 	.word	0x200001a4
    3d48:	200001a0 	.word	0x200001a0

00003d4c <__sfputc_r>:
    3d4c:	6893      	ldr	r3, [r2, #8]
    3d4e:	b510      	push	{r4, lr}
    3d50:	3b01      	subs	r3, #1
    3d52:	6093      	str	r3, [r2, #8]
    3d54:	2b00      	cmp	r3, #0
    3d56:	da05      	bge.n	3d64 <__sfputc_r+0x18>
    3d58:	6994      	ldr	r4, [r2, #24]
    3d5a:	42a3      	cmp	r3, r4
    3d5c:	db08      	blt.n	3d70 <__sfputc_r+0x24>
    3d5e:	b2cb      	uxtb	r3, r1
    3d60:	2b0a      	cmp	r3, #10
    3d62:	d005      	beq.n	3d70 <__sfputc_r+0x24>
    3d64:	6813      	ldr	r3, [r2, #0]
    3d66:	1c58      	adds	r0, r3, #1
    3d68:	6010      	str	r0, [r2, #0]
    3d6a:	7019      	strb	r1, [r3, #0]
    3d6c:	b2c8      	uxtb	r0, r1
    3d6e:	e001      	b.n	3d74 <__sfputc_r+0x28>
    3d70:	f000 fb08 	bl	4384 <__swbuf_r>
    3d74:	bd10      	pop	{r4, pc}

00003d76 <__sfputs_r>:
    3d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d78:	1c06      	adds	r6, r0, #0
    3d7a:	1c0f      	adds	r7, r1, #0
    3d7c:	1c14      	adds	r4, r2, #0
    3d7e:	18d5      	adds	r5, r2, r3
    3d80:	42ac      	cmp	r4, r5
    3d82:	d008      	beq.n	3d96 <__sfputs_r+0x20>
    3d84:	7821      	ldrb	r1, [r4, #0]
    3d86:	1c30      	adds	r0, r6, #0
    3d88:	1c3a      	adds	r2, r7, #0
    3d8a:	f7ff ffdf 	bl	3d4c <__sfputc_r>
    3d8e:	3401      	adds	r4, #1
    3d90:	1c43      	adds	r3, r0, #1
    3d92:	d1f5      	bne.n	3d80 <__sfputs_r+0xa>
    3d94:	e000      	b.n	3d98 <__sfputs_r+0x22>
    3d96:	2000      	movs	r0, #0
    3d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003d9c <_vfiprintf_r>:
    3d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d9e:	b09f      	sub	sp, #124	; 0x7c
    3da0:	1c06      	adds	r6, r0, #0
    3da2:	1c0f      	adds	r7, r1, #0
    3da4:	9202      	str	r2, [sp, #8]
    3da6:	9305      	str	r3, [sp, #20]
    3da8:	2800      	cmp	r0, #0
    3daa:	d004      	beq.n	3db6 <_vfiprintf_r+0x1a>
    3dac:	6983      	ldr	r3, [r0, #24]
    3dae:	2b00      	cmp	r3, #0
    3db0:	d101      	bne.n	3db6 <_vfiprintf_r+0x1a>
    3db2:	f7ff fe91 	bl	3ad8 <__sinit>
    3db6:	4b79      	ldr	r3, [pc, #484]	; (3f9c <_vfiprintf_r+0x200>)
    3db8:	429f      	cmp	r7, r3
    3dba:	d101      	bne.n	3dc0 <_vfiprintf_r+0x24>
    3dbc:	6877      	ldr	r7, [r6, #4]
    3dbe:	e008      	b.n	3dd2 <_vfiprintf_r+0x36>
    3dc0:	4b77      	ldr	r3, [pc, #476]	; (3fa0 <_vfiprintf_r+0x204>)
    3dc2:	429f      	cmp	r7, r3
    3dc4:	d101      	bne.n	3dca <_vfiprintf_r+0x2e>
    3dc6:	68b7      	ldr	r7, [r6, #8]
    3dc8:	e003      	b.n	3dd2 <_vfiprintf_r+0x36>
    3dca:	4b76      	ldr	r3, [pc, #472]	; (3fa4 <_vfiprintf_r+0x208>)
    3dcc:	429f      	cmp	r7, r3
    3dce:	d100      	bne.n	3dd2 <_vfiprintf_r+0x36>
    3dd0:	68f7      	ldr	r7, [r6, #12]
    3dd2:	89bb      	ldrh	r3, [r7, #12]
    3dd4:	071b      	lsls	r3, r3, #28
    3dd6:	d50a      	bpl.n	3dee <_vfiprintf_r+0x52>
    3dd8:	693b      	ldr	r3, [r7, #16]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d007      	beq.n	3dee <_vfiprintf_r+0x52>
    3dde:	2300      	movs	r3, #0
    3de0:	ad06      	add	r5, sp, #24
    3de2:	616b      	str	r3, [r5, #20]
    3de4:	3320      	adds	r3, #32
    3de6:	766b      	strb	r3, [r5, #25]
    3de8:	3310      	adds	r3, #16
    3dea:	76ab      	strb	r3, [r5, #26]
    3dec:	e03d      	b.n	3e6a <_vfiprintf_r+0xce>
    3dee:	1c30      	adds	r0, r6, #0
    3df0:	1c39      	adds	r1, r7, #0
    3df2:	f000 fb33 	bl	445c <__swsetup_r>
    3df6:	2800      	cmp	r0, #0
    3df8:	d0f1      	beq.n	3dde <_vfiprintf_r+0x42>
    3dfa:	2001      	movs	r0, #1
    3dfc:	4240      	negs	r0, r0
    3dfe:	e0ca      	b.n	3f96 <_vfiprintf_r+0x1fa>
    3e00:	9a05      	ldr	r2, [sp, #20]
    3e02:	1d11      	adds	r1, r2, #4
    3e04:	6812      	ldr	r2, [r2, #0]
    3e06:	9105      	str	r1, [sp, #20]
    3e08:	2a00      	cmp	r2, #0
    3e0a:	db7e      	blt.n	3f0a <_vfiprintf_r+0x16e>
    3e0c:	9209      	str	r2, [sp, #36]	; 0x24
    3e0e:	3401      	adds	r4, #1
    3e10:	7823      	ldrb	r3, [r4, #0]
    3e12:	2b2e      	cmp	r3, #46	; 0x2e
    3e14:	d100      	bne.n	3e18 <_vfiprintf_r+0x7c>
    3e16:	e089      	b.n	3f2c <_vfiprintf_r+0x190>
    3e18:	7821      	ldrb	r1, [r4, #0]
    3e1a:	4863      	ldr	r0, [pc, #396]	; (3fa8 <_vfiprintf_r+0x20c>)
    3e1c:	2203      	movs	r2, #3
    3e1e:	f000 fc0f 	bl	4640 <memchr>
    3e22:	2800      	cmp	r0, #0
    3e24:	d008      	beq.n	3e38 <_vfiprintf_r+0x9c>
    3e26:	4b60      	ldr	r3, [pc, #384]	; (3fa8 <_vfiprintf_r+0x20c>)
    3e28:	3401      	adds	r4, #1
    3e2a:	1ac0      	subs	r0, r0, r3
    3e2c:	2340      	movs	r3, #64	; 0x40
    3e2e:	4083      	lsls	r3, r0
    3e30:	1c18      	adds	r0, r3, #0
    3e32:	682b      	ldr	r3, [r5, #0]
    3e34:	4318      	orrs	r0, r3
    3e36:	6028      	str	r0, [r5, #0]
    3e38:	7821      	ldrb	r1, [r4, #0]
    3e3a:	1c63      	adds	r3, r4, #1
    3e3c:	485b      	ldr	r0, [pc, #364]	; (3fac <_vfiprintf_r+0x210>)
    3e3e:	2206      	movs	r2, #6
    3e40:	9302      	str	r3, [sp, #8]
    3e42:	7629      	strb	r1, [r5, #24]
    3e44:	f000 fbfc 	bl	4640 <memchr>
    3e48:	2800      	cmp	r0, #0
    3e4a:	d100      	bne.n	3e4e <_vfiprintf_r+0xb2>
    3e4c:	e091      	b.n	3f72 <_vfiprintf_r+0x1d6>
    3e4e:	4b58      	ldr	r3, [pc, #352]	; (3fb0 <_vfiprintf_r+0x214>)
    3e50:	2b00      	cmp	r3, #0
    3e52:	d000      	beq.n	3e56 <_vfiprintf_r+0xba>
    3e54:	e084      	b.n	3f60 <_vfiprintf_r+0x1c4>
    3e56:	2207      	movs	r2, #7
    3e58:	9b05      	ldr	r3, [sp, #20]
    3e5a:	3307      	adds	r3, #7
    3e5c:	4393      	bics	r3, r2
    3e5e:	3308      	adds	r3, #8
    3e60:	9305      	str	r3, [sp, #20]
    3e62:	696b      	ldr	r3, [r5, #20]
    3e64:	9a03      	ldr	r2, [sp, #12]
    3e66:	189b      	adds	r3, r3, r2
    3e68:	616b      	str	r3, [r5, #20]
    3e6a:	9c02      	ldr	r4, [sp, #8]
    3e6c:	7823      	ldrb	r3, [r4, #0]
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d104      	bne.n	3e7c <_vfiprintf_r+0xe0>
    3e72:	9b02      	ldr	r3, [sp, #8]
    3e74:	1ae3      	subs	r3, r4, r3
    3e76:	9304      	str	r3, [sp, #16]
    3e78:	d011      	beq.n	3e9e <_vfiprintf_r+0x102>
    3e7a:	e003      	b.n	3e84 <_vfiprintf_r+0xe8>
    3e7c:	2b25      	cmp	r3, #37	; 0x25
    3e7e:	d0f8      	beq.n	3e72 <_vfiprintf_r+0xd6>
    3e80:	3401      	adds	r4, #1
    3e82:	e7f3      	b.n	3e6c <_vfiprintf_r+0xd0>
    3e84:	9b04      	ldr	r3, [sp, #16]
    3e86:	1c30      	adds	r0, r6, #0
    3e88:	1c39      	adds	r1, r7, #0
    3e8a:	9a02      	ldr	r2, [sp, #8]
    3e8c:	f7ff ff73 	bl	3d76 <__sfputs_r>
    3e90:	1c43      	adds	r3, r0, #1
    3e92:	d07b      	beq.n	3f8c <_vfiprintf_r+0x1f0>
    3e94:	696a      	ldr	r2, [r5, #20]
    3e96:	9b04      	ldr	r3, [sp, #16]
    3e98:	4694      	mov	ip, r2
    3e9a:	4463      	add	r3, ip
    3e9c:	616b      	str	r3, [r5, #20]
    3e9e:	7823      	ldrb	r3, [r4, #0]
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	d073      	beq.n	3f8c <_vfiprintf_r+0x1f0>
    3ea4:	2201      	movs	r2, #1
    3ea6:	2300      	movs	r3, #0
    3ea8:	4252      	negs	r2, r2
    3eaa:	606a      	str	r2, [r5, #4]
    3eac:	a902      	add	r1, sp, #8
    3eae:	3254      	adds	r2, #84	; 0x54
    3eb0:	1852      	adds	r2, r2, r1
    3eb2:	3401      	adds	r4, #1
    3eb4:	602b      	str	r3, [r5, #0]
    3eb6:	60eb      	str	r3, [r5, #12]
    3eb8:	60ab      	str	r3, [r5, #8]
    3eba:	7013      	strb	r3, [r2, #0]
    3ebc:	65ab      	str	r3, [r5, #88]	; 0x58
    3ebe:	7821      	ldrb	r1, [r4, #0]
    3ec0:	483c      	ldr	r0, [pc, #240]	; (3fb4 <_vfiprintf_r+0x218>)
    3ec2:	2205      	movs	r2, #5
    3ec4:	f000 fbbc 	bl	4640 <memchr>
    3ec8:	2800      	cmp	r0, #0
    3eca:	d009      	beq.n	3ee0 <_vfiprintf_r+0x144>
    3ecc:	4b39      	ldr	r3, [pc, #228]	; (3fb4 <_vfiprintf_r+0x218>)
    3ece:	3401      	adds	r4, #1
    3ed0:	1ac0      	subs	r0, r0, r3
    3ed2:	2301      	movs	r3, #1
    3ed4:	4083      	lsls	r3, r0
    3ed6:	1c18      	adds	r0, r3, #0
    3ed8:	682b      	ldr	r3, [r5, #0]
    3eda:	4318      	orrs	r0, r3
    3edc:	6028      	str	r0, [r5, #0]
    3ede:	e7ee      	b.n	3ebe <_vfiprintf_r+0x122>
    3ee0:	682b      	ldr	r3, [r5, #0]
    3ee2:	06da      	lsls	r2, r3, #27
    3ee4:	d504      	bpl.n	3ef0 <_vfiprintf_r+0x154>
    3ee6:	2253      	movs	r2, #83	; 0x53
    3ee8:	2120      	movs	r1, #32
    3eea:	a802      	add	r0, sp, #8
    3eec:	1812      	adds	r2, r2, r0
    3eee:	7011      	strb	r1, [r2, #0]
    3ef0:	071a      	lsls	r2, r3, #28
    3ef2:	d504      	bpl.n	3efe <_vfiprintf_r+0x162>
    3ef4:	2253      	movs	r2, #83	; 0x53
    3ef6:	212b      	movs	r1, #43	; 0x2b
    3ef8:	a802      	add	r0, sp, #8
    3efa:	1812      	adds	r2, r2, r0
    3efc:	7011      	strb	r1, [r2, #0]
    3efe:	7822      	ldrb	r2, [r4, #0]
    3f00:	2a2a      	cmp	r2, #42	; 0x2a
    3f02:	d100      	bne.n	3f06 <_vfiprintf_r+0x16a>
    3f04:	e77c      	b.n	3e00 <_vfiprintf_r+0x64>
    3f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f08:	e005      	b.n	3f16 <_vfiprintf_r+0x17a>
    3f0a:	4252      	negs	r2, r2
    3f0c:	60ea      	str	r2, [r5, #12]
    3f0e:	2202      	movs	r2, #2
    3f10:	4313      	orrs	r3, r2
    3f12:	602b      	str	r3, [r5, #0]
    3f14:	e77b      	b.n	3e0e <_vfiprintf_r+0x72>
    3f16:	7822      	ldrb	r2, [r4, #0]
    3f18:	3a30      	subs	r2, #48	; 0x30
    3f1a:	2a09      	cmp	r2, #9
    3f1c:	d804      	bhi.n	3f28 <_vfiprintf_r+0x18c>
    3f1e:	210a      	movs	r1, #10
    3f20:	434b      	muls	r3, r1
    3f22:	3401      	adds	r4, #1
    3f24:	189b      	adds	r3, r3, r2
    3f26:	e7f6      	b.n	3f16 <_vfiprintf_r+0x17a>
    3f28:	9309      	str	r3, [sp, #36]	; 0x24
    3f2a:	e771      	b.n	3e10 <_vfiprintf_r+0x74>
    3f2c:	7863      	ldrb	r3, [r4, #1]
    3f2e:	2b2a      	cmp	r3, #42	; 0x2a
    3f30:	d109      	bne.n	3f46 <_vfiprintf_r+0x1aa>
    3f32:	9b05      	ldr	r3, [sp, #20]
    3f34:	3402      	adds	r4, #2
    3f36:	1d1a      	adds	r2, r3, #4
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	9205      	str	r2, [sp, #20]
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	da0d      	bge.n	3f5c <_vfiprintf_r+0x1c0>
    3f40:	2301      	movs	r3, #1
    3f42:	425b      	negs	r3, r3
    3f44:	e00a      	b.n	3f5c <_vfiprintf_r+0x1c0>
    3f46:	2300      	movs	r3, #0
    3f48:	3401      	adds	r4, #1
    3f4a:	7822      	ldrb	r2, [r4, #0]
    3f4c:	3a30      	subs	r2, #48	; 0x30
    3f4e:	2a09      	cmp	r2, #9
    3f50:	d804      	bhi.n	3f5c <_vfiprintf_r+0x1c0>
    3f52:	210a      	movs	r1, #10
    3f54:	434b      	muls	r3, r1
    3f56:	3401      	adds	r4, #1
    3f58:	189b      	adds	r3, r3, r2
    3f5a:	e7f6      	b.n	3f4a <_vfiprintf_r+0x1ae>
    3f5c:	9307      	str	r3, [sp, #28]
    3f5e:	e75b      	b.n	3e18 <_vfiprintf_r+0x7c>
    3f60:	ab05      	add	r3, sp, #20
    3f62:	9300      	str	r3, [sp, #0]
    3f64:	1c30      	adds	r0, r6, #0
    3f66:	1c29      	adds	r1, r5, #0
    3f68:	1c3a      	adds	r2, r7, #0
    3f6a:	4b13      	ldr	r3, [pc, #76]	; (3fb8 <_vfiprintf_r+0x21c>)
    3f6c:	e000      	b.n	3f70 <_vfiprintf_r+0x1d4>
    3f6e:	bf00      	nop
    3f70:	e007      	b.n	3f82 <_vfiprintf_r+0x1e6>
    3f72:	ab05      	add	r3, sp, #20
    3f74:	9300      	str	r3, [sp, #0]
    3f76:	1c30      	adds	r0, r6, #0
    3f78:	1c29      	adds	r1, r5, #0
    3f7a:	1c3a      	adds	r2, r7, #0
    3f7c:	4b0e      	ldr	r3, [pc, #56]	; (3fb8 <_vfiprintf_r+0x21c>)
    3f7e:	f000 f88b 	bl	4098 <_printf_i>
    3f82:	9003      	str	r0, [sp, #12]
    3f84:	9b03      	ldr	r3, [sp, #12]
    3f86:	3301      	adds	r3, #1
    3f88:	d000      	beq.n	3f8c <_vfiprintf_r+0x1f0>
    3f8a:	e76a      	b.n	3e62 <_vfiprintf_r+0xc6>
    3f8c:	89bb      	ldrh	r3, [r7, #12]
    3f8e:	065b      	lsls	r3, r3, #25
    3f90:	d500      	bpl.n	3f94 <_vfiprintf_r+0x1f8>
    3f92:	e732      	b.n	3dfa <_vfiprintf_r+0x5e>
    3f94:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3f96:	b01f      	add	sp, #124	; 0x7c
    3f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	00004850 	.word	0x00004850
    3fa0:	00004870 	.word	0x00004870
    3fa4:	00004890 	.word	0x00004890
    3fa8:	000048b6 	.word	0x000048b6
    3fac:	000048ba 	.word	0x000048ba
    3fb0:	00000000 	.word	0x00000000
    3fb4:	000048b0 	.word	0x000048b0
    3fb8:	00003d77 	.word	0x00003d77

00003fbc <_printf_common>:
    3fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fbe:	1c17      	adds	r7, r2, #0
    3fc0:	9301      	str	r3, [sp, #4]
    3fc2:	690a      	ldr	r2, [r1, #16]
    3fc4:	688b      	ldr	r3, [r1, #8]
    3fc6:	9000      	str	r0, [sp, #0]
    3fc8:	1c0c      	adds	r4, r1, #0
    3fca:	4293      	cmp	r3, r2
    3fcc:	da00      	bge.n	3fd0 <_printf_common+0x14>
    3fce:	1c13      	adds	r3, r2, #0
    3fd0:	1c22      	adds	r2, r4, #0
    3fd2:	603b      	str	r3, [r7, #0]
    3fd4:	3243      	adds	r2, #67	; 0x43
    3fd6:	7812      	ldrb	r2, [r2, #0]
    3fd8:	2a00      	cmp	r2, #0
    3fda:	d001      	beq.n	3fe0 <_printf_common+0x24>
    3fdc:	3301      	adds	r3, #1
    3fde:	603b      	str	r3, [r7, #0]
    3fe0:	6823      	ldr	r3, [r4, #0]
    3fe2:	069b      	lsls	r3, r3, #26
    3fe4:	d502      	bpl.n	3fec <_printf_common+0x30>
    3fe6:	683b      	ldr	r3, [r7, #0]
    3fe8:	3302      	adds	r3, #2
    3fea:	603b      	str	r3, [r7, #0]
    3fec:	2506      	movs	r5, #6
    3fee:	6823      	ldr	r3, [r4, #0]
    3ff0:	401d      	ands	r5, r3
    3ff2:	d01e      	beq.n	4032 <_printf_common+0x76>
    3ff4:	1c23      	adds	r3, r4, #0
    3ff6:	3343      	adds	r3, #67	; 0x43
    3ff8:	781b      	ldrb	r3, [r3, #0]
    3ffa:	1e5a      	subs	r2, r3, #1
    3ffc:	4193      	sbcs	r3, r2
    3ffe:	6822      	ldr	r2, [r4, #0]
    4000:	0692      	lsls	r2, r2, #26
    4002:	d51c      	bpl.n	403e <_printf_common+0x82>
    4004:	2030      	movs	r0, #48	; 0x30
    4006:	18e1      	adds	r1, r4, r3
    4008:	3140      	adds	r1, #64	; 0x40
    400a:	70c8      	strb	r0, [r1, #3]
    400c:	1c21      	adds	r1, r4, #0
    400e:	1c5a      	adds	r2, r3, #1
    4010:	3145      	adds	r1, #69	; 0x45
    4012:	7809      	ldrb	r1, [r1, #0]
    4014:	18a2      	adds	r2, r4, r2
    4016:	3240      	adds	r2, #64	; 0x40
    4018:	3302      	adds	r3, #2
    401a:	70d1      	strb	r1, [r2, #3]
    401c:	e00f      	b.n	403e <_printf_common+0x82>
    401e:	1c22      	adds	r2, r4, #0
    4020:	2301      	movs	r3, #1
    4022:	9800      	ldr	r0, [sp, #0]
    4024:	9901      	ldr	r1, [sp, #4]
    4026:	3219      	adds	r2, #25
    4028:	9e08      	ldr	r6, [sp, #32]
    402a:	47b0      	blx	r6
    402c:	1c43      	adds	r3, r0, #1
    402e:	d00e      	beq.n	404e <_printf_common+0x92>
    4030:	3501      	adds	r5, #1
    4032:	68e3      	ldr	r3, [r4, #12]
    4034:	683a      	ldr	r2, [r7, #0]
    4036:	1a9b      	subs	r3, r3, r2
    4038:	429d      	cmp	r5, r3
    403a:	dbf0      	blt.n	401e <_printf_common+0x62>
    403c:	e7da      	b.n	3ff4 <_printf_common+0x38>
    403e:	1c22      	adds	r2, r4, #0
    4040:	9800      	ldr	r0, [sp, #0]
    4042:	9901      	ldr	r1, [sp, #4]
    4044:	3243      	adds	r2, #67	; 0x43
    4046:	9d08      	ldr	r5, [sp, #32]
    4048:	47a8      	blx	r5
    404a:	1c43      	adds	r3, r0, #1
    404c:	d102      	bne.n	4054 <_printf_common+0x98>
    404e:	2001      	movs	r0, #1
    4050:	4240      	negs	r0, r0
    4052:	e020      	b.n	4096 <_printf_common+0xda>
    4054:	2306      	movs	r3, #6
    4056:	6820      	ldr	r0, [r4, #0]
    4058:	68e1      	ldr	r1, [r4, #12]
    405a:	683a      	ldr	r2, [r7, #0]
    405c:	4003      	ands	r3, r0
    405e:	2500      	movs	r5, #0
    4060:	2b04      	cmp	r3, #4
    4062:	d103      	bne.n	406c <_printf_common+0xb0>
    4064:	1a8d      	subs	r5, r1, r2
    4066:	43eb      	mvns	r3, r5
    4068:	17db      	asrs	r3, r3, #31
    406a:	401d      	ands	r5, r3
    406c:	68a3      	ldr	r3, [r4, #8]
    406e:	6922      	ldr	r2, [r4, #16]
    4070:	4293      	cmp	r3, r2
    4072:	dd01      	ble.n	4078 <_printf_common+0xbc>
    4074:	1a9b      	subs	r3, r3, r2
    4076:	18ed      	adds	r5, r5, r3
    4078:	2700      	movs	r7, #0
    407a:	42af      	cmp	r7, r5
    407c:	da0a      	bge.n	4094 <_printf_common+0xd8>
    407e:	1c22      	adds	r2, r4, #0
    4080:	2301      	movs	r3, #1
    4082:	9800      	ldr	r0, [sp, #0]
    4084:	9901      	ldr	r1, [sp, #4]
    4086:	321a      	adds	r2, #26
    4088:	9e08      	ldr	r6, [sp, #32]
    408a:	47b0      	blx	r6
    408c:	1c43      	adds	r3, r0, #1
    408e:	d0de      	beq.n	404e <_printf_common+0x92>
    4090:	3701      	adds	r7, #1
    4092:	e7f2      	b.n	407a <_printf_common+0xbe>
    4094:	2000      	movs	r0, #0
    4096:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004098 <_printf_i>:
    4098:	b5f0      	push	{r4, r5, r6, r7, lr}
    409a:	b08b      	sub	sp, #44	; 0x2c
    409c:	9206      	str	r2, [sp, #24]
    409e:	1c0a      	adds	r2, r1, #0
    40a0:	3243      	adds	r2, #67	; 0x43
    40a2:	9307      	str	r3, [sp, #28]
    40a4:	9005      	str	r0, [sp, #20]
    40a6:	9204      	str	r2, [sp, #16]
    40a8:	7e0a      	ldrb	r2, [r1, #24]
    40aa:	1c0c      	adds	r4, r1, #0
    40ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
    40ae:	2a6e      	cmp	r2, #110	; 0x6e
    40b0:	d100      	bne.n	40b4 <_printf_i+0x1c>
    40b2:	e0a8      	b.n	4206 <_printf_i+0x16e>
    40b4:	d811      	bhi.n	40da <_printf_i+0x42>
    40b6:	2a63      	cmp	r2, #99	; 0x63
    40b8:	d022      	beq.n	4100 <_printf_i+0x68>
    40ba:	d809      	bhi.n	40d0 <_printf_i+0x38>
    40bc:	2a00      	cmp	r2, #0
    40be:	d100      	bne.n	40c2 <_printf_i+0x2a>
    40c0:	e0b2      	b.n	4228 <_printf_i+0x190>
    40c2:	2a58      	cmp	r2, #88	; 0x58
    40c4:	d000      	beq.n	40c8 <_printf_i+0x30>
    40c6:	e0c2      	b.n	424e <_printf_i+0x1b6>
    40c8:	3145      	adds	r1, #69	; 0x45
    40ca:	700a      	strb	r2, [r1, #0]
    40cc:	4a7c      	ldr	r2, [pc, #496]	; (42c0 <_printf_i+0x228>)
    40ce:	e04f      	b.n	4170 <_printf_i+0xd8>
    40d0:	2a64      	cmp	r2, #100	; 0x64
    40d2:	d01d      	beq.n	4110 <_printf_i+0x78>
    40d4:	2a69      	cmp	r2, #105	; 0x69
    40d6:	d01b      	beq.n	4110 <_printf_i+0x78>
    40d8:	e0b9      	b.n	424e <_printf_i+0x1b6>
    40da:	2a73      	cmp	r2, #115	; 0x73
    40dc:	d100      	bne.n	40e0 <_printf_i+0x48>
    40de:	e0a7      	b.n	4230 <_printf_i+0x198>
    40e0:	d809      	bhi.n	40f6 <_printf_i+0x5e>
    40e2:	2a6f      	cmp	r2, #111	; 0x6f
    40e4:	d029      	beq.n	413a <_printf_i+0xa2>
    40e6:	2a70      	cmp	r2, #112	; 0x70
    40e8:	d000      	beq.n	40ec <_printf_i+0x54>
    40ea:	e0b0      	b.n	424e <_printf_i+0x1b6>
    40ec:	2220      	movs	r2, #32
    40ee:	6809      	ldr	r1, [r1, #0]
    40f0:	430a      	orrs	r2, r1
    40f2:	6022      	str	r2, [r4, #0]
    40f4:	e037      	b.n	4166 <_printf_i+0xce>
    40f6:	2a75      	cmp	r2, #117	; 0x75
    40f8:	d01f      	beq.n	413a <_printf_i+0xa2>
    40fa:	2a78      	cmp	r2, #120	; 0x78
    40fc:	d033      	beq.n	4166 <_printf_i+0xce>
    40fe:	e0a6      	b.n	424e <_printf_i+0x1b6>
    4100:	1c0e      	adds	r6, r1, #0
    4102:	681a      	ldr	r2, [r3, #0]
    4104:	3642      	adds	r6, #66	; 0x42
    4106:	1d11      	adds	r1, r2, #4
    4108:	6019      	str	r1, [r3, #0]
    410a:	6813      	ldr	r3, [r2, #0]
    410c:	7033      	strb	r3, [r6, #0]
    410e:	e0a1      	b.n	4254 <_printf_i+0x1bc>
    4110:	6821      	ldr	r1, [r4, #0]
    4112:	681a      	ldr	r2, [r3, #0]
    4114:	0608      	lsls	r0, r1, #24
    4116:	d406      	bmi.n	4126 <_printf_i+0x8e>
    4118:	0649      	lsls	r1, r1, #25
    411a:	d504      	bpl.n	4126 <_printf_i+0x8e>
    411c:	1d11      	adds	r1, r2, #4
    411e:	6019      	str	r1, [r3, #0]
    4120:	2300      	movs	r3, #0
    4122:	5ed5      	ldrsh	r5, [r2, r3]
    4124:	e002      	b.n	412c <_printf_i+0x94>
    4126:	1d11      	adds	r1, r2, #4
    4128:	6019      	str	r1, [r3, #0]
    412a:	6815      	ldr	r5, [r2, #0]
    412c:	2d00      	cmp	r5, #0
    412e:	da3b      	bge.n	41a8 <_printf_i+0x110>
    4130:	232d      	movs	r3, #45	; 0x2d
    4132:	9a04      	ldr	r2, [sp, #16]
    4134:	426d      	negs	r5, r5
    4136:	7013      	strb	r3, [r2, #0]
    4138:	e036      	b.n	41a8 <_printf_i+0x110>
    413a:	6821      	ldr	r1, [r4, #0]
    413c:	681a      	ldr	r2, [r3, #0]
    413e:	0608      	lsls	r0, r1, #24
    4140:	d406      	bmi.n	4150 <_printf_i+0xb8>
    4142:	0649      	lsls	r1, r1, #25
    4144:	d504      	bpl.n	4150 <_printf_i+0xb8>
    4146:	6815      	ldr	r5, [r2, #0]
    4148:	1d11      	adds	r1, r2, #4
    414a:	6019      	str	r1, [r3, #0]
    414c:	b2ad      	uxth	r5, r5
    414e:	e002      	b.n	4156 <_printf_i+0xbe>
    4150:	1d11      	adds	r1, r2, #4
    4152:	6019      	str	r1, [r3, #0]
    4154:	6815      	ldr	r5, [r2, #0]
    4156:	4b5a      	ldr	r3, [pc, #360]	; (42c0 <_printf_i+0x228>)
    4158:	7e22      	ldrb	r2, [r4, #24]
    415a:	9303      	str	r3, [sp, #12]
    415c:	270a      	movs	r7, #10
    415e:	2a6f      	cmp	r2, #111	; 0x6f
    4160:	d11d      	bne.n	419e <_printf_i+0x106>
    4162:	2708      	movs	r7, #8
    4164:	e01b      	b.n	419e <_printf_i+0x106>
    4166:	1c22      	adds	r2, r4, #0
    4168:	2178      	movs	r1, #120	; 0x78
    416a:	3245      	adds	r2, #69	; 0x45
    416c:	7011      	strb	r1, [r2, #0]
    416e:	4a55      	ldr	r2, [pc, #340]	; (42c4 <_printf_i+0x22c>)
    4170:	6819      	ldr	r1, [r3, #0]
    4172:	9203      	str	r2, [sp, #12]
    4174:	1d08      	adds	r0, r1, #4
    4176:	6822      	ldr	r2, [r4, #0]
    4178:	6018      	str	r0, [r3, #0]
    417a:	680d      	ldr	r5, [r1, #0]
    417c:	0610      	lsls	r0, r2, #24
    417e:	d402      	bmi.n	4186 <_printf_i+0xee>
    4180:	0650      	lsls	r0, r2, #25
    4182:	d500      	bpl.n	4186 <_printf_i+0xee>
    4184:	b2ad      	uxth	r5, r5
    4186:	07d3      	lsls	r3, r2, #31
    4188:	d502      	bpl.n	4190 <_printf_i+0xf8>
    418a:	2320      	movs	r3, #32
    418c:	431a      	orrs	r2, r3
    418e:	6022      	str	r2, [r4, #0]
    4190:	2710      	movs	r7, #16
    4192:	2d00      	cmp	r5, #0
    4194:	d103      	bne.n	419e <_printf_i+0x106>
    4196:	2320      	movs	r3, #32
    4198:	6822      	ldr	r2, [r4, #0]
    419a:	439a      	bics	r2, r3
    419c:	6022      	str	r2, [r4, #0]
    419e:	1c23      	adds	r3, r4, #0
    41a0:	2200      	movs	r2, #0
    41a2:	3343      	adds	r3, #67	; 0x43
    41a4:	701a      	strb	r2, [r3, #0]
    41a6:	e002      	b.n	41ae <_printf_i+0x116>
    41a8:	270a      	movs	r7, #10
    41aa:	4b45      	ldr	r3, [pc, #276]	; (42c0 <_printf_i+0x228>)
    41ac:	9303      	str	r3, [sp, #12]
    41ae:	6863      	ldr	r3, [r4, #4]
    41b0:	60a3      	str	r3, [r4, #8]
    41b2:	2b00      	cmp	r3, #0
    41b4:	db03      	blt.n	41be <_printf_i+0x126>
    41b6:	2204      	movs	r2, #4
    41b8:	6821      	ldr	r1, [r4, #0]
    41ba:	4391      	bics	r1, r2
    41bc:	6021      	str	r1, [r4, #0]
    41be:	2d00      	cmp	r5, #0
    41c0:	d102      	bne.n	41c8 <_printf_i+0x130>
    41c2:	9e04      	ldr	r6, [sp, #16]
    41c4:	2b00      	cmp	r3, #0
    41c6:	d00e      	beq.n	41e6 <_printf_i+0x14e>
    41c8:	9e04      	ldr	r6, [sp, #16]
    41ca:	1c28      	adds	r0, r5, #0
    41cc:	1c39      	adds	r1, r7, #0
    41ce:	f7ff fa73 	bl	36b8 <__aeabi_uidivmod>
    41d2:	9b03      	ldr	r3, [sp, #12]
    41d4:	3e01      	subs	r6, #1
    41d6:	5c5b      	ldrb	r3, [r3, r1]
    41d8:	1c28      	adds	r0, r5, #0
    41da:	7033      	strb	r3, [r6, #0]
    41dc:	1c39      	adds	r1, r7, #0
    41de:	f7ff f9e5 	bl	35ac <__aeabi_uidiv>
    41e2:	1e05      	subs	r5, r0, #0
    41e4:	d1f1      	bne.n	41ca <_printf_i+0x132>
    41e6:	2f08      	cmp	r7, #8
    41e8:	d109      	bne.n	41fe <_printf_i+0x166>
    41ea:	6823      	ldr	r3, [r4, #0]
    41ec:	07db      	lsls	r3, r3, #31
    41ee:	d506      	bpl.n	41fe <_printf_i+0x166>
    41f0:	6863      	ldr	r3, [r4, #4]
    41f2:	6922      	ldr	r2, [r4, #16]
    41f4:	4293      	cmp	r3, r2
    41f6:	dc02      	bgt.n	41fe <_printf_i+0x166>
    41f8:	2330      	movs	r3, #48	; 0x30
    41fa:	3e01      	subs	r6, #1
    41fc:	7033      	strb	r3, [r6, #0]
    41fe:	9b04      	ldr	r3, [sp, #16]
    4200:	1b9b      	subs	r3, r3, r6
    4202:	6123      	str	r3, [r4, #16]
    4204:	e02b      	b.n	425e <_printf_i+0x1c6>
    4206:	6809      	ldr	r1, [r1, #0]
    4208:	681a      	ldr	r2, [r3, #0]
    420a:	0608      	lsls	r0, r1, #24
    420c:	d407      	bmi.n	421e <_printf_i+0x186>
    420e:	0649      	lsls	r1, r1, #25
    4210:	d505      	bpl.n	421e <_printf_i+0x186>
    4212:	1d11      	adds	r1, r2, #4
    4214:	6019      	str	r1, [r3, #0]
    4216:	6813      	ldr	r3, [r2, #0]
    4218:	8aa2      	ldrh	r2, [r4, #20]
    421a:	801a      	strh	r2, [r3, #0]
    421c:	e004      	b.n	4228 <_printf_i+0x190>
    421e:	1d11      	adds	r1, r2, #4
    4220:	6019      	str	r1, [r3, #0]
    4222:	6813      	ldr	r3, [r2, #0]
    4224:	6962      	ldr	r2, [r4, #20]
    4226:	601a      	str	r2, [r3, #0]
    4228:	2300      	movs	r3, #0
    422a:	9e04      	ldr	r6, [sp, #16]
    422c:	6123      	str	r3, [r4, #16]
    422e:	e016      	b.n	425e <_printf_i+0x1c6>
    4230:	681a      	ldr	r2, [r3, #0]
    4232:	1d11      	adds	r1, r2, #4
    4234:	6019      	str	r1, [r3, #0]
    4236:	6816      	ldr	r6, [r2, #0]
    4238:	2100      	movs	r1, #0
    423a:	1c30      	adds	r0, r6, #0
    423c:	6862      	ldr	r2, [r4, #4]
    423e:	f000 f9ff 	bl	4640 <memchr>
    4242:	2800      	cmp	r0, #0
    4244:	d001      	beq.n	424a <_printf_i+0x1b2>
    4246:	1b80      	subs	r0, r0, r6
    4248:	6060      	str	r0, [r4, #4]
    424a:	6863      	ldr	r3, [r4, #4]
    424c:	e003      	b.n	4256 <_printf_i+0x1be>
    424e:	1c26      	adds	r6, r4, #0
    4250:	3642      	adds	r6, #66	; 0x42
    4252:	7032      	strb	r2, [r6, #0]
    4254:	2301      	movs	r3, #1
    4256:	6123      	str	r3, [r4, #16]
    4258:	2300      	movs	r3, #0
    425a:	9a04      	ldr	r2, [sp, #16]
    425c:	7013      	strb	r3, [r2, #0]
    425e:	9b07      	ldr	r3, [sp, #28]
    4260:	9805      	ldr	r0, [sp, #20]
    4262:	9300      	str	r3, [sp, #0]
    4264:	1c21      	adds	r1, r4, #0
    4266:	9b06      	ldr	r3, [sp, #24]
    4268:	aa09      	add	r2, sp, #36	; 0x24
    426a:	f7ff fea7 	bl	3fbc <_printf_common>
    426e:	1c43      	adds	r3, r0, #1
    4270:	d102      	bne.n	4278 <_printf_i+0x1e0>
    4272:	2001      	movs	r0, #1
    4274:	4240      	negs	r0, r0
    4276:	e021      	b.n	42bc <_printf_i+0x224>
    4278:	6923      	ldr	r3, [r4, #16]
    427a:	9805      	ldr	r0, [sp, #20]
    427c:	9906      	ldr	r1, [sp, #24]
    427e:	1c32      	adds	r2, r6, #0
    4280:	9d07      	ldr	r5, [sp, #28]
    4282:	47a8      	blx	r5
    4284:	1c43      	adds	r3, r0, #1
    4286:	d0f4      	beq.n	4272 <_printf_i+0x1da>
    4288:	6823      	ldr	r3, [r4, #0]
    428a:	079b      	lsls	r3, r3, #30
    428c:	d405      	bmi.n	429a <_printf_i+0x202>
    428e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4290:	68e0      	ldr	r0, [r4, #12]
    4292:	4298      	cmp	r0, r3
    4294:	da12      	bge.n	42bc <_printf_i+0x224>
    4296:	1c18      	adds	r0, r3, #0
    4298:	e010      	b.n	42bc <_printf_i+0x224>
    429a:	2500      	movs	r5, #0
    429c:	68e3      	ldr	r3, [r4, #12]
    429e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    42a0:	1a9b      	subs	r3, r3, r2
    42a2:	429d      	cmp	r5, r3
    42a4:	daf3      	bge.n	428e <_printf_i+0x1f6>
    42a6:	1c22      	adds	r2, r4, #0
    42a8:	2301      	movs	r3, #1
    42aa:	9805      	ldr	r0, [sp, #20]
    42ac:	9906      	ldr	r1, [sp, #24]
    42ae:	3219      	adds	r2, #25
    42b0:	9e07      	ldr	r6, [sp, #28]
    42b2:	47b0      	blx	r6
    42b4:	1c43      	adds	r3, r0, #1
    42b6:	d0dc      	beq.n	4272 <_printf_i+0x1da>
    42b8:	3501      	adds	r5, #1
    42ba:	e7ef      	b.n	429c <_printf_i+0x204>
    42bc:	b00b      	add	sp, #44	; 0x2c
    42be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42c0:	000048c1 	.word	0x000048c1
    42c4:	000048d2 	.word	0x000048d2

000042c8 <_sbrk_r>:
    42c8:	b538      	push	{r3, r4, r5, lr}
    42ca:	2300      	movs	r3, #0
    42cc:	4c06      	ldr	r4, [pc, #24]	; (42e8 <_sbrk_r+0x20>)
    42ce:	1c05      	adds	r5, r0, #0
    42d0:	1c08      	adds	r0, r1, #0
    42d2:	6023      	str	r3, [r4, #0]
    42d4:	f7fd fb92 	bl	19fc <_sbrk>
    42d8:	1c43      	adds	r3, r0, #1
    42da:	d103      	bne.n	42e4 <_sbrk_r+0x1c>
    42dc:	6823      	ldr	r3, [r4, #0]
    42de:	2b00      	cmp	r3, #0
    42e0:	d000      	beq.n	42e4 <_sbrk_r+0x1c>
    42e2:	602b      	str	r3, [r5, #0]
    42e4:	bd38      	pop	{r3, r4, r5, pc}
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	200001d8 	.word	0x200001d8

000042ec <__sread>:
    42ec:	b538      	push	{r3, r4, r5, lr}
    42ee:	1c0c      	adds	r4, r1, #0
    42f0:	250e      	movs	r5, #14
    42f2:	5f49      	ldrsh	r1, [r1, r5]
    42f4:	f000 f9b0 	bl	4658 <_read_r>
    42f8:	2800      	cmp	r0, #0
    42fa:	db03      	blt.n	4304 <__sread+0x18>
    42fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    42fe:	181b      	adds	r3, r3, r0
    4300:	6563      	str	r3, [r4, #84]	; 0x54
    4302:	e003      	b.n	430c <__sread+0x20>
    4304:	89a2      	ldrh	r2, [r4, #12]
    4306:	4b02      	ldr	r3, [pc, #8]	; (4310 <__sread+0x24>)
    4308:	4013      	ands	r3, r2
    430a:	81a3      	strh	r3, [r4, #12]
    430c:	bd38      	pop	{r3, r4, r5, pc}
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	ffffefff 	.word	0xffffefff

00004314 <__swrite>:
    4314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4316:	1c1e      	adds	r6, r3, #0
    4318:	898b      	ldrh	r3, [r1, #12]
    431a:	1c05      	adds	r5, r0, #0
    431c:	1c0c      	adds	r4, r1, #0
    431e:	1c17      	adds	r7, r2, #0
    4320:	05db      	lsls	r3, r3, #23
    4322:	d505      	bpl.n	4330 <__swrite+0x1c>
    4324:	230e      	movs	r3, #14
    4326:	5ec9      	ldrsh	r1, [r1, r3]
    4328:	2200      	movs	r2, #0
    432a:	2302      	movs	r3, #2
    432c:	f000 f91c 	bl	4568 <_lseek_r>
    4330:	89a2      	ldrh	r2, [r4, #12]
    4332:	4b05      	ldr	r3, [pc, #20]	; (4348 <__swrite+0x34>)
    4334:	1c28      	adds	r0, r5, #0
    4336:	4013      	ands	r3, r2
    4338:	81a3      	strh	r3, [r4, #12]
    433a:	1c3a      	adds	r2, r7, #0
    433c:	230e      	movs	r3, #14
    433e:	5ee1      	ldrsh	r1, [r4, r3]
    4340:	1c33      	adds	r3, r6, #0
    4342:	f000 f877 	bl	4434 <_write_r>
    4346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4348:	ffffefff 	.word	0xffffefff

0000434c <__sseek>:
    434c:	b538      	push	{r3, r4, r5, lr}
    434e:	1c0c      	adds	r4, r1, #0
    4350:	250e      	movs	r5, #14
    4352:	5f49      	ldrsh	r1, [r1, r5]
    4354:	f000 f908 	bl	4568 <_lseek_r>
    4358:	89a3      	ldrh	r3, [r4, #12]
    435a:	1c42      	adds	r2, r0, #1
    435c:	d103      	bne.n	4366 <__sseek+0x1a>
    435e:	4a05      	ldr	r2, [pc, #20]	; (4374 <__sseek+0x28>)
    4360:	4013      	ands	r3, r2
    4362:	81a3      	strh	r3, [r4, #12]
    4364:	e004      	b.n	4370 <__sseek+0x24>
    4366:	2280      	movs	r2, #128	; 0x80
    4368:	0152      	lsls	r2, r2, #5
    436a:	4313      	orrs	r3, r2
    436c:	81a3      	strh	r3, [r4, #12]
    436e:	6560      	str	r0, [r4, #84]	; 0x54
    4370:	bd38      	pop	{r3, r4, r5, pc}
    4372:	46c0      	nop			; (mov r8, r8)
    4374:	ffffefff 	.word	0xffffefff

00004378 <__sclose>:
    4378:	b508      	push	{r3, lr}
    437a:	230e      	movs	r3, #14
    437c:	5ec9      	ldrsh	r1, [r1, r3]
    437e:	f000 f8e1 	bl	4544 <_close_r>
    4382:	bd08      	pop	{r3, pc}

00004384 <__swbuf_r>:
    4384:	b570      	push	{r4, r5, r6, lr}
    4386:	1c05      	adds	r5, r0, #0
    4388:	1c0e      	adds	r6, r1, #0
    438a:	1c14      	adds	r4, r2, #0
    438c:	2800      	cmp	r0, #0
    438e:	d004      	beq.n	439a <__swbuf_r+0x16>
    4390:	6983      	ldr	r3, [r0, #24]
    4392:	2b00      	cmp	r3, #0
    4394:	d101      	bne.n	439a <__swbuf_r+0x16>
    4396:	f7ff fb9f 	bl	3ad8 <__sinit>
    439a:	4b23      	ldr	r3, [pc, #140]	; (4428 <__swbuf_r+0xa4>)
    439c:	429c      	cmp	r4, r3
    439e:	d101      	bne.n	43a4 <__swbuf_r+0x20>
    43a0:	686c      	ldr	r4, [r5, #4]
    43a2:	e008      	b.n	43b6 <__swbuf_r+0x32>
    43a4:	4b21      	ldr	r3, [pc, #132]	; (442c <__swbuf_r+0xa8>)
    43a6:	429c      	cmp	r4, r3
    43a8:	d101      	bne.n	43ae <__swbuf_r+0x2a>
    43aa:	68ac      	ldr	r4, [r5, #8]
    43ac:	e003      	b.n	43b6 <__swbuf_r+0x32>
    43ae:	4b20      	ldr	r3, [pc, #128]	; (4430 <__swbuf_r+0xac>)
    43b0:	429c      	cmp	r4, r3
    43b2:	d100      	bne.n	43b6 <__swbuf_r+0x32>
    43b4:	68ec      	ldr	r4, [r5, #12]
    43b6:	69a3      	ldr	r3, [r4, #24]
    43b8:	60a3      	str	r3, [r4, #8]
    43ba:	89a3      	ldrh	r3, [r4, #12]
    43bc:	071b      	lsls	r3, r3, #28
    43be:	d50a      	bpl.n	43d6 <__swbuf_r+0x52>
    43c0:	6923      	ldr	r3, [r4, #16]
    43c2:	2b00      	cmp	r3, #0
    43c4:	d007      	beq.n	43d6 <__swbuf_r+0x52>
    43c6:	6823      	ldr	r3, [r4, #0]
    43c8:	6922      	ldr	r2, [r4, #16]
    43ca:	b2f6      	uxtb	r6, r6
    43cc:	1a98      	subs	r0, r3, r2
    43ce:	6963      	ldr	r3, [r4, #20]
    43d0:	4298      	cmp	r0, r3
    43d2:	db0f      	blt.n	43f4 <__swbuf_r+0x70>
    43d4:	e008      	b.n	43e8 <__swbuf_r+0x64>
    43d6:	1c28      	adds	r0, r5, #0
    43d8:	1c21      	adds	r1, r4, #0
    43da:	f000 f83f 	bl	445c <__swsetup_r>
    43de:	2800      	cmp	r0, #0
    43e0:	d0f1      	beq.n	43c6 <__swbuf_r+0x42>
    43e2:	2001      	movs	r0, #1
    43e4:	4240      	negs	r0, r0
    43e6:	e01d      	b.n	4424 <__swbuf_r+0xa0>
    43e8:	1c28      	adds	r0, r5, #0
    43ea:	1c21      	adds	r1, r4, #0
    43ec:	f7ff fb06 	bl	39fc <_fflush_r>
    43f0:	2800      	cmp	r0, #0
    43f2:	d1f6      	bne.n	43e2 <__swbuf_r+0x5e>
    43f4:	68a3      	ldr	r3, [r4, #8]
    43f6:	3001      	adds	r0, #1
    43f8:	3b01      	subs	r3, #1
    43fa:	60a3      	str	r3, [r4, #8]
    43fc:	6823      	ldr	r3, [r4, #0]
    43fe:	1c5a      	adds	r2, r3, #1
    4400:	6022      	str	r2, [r4, #0]
    4402:	701e      	strb	r6, [r3, #0]
    4404:	6963      	ldr	r3, [r4, #20]
    4406:	4298      	cmp	r0, r3
    4408:	d005      	beq.n	4416 <__swbuf_r+0x92>
    440a:	89a3      	ldrh	r3, [r4, #12]
    440c:	1c30      	adds	r0, r6, #0
    440e:	07db      	lsls	r3, r3, #31
    4410:	d508      	bpl.n	4424 <__swbuf_r+0xa0>
    4412:	2e0a      	cmp	r6, #10
    4414:	d106      	bne.n	4424 <__swbuf_r+0xa0>
    4416:	1c28      	adds	r0, r5, #0
    4418:	1c21      	adds	r1, r4, #0
    441a:	f7ff faef 	bl	39fc <_fflush_r>
    441e:	2800      	cmp	r0, #0
    4420:	d1df      	bne.n	43e2 <__swbuf_r+0x5e>
    4422:	1c30      	adds	r0, r6, #0
    4424:	bd70      	pop	{r4, r5, r6, pc}
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	00004850 	.word	0x00004850
    442c:	00004870 	.word	0x00004870
    4430:	00004890 	.word	0x00004890

00004434 <_write_r>:
    4434:	b538      	push	{r3, r4, r5, lr}
    4436:	1c05      	adds	r5, r0, #0
    4438:	2000      	movs	r0, #0
    443a:	4c07      	ldr	r4, [pc, #28]	; (4458 <_write_r+0x24>)
    443c:	6020      	str	r0, [r4, #0]
    443e:	1c08      	adds	r0, r1, #0
    4440:	1c11      	adds	r1, r2, #0
    4442:	1c1a      	adds	r2, r3, #0
    4444:	f7fc f8bc 	bl	5c0 <_write>
    4448:	1c43      	adds	r3, r0, #1
    444a:	d103      	bne.n	4454 <_write_r+0x20>
    444c:	6823      	ldr	r3, [r4, #0]
    444e:	2b00      	cmp	r3, #0
    4450:	d000      	beq.n	4454 <_write_r+0x20>
    4452:	602b      	str	r3, [r5, #0]
    4454:	bd38      	pop	{r3, r4, r5, pc}
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	200001d8 	.word	0x200001d8

0000445c <__swsetup_r>:
    445c:	4b35      	ldr	r3, [pc, #212]	; (4534 <__swsetup_r+0xd8>)
    445e:	b570      	push	{r4, r5, r6, lr}
    4460:	681d      	ldr	r5, [r3, #0]
    4462:	1c06      	adds	r6, r0, #0
    4464:	1c0c      	adds	r4, r1, #0
    4466:	2d00      	cmp	r5, #0
    4468:	d005      	beq.n	4476 <__swsetup_r+0x1a>
    446a:	69ab      	ldr	r3, [r5, #24]
    446c:	2b00      	cmp	r3, #0
    446e:	d102      	bne.n	4476 <__swsetup_r+0x1a>
    4470:	1c28      	adds	r0, r5, #0
    4472:	f7ff fb31 	bl	3ad8 <__sinit>
    4476:	4b30      	ldr	r3, [pc, #192]	; (4538 <__swsetup_r+0xdc>)
    4478:	429c      	cmp	r4, r3
    447a:	d101      	bne.n	4480 <__swsetup_r+0x24>
    447c:	686c      	ldr	r4, [r5, #4]
    447e:	e008      	b.n	4492 <__swsetup_r+0x36>
    4480:	4b2e      	ldr	r3, [pc, #184]	; (453c <__swsetup_r+0xe0>)
    4482:	429c      	cmp	r4, r3
    4484:	d101      	bne.n	448a <__swsetup_r+0x2e>
    4486:	68ac      	ldr	r4, [r5, #8]
    4488:	e003      	b.n	4492 <__swsetup_r+0x36>
    448a:	4b2d      	ldr	r3, [pc, #180]	; (4540 <__swsetup_r+0xe4>)
    448c:	429c      	cmp	r4, r3
    448e:	d100      	bne.n	4492 <__swsetup_r+0x36>
    4490:	68ec      	ldr	r4, [r5, #12]
    4492:	89a3      	ldrh	r3, [r4, #12]
    4494:	b29a      	uxth	r2, r3
    4496:	0711      	lsls	r1, r2, #28
    4498:	d423      	bmi.n	44e2 <__swsetup_r+0x86>
    449a:	06d1      	lsls	r1, r2, #27
    449c:	d407      	bmi.n	44ae <__swsetup_r+0x52>
    449e:	2209      	movs	r2, #9
    44a0:	2001      	movs	r0, #1
    44a2:	6032      	str	r2, [r6, #0]
    44a4:	3237      	adds	r2, #55	; 0x37
    44a6:	4313      	orrs	r3, r2
    44a8:	81a3      	strh	r3, [r4, #12]
    44aa:	4240      	negs	r0, r0
    44ac:	e040      	b.n	4530 <__swsetup_r+0xd4>
    44ae:	0753      	lsls	r3, r2, #29
    44b0:	d513      	bpl.n	44da <__swsetup_r+0x7e>
    44b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    44b4:	2900      	cmp	r1, #0
    44b6:	d008      	beq.n	44ca <__swsetup_r+0x6e>
    44b8:	1c23      	adds	r3, r4, #0
    44ba:	3344      	adds	r3, #68	; 0x44
    44bc:	4299      	cmp	r1, r3
    44be:	d002      	beq.n	44c6 <__swsetup_r+0x6a>
    44c0:	1c30      	adds	r0, r6, #0
    44c2:	f7ff fba5 	bl	3c10 <_free_r>
    44c6:	2300      	movs	r3, #0
    44c8:	6363      	str	r3, [r4, #52]	; 0x34
    44ca:	2224      	movs	r2, #36	; 0x24
    44cc:	89a3      	ldrh	r3, [r4, #12]
    44ce:	4393      	bics	r3, r2
    44d0:	81a3      	strh	r3, [r4, #12]
    44d2:	2300      	movs	r3, #0
    44d4:	6063      	str	r3, [r4, #4]
    44d6:	6923      	ldr	r3, [r4, #16]
    44d8:	6023      	str	r3, [r4, #0]
    44da:	2208      	movs	r2, #8
    44dc:	89a3      	ldrh	r3, [r4, #12]
    44de:	4313      	orrs	r3, r2
    44e0:	81a3      	strh	r3, [r4, #12]
    44e2:	6923      	ldr	r3, [r4, #16]
    44e4:	2b00      	cmp	r3, #0
    44e6:	d10b      	bne.n	4500 <__swsetup_r+0xa4>
    44e8:	23a0      	movs	r3, #160	; 0xa0
    44ea:	89a2      	ldrh	r2, [r4, #12]
    44ec:	009b      	lsls	r3, r3, #2
    44ee:	4013      	ands	r3, r2
    44f0:	2280      	movs	r2, #128	; 0x80
    44f2:	0092      	lsls	r2, r2, #2
    44f4:	4293      	cmp	r3, r2
    44f6:	d003      	beq.n	4500 <__swsetup_r+0xa4>
    44f8:	1c30      	adds	r0, r6, #0
    44fa:	1c21      	adds	r1, r4, #0
    44fc:	f000 f848 	bl	4590 <__smakebuf_r>
    4500:	2301      	movs	r3, #1
    4502:	89a2      	ldrh	r2, [r4, #12]
    4504:	4013      	ands	r3, r2
    4506:	d005      	beq.n	4514 <__swsetup_r+0xb8>
    4508:	2300      	movs	r3, #0
    450a:	60a3      	str	r3, [r4, #8]
    450c:	6963      	ldr	r3, [r4, #20]
    450e:	425b      	negs	r3, r3
    4510:	61a3      	str	r3, [r4, #24]
    4512:	e003      	b.n	451c <__swsetup_r+0xc0>
    4514:	0791      	lsls	r1, r2, #30
    4516:	d400      	bmi.n	451a <__swsetup_r+0xbe>
    4518:	6963      	ldr	r3, [r4, #20]
    451a:	60a3      	str	r3, [r4, #8]
    451c:	2000      	movs	r0, #0
    451e:	6923      	ldr	r3, [r4, #16]
    4520:	4283      	cmp	r3, r0
    4522:	d105      	bne.n	4530 <__swsetup_r+0xd4>
    4524:	0613      	lsls	r3, r2, #24
    4526:	d503      	bpl.n	4530 <__swsetup_r+0xd4>
    4528:	2340      	movs	r3, #64	; 0x40
    452a:	431a      	orrs	r2, r3
    452c:	81a2      	strh	r2, [r4, #12]
    452e:	3801      	subs	r0, #1
    4530:	bd70      	pop	{r4, r5, r6, pc}
    4532:	46c0      	nop			; (mov r8, r8)
    4534:	2000006c 	.word	0x2000006c
    4538:	00004850 	.word	0x00004850
    453c:	00004870 	.word	0x00004870
    4540:	00004890 	.word	0x00004890

00004544 <_close_r>:
    4544:	b538      	push	{r3, r4, r5, lr}
    4546:	2300      	movs	r3, #0
    4548:	4c06      	ldr	r4, [pc, #24]	; (4564 <_close_r+0x20>)
    454a:	1c05      	adds	r5, r0, #0
    454c:	1c08      	adds	r0, r1, #0
    454e:	6023      	str	r3, [r4, #0]
    4550:	f7fd fa66 	bl	1a20 <_close>
    4554:	1c43      	adds	r3, r0, #1
    4556:	d103      	bne.n	4560 <_close_r+0x1c>
    4558:	6823      	ldr	r3, [r4, #0]
    455a:	2b00      	cmp	r3, #0
    455c:	d000      	beq.n	4560 <_close_r+0x1c>
    455e:	602b      	str	r3, [r5, #0]
    4560:	bd38      	pop	{r3, r4, r5, pc}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	200001d8 	.word	0x200001d8

00004568 <_lseek_r>:
    4568:	b538      	push	{r3, r4, r5, lr}
    456a:	1c05      	adds	r5, r0, #0
    456c:	2000      	movs	r0, #0
    456e:	4c07      	ldr	r4, [pc, #28]	; (458c <_lseek_r+0x24>)
    4570:	6020      	str	r0, [r4, #0]
    4572:	1c08      	adds	r0, r1, #0
    4574:	1c11      	adds	r1, r2, #0
    4576:	1c1a      	adds	r2, r3, #0
    4578:	f7fd fa5e 	bl	1a38 <_lseek>
    457c:	1c43      	adds	r3, r0, #1
    457e:	d103      	bne.n	4588 <_lseek_r+0x20>
    4580:	6823      	ldr	r3, [r4, #0]
    4582:	2b00      	cmp	r3, #0
    4584:	d000      	beq.n	4588 <_lseek_r+0x20>
    4586:	602b      	str	r3, [r5, #0]
    4588:	bd38      	pop	{r3, r4, r5, pc}
    458a:	46c0      	nop			; (mov r8, r8)
    458c:	200001d8 	.word	0x200001d8

00004590 <__smakebuf_r>:
    4590:	b5f0      	push	{r4, r5, r6, r7, lr}
    4592:	898b      	ldrh	r3, [r1, #12]
    4594:	b091      	sub	sp, #68	; 0x44
    4596:	079b      	lsls	r3, r3, #30
    4598:	d506      	bpl.n	45a8 <__smakebuf_r+0x18>
    459a:	1c0b      	adds	r3, r1, #0
    459c:	3347      	adds	r3, #71	; 0x47
    459e:	600b      	str	r3, [r1, #0]
    45a0:	610b      	str	r3, [r1, #16]
    45a2:	2301      	movs	r3, #1
    45a4:	614b      	str	r3, [r1, #20]
    45a6:	e045      	b.n	4634 <__smakebuf_r+0xa4>
    45a8:	1c0c      	adds	r4, r1, #0
    45aa:	230e      	movs	r3, #14
    45ac:	5ec9      	ldrsh	r1, [r1, r3]
    45ae:	1c06      	adds	r6, r0, #0
    45b0:	2900      	cmp	r1, #0
    45b2:	da04      	bge.n	45be <__smakebuf_r+0x2e>
    45b4:	2380      	movs	r3, #128	; 0x80
    45b6:	89a5      	ldrh	r5, [r4, #12]
    45b8:	401d      	ands	r5, r3
    45ba:	d110      	bne.n	45de <__smakebuf_r+0x4e>
    45bc:	e00c      	b.n	45d8 <__smakebuf_r+0x48>
    45be:	aa01      	add	r2, sp, #4
    45c0:	f000 f85e 	bl	4680 <_fstat_r>
    45c4:	2800      	cmp	r0, #0
    45c6:	dbf5      	blt.n	45b4 <__smakebuf_r+0x24>
    45c8:	23f0      	movs	r3, #240	; 0xf0
    45ca:	9d02      	ldr	r5, [sp, #8]
    45cc:	021b      	lsls	r3, r3, #8
    45ce:	401d      	ands	r5, r3
    45d0:	4b19      	ldr	r3, [pc, #100]	; (4638 <__smakebuf_r+0xa8>)
    45d2:	18ed      	adds	r5, r5, r3
    45d4:	426b      	negs	r3, r5
    45d6:	415d      	adcs	r5, r3
    45d8:	2780      	movs	r7, #128	; 0x80
    45da:	00ff      	lsls	r7, r7, #3
    45dc:	e001      	b.n	45e2 <__smakebuf_r+0x52>
    45de:	2500      	movs	r5, #0
    45e0:	2740      	movs	r7, #64	; 0x40
    45e2:	1c30      	adds	r0, r6, #0
    45e4:	1c39      	adds	r1, r7, #0
    45e6:	f7ff fb59 	bl	3c9c <_malloc_r>
    45ea:	2800      	cmp	r0, #0
    45ec:	d10c      	bne.n	4608 <__smakebuf_r+0x78>
    45ee:	89a3      	ldrh	r3, [r4, #12]
    45f0:	059a      	lsls	r2, r3, #22
    45f2:	d41f      	bmi.n	4634 <__smakebuf_r+0xa4>
    45f4:	2202      	movs	r2, #2
    45f6:	4313      	orrs	r3, r2
    45f8:	81a3      	strh	r3, [r4, #12]
    45fa:	1c23      	adds	r3, r4, #0
    45fc:	3347      	adds	r3, #71	; 0x47
    45fe:	6023      	str	r3, [r4, #0]
    4600:	6123      	str	r3, [r4, #16]
    4602:	2301      	movs	r3, #1
    4604:	6163      	str	r3, [r4, #20]
    4606:	e015      	b.n	4634 <__smakebuf_r+0xa4>
    4608:	2280      	movs	r2, #128	; 0x80
    460a:	4b0c      	ldr	r3, [pc, #48]	; (463c <__smakebuf_r+0xac>)
    460c:	62b3      	str	r3, [r6, #40]	; 0x28
    460e:	89a3      	ldrh	r3, [r4, #12]
    4610:	6020      	str	r0, [r4, #0]
    4612:	4313      	orrs	r3, r2
    4614:	81a3      	strh	r3, [r4, #12]
    4616:	6120      	str	r0, [r4, #16]
    4618:	6167      	str	r7, [r4, #20]
    461a:	2d00      	cmp	r5, #0
    461c:	d00a      	beq.n	4634 <__smakebuf_r+0xa4>
    461e:	230e      	movs	r3, #14
    4620:	5ee1      	ldrsh	r1, [r4, r3]
    4622:	1c30      	adds	r0, r6, #0
    4624:	f000 f83e 	bl	46a4 <_isatty_r>
    4628:	2800      	cmp	r0, #0
    462a:	d003      	beq.n	4634 <__smakebuf_r+0xa4>
    462c:	2201      	movs	r2, #1
    462e:	89a3      	ldrh	r3, [r4, #12]
    4630:	4313      	orrs	r3, r2
    4632:	81a3      	strh	r3, [r4, #12]
    4634:	b011      	add	sp, #68	; 0x44
    4636:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4638:	ffffe000 	.word	0xffffe000
    463c:	00003a55 	.word	0x00003a55

00004640 <memchr>:
    4640:	b2c9      	uxtb	r1, r1
    4642:	1882      	adds	r2, r0, r2
    4644:	4290      	cmp	r0, r2
    4646:	d004      	beq.n	4652 <memchr+0x12>
    4648:	7803      	ldrb	r3, [r0, #0]
    464a:	428b      	cmp	r3, r1
    464c:	d002      	beq.n	4654 <memchr+0x14>
    464e:	3001      	adds	r0, #1
    4650:	e7f8      	b.n	4644 <memchr+0x4>
    4652:	2000      	movs	r0, #0
    4654:	4770      	bx	lr
	...

00004658 <_read_r>:
    4658:	b538      	push	{r3, r4, r5, lr}
    465a:	1c05      	adds	r5, r0, #0
    465c:	2000      	movs	r0, #0
    465e:	4c07      	ldr	r4, [pc, #28]	; (467c <_read_r+0x24>)
    4660:	6020      	str	r0, [r4, #0]
    4662:	1c08      	adds	r0, r1, #0
    4664:	1c11      	adds	r1, r2, #0
    4666:	1c1a      	adds	r2, r3, #0
    4668:	f7fb ff88 	bl	57c <_read>
    466c:	1c43      	adds	r3, r0, #1
    466e:	d103      	bne.n	4678 <_read_r+0x20>
    4670:	6823      	ldr	r3, [r4, #0]
    4672:	2b00      	cmp	r3, #0
    4674:	d000      	beq.n	4678 <_read_r+0x20>
    4676:	602b      	str	r3, [r5, #0]
    4678:	bd38      	pop	{r3, r4, r5, pc}
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	200001d8 	.word	0x200001d8

00004680 <_fstat_r>:
    4680:	b538      	push	{r3, r4, r5, lr}
    4682:	2300      	movs	r3, #0
    4684:	4c06      	ldr	r4, [pc, #24]	; (46a0 <_fstat_r+0x20>)
    4686:	1c05      	adds	r5, r0, #0
    4688:	1c08      	adds	r0, r1, #0
    468a:	1c11      	adds	r1, r2, #0
    468c:	6023      	str	r3, [r4, #0]
    468e:	f7fd f9cb 	bl	1a28 <_fstat>
    4692:	1c43      	adds	r3, r0, #1
    4694:	d103      	bne.n	469e <_fstat_r+0x1e>
    4696:	6823      	ldr	r3, [r4, #0]
    4698:	2b00      	cmp	r3, #0
    469a:	d000      	beq.n	469e <_fstat_r+0x1e>
    469c:	602b      	str	r3, [r5, #0]
    469e:	bd38      	pop	{r3, r4, r5, pc}
    46a0:	200001d8 	.word	0x200001d8

000046a4 <_isatty_r>:
    46a4:	b538      	push	{r3, r4, r5, lr}
    46a6:	2300      	movs	r3, #0
    46a8:	4c06      	ldr	r4, [pc, #24]	; (46c4 <_isatty_r+0x20>)
    46aa:	1c05      	adds	r5, r0, #0
    46ac:	1c08      	adds	r0, r1, #0
    46ae:	6023      	str	r3, [r4, #0]
    46b0:	f7fd f9c0 	bl	1a34 <_isatty>
    46b4:	1c43      	adds	r3, r0, #1
    46b6:	d103      	bne.n	46c0 <_isatty_r+0x1c>
    46b8:	6823      	ldr	r3, [r4, #0]
    46ba:	2b00      	cmp	r3, #0
    46bc:	d000      	beq.n	46c0 <_isatty_r+0x1c>
    46be:	602b      	str	r3, [r5, #0]
    46c0:	bd38      	pop	{r3, r4, r5, pc}
    46c2:	46c0      	nop			; (mov r8, r8)
    46c4:	200001d8 	.word	0x200001d8
    46c8:	42000800 	.word	0x42000800
    46cc:	42000c00 	.word	0x42000c00
    46d0:	42001000 	.word	0x42001000
    46d4:	42001400 	.word	0x42001400
    46d8:	42001800 	.word	0x42001800
    46dc:	42001c00 	.word	0x42001c00
    46e0:	0c0b0a09 	.word	0x0c0b0a09
    46e4:	00000e0d 	.word	0x00000e0d

000046e8 <_tcc_intflag>:
    46e8:	00000001 00000002 00000004 00000008     ................
    46f8:	00001000 00002000 00004000 00008000     ..... ...@......
    4708:	00010000 00020000 00040000 00080000     ................
    4718:	0000105a 00001056 00001056 000010b6     Z...V...V.......
    4728:	000010b6 00001070 00001060 00001076     ....p...`...v...
    4738:	000010a4 00001324 00001304 00001304     ....$...........
    4748:	00001390 00001316 00001332 00001308     ........2.......
    4758:	00001340 00001380 00001eb9 000027b1     @............'..
    4768:	00001a3d 00002335 00002c19 00003081     =...5#...,...0..
    4778:	000027b1 00001a3d 00002335 00002c19     .'..=...5#...,..
    4788:	00003081 00001eb9 00001a3d 00002335     .0......=...5#..
    4798:	00002c19 00003081 00001eb9 000027b1     .,...0.......'..
    47a8:	00002335 00002c19 00003081 00001eb9     5#...,...0......
    47b8:	000027b1 00001a3d 00002c19 00003081     .'..=....,...0..
    47c8:	00001eb9 000027b1 00001a3d 00002335     .....'..=...5#..
    47d8:	00003081 00001eb9 000027b1 00001a3d     .0.......'..=...
    47e8:	00002335 00002c19 61786548 3025203a     5#...,..Hexa: %0
    47f8:	420a7834 203a6e69 00000000 71657246     4x.Bin: ....Freq
    4808:	636e6575 25203a79 2d202075 202d2d2d     uency: %u  ---- 
    4818:	79747544 63796320 203a656c 000a7525     Duty cycle: %u..
    4828:	00000031 00000030 746e4920 75727265     1...0... Interru
    4838:	73207370 65746174 7325203a 00000020     ps state: %s ...
    4848:	00000043                                C...

0000484c <_global_impure_ptr>:
    484c:	2000000c                                ... 

00004850 <__sf_fake_stdin>:
	...

00004870 <__sf_fake_stdout>:
	...

00004890 <__sf_fake_stderr>:
	...
    48b0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    48c0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    48d0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    48e0:	00006665                                ef..

000048e4 <_init>:
    48e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e6:	46c0      	nop			; (mov r8, r8)
    48e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48ea:	bc08      	pop	{r3}
    48ec:	469e      	mov	lr, r3
    48ee:	4770      	bx	lr

000048f0 <__init_array_start>:
    48f0:	000000dd 	.word	0x000000dd

000048f4 <_fini>:
    48f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48f6:	46c0      	nop			; (mov r8, r8)
    48f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    48fa:	bc08      	pop	{r3}
    48fc:	469e      	mov	lr, r3
    48fe:	4770      	bx	lr

00004900 <__fini_array_start>:
    4900:	000000b5 	.word	0x000000b5
