
Neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003144  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00003144  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016c  20000068  000031ac  00010068  2**2
                  ALLOC
  3 .stack        00002004  200001d4  00003318  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020038  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c38  00000000  00000000  00030123  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004393  00000000  00000000  00032d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004d0  00000000  00000000  000370ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000490  00000000  00000000  000375be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00006452  00000000  00000000  00037a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b41c  00000000  00000000  0003dea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008411f  00000000  00000000  000492bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000012bc  00000000  00000000  000cd3dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021d8 	.word	0x200021d8
       4:	0000189d 	.word	0x0000189d
       8:	00001899 	.word	0x00001899
       c:	00001899 	.word	0x00001899
	...
      2c:	00001899 	.word	0x00001899
	...
      38:	00001899 	.word	0x00001899
      3c:	00001899 	.word	0x00001899
      40:	00001899 	.word	0x00001899
      44:	00001899 	.word	0x00001899
      48:	00001899 	.word	0x00001899
      4c:	00001899 	.word	0x00001899
      50:	00001899 	.word	0x00001899
      54:	00001899 	.word	0x00001899
      58:	00001899 	.word	0x00001899
      5c:	00001899 	.word	0x00001899
      60:	00001899 	.word	0x00001899
      64:	00000e25 	.word	0x00000e25
      68:	00000e35 	.word	0x00000e35
      6c:	00000e45 	.word	0x00000e45
      70:	00000e55 	.word	0x00000e55
      74:	00000e65 	.word	0x00000e65
      78:	00000e75 	.word	0x00000e75
      7c:	00000ecd 	.word	0x00000ecd
      80:	00000edd 	.word	0x00000edd
      84:	00000eed 	.word	0x00000eed
      88:	00001899 	.word	0x00001899
      8c:	00001899 	.word	0x00001899
      90:	00001899 	.word	0x00001899
	...
      9c:	00001899 	.word	0x00001899
      a0:	00001899 	.word	0x00001899
      a4:	00000000 	.word	0x00000000
      a8:	00001899 	.word	0x00001899
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00003144 	.word	0x00003144

000000dc <frame_dummy>:
      dc:	b508      	push	{r3, lr}
      de:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4807      	ldr	r0, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4908      	ldr	r1, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd08      	pop	{r3, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	00003144 	.word	0x00003144
     108:	2000006c 	.word	0x2000006c
     10c:	00003144 	.word	0x00003144
     110:	00000000 	.word	0x00000000

00000114 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     114:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     116:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     118:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     11a:	4281      	cmp	r1, r0
     11c:	d30c      	bcc.n	138 <_sercom_get_sync_baud_val+0x24>
     11e:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     120:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     122:	3301      	adds	r3, #1
     124:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     126:	4288      	cmp	r0, r1
     128:	d9fa      	bls.n	120 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     12a:	3b01      	subs	r3, #1
     12c:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     12e:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     130:	2bff      	cmp	r3, #255	; 0xff
     132:	d801      	bhi.n	138 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     134:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
     136:	2400      	movs	r4, #0
	}
}
     138:	1c20      	adds	r0, r4, #0
     13a:	bd10      	pop	{r4, pc}

0000013c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     13c:	b5f0      	push	{r4, r5, r6, r7, lr}
     13e:	465f      	mov	r7, fp
     140:	4656      	mov	r6, sl
     142:	464d      	mov	r5, r9
     144:	4644      	mov	r4, r8
     146:	b4f0      	push	{r4, r5, r6, r7}
     148:	b089      	sub	sp, #36	; 0x24
     14a:	1c1c      	adds	r4, r3, #0
     14c:	ab12      	add	r3, sp, #72	; 0x48
     14e:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     150:	1c06      	adds	r6, r0, #0
     152:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     154:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     156:	428e      	cmp	r6, r1
     158:	d900      	bls.n	15c <_sercom_get_async_baud_val+0x20>
     15a:	e0c7      	b.n	2ec <_sercom_get_async_baud_val+0x1b0>
     15c:	1c25      	adds	r5, r4, #0
     15e:	9207      	str	r2, [sp, #28]
     160:	1c0c      	adds	r4, r1, #0
     162:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     164:	2d00      	cmp	r5, #0
     166:	d151      	bne.n	20c <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     168:	1c18      	adds	r0, r3, #0
     16a:	2100      	movs	r1, #0
     16c:	2300      	movs	r3, #0
     16e:	4d63      	ldr	r5, [pc, #396]	; (2fc <_sercom_get_async_baud_val+0x1c0>)
     170:	47a8      	blx	r5
     172:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     174:	1c26      	adds	r6, r4, #0
     176:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     178:	2300      	movs	r3, #0
     17a:	2400      	movs	r4, #0
     17c:	9302      	str	r3, [sp, #8]
     17e:	9403      	str	r4, [sp, #12]
     180:	2200      	movs	r2, #0
     182:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     184:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     186:	2120      	movs	r1, #32
     188:	468c      	mov	ip, r1
     18a:	391f      	subs	r1, #31
     18c:	9600      	str	r6, [sp, #0]
     18e:	9701      	str	r7, [sp, #4]
     190:	2420      	movs	r4, #32
     192:	4264      	negs	r4, r4
     194:	1904      	adds	r4, r0, r4
     196:	d403      	bmi.n	1a0 <_sercom_get_async_baud_val+0x64>
     198:	1c0d      	adds	r5, r1, #0
     19a:	40a5      	lsls	r5, r4
     19c:	46a8      	mov	r8, r5
     19e:	e004      	b.n	1aa <_sercom_get_async_baud_val+0x6e>
     1a0:	4664      	mov	r4, ip
     1a2:	1a24      	subs	r4, r4, r0
     1a4:	1c0d      	adds	r5, r1, #0
     1a6:	40e5      	lsrs	r5, r4
     1a8:	46a8      	mov	r8, r5
     1aa:	1c0c      	adds	r4, r1, #0
     1ac:	4084      	lsls	r4, r0
     1ae:	46a1      	mov	r9, r4

		r = r << 1;
     1b0:	1c14      	adds	r4, r2, #0
     1b2:	1c1d      	adds	r5, r3, #0
     1b4:	18a4      	adds	r4, r4, r2
     1b6:	415d      	adcs	r5, r3
     1b8:	1c22      	adds	r2, r4, #0
     1ba:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
     1bc:	465e      	mov	r6, fp
     1be:	4647      	mov	r7, r8
     1c0:	423e      	tst	r6, r7
     1c2:	d003      	beq.n	1cc <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
     1c4:	1c0e      	adds	r6, r1, #0
     1c6:	4326      	orrs	r6, r4
     1c8:	1c32      	adds	r2, r6, #0
     1ca:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
     1cc:	9c01      	ldr	r4, [sp, #4]
     1ce:	429c      	cmp	r4, r3
     1d0:	d810      	bhi.n	1f4 <_sercom_get_async_baud_val+0xb8>
     1d2:	d102      	bne.n	1da <_sercom_get_async_baud_val+0x9e>
     1d4:	9c00      	ldr	r4, [sp, #0]
     1d6:	4294      	cmp	r4, r2
     1d8:	d80c      	bhi.n	1f4 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
     1da:	9c00      	ldr	r4, [sp, #0]
     1dc:	9d01      	ldr	r5, [sp, #4]
     1de:	1b12      	subs	r2, r2, r4
     1e0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     1e2:	464d      	mov	r5, r9
     1e4:	9e02      	ldr	r6, [sp, #8]
     1e6:	9f03      	ldr	r7, [sp, #12]
     1e8:	4335      	orrs	r5, r6
     1ea:	1c3c      	adds	r4, r7, #0
     1ec:	4646      	mov	r6, r8
     1ee:	4334      	orrs	r4, r6
     1f0:	9502      	str	r5, [sp, #8]
     1f2:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1f4:	3801      	subs	r0, #1
     1f6:	d2cb      	bcs.n	190 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     1f8:	2200      	movs	r2, #0
     1fa:	2301      	movs	r3, #1
     1fc:	9802      	ldr	r0, [sp, #8]
     1fe:	9903      	ldr	r1, [sp, #12]
     200:	1a12      	subs	r2, r2, r0
     202:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     204:	0c11      	lsrs	r1, r2, #16
     206:	041b      	lsls	r3, r3, #16
     208:	4319      	orrs	r1, r3
     20a:	e06c      	b.n	2e6 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     20c:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     20e:	2d01      	cmp	r5, #1
     210:	d169      	bne.n	2e6 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     212:	0f61      	lsrs	r1, r4, #29
     214:	1c0f      	adds	r7, r1, #0
     216:	00e1      	lsls	r1, r4, #3
     218:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
     21a:	1c18      	adds	r0, r3, #0
     21c:	2100      	movs	r1, #0
     21e:	2300      	movs	r3, #0
     220:	4c36      	ldr	r4, [pc, #216]	; (2fc <_sercom_get_async_baud_val+0x1c0>)
     222:	47a0      	blx	r4
     224:	1c04      	adds	r4, r0, #0
     226:	1c0d      	adds	r5, r1, #0
     228:	2300      	movs	r3, #0
     22a:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     22c:	3320      	adds	r3, #32
     22e:	469b      	mov	fp, r3
     230:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     232:	4663      	mov	r3, ip
     234:	9305      	str	r3, [sp, #20]
     236:	46b9      	mov	r9, r7
     238:	466b      	mov	r3, sp
     23a:	7d1b      	ldrb	r3, [r3, #20]
     23c:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     23e:	2300      	movs	r3, #0
     240:	469c      	mov	ip, r3
     242:	2000      	movs	r0, #0
     244:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
     246:	223f      	movs	r2, #63	; 0x3f
     248:	9400      	str	r4, [sp, #0]
     24a:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
     24c:	2320      	movs	r3, #32
     24e:	425b      	negs	r3, r3
     250:	18d3      	adds	r3, r2, r3
     252:	d403      	bmi.n	25c <_sercom_get_async_baud_val+0x120>
     254:	1c34      	adds	r4, r6, #0
     256:	409c      	lsls	r4, r3
     258:	1c23      	adds	r3, r4, #0
     25a:	e004      	b.n	266 <_sercom_get_async_baud_val+0x12a>
     25c:	465b      	mov	r3, fp
     25e:	1a9b      	subs	r3, r3, r2
     260:	1c34      	adds	r4, r6, #0
     262:	40dc      	lsrs	r4, r3
     264:	1c23      	adds	r3, r4, #0
     266:	1c37      	adds	r7, r6, #0
     268:	4097      	lsls	r7, r2

		r = r << 1;
     26a:	1c04      	adds	r4, r0, #0
     26c:	1c0d      	adds	r5, r1, #0
     26e:	1824      	adds	r4, r4, r0
     270:	414d      	adcs	r5, r1
     272:	1c20      	adds	r0, r4, #0
     274:	1c29      	adds	r1, r5, #0
     276:	9002      	str	r0, [sp, #8]
     278:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
     27a:	4644      	mov	r4, r8
     27c:	403c      	ands	r4, r7
     27e:	46a2      	mov	sl, r4
     280:	464c      	mov	r4, r9
     282:	4023      	ands	r3, r4
     284:	4654      	mov	r4, sl
     286:	4323      	orrs	r3, r4
     288:	d005      	beq.n	296 <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
     28a:	9b02      	ldr	r3, [sp, #8]
     28c:	9c03      	ldr	r4, [sp, #12]
     28e:	1c1d      	adds	r5, r3, #0
     290:	4335      	orrs	r5, r6
     292:	1c28      	adds	r0, r5, #0
     294:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
     296:	9b01      	ldr	r3, [sp, #4]
     298:	428b      	cmp	r3, r1
     29a:	d80a      	bhi.n	2b2 <_sercom_get_async_baud_val+0x176>
     29c:	d102      	bne.n	2a4 <_sercom_get_async_baud_val+0x168>
     29e:	9b00      	ldr	r3, [sp, #0]
     2a0:	4283      	cmp	r3, r0
     2a2:	d806      	bhi.n	2b2 <_sercom_get_async_baud_val+0x176>
			r = r - d;
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	9c01      	ldr	r4, [sp, #4]
     2a8:	1ac0      	subs	r0, r0, r3
     2aa:	41a1      	sbcs	r1, r4
			q |= bit_shift;
     2ac:	4663      	mov	r3, ip
     2ae:	433b      	orrs	r3, r7
     2b0:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     2b2:	3a01      	subs	r2, #1
     2b4:	d2ca      	bcs.n	24c <_sercom_get_async_baud_val+0x110>
     2b6:	9c00      	ldr	r4, [sp, #0]
     2b8:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     2ba:	4662      	mov	r2, ip
     2bc:	9905      	ldr	r1, [sp, #20]
     2be:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
     2c0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     2c2:	4a0f      	ldr	r2, [pc, #60]	; (300 <_sercom_get_async_baud_val+0x1c4>)
     2c4:	4293      	cmp	r3, r2
     2c6:	d908      	bls.n	2da <_sercom_get_async_baud_val+0x19e>
     2c8:	9a06      	ldr	r2, [sp, #24]
     2ca:	3201      	adds	r2, #1
     2cc:	b2d2      	uxtb	r2, r2
     2ce:	9206      	str	r2, [sp, #24]
     2d0:	1c0a      	adds	r2, r1, #0
     2d2:	3201      	adds	r2, #1
     2d4:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2d6:	2a08      	cmp	r2, #8
     2d8:	d1ae      	bne.n	238 <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2da:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     2dc:	9a06      	ldr	r2, [sp, #24]
     2de:	2a08      	cmp	r2, #8
     2e0:	d004      	beq.n	2ec <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     2e2:	0351      	lsls	r1, r2, #13
     2e4:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
     2e6:	9b07      	ldr	r3, [sp, #28]
     2e8:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
     2ea:	2500      	movs	r5, #0
}
     2ec:	1c28      	adds	r0, r5, #0
     2ee:	b009      	add	sp, #36	; 0x24
     2f0:	bc3c      	pop	{r2, r3, r4, r5}
     2f2:	4690      	mov	r8, r2
     2f4:	4699      	mov	r9, r3
     2f6:	46a2      	mov	sl, r4
     2f8:	46ab      	mov	fp, r5
     2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2fc:	00001fb5 	.word	0x00001fb5
     300:	00001fff 	.word	0x00001fff

00000304 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     304:	b510      	push	{r4, lr}
     306:	b082      	sub	sp, #8
     308:	1c04      	adds	r4, r0, #0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     30a:	4b0e      	ldr	r3, [pc, #56]	; (344 <sercom_set_gclk_generator+0x40>)
     30c:	781b      	ldrb	r3, [r3, #0]
     30e:	2b00      	cmp	r3, #0
     310:	d001      	beq.n	316 <sercom_set_gclk_generator+0x12>
     312:	2900      	cmp	r1, #0
     314:	d00d      	beq.n	332 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     316:	a901      	add	r1, sp, #4
     318:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     31a:	2013      	movs	r0, #19
     31c:	4b0a      	ldr	r3, [pc, #40]	; (348 <sercom_set_gclk_generator+0x44>)
     31e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     320:	2013      	movs	r0, #19
     322:	4b0a      	ldr	r3, [pc, #40]	; (34c <sercom_set_gclk_generator+0x48>)
     324:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     326:	4b07      	ldr	r3, [pc, #28]	; (344 <sercom_set_gclk_generator+0x40>)
     328:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     32a:	2201      	movs	r2, #1
     32c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     32e:	2000      	movs	r0, #0
     330:	e006      	b.n	340 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     332:	4b04      	ldr	r3, [pc, #16]	; (344 <sercom_set_gclk_generator+0x40>)
     334:	785b      	ldrb	r3, [r3, #1]
     336:	4283      	cmp	r3, r0
     338:	d001      	beq.n	33e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     33a:	201d      	movs	r0, #29
     33c:	e000      	b.n	340 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     33e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     340:	b002      	add	sp, #8
     342:	bd10      	pop	{r4, pc}
     344:	20000084 	.word	0x20000084
     348:	00001741 	.word	0x00001741
     34c:	000016b5 	.word	0x000016b5

00000350 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     350:	4b44      	ldr	r3, [pc, #272]	; (464 <_sercom_get_default_pad+0x114>)
     352:	4298      	cmp	r0, r3
     354:	d033      	beq.n	3be <_sercom_get_default_pad+0x6e>
     356:	d806      	bhi.n	366 <_sercom_get_default_pad+0x16>
     358:	4b43      	ldr	r3, [pc, #268]	; (468 <_sercom_get_default_pad+0x118>)
     35a:	4298      	cmp	r0, r3
     35c:	d00d      	beq.n	37a <_sercom_get_default_pad+0x2a>
     35e:	4b43      	ldr	r3, [pc, #268]	; (46c <_sercom_get_default_pad+0x11c>)
     360:	4298      	cmp	r0, r3
     362:	d01b      	beq.n	39c <_sercom_get_default_pad+0x4c>
     364:	e06f      	b.n	446 <_sercom_get_default_pad+0xf6>
     366:	4b42      	ldr	r3, [pc, #264]	; (470 <_sercom_get_default_pad+0x120>)
     368:	4298      	cmp	r0, r3
     36a:	d04a      	beq.n	402 <_sercom_get_default_pad+0xb2>
     36c:	4b41      	ldr	r3, [pc, #260]	; (474 <_sercom_get_default_pad+0x124>)
     36e:	4298      	cmp	r0, r3
     370:	d058      	beq.n	424 <_sercom_get_default_pad+0xd4>
     372:	4b41      	ldr	r3, [pc, #260]	; (478 <_sercom_get_default_pad+0x128>)
     374:	4298      	cmp	r0, r3
     376:	d166      	bne.n	446 <_sercom_get_default_pad+0xf6>
     378:	e032      	b.n	3e0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     37a:	2901      	cmp	r1, #1
     37c:	d006      	beq.n	38c <_sercom_get_default_pad+0x3c>
     37e:	2900      	cmp	r1, #0
     380:	d063      	beq.n	44a <_sercom_get_default_pad+0xfa>
     382:	2902      	cmp	r1, #2
     384:	d006      	beq.n	394 <_sercom_get_default_pad+0x44>
     386:	2903      	cmp	r1, #3
     388:	d006      	beq.n	398 <_sercom_get_default_pad+0x48>
     38a:	e001      	b.n	390 <_sercom_get_default_pad+0x40>
     38c:	483b      	ldr	r0, [pc, #236]	; (47c <_sercom_get_default_pad+0x12c>)
     38e:	e067      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     390:	2000      	movs	r0, #0
     392:	e065      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     394:	483a      	ldr	r0, [pc, #232]	; (480 <_sercom_get_default_pad+0x130>)
     396:	e063      	b.n	460 <_sercom_get_default_pad+0x110>
     398:	483a      	ldr	r0, [pc, #232]	; (484 <_sercom_get_default_pad+0x134>)
     39a:	e061      	b.n	460 <_sercom_get_default_pad+0x110>
     39c:	2901      	cmp	r1, #1
     39e:	d006      	beq.n	3ae <_sercom_get_default_pad+0x5e>
     3a0:	2900      	cmp	r1, #0
     3a2:	d054      	beq.n	44e <_sercom_get_default_pad+0xfe>
     3a4:	2902      	cmp	r1, #2
     3a6:	d006      	beq.n	3b6 <_sercom_get_default_pad+0x66>
     3a8:	2903      	cmp	r1, #3
     3aa:	d006      	beq.n	3ba <_sercom_get_default_pad+0x6a>
     3ac:	e001      	b.n	3b2 <_sercom_get_default_pad+0x62>
     3ae:	4836      	ldr	r0, [pc, #216]	; (488 <_sercom_get_default_pad+0x138>)
     3b0:	e056      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e054      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	4835      	ldr	r0, [pc, #212]	; (48c <_sercom_get_default_pad+0x13c>)
     3b8:	e052      	b.n	460 <_sercom_get_default_pad+0x110>
     3ba:	4835      	ldr	r0, [pc, #212]	; (490 <_sercom_get_default_pad+0x140>)
     3bc:	e050      	b.n	460 <_sercom_get_default_pad+0x110>
     3be:	2901      	cmp	r1, #1
     3c0:	d006      	beq.n	3d0 <_sercom_get_default_pad+0x80>
     3c2:	2900      	cmp	r1, #0
     3c4:	d045      	beq.n	452 <_sercom_get_default_pad+0x102>
     3c6:	2902      	cmp	r1, #2
     3c8:	d006      	beq.n	3d8 <_sercom_get_default_pad+0x88>
     3ca:	2903      	cmp	r1, #3
     3cc:	d006      	beq.n	3dc <_sercom_get_default_pad+0x8c>
     3ce:	e001      	b.n	3d4 <_sercom_get_default_pad+0x84>
     3d0:	4830      	ldr	r0, [pc, #192]	; (494 <_sercom_get_default_pad+0x144>)
     3d2:	e045      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3d4:	2000      	movs	r0, #0
     3d6:	e043      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d8:	482f      	ldr	r0, [pc, #188]	; (498 <_sercom_get_default_pad+0x148>)
     3da:	e041      	b.n	460 <_sercom_get_default_pad+0x110>
     3dc:	482f      	ldr	r0, [pc, #188]	; (49c <_sercom_get_default_pad+0x14c>)
     3de:	e03f      	b.n	460 <_sercom_get_default_pad+0x110>
     3e0:	2901      	cmp	r1, #1
     3e2:	d006      	beq.n	3f2 <_sercom_get_default_pad+0xa2>
     3e4:	2900      	cmp	r1, #0
     3e6:	d036      	beq.n	456 <_sercom_get_default_pad+0x106>
     3e8:	2902      	cmp	r1, #2
     3ea:	d006      	beq.n	3fa <_sercom_get_default_pad+0xaa>
     3ec:	2903      	cmp	r1, #3
     3ee:	d006      	beq.n	3fe <_sercom_get_default_pad+0xae>
     3f0:	e001      	b.n	3f6 <_sercom_get_default_pad+0xa6>
     3f2:	482b      	ldr	r0, [pc, #172]	; (4a0 <_sercom_get_default_pad+0x150>)
     3f4:	e034      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3f6:	2000      	movs	r0, #0
     3f8:	e032      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fa:	482a      	ldr	r0, [pc, #168]	; (4a4 <_sercom_get_default_pad+0x154>)
     3fc:	e030      	b.n	460 <_sercom_get_default_pad+0x110>
     3fe:	482a      	ldr	r0, [pc, #168]	; (4a8 <_sercom_get_default_pad+0x158>)
     400:	e02e      	b.n	460 <_sercom_get_default_pad+0x110>
     402:	2901      	cmp	r1, #1
     404:	d006      	beq.n	414 <_sercom_get_default_pad+0xc4>
     406:	2900      	cmp	r1, #0
     408:	d027      	beq.n	45a <_sercom_get_default_pad+0x10a>
     40a:	2902      	cmp	r1, #2
     40c:	d006      	beq.n	41c <_sercom_get_default_pad+0xcc>
     40e:	2903      	cmp	r1, #3
     410:	d006      	beq.n	420 <_sercom_get_default_pad+0xd0>
     412:	e001      	b.n	418 <_sercom_get_default_pad+0xc8>
     414:	4825      	ldr	r0, [pc, #148]	; (4ac <_sercom_get_default_pad+0x15c>)
     416:	e023      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     418:	2000      	movs	r0, #0
     41a:	e021      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     41c:	4824      	ldr	r0, [pc, #144]	; (4b0 <_sercom_get_default_pad+0x160>)
     41e:	e01f      	b.n	460 <_sercom_get_default_pad+0x110>
     420:	4824      	ldr	r0, [pc, #144]	; (4b4 <_sercom_get_default_pad+0x164>)
     422:	e01d      	b.n	460 <_sercom_get_default_pad+0x110>
     424:	2901      	cmp	r1, #1
     426:	d006      	beq.n	436 <_sercom_get_default_pad+0xe6>
     428:	2900      	cmp	r1, #0
     42a:	d018      	beq.n	45e <_sercom_get_default_pad+0x10e>
     42c:	2902      	cmp	r1, #2
     42e:	d006      	beq.n	43e <_sercom_get_default_pad+0xee>
     430:	2903      	cmp	r1, #3
     432:	d006      	beq.n	442 <_sercom_get_default_pad+0xf2>
     434:	e001      	b.n	43a <_sercom_get_default_pad+0xea>
     436:	4820      	ldr	r0, [pc, #128]	; (4b8 <_sercom_get_default_pad+0x168>)
     438:	e012      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     43a:	2000      	movs	r0, #0
     43c:	e010      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43e:	481f      	ldr	r0, [pc, #124]	; (4bc <_sercom_get_default_pad+0x16c>)
     440:	e00e      	b.n	460 <_sercom_get_default_pad+0x110>
     442:	481f      	ldr	r0, [pc, #124]	; (4c0 <_sercom_get_default_pad+0x170>)
     444:	e00c      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     446:	2000      	movs	r0, #0
     448:	e00a      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44a:	481e      	ldr	r0, [pc, #120]	; (4c4 <_sercom_get_default_pad+0x174>)
     44c:	e008      	b.n	460 <_sercom_get_default_pad+0x110>
     44e:	2003      	movs	r0, #3
     450:	e006      	b.n	460 <_sercom_get_default_pad+0x110>
     452:	481d      	ldr	r0, [pc, #116]	; (4c8 <_sercom_get_default_pad+0x178>)
     454:	e004      	b.n	460 <_sercom_get_default_pad+0x110>
     456:	481d      	ldr	r0, [pc, #116]	; (4cc <_sercom_get_default_pad+0x17c>)
     458:	e002      	b.n	460 <_sercom_get_default_pad+0x110>
     45a:	481d      	ldr	r0, [pc, #116]	; (4d0 <_sercom_get_default_pad+0x180>)
     45c:	e000      	b.n	460 <_sercom_get_default_pad+0x110>
     45e:	481d      	ldr	r0, [pc, #116]	; (4d4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     460:	4770      	bx	lr
     462:	46c0      	nop			; (mov r8, r8)
     464:	42001000 	.word	0x42001000
     468:	42000800 	.word	0x42000800
     46c:	42000c00 	.word	0x42000c00
     470:	42001800 	.word	0x42001800
     474:	42001c00 	.word	0x42001c00
     478:	42001400 	.word	0x42001400
     47c:	00050003 	.word	0x00050003
     480:	00060003 	.word	0x00060003
     484:	00070003 	.word	0x00070003
     488:	00010003 	.word	0x00010003
     48c:	001e0003 	.word	0x001e0003
     490:	001f0003 	.word	0x001f0003
     494:	000d0002 	.word	0x000d0002
     498:	000e0002 	.word	0x000e0002
     49c:	000f0002 	.word	0x000f0002
     4a0:	00110003 	.word	0x00110003
     4a4:	00120003 	.word	0x00120003
     4a8:	00130003 	.word	0x00130003
     4ac:	003f0005 	.word	0x003f0005
     4b0:	003e0005 	.word	0x003e0005
     4b4:	00520005 	.word	0x00520005
     4b8:	00170003 	.word	0x00170003
     4bc:	00180003 	.word	0x00180003
     4c0:	00190003 	.word	0x00190003
     4c4:	00040003 	.word	0x00040003
     4c8:	000c0002 	.word	0x000c0002
     4cc:	00100003 	.word	0x00100003
     4d0:	00530005 	.word	0x00530005
     4d4:	00160003 	.word	0x00160003

000004d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4d8:	b530      	push	{r4, r5, lr}
     4da:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4dc:	4b0c      	ldr	r3, [pc, #48]	; (510 <_sercom_get_sercom_inst_index+0x38>)
     4de:	466a      	mov	r2, sp
     4e0:	cb32      	ldmia	r3!, {r1, r4, r5}
     4e2:	c232      	stmia	r2!, {r1, r4, r5}
     4e4:	cb32      	ldmia	r3!, {r1, r4, r5}
     4e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4e8:	9b00      	ldr	r3, [sp, #0]
     4ea:	4283      	cmp	r3, r0
     4ec:	d006      	beq.n	4fc <_sercom_get_sercom_inst_index+0x24>
     4ee:	2301      	movs	r3, #1
     4f0:	009a      	lsls	r2, r3, #2
     4f2:	4669      	mov	r1, sp
     4f4:	5852      	ldr	r2, [r2, r1]
     4f6:	4282      	cmp	r2, r0
     4f8:	d103      	bne.n	502 <_sercom_get_sercom_inst_index+0x2a>
     4fa:	e000      	b.n	4fe <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4fc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     4fe:	b2d8      	uxtb	r0, r3
     500:	e003      	b.n	50a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     502:	3301      	adds	r3, #1
     504:	2b06      	cmp	r3, #6
     506:	d1f3      	bne.n	4f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     508:	2000      	movs	r0, #0
}
     50a:	b007      	add	sp, #28
     50c:	bd30      	pop	{r4, r5, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	00002fac 	.word	0x00002fac

00000514 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     514:	b5f0      	push	{r4, r5, r6, r7, lr}
     516:	4647      	mov	r7, r8
     518:	b480      	push	{r7}
     51a:	1c0c      	adds	r4, r1, #0
     51c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     51e:	2800      	cmp	r0, #0
     520:	d110      	bne.n	544 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
     522:	2a00      	cmp	r2, #0
     524:	dd0a      	ble.n	53c <_read+0x28>
     526:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     528:	4e09      	ldr	r6, [pc, #36]	; (550 <_read+0x3c>)
     52a:	4d0a      	ldr	r5, [pc, #40]	; (554 <_read+0x40>)
     52c:	6830      	ldr	r0, [r6, #0]
     52e:	1c21      	adds	r1, r4, #0
     530:	682b      	ldr	r3, [r5, #0]
     532:	4798      	blx	r3
		ptr++;
     534:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     536:	42bc      	cmp	r4, r7
     538:	d1f8      	bne.n	52c <_read+0x18>
     53a:	e001      	b.n	540 <_read+0x2c>
     53c:	2300      	movs	r3, #0
     53e:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     540:	4640      	mov	r0, r8
     542:	e001      	b.n	548 <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     544:	2001      	movs	r0, #1
     546:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
     548:	bc04      	pop	{r2}
     54a:	4690      	mov	r8, r2
     54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	200001a8 	.word	0x200001a8
     554:	200001a0 	.word	0x200001a0

00000558 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
     55a:	4647      	mov	r7, r8
     55c:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     55e:	3801      	subs	r0, #1
     560:	2802      	cmp	r0, #2
     562:	d815      	bhi.n	590 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
     564:	2a00      	cmp	r2, #0
     566:	d010      	beq.n	58a <_write+0x32>
     568:	1c15      	adds	r5, r2, #0
     56a:	1c0e      	adds	r6, r1, #0
     56c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     56e:	4b0c      	ldr	r3, [pc, #48]	; (5a0 <_write+0x48>)
     570:	4698      	mov	r8, r3
     572:	4f0c      	ldr	r7, [pc, #48]	; (5a4 <_write+0x4c>)
     574:	4643      	mov	r3, r8
     576:	6818      	ldr	r0, [r3, #0]
     578:	5d31      	ldrb	r1, [r6, r4]
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	4798      	blx	r3
     57e:	2800      	cmp	r0, #0
     580:	db09      	blt.n	596 <_write+0x3e>
			return -1;
		}
		++nChars;
     582:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     584:	42a5      	cmp	r5, r4
     586:	d1f5      	bne.n	574 <_write+0x1c>
     588:	e000      	b.n	58c <_write+0x34>
     58a:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     58c:	1c20      	adds	r0, r4, #0
     58e:	e004      	b.n	59a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     590:	2001      	movs	r0, #1
     592:	4240      	negs	r0, r0
     594:	e001      	b.n	59a <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     596:	2001      	movs	r0, #1
     598:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
     59a:	bc04      	pop	{r2}
     59c:	4690      	mov	r8, r2
     59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5a0:	200001a8 	.word	0x200001a8
     5a4:	200001a4 	.word	0x200001a4

000005a8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     5a8:	b570      	push	{r4, r5, r6, lr}
     5aa:	b082      	sub	sp, #8
     5ac:	1c05      	adds	r5, r0, #0
     5ae:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
     5b0:	2200      	movs	r2, #0
     5b2:	466b      	mov	r3, sp
     5b4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
     5b6:	4c06      	ldr	r4, [pc, #24]	; (5d0 <usart_serial_getchar+0x28>)
     5b8:	1c28      	adds	r0, r5, #0
     5ba:	466b      	mov	r3, sp
     5bc:	1d99      	adds	r1, r3, #6
     5be:	47a0      	blx	r4
     5c0:	2800      	cmp	r0, #0
     5c2:	d1f9      	bne.n	5b8 <usart_serial_getchar+0x10>

	*c = temp;
     5c4:	466b      	mov	r3, sp
     5c6:	3306      	adds	r3, #6
     5c8:	881b      	ldrh	r3, [r3, #0]
     5ca:	7033      	strb	r3, [r6, #0]
}
     5cc:	b002      	add	sp, #8
     5ce:	bd70      	pop	{r4, r5, r6, pc}
     5d0:	00000b01 	.word	0x00000b01

000005d4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     5d4:	b570      	push	{r4, r5, r6, lr}
     5d6:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
     5d8:	b28c      	uxth	r4, r1
     5da:	4e03      	ldr	r6, [pc, #12]	; (5e8 <usart_serial_putchar+0x14>)
     5dc:	1c28      	adds	r0, r5, #0
     5de:	1c21      	adds	r1, r4, #0
     5e0:	47b0      	blx	r6
     5e2:	2800      	cmp	r0, #0
     5e4:	d1fa      	bne.n	5dc <usart_serial_putchar+0x8>

	return STATUS_OK;
}
     5e6:	bd70      	pop	{r4, r5, r6, pc}
     5e8:	00000ad5 	.word	0x00000ad5

000005ec <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
     5ec:	b510      	push	{r4, lr}
     5ee:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
     5f0:	466b      	mov	r3, sp
     5f2:	1ddc      	adds	r4, r3, #7
     5f4:	4810      	ldr	r0, [pc, #64]	; (638 <USART_HOST_ISR_VECT+0x4c>)
     5f6:	1c21      	adds	r1, r4, #0
     5f8:	2201      	movs	r2, #1
     5fa:	4b10      	ldr	r3, [pc, #64]	; (63c <USART_HOST_ISR_VECT+0x50>)
     5fc:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     5fe:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     600:	f3bf 8f5f 	dmb	sy
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
     604:	2200      	movs	r2, #0
     606:	4b0e      	ldr	r3, [pc, #56]	; (640 <USART_HOST_ISR_VECT+0x54>)
     608:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
     60a:	4b0e      	ldr	r3, [pc, #56]	; (644 <USART_HOST_ISR_VECT+0x58>)
     60c:	781b      	ldrb	r3, [r3, #0]
     60e:	7821      	ldrb	r1, [r4, #0]
     610:	4a0d      	ldr	r2, [pc, #52]	; (648 <USART_HOST_ISR_VECT+0x5c>)
     612:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
     614:	2b9b      	cmp	r3, #155	; 0x9b
     616:	d103      	bne.n	620 <USART_HOST_ISR_VECT+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
     618:	2200      	movs	r2, #0
     61a:	4b0a      	ldr	r3, [pc, #40]	; (644 <USART_HOST_ISR_VECT+0x58>)
     61c:	701a      	strb	r2, [r3, #0]
     61e:	e002      	b.n	626 <USART_HOST_ISR_VECT+0x3a>
	} else {
		serial_rx_buf_tail++;
     620:	3301      	adds	r3, #1
     622:	4a08      	ldr	r2, [pc, #32]	; (644 <USART_HOST_ISR_VECT+0x58>)
     624:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
     626:	2201      	movs	r2, #1
     628:	4b05      	ldr	r3, [pc, #20]	; (640 <USART_HOST_ISR_VECT+0x54>)
     62a:	701a      	strb	r2, [r3, #0]
     62c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     630:	b662      	cpsie	i
}
     632:	b002      	add	sp, #8
     634:	bd10      	pop	{r4, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	20000124 	.word	0x20000124
     63c:	00000b79 	.word	0x00000b79
     640:	20000000 	.word	0x20000000
     644:	20000158 	.word	0x20000158
     648:	20000088 	.word	0x20000088

0000064c <sio2host_init>:
static uint8_t serial_rx_count;

/* === IMPLEMENTATION ====================================================== */

void sio2host_init(void)
{
     64c:	b5f0      	push	{r4, r5, r6, r7, lr}
     64e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     650:	2380      	movs	r3, #128	; 0x80
     652:	05db      	lsls	r3, r3, #23
     654:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     656:	2300      	movs	r3, #0
     658:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     65a:	22ff      	movs	r2, #255	; 0xff
     65c:	4669      	mov	r1, sp
     65e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     660:	2200      	movs	r2, #0
     662:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     664:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     666:	2401      	movs	r4, #1
     668:	2124      	movs	r1, #36	; 0x24
     66a:	4668      	mov	r0, sp
     66c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
     66e:	3101      	adds	r1, #1
     670:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
     672:	3101      	adds	r1, #1
     674:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
     676:	3101      	adds	r1, #1
     678:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
     67a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     67c:	3105      	adds	r1, #5
     67e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
     680:	3101      	adds	r1, #1
     682:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     684:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     686:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     688:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     68a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     68c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     68e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
     690:	2313      	movs	r3, #19
     692:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     694:	7742      	strb	r2, [r0, #29]
#if SAMD || SAMR21 || SAML21
	struct usart_config host_uart_config;
	/* Configure USART for unit test output */
	usart_get_config_defaults(&host_uart_config);
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
     696:	2380      	movs	r3, #128	; 0x80
     698:	035b      	lsls	r3, r3, #13
     69a:	9303      	str	r3, [sp, #12]

	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
     69c:	4b2f      	ldr	r3, [pc, #188]	; (75c <sio2host_init+0x110>)
     69e:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
     6a0:	4b2f      	ldr	r3, [pc, #188]	; (760 <sio2host_init+0x114>)
     6a2:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
     6a4:	2301      	movs	r3, #1
     6a6:	425b      	negs	r3, r3
     6a8:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
     6aa:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
     6ac:	23e1      	movs	r3, #225	; 0xe1
     6ae:	025b      	lsls	r3, r3, #9
     6b0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
     6b2:	4d2c      	ldr	r5, [pc, #176]	; (764 <sio2host_init+0x118>)
     6b4:	4b2c      	ldr	r3, [pc, #176]	; (768 <sio2host_init+0x11c>)
     6b6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     6b8:	4a2c      	ldr	r2, [pc, #176]	; (76c <sio2host_init+0x120>)
     6ba:	4b2d      	ldr	r3, [pc, #180]	; (770 <sio2host_init+0x124>)
     6bc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     6be:	4a2d      	ldr	r2, [pc, #180]	; (774 <sio2host_init+0x128>)
     6c0:	4b2d      	ldr	r3, [pc, #180]	; (778 <sio2host_init+0x12c>)
     6c2:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
     6c4:	1c28      	adds	r0, r5, #0
     6c6:	492d      	ldr	r1, [pc, #180]	; (77c <sio2host_init+0x130>)
     6c8:	466a      	mov	r2, sp
     6ca:	4b2d      	ldr	r3, [pc, #180]	; (780 <sio2host_init+0x134>)
     6cc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     6ce:	4f2d      	ldr	r7, [pc, #180]	; (784 <sio2host_init+0x138>)
     6d0:	683b      	ldr	r3, [r7, #0]
     6d2:	6898      	ldr	r0, [r3, #8]
     6d4:	2100      	movs	r1, #0
     6d6:	4e2c      	ldr	r6, [pc, #176]	; (788 <sio2host_init+0x13c>)
     6d8:	47b0      	blx	r6
	setbuf(stdin, NULL);
     6da:	683b      	ldr	r3, [r7, #0]
     6dc:	6858      	ldr	r0, [r3, #4]
     6de:	2100      	movs	r1, #0
     6e0:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6e2:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     6e4:	1c30      	adds	r0, r6, #0
     6e6:	4b29      	ldr	r3, [pc, #164]	; (78c <sio2host_init+0x140>)
     6e8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6ea:	231f      	movs	r3, #31
     6ec:	4018      	ands	r0, r3
     6ee:	4084      	lsls	r4, r0
     6f0:	4b27      	ldr	r3, [pc, #156]	; (790 <sio2host_init+0x144>)
     6f2:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     6f4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6f6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6f8:	2b00      	cmp	r3, #0
     6fa:	d1fc      	bne.n	6f6 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     6fc:	6832      	ldr	r2, [r6, #0]
     6fe:	3302      	adds	r3, #2
     700:	4313      	orrs	r3, r2
     702:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     704:	4b17      	ldr	r3, [pc, #92]	; (764 <sio2host_init+0x118>)
     706:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     708:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     70a:	2a00      	cmp	r2, #0
     70c:	d1fc      	bne.n	708 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
     70e:	685a      	ldr	r2, [r3, #4]
     710:	2180      	movs	r1, #128	; 0x80
     712:	0249      	lsls	r1, r1, #9
     714:	430a      	orrs	r2, r1
     716:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
     718:	2101      	movs	r1, #1
     71a:	4a12      	ldr	r2, [pc, #72]	; (764 <sio2host_init+0x118>)
     71c:	71d1      	strb	r1, [r2, #7]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     71e:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     720:	2a00      	cmp	r2, #0
     722:	d1fc      	bne.n	71e <sio2host_init+0xd2>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     724:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     726:	2a00      	cmp	r2, #0
     728:	d1fc      	bne.n	724 <sio2host_init+0xd8>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
     72a:	685a      	ldr	r2, [r3, #4]
     72c:	2180      	movs	r1, #128	; 0x80
     72e:	0289      	lsls	r1, r1, #10
     730:	430a      	orrs	r2, r1
     732:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
     734:	2101      	movs	r1, #1
     736:	4a0b      	ldr	r2, [pc, #44]	; (764 <sio2host_init+0x118>)
     738:	7191      	strb	r1, [r2, #6]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     73a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     73c:	2a00      	cmp	r2, #0
     73e:	d1fc      	bne.n	73a <sio2host_init+0xee>
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&host_uart_module, USART_TRANSCEIVER_RX);
#else
	stdio_serial_init(USART_HOST, &usart_serial_options);
#endif
	USART_HOST_RX_ISR_ENABLE();
     740:	2000      	movs	r0, #0
     742:	4914      	ldr	r1, [pc, #80]	; (794 <sio2host_init+0x148>)
     744:	4b14      	ldr	r3, [pc, #80]	; (798 <sio2host_init+0x14c>)
     746:	4798      	blx	r3
     748:	2204      	movs	r2, #4
     74a:	4b0c      	ldr	r3, [pc, #48]	; (77c <sio2host_init+0x130>)
     74c:	759a      	strb	r2, [r3, #22]
     74e:	32fd      	adds	r2, #253	; 0xfd
     750:	32ff      	adds	r2, #255	; 0xff
     752:	4b0f      	ldr	r3, [pc, #60]	; (790 <sio2host_init+0x144>)
     754:	601a      	str	r2, [r3, #0]
}
     756:	b011      	add	sp, #68	; 0x44
     758:	bdf0      	pop	{r4, r5, r6, r7, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	00040003 	.word	0x00040003
     760:	00050003 	.word	0x00050003
     764:	20000124 	.word	0x20000124
     768:	200001a8 	.word	0x200001a8
     76c:	000005d5 	.word	0x000005d5
     770:	200001a4 	.word	0x200001a4
     774:	000005a9 	.word	0x000005a9
     778:	200001a0 	.word	0x200001a0
     77c:	42000800 	.word	0x42000800
     780:	0000079d 	.word	0x0000079d
     784:	20000064 	.word	0x20000064
     788:	000020ad 	.word	0x000020ad
     78c:	00000df9 	.word	0x00000df9
     790:	e000e100 	.word	0xe000e100
     794:	000005ed 	.word	0x000005ed
     798:	00000dbd 	.word	0x00000dbd

0000079c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     79c:	b5f0      	push	{r4, r5, r6, r7, lr}
     79e:	465f      	mov	r7, fp
     7a0:	4656      	mov	r6, sl
     7a2:	464d      	mov	r5, r9
     7a4:	4644      	mov	r4, r8
     7a6:	b4f0      	push	{r4, r5, r6, r7}
     7a8:	b091      	sub	sp, #68	; 0x44
     7aa:	1c05      	adds	r5, r0, #0
     7ac:	1c0c      	adds	r4, r1, #0
     7ae:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     7b0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7b2:	1c08      	adds	r0, r1, #0
     7b4:	4bb9      	ldr	r3, [pc, #740]	; (a9c <usart_init+0x300>)
     7b6:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7b8:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     7ba:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     7bc:	07d2      	lsls	r2, r2, #31
     7be:	d500      	bpl.n	7c2 <usart_init+0x26>
     7c0:	e163      	b.n	a8a <usart_init+0x2ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7c2:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     7c4:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     7c6:	0792      	lsls	r2, r2, #30
     7c8:	d500      	bpl.n	7cc <usart_init+0x30>
     7ca:	e15e      	b.n	a8a <usart_init+0x2ee>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     7cc:	49b4      	ldr	r1, [pc, #720]	; (aa0 <usart_init+0x304>)
     7ce:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     7d0:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     7d2:	3b1b      	subs	r3, #27
     7d4:	40bb      	lsls	r3, r7
     7d6:	4313      	orrs	r3, r2
     7d8:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     7da:	a90f      	add	r1, sp, #60	; 0x3c
     7dc:	272d      	movs	r7, #45	; 0x2d
     7de:	5df3      	ldrb	r3, [r6, r7]
     7e0:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7e2:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7e4:	b2c3      	uxtb	r3, r0
     7e6:	9302      	str	r3, [sp, #8]
     7e8:	1c18      	adds	r0, r3, #0
     7ea:	4bae      	ldr	r3, [pc, #696]	; (aa4 <usart_init+0x308>)
     7ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     7ee:	9802      	ldr	r0, [sp, #8]
     7f0:	4bad      	ldr	r3, [pc, #692]	; (aa8 <usart_init+0x30c>)
     7f2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7f4:	5df0      	ldrb	r0, [r6, r7]
     7f6:	2100      	movs	r1, #0
     7f8:	4bac      	ldr	r3, [pc, #688]	; (aac <usart_init+0x310>)
     7fa:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     7fc:	7af3      	ldrb	r3, [r6, #11]
     7fe:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     800:	2324      	movs	r3, #36	; 0x24
     802:	5cf3      	ldrb	r3, [r6, r3]
     804:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     806:	2325      	movs	r3, #37	; 0x25
     808:	5cf3      	ldrb	r3, [r6, r3]
     80a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     80c:	7ef3      	ldrb	r3, [r6, #27]
     80e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     810:	7f33      	ldrb	r3, [r6, #28]
     812:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     814:	682b      	ldr	r3, [r5, #0]
     816:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     818:	1c18      	adds	r0, r3, #0
     81a:	4ba0      	ldr	r3, [pc, #640]	; (a9c <usart_init+0x300>)
     81c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     81e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     820:	2200      	movs	r2, #0
     822:	230e      	movs	r3, #14
     824:	a906      	add	r1, sp, #24
     826:	468c      	mov	ip, r1
     828:	4463      	add	r3, ip
     82a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     82c:	8a33      	ldrh	r3, [r6, #16]
     82e:	4699      	mov	r9, r3
     830:	2380      	movs	r3, #128	; 0x80
     832:	01db      	lsls	r3, r3, #7
     834:	4599      	cmp	r9, r3
     836:	d019      	beq.n	86c <usart_init+0xd0>
     838:	d804      	bhi.n	844 <usart_init+0xa8>
     83a:	2380      	movs	r3, #128	; 0x80
     83c:	019b      	lsls	r3, r3, #6
     83e:	4599      	cmp	r9, r3
     840:	d00a      	beq.n	858 <usart_init+0xbc>
     842:	e103      	b.n	a4c <usart_init+0x2b0>
     844:	23c0      	movs	r3, #192	; 0xc0
     846:	01db      	lsls	r3, r3, #7
     848:	4599      	cmp	r9, r3
     84a:	d00a      	beq.n	862 <usart_init+0xc6>
     84c:	2380      	movs	r3, #128	; 0x80
     84e:	021b      	lsls	r3, r3, #8
     850:	4599      	cmp	r9, r3
     852:	d100      	bne.n	856 <usart_init+0xba>
     854:	e0ff      	b.n	a56 <usart_init+0x2ba>
     856:	e0f9      	b.n	a4c <usart_init+0x2b0>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     858:	2310      	movs	r3, #16
     85a:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     85c:	3b0f      	subs	r3, #15
     85e:	9307      	str	r3, [sp, #28]
     860:	e0fd      	b.n	a5e <usart_init+0x2c2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     862:	2308      	movs	r3, #8
     864:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     866:	3b07      	subs	r3, #7
     868:	9307      	str	r3, [sp, #28]
     86a:	e0f8      	b.n	a5e <usart_init+0x2c2>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     86c:	6833      	ldr	r3, [r6, #0]
     86e:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     870:	68f3      	ldr	r3, [r6, #12]
     872:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     874:	6973      	ldr	r3, [r6, #20]
     876:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     878:	7e33      	ldrb	r3, [r6, #24]
     87a:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     87c:	2326      	movs	r3, #38	; 0x26
     87e:	5cf3      	ldrb	r3, [r6, r3]
     880:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     882:	6872      	ldr	r2, [r6, #4]
     884:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     886:	2a00      	cmp	r2, #0
     888:	d015      	beq.n	8b6 <usart_init+0x11a>
     88a:	2380      	movs	r3, #128	; 0x80
     88c:	055b      	lsls	r3, r3, #21
     88e:	429a      	cmp	r2, r3
     890:	d136      	bne.n	900 <usart_init+0x164>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     892:	2327      	movs	r3, #39	; 0x27
     894:	5cf3      	ldrb	r3, [r6, r3]
     896:	2b00      	cmp	r3, #0
     898:	d136      	bne.n	908 <usart_init+0x16c>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     89a:	6a33      	ldr	r3, [r6, #32]
     89c:	4698      	mov	r8, r3
     89e:	b2c0      	uxtb	r0, r0
     8a0:	4b83      	ldr	r3, [pc, #524]	; (ab0 <usart_init+0x314>)
     8a2:	4798      	blx	r3
     8a4:	1c01      	adds	r1, r0, #0
     8a6:	4640      	mov	r0, r8
     8a8:	220e      	movs	r2, #14
     8aa:	ab06      	add	r3, sp, #24
     8ac:	469c      	mov	ip, r3
     8ae:	4462      	add	r2, ip
     8b0:	4b80      	ldr	r3, [pc, #512]	; (ab4 <usart_init+0x318>)
     8b2:	4798      	blx	r3
     8b4:	e025      	b.n	902 <usart_init+0x166>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8b6:	2308      	movs	r3, #8
     8b8:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8ba:	2300      	movs	r3, #0
     8bc:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     8be:	2327      	movs	r3, #39	; 0x27
     8c0:	5cf3      	ldrb	r3, [r6, r3]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d00b      	beq.n	8de <usart_init+0x142>
				status_code =
     8c6:	4643      	mov	r3, r8
     8c8:	9300      	str	r3, [sp, #0]
     8ca:	6a30      	ldr	r0, [r6, #32]
     8cc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     8ce:	220e      	movs	r2, #14
     8d0:	ab06      	add	r3, sp, #24
     8d2:	469c      	mov	ip, r3
     8d4:	4462      	add	r2, ip
     8d6:	9b07      	ldr	r3, [sp, #28]
     8d8:	4f77      	ldr	r7, [pc, #476]	; (ab8 <usart_init+0x31c>)
     8da:	47b8      	blx	r7
     8dc:	e011      	b.n	902 <usart_init+0x166>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     8de:	6a33      	ldr	r3, [r6, #32]
     8e0:	1c1f      	adds	r7, r3, #0
     8e2:	b2c0      	uxtb	r0, r0
     8e4:	4b72      	ldr	r3, [pc, #456]	; (ab0 <usart_init+0x314>)
     8e6:	4798      	blx	r3
     8e8:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     8ea:	4643      	mov	r3, r8
     8ec:	9300      	str	r3, [sp, #0]
     8ee:	1c38      	adds	r0, r7, #0
     8f0:	220e      	movs	r2, #14
     8f2:	ab06      	add	r3, sp, #24
     8f4:	469c      	mov	ip, r3
     8f6:	4462      	add	r2, ip
     8f8:	9b07      	ldr	r3, [sp, #28]
     8fa:	4f6f      	ldr	r7, [pc, #444]	; (ab8 <usart_init+0x31c>)
     8fc:	47b8      	blx	r7
     8fe:	e000      	b.n	902 <usart_init+0x166>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     900:	2000      	movs	r0, #0
     902:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     904:	d000      	beq.n	908 <usart_init+0x16c>
     906:	e0c0      	b.n	a8a <usart_init+0x2ee>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     908:	7e73      	ldrb	r3, [r6, #25]
     90a:	2b00      	cmp	r3, #0
     90c:	d002      	beq.n	914 <usart_init+0x178>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     90e:	7eb3      	ldrb	r3, [r6, #26]
     910:	4652      	mov	r2, sl
     912:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     914:	682a      	ldr	r2, [r5, #0]
     916:	9f06      	ldr	r7, [sp, #24]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     918:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     91a:	2b00      	cmp	r3, #0
     91c:	d1fc      	bne.n	918 <usart_init+0x17c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     91e:	330e      	adds	r3, #14
     920:	aa06      	add	r2, sp, #24
     922:	4694      	mov	ip, r2
     924:	4463      	add	r3, ip
     926:	881b      	ldrh	r3, [r3, #0]
     928:	4652      	mov	r2, sl
     92a:	8193      	strh	r3, [r2, #12]
     92c:	9b02      	ldr	r3, [sp, #8]
     92e:	465a      	mov	r2, fp
     930:	4313      	orrs	r3, r2
     932:	9a03      	ldr	r2, [sp, #12]
     934:	4313      	orrs	r3, r2
     936:	433b      	orrs	r3, r7
     938:	464a      	mov	r2, r9
     93a:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     93c:	9a04      	ldr	r2, [sp, #16]
     93e:	0212      	lsls	r2, r2, #8
     940:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     942:	9a05      	ldr	r2, [sp, #20]
     944:	0757      	lsls	r7, r2, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= transfer_mode;
     946:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     948:	2327      	movs	r3, #39	; 0x27
     94a:	5cf3      	ldrb	r3, [r6, r3]
     94c:	2b00      	cmp	r3, #0
     94e:	d101      	bne.n	954 <usart_init+0x1b8>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     950:	3304      	adds	r3, #4
     952:	431f      	orrs	r7, r3
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     954:	7f33      	ldrb	r3, [r6, #28]
     956:	0259      	lsls	r1, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     958:	7e72      	ldrb	r2, [r6, #25]
     95a:	0293      	lsls	r3, r2, #10
     95c:	430b      	orrs	r3, r1
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     95e:	7f72      	ldrb	r2, [r6, #29]
     960:	0212      	lsls	r2, r2, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     962:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     964:	2224      	movs	r2, #36	; 0x24
     966:	5cb2      	ldrb	r2, [r6, r2]
     968:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     96a:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     96c:	2225      	movs	r2, #37	; 0x25
     96e:	5cb2      	ldrb	r2, [r6, r2]
     970:	0412      	lsls	r2, r2, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     972:	4313      	orrs	r3, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
     974:	7af1      	ldrb	r1, [r6, #11]
     976:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     978:	8933      	ldrh	r3, [r6, #8]
     97a:	2bff      	cmp	r3, #255	; 0xff
     97c:	d004      	beq.n	988 <usart_init+0x1ec>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     97e:	2280      	movs	r2, #128	; 0x80
     980:	0452      	lsls	r2, r2, #17
     982:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     984:	4319      	orrs	r1, r3
     986:	e005      	b.n	994 <usart_init+0x1f8>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     988:	7ef3      	ldrb	r3, [r6, #27]
     98a:	2b00      	cmp	r3, #0
     98c:	d002      	beq.n	994 <usart_init+0x1f8>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     98e:	2380      	movs	r3, #128	; 0x80
     990:	04db      	lsls	r3, r3, #19
     992:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     994:	232c      	movs	r3, #44	; 0x2c
     996:	5cf3      	ldrb	r3, [r6, r3]
     998:	2b00      	cmp	r3, #0
     99a:	d103      	bne.n	9a4 <usart_init+0x208>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     99c:	4b47      	ldr	r3, [pc, #284]	; (abc <usart_init+0x320>)
     99e:	789b      	ldrb	r3, [r3, #2]
     9a0:	079b      	lsls	r3, r3, #30
     9a2:	d501      	bpl.n	9a8 <usart_init+0x20c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9a4:	2380      	movs	r3, #128	; 0x80
     9a6:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9a8:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9aa:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9ac:	2b00      	cmp	r3, #0
     9ae:	d1fc      	bne.n	9aa <usart_init+0x20e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     9b0:	4653      	mov	r3, sl
     9b2:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9b4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9b6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9b8:	2b00      	cmp	r3, #0
     9ba:	d1fc      	bne.n	9b6 <usart_init+0x21a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     9bc:	4653      	mov	r3, sl
     9be:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9c0:	ab0e      	add	r3, sp, #56	; 0x38
     9c2:	2280      	movs	r2, #128	; 0x80
     9c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9c6:	2200      	movs	r2, #0
     9c8:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9ca:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9cc:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     9ce:	6b33      	ldr	r3, [r6, #48]	; 0x30
     9d0:	930a      	str	r3, [sp, #40]	; 0x28
     9d2:	6b73      	ldr	r3, [r6, #52]	; 0x34
     9d4:	930b      	str	r3, [sp, #44]	; 0x2c
     9d6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     9d8:	930c      	str	r3, [sp, #48]	; 0x30
     9da:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     9dc:	9302      	str	r3, [sp, #8]
     9de:	930d      	str	r3, [sp, #52]	; 0x34
     9e0:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9e2:	ae0e      	add	r6, sp, #56	; 0x38
     9e4:	b2f9      	uxtb	r1, r7
     9e6:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9e8:	aa0a      	add	r2, sp, #40	; 0x28
     9ea:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     9ec:	2800      	cmp	r0, #0
     9ee:	d102      	bne.n	9f6 <usart_init+0x25a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9f0:	1c20      	adds	r0, r4, #0
     9f2:	4b33      	ldr	r3, [pc, #204]	; (ac0 <usart_init+0x324>)
     9f4:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     9f6:	1c43      	adds	r3, r0, #1
     9f8:	d005      	beq.n	a06 <usart_init+0x26a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     9fa:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     9fc:	0c00      	lsrs	r0, r0, #16
     9fe:	b2c0      	uxtb	r0, r0
     a00:	1c31      	adds	r1, r6, #0
     a02:	4b30      	ldr	r3, [pc, #192]	; (ac4 <usart_init+0x328>)
     a04:	4798      	blx	r3
     a06:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a08:	2f04      	cmp	r7, #4
     a0a:	d1eb      	bne.n	9e4 <usart_init+0x248>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     a0c:	2300      	movs	r3, #0
     a0e:	60eb      	str	r3, [r5, #12]
     a10:	612b      	str	r3, [r5, #16]
     a12:	616b      	str	r3, [r5, #20]
     a14:	61ab      	str	r3, [r5, #24]
     a16:	61eb      	str	r3, [r5, #28]
     a18:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     a1a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     a1c:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     a1e:	2200      	movs	r2, #0
     a20:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     a22:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     a24:	3330      	adds	r3, #48	; 0x30
     a26:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a28:	3301      	adds	r3, #1
     a2a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a2c:	3301      	adds	r3, #1
     a2e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a30:	3301      	adds	r3, #1
     a32:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a34:	6828      	ldr	r0, [r5, #0]
     a36:	4b19      	ldr	r3, [pc, #100]	; (a9c <usart_init+0x300>)
     a38:	4798      	blx	r3
     a3a:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a3c:	4922      	ldr	r1, [pc, #136]	; (ac8 <usart_init+0x32c>)
     a3e:	4b23      	ldr	r3, [pc, #140]	; (acc <usart_init+0x330>)
     a40:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a42:	00a4      	lsls	r4, r4, #2
     a44:	4b22      	ldr	r3, [pc, #136]	; (ad0 <usart_init+0x334>)
     a46:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     a48:	2300      	movs	r3, #0
     a4a:	e01e      	b.n	a8a <usart_init+0x2ee>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a4c:	2310      	movs	r3, #16
     a4e:	4698      	mov	r8, r3
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a50:	2300      	movs	r3, #0
     a52:	9307      	str	r3, [sp, #28]
     a54:	e003      	b.n	a5e <usart_init+0x2c2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a56:	2303      	movs	r3, #3
     a58:	4698      	mov	r8, r3
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a5a:	2300      	movs	r3, #0
     a5c:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     a5e:	6833      	ldr	r3, [r6, #0]
     a60:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
     a62:	68f3      	ldr	r3, [r6, #12]
     a64:	9302      	str	r3, [sp, #8]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     a66:	6973      	ldr	r3, [r6, #20]
     a68:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a6a:	7e33      	ldrb	r3, [r6, #24]
     a6c:	9304      	str	r3, [sp, #16]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a6e:	2326      	movs	r3, #38	; 0x26
     a70:	5cf3      	ldrb	r3, [r6, r3]
     a72:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     a74:	6872      	ldr	r2, [r6, #4]
     a76:	9206      	str	r2, [sp, #24]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     a78:	2a00      	cmp	r2, #0
     a7a:	d100      	bne.n	a7e <usart_init+0x2e2>
     a7c:	e71f      	b.n	8be <usart_init+0x122>
     a7e:	2380      	movs	r3, #128	; 0x80
     a80:	055b      	lsls	r3, r3, #21
     a82:	429a      	cmp	r2, r3
     a84:	d100      	bne.n	a88 <usart_init+0x2ec>
     a86:	e704      	b.n	892 <usart_init+0xf6>
     a88:	e73e      	b.n	908 <usart_init+0x16c>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     a8a:	1c18      	adds	r0, r3, #0
     a8c:	b011      	add	sp, #68	; 0x44
     a8e:	bc3c      	pop	{r2, r3, r4, r5}
     a90:	4690      	mov	r8, r2
     a92:	4699      	mov	r9, r3
     a94:	46a2      	mov	sl, r4
     a96:	46ab      	mov	fp, r5
     a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	000004d9 	.word	0x000004d9
     aa0:	40000400 	.word	0x40000400
     aa4:	00001741 	.word	0x00001741
     aa8:	000016b5 	.word	0x000016b5
     aac:	00000305 	.word	0x00000305
     ab0:	0000175d 	.word	0x0000175d
     ab4:	00000115 	.word	0x00000115
     ab8:	0000013d 	.word	0x0000013d
     abc:	41002000 	.word	0x41002000
     ac0:	00000351 	.word	0x00000351
     ac4:	00001839 	.word	0x00001839
     ac8:	00000c19 	.word	0x00000c19
     acc:	00000dbd 	.word	0x00000dbd
     ad0:	200001ac 	.word	0x200001ac

00000ad4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     ad4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ad6:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ad8:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     ada:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     adc:	2c00      	cmp	r4, #0
     ade:	d00d      	beq.n	afc <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     ae0:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
     ae2:	b280      	uxth	r0, r0
		return STATUS_BUSY;
     ae4:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     ae6:	2800      	cmp	r0, #0
     ae8:	d108      	bne.n	afc <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     aea:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     aec:	2a00      	cmp	r2, #0
     aee:	d1fc      	bne.n	aea <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     af0:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     af2:	2102      	movs	r1, #2
     af4:	7e1a      	ldrb	r2, [r3, #24]
     af6:	420a      	tst	r2, r1
     af8:	d0fc      	beq.n	af4 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     afa:	2200      	movs	r2, #0
}
     afc:	1c10      	adds	r0, r2, #0
     afe:	bd10      	pop	{r4, pc}

00000b00 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     b00:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b02:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b04:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     b06:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b08:	2a00      	cmp	r2, #0
     b0a:	d033      	beq.n	b74 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     b0c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     b0e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b10:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     b12:	2a00      	cmp	r2, #0
     b14:	d12e      	bne.n	b74 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     b16:	7e22      	ldrb	r2, [r4, #24]
     b18:	0752      	lsls	r2, r2, #29
     b1a:	d52b      	bpl.n	b74 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     b1c:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     b1e:	2b00      	cmp	r3, #0
     b20:	d1fc      	bne.n	b1c <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b22:	8b63      	ldrh	r3, [r4, #26]
     b24:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     b26:	069a      	lsls	r2, r3, #26
     b28:	d021      	beq.n	b6e <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     b2a:	079a      	lsls	r2, r3, #30
     b2c:	d503      	bpl.n	b36 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     b2e:	2302      	movs	r3, #2
     b30:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
     b32:	3318      	adds	r3, #24
     b34:	e01e      	b.n	b74 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     b36:	075a      	lsls	r2, r3, #29
     b38:	d503      	bpl.n	b42 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     b3a:	2304      	movs	r3, #4
     b3c:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
     b3e:	331a      	adds	r3, #26
     b40:	e018      	b.n	b74 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     b42:	07da      	lsls	r2, r3, #31
     b44:	d503      	bpl.n	b4e <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     b46:	2301      	movs	r3, #1
     b48:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
     b4a:	3312      	adds	r3, #18
     b4c:	e012      	b.n	b74 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     b4e:	06da      	lsls	r2, r3, #27
     b50:	d505      	bpl.n	b5e <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     b52:	8b62      	ldrh	r2, [r4, #26]
     b54:	2310      	movs	r3, #16
     b56:	4313      	orrs	r3, r2
     b58:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
     b5a:	2342      	movs	r3, #66	; 0x42
     b5c:	e00a      	b.n	b74 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     b5e:	069b      	lsls	r3, r3, #26
     b60:	d505      	bpl.n	b6e <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     b62:	8b62      	ldrh	r2, [r4, #26]
     b64:	2320      	movs	r3, #32
     b66:	4313      	orrs	r3, r2
     b68:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
     b6a:	2341      	movs	r3, #65	; 0x41
     b6c:	e002      	b.n	b74 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     b6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     b70:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     b72:	2300      	movs	r3, #0
}
     b74:	1c18      	adds	r0, r3, #0
     b76:	bd10      	pop	{r4, pc}

00000b78 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     b78:	b5f0      	push	{r4, r5, r6, r7, lr}
     b7a:	4657      	mov	r7, sl
     b7c:	464e      	mov	r6, r9
     b7e:	b4c0      	push	{r6, r7}
     b80:	b083      	sub	sp, #12
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b82:	2317      	movs	r3, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     b84:	2a00      	cmp	r2, #0
     b86:	d03c      	beq.n	c02 <usart_read_buffer_wait+0x8a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b88:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     b8a:	3305      	adds	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     b8c:	2c00      	cmp	r4, #0
     b8e:	d038      	beq.n	c02 <usart_read_buffer_wait+0x8a>
     b90:	468a      	mov	sl, r1
     b92:	4681      	mov	r9, r0
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b94:	6805      	ldr	r5, [r0, #0]
     b96:	1c17      	adds	r7, r2, #0
     b98:	2600      	movs	r6, #0
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     b9a:	2404      	movs	r4, #4
     b9c:	e02c      	b.n	bf8 <usart_read_buffer_wait+0x80>
     b9e:	7e2a      	ldrb	r2, [r5, #24]
     ba0:	4222      	tst	r2, r4
     ba2:	d104      	bne.n	bae <usart_read_buffer_wait+0x36>
				break;
			} else if (i == USART_TIMEOUT) {
     ba4:	2b01      	cmp	r3, #1
     ba6:	d023      	beq.n	bf0 <usart_read_buffer_wait+0x78>
     ba8:	3b01      	subs	r3, #1

	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     baa:	2b00      	cmp	r3, #0
     bac:	d1f7      	bne.n	b9e <usart_read_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
			}
		}

		enum status_code retval;
		uint16_t received_data = 0;
     bae:	466b      	mov	r3, sp
     bb0:	1d99      	adds	r1, r3, #6
     bb2:	2300      	movs	r3, #0
     bb4:	800b      	strh	r3, [r1, #0]

		retval = usart_read_wait(module, &received_data);
     bb6:	4648      	mov	r0, r9
     bb8:	4b15      	ldr	r3, [pc, #84]	; (c10 <usart_read_buffer_wait+0x98>)
     bba:	4798      	blx	r3

		if (retval != STATUS_OK) {
     bbc:	2800      	cmp	r0, #0
     bbe:	d119      	bne.n	bf4 <usart_read_buffer_wait+0x7c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     bc0:	1c73      	adds	r3, r6, #1
     bc2:	b299      	uxth	r1, r3
     bc4:	466b      	mov	r3, sp
     bc6:	3306      	adds	r3, #6
     bc8:	881b      	ldrh	r3, [r3, #0]
     bca:	4652      	mov	r2, sl
     bcc:	5593      	strb	r3, [r2, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bce:	464a      	mov	r2, r9
     bd0:	7952      	ldrb	r2, [r2, #5]
     bd2:	2a01      	cmp	r2, #1
     bd4:	d105      	bne.n	be2 <usart_read_buffer_wait+0x6a>
			rx_data[rx_pos++] = (received_data >> 8);
     bd6:	1cb2      	adds	r2, r6, #2
     bd8:	b296      	uxth	r6, r2
     bda:	0a1b      	lsrs	r3, r3, #8
     bdc:	4652      	mov	r2, sl
     bde:	5453      	strb	r3, [r2, r1]
     be0:	e000      	b.n	be4 <usart_read_buffer_wait+0x6c>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     be2:	1c0e      	adds	r6, r1, #0
     be4:	1e7a      	subs	r2, r7, #1
     be6:	b297      	uxth	r7, r2
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint16_t rx_pos = 0;

	/* Blocks while buffer is being received */
	while (length--) {
     be8:	2f00      	cmp	r7, #0
     bea:	d105      	bne.n	bf8 <usart_read_buffer_wait+0x80>
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
     bec:	2300      	movs	r3, #0
     bee:	e008      	b.n	c02 <usart_read_buffer_wait+0x8a>
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     bf0:	2312      	movs	r3, #18
     bf2:	e006      	b.n	c02 <usart_read_buffer_wait+0x8a>
		}

		enum status_code retval;
		uint16_t received_data = 0;

		retval = usart_read_wait(module, &received_data);
     bf4:	1c03      	adds	r3, r0, #0
     bf6:	e004      	b.n	c02 <usart_read_buffer_wait+0x8a>
	/* Blocks while buffer is being received */
	while (length--) {
		/* Wait for the USART to have new data and abort operation if it
		 * doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
     bf8:	7e2b      	ldrb	r3, [r5, #24]
     bfa:	4223      	tst	r3, r4
     bfc:	d1d7      	bne.n	bae <usart_read_buffer_wait+0x36>
     bfe:	4b05      	ldr	r3, [pc, #20]	; (c14 <usart_read_buffer_wait+0x9c>)
     c00:	e7cd      	b.n	b9e <usart_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
     c02:	1c18      	adds	r0, r3, #0
     c04:	b003      	add	sp, #12
     c06:	bc0c      	pop	{r2, r3}
     c08:	4691      	mov	r9, r2
     c0a:	469a      	mov	sl, r3
     c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	00000b01 	.word	0x00000b01
     c14:	0000ffff 	.word	0x0000ffff

00000c18 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c1a:	0080      	lsls	r0, r0, #2
     c1c:	4b65      	ldr	r3, [pc, #404]	; (db4 <_usart_interrupt_handler+0x19c>)
     c1e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c20:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     c22:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     c24:	2b00      	cmp	r3, #0
     c26:	d1fc      	bne.n	c22 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c28:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c2a:	7da6      	ldrb	r6, [r4, #22]
     c2c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     c2e:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     c30:	5ceb      	ldrb	r3, [r5, r3]
     c32:	2230      	movs	r2, #48	; 0x30
     c34:	5caf      	ldrb	r7, [r5, r2]
     c36:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c38:	07f3      	lsls	r3, r6, #31
     c3a:	d522      	bpl.n	c82 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     c3c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c3e:	b29b      	uxth	r3, r3
     c40:	2b00      	cmp	r3, #0
     c42:	d01c      	beq.n	c7e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     c46:	7813      	ldrb	r3, [r2, #0]
     c48:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     c4a:	1c51      	adds	r1, r2, #1
     c4c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c4e:	7969      	ldrb	r1, [r5, #5]
     c50:	2901      	cmp	r1, #1
     c52:	d001      	beq.n	c58 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c54:	b29b      	uxth	r3, r3
     c56:	e004      	b.n	c62 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     c58:	7851      	ldrb	r1, [r2, #1]
     c5a:	0209      	lsls	r1, r1, #8
     c5c:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     c5e:	3202      	adds	r2, #2
     c60:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     c62:	05db      	lsls	r3, r3, #23
     c64:	0ddb      	lsrs	r3, r3, #23
     c66:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     c68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c6a:	3b01      	subs	r3, #1
     c6c:	b29b      	uxth	r3, r3
     c6e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     c70:	2b00      	cmp	r3, #0
     c72:	d106      	bne.n	c82 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c74:	3301      	adds	r3, #1
     c76:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c78:	3301      	adds	r3, #1
     c7a:	75a3      	strb	r3, [r4, #22]
     c7c:	e001      	b.n	c82 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c7e:	2301      	movs	r3, #1
     c80:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c82:	07b3      	lsls	r3, r6, #30
     c84:	d509      	bpl.n	c9a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c86:	2302      	movs	r3, #2
     c88:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     c8a:	2200      	movs	r2, #0
     c8c:	3331      	adds	r3, #49	; 0x31
     c8e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c90:	07fb      	lsls	r3, r7, #31
     c92:	d502      	bpl.n	c9a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     c94:	1c28      	adds	r0, r5, #0
     c96:	68eb      	ldr	r3, [r5, #12]
     c98:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c9a:	0773      	lsls	r3, r6, #29
     c9c:	d56a      	bpl.n	d74 <_usart_interrupt_handler+0x15c>

		if (module->remaining_rx_buffer_length) {
     c9e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ca0:	b29b      	uxth	r3, r3
     ca2:	2b00      	cmp	r3, #0
     ca4:	d064      	beq.n	d70 <_usart_interrupt_handler+0x158>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ca6:	8b63      	ldrh	r3, [r4, #26]
     ca8:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     caa:	071a      	lsls	r2, r3, #28
     cac:	d402      	bmi.n	cb4 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cae:	223f      	movs	r2, #63	; 0x3f
     cb0:	4013      	ands	r3, r2
     cb2:	e001      	b.n	cb8 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     cb4:	2237      	movs	r2, #55	; 0x37
     cb6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     cb8:	2b00      	cmp	r3, #0
     cba:	d037      	beq.n	d2c <_usart_interrupt_handler+0x114>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     cbc:	079a      	lsls	r2, r3, #30
     cbe:	d507      	bpl.n	cd0 <_usart_interrupt_handler+0xb8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     cc0:	221a      	movs	r2, #26
     cc2:	2332      	movs	r3, #50	; 0x32
     cc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     cc6:	8b62      	ldrh	r2, [r4, #26]
     cc8:	3b30      	subs	r3, #48	; 0x30
     cca:	4313      	orrs	r3, r2
     ccc:	8363      	strh	r3, [r4, #26]
     cce:	e027      	b.n	d20 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     cd0:	075a      	lsls	r2, r3, #29
     cd2:	d507      	bpl.n	ce4 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     cd4:	221e      	movs	r2, #30
     cd6:	2332      	movs	r3, #50	; 0x32
     cd8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     cda:	8b62      	ldrh	r2, [r4, #26]
     cdc:	3b2e      	subs	r3, #46	; 0x2e
     cde:	4313      	orrs	r3, r2
     ce0:	8363      	strh	r3, [r4, #26]
     ce2:	e01d      	b.n	d20 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ce4:	07da      	lsls	r2, r3, #31
     ce6:	d507      	bpl.n	cf8 <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     ce8:	2213      	movs	r2, #19
     cea:	2332      	movs	r3, #50	; 0x32
     cec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     cee:	8b62      	ldrh	r2, [r4, #26]
     cf0:	3b31      	subs	r3, #49	; 0x31
     cf2:	4313      	orrs	r3, r2
     cf4:	8363      	strh	r3, [r4, #26]
     cf6:	e013      	b.n	d20 <_usart_interrupt_handler+0x108>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     cf8:	06da      	lsls	r2, r3, #27
     cfa:	d507      	bpl.n	d0c <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     cfc:	2242      	movs	r2, #66	; 0x42
     cfe:	2332      	movs	r3, #50	; 0x32
     d00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
     d02:	8b62      	ldrh	r2, [r4, #26]
     d04:	3b22      	subs	r3, #34	; 0x22
     d06:	4313      	orrs	r3, r2
     d08:	8363      	strh	r3, [r4, #26]
     d0a:	e009      	b.n	d20 <_usart_interrupt_handler+0x108>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     d0c:	2220      	movs	r2, #32
     d0e:	421a      	tst	r2, r3
     d10:	d006      	beq.n	d20 <_usart_interrupt_handler+0x108>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d12:	3221      	adds	r2, #33	; 0x21
     d14:	2332      	movs	r3, #50	; 0x32
     d16:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
     d18:	8b62      	ldrh	r2, [r4, #26]
     d1a:	3b12      	subs	r3, #18
     d1c:	4313      	orrs	r3, r2
     d1e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d20:	077b      	lsls	r3, r7, #29
     d22:	d527      	bpl.n	d74 <_usart_interrupt_handler+0x15c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d24:	1c28      	adds	r0, r5, #0
     d26:	696b      	ldr	r3, [r5, #20]
     d28:	4798      	blx	r3
     d2a:	e023      	b.n	d74 <_usart_interrupt_handler+0x15c>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d2e:	05db      	lsls	r3, r3, #23
     d30:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d32:	b2da      	uxtb	r2, r3
     d34:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d36:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     d3a:	1c51      	adds	r1, r2, #1
     d3c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d3e:	7969      	ldrb	r1, [r5, #5]
     d40:	2901      	cmp	r1, #1
     d42:	d104      	bne.n	d4e <_usart_interrupt_handler+0x136>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d44:	0a1b      	lsrs	r3, r3, #8
     d46:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     d48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d4a:	3301      	adds	r3, #1
     d4c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d50:	3b01      	subs	r3, #1
     d52:	b29b      	uxth	r3, r3
     d54:	85ab      	strh	r3, [r5, #44]	; 0x2c
     d56:	2b00      	cmp	r3, #0
     d58:	d10c      	bne.n	d74 <_usart_interrupt_handler+0x15c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d5a:	3304      	adds	r3, #4
     d5c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     d5e:	2200      	movs	r2, #0
     d60:	332e      	adds	r3, #46	; 0x2e
     d62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     d64:	07bb      	lsls	r3, r7, #30
     d66:	d505      	bpl.n	d74 <_usart_interrupt_handler+0x15c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d68:	1c28      	adds	r0, r5, #0
     d6a:	692b      	ldr	r3, [r5, #16]
     d6c:	4798      	blx	r3
     d6e:	e001      	b.n	d74 <_usart_interrupt_handler+0x15c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d70:	2304      	movs	r3, #4
     d72:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     d74:	06f3      	lsls	r3, r6, #27
     d76:	d507      	bpl.n	d88 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     d78:	2310      	movs	r3, #16
     d7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     d7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     d7e:	06fb      	lsls	r3, r7, #27
     d80:	d502      	bpl.n	d88 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     d82:	1c28      	adds	r0, r5, #0
     d84:	69eb      	ldr	r3, [r5, #28]
     d86:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     d88:	06b3      	lsls	r3, r6, #26
     d8a:	d507      	bpl.n	d9c <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     d8c:	2320      	movs	r3, #32
     d8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     d90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     d92:	073b      	lsls	r3, r7, #28
     d94:	d502      	bpl.n	d9c <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     d96:	1c28      	adds	r0, r5, #0
     d98:	69ab      	ldr	r3, [r5, #24]
     d9a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     d9c:	0733      	lsls	r3, r6, #28
     d9e:	d507      	bpl.n	db0 <_usart_interrupt_handler+0x198>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     da0:	2308      	movs	r3, #8
     da2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     da4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     da6:	06bb      	lsls	r3, r7, #26
     da8:	d502      	bpl.n	db0 <_usart_interrupt_handler+0x198>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     daa:	6a2b      	ldr	r3, [r5, #32]
     dac:	1c28      	adds	r0, r5, #0
     dae:	4798      	blx	r3
		}
	}
#endif
}
     db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	200001ac 	.word	0x200001ac

00000db8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     db8:	4770      	bx	lr
     dba:	46c0      	nop			; (mov r8, r8)

00000dbc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     dbe:	4b0a      	ldr	r3, [pc, #40]	; (de8 <_sercom_set_handler+0x2c>)
     dc0:	781b      	ldrb	r3, [r3, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d10c      	bne.n	de0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dc6:	4f09      	ldr	r7, [pc, #36]	; (dec <_sercom_set_handler+0x30>)
     dc8:	4e09      	ldr	r6, [pc, #36]	; (df0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     dca:	4d0a      	ldr	r5, [pc, #40]	; (df4 <_sercom_set_handler+0x38>)
     dcc:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dce:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     dd0:	195a      	adds	r2, r3, r5
     dd2:	6014      	str	r4, [r2, #0]
     dd4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dd6:	2b18      	cmp	r3, #24
     dd8:	d1f9      	bne.n	dce <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     dda:	2201      	movs	r2, #1
     ddc:	4b02      	ldr	r3, [pc, #8]	; (de8 <_sercom_set_handler+0x2c>)
     dde:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     de0:	0080      	lsls	r0, r0, #2
     de2:	4b02      	ldr	r3, [pc, #8]	; (dec <_sercom_set_handler+0x30>)
     de4:	50c1      	str	r1, [r0, r3]
}
     de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     de8:	20000159 	.word	0x20000159
     dec:	2000015c 	.word	0x2000015c
     df0:	00000db9 	.word	0x00000db9
     df4:	200001ac 	.word	0x200001ac

00000df8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     df8:	b510      	push	{r4, lr}
     dfa:	b082      	sub	sp, #8
     dfc:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     dfe:	4668      	mov	r0, sp
     e00:	4905      	ldr	r1, [pc, #20]	; (e18 <_sercom_get_interrupt_vector+0x20>)
     e02:	2206      	movs	r2, #6
     e04:	4b05      	ldr	r3, [pc, #20]	; (e1c <_sercom_get_interrupt_vector+0x24>)
     e06:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e08:	1c20      	adds	r0, r4, #0
     e0a:	4b05      	ldr	r3, [pc, #20]	; (e20 <_sercom_get_interrupt_vector+0x28>)
     e0c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e0e:	466b      	mov	r3, sp
     e10:	5618      	ldrsb	r0, [r3, r0]
}
     e12:	b002      	add	sp, #8
     e14:	bd10      	pop	{r4, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	00002fc4 	.word	0x00002fc4
     e1c:	00002055 	.word	0x00002055
     e20:	000004d9 	.word	0x000004d9

00000e24 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e24:	b508      	push	{r3, lr}
     e26:	4b02      	ldr	r3, [pc, #8]	; (e30 <SERCOM0_Handler+0xc>)
     e28:	681b      	ldr	r3, [r3, #0]
     e2a:	2000      	movs	r0, #0
     e2c:	4798      	blx	r3
     e2e:	bd08      	pop	{r3, pc}
     e30:	2000015c 	.word	0x2000015c

00000e34 <SERCOM1_Handler>:
     e34:	b508      	push	{r3, lr}
     e36:	4b02      	ldr	r3, [pc, #8]	; (e40 <SERCOM1_Handler+0xc>)
     e38:	685b      	ldr	r3, [r3, #4]
     e3a:	2001      	movs	r0, #1
     e3c:	4798      	blx	r3
     e3e:	bd08      	pop	{r3, pc}
     e40:	2000015c 	.word	0x2000015c

00000e44 <SERCOM2_Handler>:
     e44:	b508      	push	{r3, lr}
     e46:	4b02      	ldr	r3, [pc, #8]	; (e50 <SERCOM2_Handler+0xc>)
     e48:	689b      	ldr	r3, [r3, #8]
     e4a:	2002      	movs	r0, #2
     e4c:	4798      	blx	r3
     e4e:	bd08      	pop	{r3, pc}
     e50:	2000015c 	.word	0x2000015c

00000e54 <SERCOM3_Handler>:
     e54:	b508      	push	{r3, lr}
     e56:	4b02      	ldr	r3, [pc, #8]	; (e60 <SERCOM3_Handler+0xc>)
     e58:	68db      	ldr	r3, [r3, #12]
     e5a:	2003      	movs	r0, #3
     e5c:	4798      	blx	r3
     e5e:	bd08      	pop	{r3, pc}
     e60:	2000015c 	.word	0x2000015c

00000e64 <SERCOM4_Handler>:
     e64:	b508      	push	{r3, lr}
     e66:	4b02      	ldr	r3, [pc, #8]	; (e70 <SERCOM4_Handler+0xc>)
     e68:	691b      	ldr	r3, [r3, #16]
     e6a:	2004      	movs	r0, #4
     e6c:	4798      	blx	r3
     e6e:	bd08      	pop	{r3, pc}
     e70:	2000015c 	.word	0x2000015c

00000e74 <SERCOM5_Handler>:
     e74:	b508      	push	{r3, lr}
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <SERCOM5_Handler+0xc>)
     e78:	695b      	ldr	r3, [r3, #20]
     e7a:	2005      	movs	r0, #5
     e7c:	4798      	blx	r3
     e7e:	bd08      	pop	{r3, pc}
     e80:	2000015c 	.word	0x2000015c

00000e84 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     e84:	b5f0      	push	{r4, r5, r6, r7, lr}
     e86:	4647      	mov	r7, r8
     e88:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     e8a:	0080      	lsls	r0, r0, #2
     e8c:	4b0d      	ldr	r3, [pc, #52]	; (ec4 <_tcc_interrupt_handler+0x40>)
     e8e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     e90:	683b      	ldr	r3, [r7, #0]
     e92:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     e96:	401e      	ands	r6, r3
     e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     e9a:	401e      	ands	r6, r3
     e9c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     e9e:	4b0a      	ldr	r3, [pc, #40]	; (ec8 <_tcc_interrupt_handler+0x44>)
     ea0:	4698      	mov	r8, r3
     ea2:	4643      	mov	r3, r8
     ea4:	58e5      	ldr	r5, [r4, r3]
     ea6:	422e      	tst	r6, r5
     ea8:	d005      	beq.n	eb6 <_tcc_interrupt_handler+0x32>
     eaa:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     eac:	685b      	ldr	r3, [r3, #4]
     eae:	1c38      	adds	r0, r7, #0
     eb0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     eb2:	683b      	ldr	r3, [r7, #0]
     eb4:	62dd      	str	r5, [r3, #44]	; 0x2c
     eb6:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     eb8:	2c30      	cmp	r4, #48	; 0x30
     eba:	d1f2      	bne.n	ea2 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     ebc:	bc04      	pop	{r2}
     ebe:	4690      	mov	r8, r2
     ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	200001c4 	.word	0x200001c4
     ec8:	00002fcc 	.word	0x00002fcc

00000ecc <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     ecc:	b508      	push	{r3, lr}
     ece:	2000      	movs	r0, #0
     ed0:	4b01      	ldr	r3, [pc, #4]	; (ed8 <TCC0_Handler+0xc>)
     ed2:	4798      	blx	r3
     ed4:	bd08      	pop	{r3, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	00000e85 	.word	0x00000e85

00000edc <TCC1_Handler>:
     edc:	b508      	push	{r3, lr}
     ede:	2001      	movs	r0, #1
     ee0:	4b01      	ldr	r3, [pc, #4]	; (ee8 <TCC1_Handler+0xc>)
     ee2:	4798      	blx	r3
     ee4:	bd08      	pop	{r3, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00000e85 	.word	0x00000e85

00000eec <TCC2_Handler>:
     eec:	b508      	push	{r3, lr}
     eee:	2002      	movs	r0, #2
     ef0:	4b01      	ldr	r3, [pc, #4]	; (ef8 <TCC2_Handler+0xc>)
     ef2:	4798      	blx	r3
     ef4:	bd08      	pop	{r3, pc}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00000e85 	.word	0x00000e85

00000efc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     efc:	4b0c      	ldr	r3, [pc, #48]	; (f30 <cpu_irq_enter_critical+0x34>)
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	2b00      	cmp	r3, #0
     f02:	d110      	bne.n	f26 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f04:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f08:	2b00      	cmp	r3, #0
     f0a:	d109      	bne.n	f20 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     f0c:	b672      	cpsid	i
     f0e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f12:	2200      	movs	r2, #0
     f14:	4b07      	ldr	r3, [pc, #28]	; (f34 <cpu_irq_enter_critical+0x38>)
     f16:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f18:	3201      	adds	r2, #1
     f1a:	4b07      	ldr	r3, [pc, #28]	; (f38 <cpu_irq_enter_critical+0x3c>)
     f1c:	701a      	strb	r2, [r3, #0]
     f1e:	e002      	b.n	f26 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f20:	2200      	movs	r2, #0
     f22:	4b05      	ldr	r3, [pc, #20]	; (f38 <cpu_irq_enter_critical+0x3c>)
     f24:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f26:	4a02      	ldr	r2, [pc, #8]	; (f30 <cpu_irq_enter_critical+0x34>)
     f28:	6813      	ldr	r3, [r2, #0]
     f2a:	3301      	adds	r3, #1
     f2c:	6013      	str	r3, [r2, #0]
}
     f2e:	4770      	bx	lr
     f30:	20000174 	.word	0x20000174
     f34:	20000000 	.word	0x20000000
     f38:	20000178 	.word	0x20000178

00000f3c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f3c:	4b08      	ldr	r3, [pc, #32]	; (f60 <cpu_irq_leave_critical+0x24>)
     f3e:	681a      	ldr	r2, [r3, #0]
     f40:	3a01      	subs	r2, #1
     f42:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f44:	681b      	ldr	r3, [r3, #0]
     f46:	2b00      	cmp	r3, #0
     f48:	d109      	bne.n	f5e <cpu_irq_leave_critical+0x22>
     f4a:	4b06      	ldr	r3, [pc, #24]	; (f64 <cpu_irq_leave_critical+0x28>)
     f4c:	781b      	ldrb	r3, [r3, #0]
     f4e:	2b00      	cmp	r3, #0
     f50:	d005      	beq.n	f5e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f52:	2201      	movs	r2, #1
     f54:	4b04      	ldr	r3, [pc, #16]	; (f68 <cpu_irq_leave_critical+0x2c>)
     f56:	701a      	strb	r2, [r3, #0]
     f58:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     f5c:	b662      	cpsie	i
	}
}
     f5e:	4770      	bx	lr
     f60:	20000174 	.word	0x20000174
     f64:	20000178 	.word	0x20000178
     f68:	20000000 	.word	0x20000000

00000f6c <system_board_init>:




void system_board_init(void)
{
     f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f6e:	4647      	mov	r7, r8
     f70:	b480      	push	{r7}
     f72:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     f74:	ac01      	add	r4, sp, #4
     f76:	2601      	movs	r6, #1
     f78:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
     f7a:	2700      	movs	r7, #0
     f7c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     f7e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     f80:	2013      	movs	r0, #19
     f82:	1c21      	adds	r1, r4, #0
     f84:	4d0b      	ldr	r5, [pc, #44]	; (fb4 <system_board_init+0x48>)
     f86:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f88:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <system_board_init+0x4c>)
     f8a:	4698      	mov	r8, r3
     f8c:	2380      	movs	r3, #128	; 0x80
     f8e:	031b      	lsls	r3, r3, #12
     f90:	4642      	mov	r2, r8
     f92:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	
	port_pin_set_config(PIN_PA13, &pin_conf);
     f94:	200d      	movs	r0, #13
     f96:	1c21      	adds	r1, r4, #0
     f98:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f9a:	2380      	movs	r3, #128	; 0x80
     f9c:	019b      	lsls	r3, r3, #6
     f9e:	4642      	mov	r2, r8
     fa0:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(PIN_PA13, false);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     fa2:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     fa4:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     fa6:	201c      	movs	r0, #28
     fa8:	1c21      	adds	r1, r4, #0
     faa:	47a8      	blx	r5
	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
#endif

}
     fac:	b002      	add	sp, #8
     fae:	bc04      	pop	{r2}
     fb0:	4690      	mov	r8, r2
     fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fb4:	00000fbd 	.word	0x00000fbd
     fb8:	41004400 	.word	0x41004400

00000fbc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     fbc:	b500      	push	{lr}
     fbe:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fc0:	ab01      	add	r3, sp, #4
     fc2:	2280      	movs	r2, #128	; 0x80
     fc4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     fc6:	780a      	ldrb	r2, [r1, #0]
     fc8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     fca:	784a      	ldrb	r2, [r1, #1]
     fcc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     fce:	788a      	ldrb	r2, [r1, #2]
     fd0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     fd2:	1c19      	adds	r1, r3, #0
     fd4:	4b01      	ldr	r3, [pc, #4]	; (fdc <port_pin_set_config+0x20>)
     fd6:	4798      	blx	r3
}
     fd8:	b003      	add	sp, #12
     fda:	bd00      	pop	{pc}
     fdc:	00001839 	.word	0x00001839

00000fe0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     fe0:	b508      	push	{r3, lr}
	switch (clock_source) {
     fe2:	2808      	cmp	r0, #8
     fe4:	d803      	bhi.n	fee <system_clock_source_get_hz+0xe>
     fe6:	0080      	lsls	r0, r0, #2
     fe8:	4b1b      	ldr	r3, [pc, #108]	; (1058 <system_clock_source_get_hz+0x78>)
     fea:	581b      	ldr	r3, [r3, r0]
     fec:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     fee:	2000      	movs	r0, #0
     ff0:	e031      	b.n	1056 <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     ff2:	4b1a      	ldr	r3, [pc, #104]	; (105c <system_clock_source_get_hz+0x7c>)
     ff4:	6918      	ldr	r0, [r3, #16]
     ff6:	e02e      	b.n	1056 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     ff8:	4b19      	ldr	r3, [pc, #100]	; (1060 <system_clock_source_get_hz+0x80>)
     ffa:	6a18      	ldr	r0, [r3, #32]
     ffc:	0580      	lsls	r0, r0, #22
     ffe:	0f80      	lsrs	r0, r0, #30
    1000:	4b18      	ldr	r3, [pc, #96]	; (1064 <system_clock_source_get_hz+0x84>)
    1002:	40c3      	lsrs	r3, r0
    1004:	1c18      	adds	r0, r3, #0
    1006:	e026      	b.n	1056 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1008:	4b14      	ldr	r3, [pc, #80]	; (105c <system_clock_source_get_hz+0x7c>)
    100a:	6958      	ldr	r0, [r3, #20]
    100c:	e023      	b.n	1056 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    100e:	4b13      	ldr	r3, [pc, #76]	; (105c <system_clock_source_get_hz+0x7c>)
    1010:	681b      	ldr	r3, [r3, #0]
    1012:	2002      	movs	r0, #2
    1014:	4018      	ands	r0, r3
    1016:	d01e      	beq.n	1056 <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1018:	4911      	ldr	r1, [pc, #68]	; (1060 <system_clock_source_get_hz+0x80>)
    101a:	2210      	movs	r2, #16
    101c:	68cb      	ldr	r3, [r1, #12]
    101e:	421a      	tst	r2, r3
    1020:	d0fc      	beq.n	101c <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1022:	4b0e      	ldr	r3, [pc, #56]	; (105c <system_clock_source_get_hz+0x7c>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	075b      	lsls	r3, r3, #29
    1028:	d514      	bpl.n	1054 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    102a:	2000      	movs	r0, #0
    102c:	4b0e      	ldr	r3, [pc, #56]	; (1068 <system_clock_source_get_hz+0x88>)
    102e:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1030:	4b0a      	ldr	r3, [pc, #40]	; (105c <system_clock_source_get_hz+0x7c>)
    1032:	689b      	ldr	r3, [r3, #8]
    1034:	041b      	lsls	r3, r3, #16
    1036:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1038:	4358      	muls	r0, r3
    103a:	e00c      	b.n	1056 <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    103c:	2350      	movs	r3, #80	; 0x50
    103e:	4a08      	ldr	r2, [pc, #32]	; (1060 <system_clock_source_get_hz+0x80>)
    1040:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1042:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1044:	075b      	lsls	r3, r3, #29
    1046:	d506      	bpl.n	1056 <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1048:	4b04      	ldr	r3, [pc, #16]	; (105c <system_clock_source_get_hz+0x7c>)
    104a:	68d8      	ldr	r0, [r3, #12]
    104c:	e003      	b.n	1056 <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    104e:	2080      	movs	r0, #128	; 0x80
    1050:	0200      	lsls	r0, r0, #8
    1052:	e000      	b.n	1056 <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1054:	4805      	ldr	r0, [pc, #20]	; (106c <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1056:	bd08      	pop	{r3, pc}
    1058:	00002ffc 	.word	0x00002ffc
    105c:	2000017c 	.word	0x2000017c
    1060:	40000800 	.word	0x40000800
    1064:	007a1200 	.word	0x007a1200
    1068:	0000175d 	.word	0x0000175d
    106c:	02dc6c00 	.word	0x02dc6c00

00001070 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1070:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1072:	4c0c      	ldr	r4, [pc, #48]	; (10a4 <system_clock_source_osc8m_set_config+0x34>)
    1074:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1076:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1078:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    107a:	7842      	ldrb	r2, [r0, #1]
    107c:	2001      	movs	r0, #1
    107e:	4002      	ands	r2, r0
    1080:	0192      	lsls	r2, r2, #6
    1082:	2640      	movs	r6, #64	; 0x40
    1084:	43b3      	bics	r3, r6
    1086:	4313      	orrs	r3, r2
    1088:	1c02      	adds	r2, r0, #0
    108a:	402a      	ands	r2, r5
    108c:	01d2      	lsls	r2, r2, #7
    108e:	307f      	adds	r0, #127	; 0x7f
    1090:	4383      	bics	r3, r0
    1092:	4313      	orrs	r3, r2
    1094:	2203      	movs	r2, #3
    1096:	400a      	ands	r2, r1
    1098:	0212      	lsls	r2, r2, #8
    109a:	4903      	ldr	r1, [pc, #12]	; (10a8 <system_clock_source_osc8m_set_config+0x38>)
    109c:	400b      	ands	r3, r1
    109e:	4313      	orrs	r3, r2
    10a0:	6223      	str	r3, [r4, #32]
}
    10a2:	bd70      	pop	{r4, r5, r6, pc}
    10a4:	40000800 	.word	0x40000800
    10a8:	fffffcff 	.word	0xfffffcff

000010ac <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    10ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    10ae:	4657      	mov	r7, sl
    10b0:	464e      	mov	r6, r9
    10b2:	4645      	mov	r5, r8
    10b4:	b4e0      	push	{r5, r6, r7}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    10b6:	4e1c      	ldr	r6, [pc, #112]	; (1128 <system_clock_source_osc32k_set_config+0x7c>)
    10b8:	69b3      	ldr	r3, [r6, #24]
    10ba:	469c      	mov	ip, r3

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    10bc:	7841      	ldrb	r1, [r0, #1]
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    10be:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10c0:	7907      	ldrb	r7, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    10c2:	78c3      	ldrb	r3, [r0, #3]
    10c4:	4699      	mov	r9, r3
	temp.bit.WRTLOCK  = config->write_once;
    10c6:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    10c8:	7883      	ldrb	r3, [r0, #2]
    10ca:	2001      	movs	r0, #1
    10cc:	4003      	ands	r3, r0
    10ce:	009b      	lsls	r3, r3, #2
    10d0:	469a      	mov	sl, r3
    10d2:	2204      	movs	r2, #4
    10d4:	4690      	mov	r8, r2
    10d6:	4662      	mov	r2, ip
    10d8:	4643      	mov	r3, r8
    10da:	439a      	bics	r2, r3
    10dc:	1c13      	adds	r3, r2, #0
    10de:	4652      	mov	r2, sl
    10e0:	431a      	orrs	r2, r3
    10e2:	1c13      	adds	r3, r2, #0
    10e4:	4001      	ands	r1, r0
    10e6:	00c9      	lsls	r1, r1, #3
    10e8:	2208      	movs	r2, #8
    10ea:	4393      	bics	r3, r2
    10ec:	430b      	orrs	r3, r1
    10ee:	464a      	mov	r2, r9
    10f0:	4002      	ands	r2, r0
    10f2:	0192      	lsls	r2, r2, #6
    10f4:	2140      	movs	r1, #64	; 0x40
    10f6:	438b      	bics	r3, r1
    10f8:	4313      	orrs	r3, r2
    10fa:	4007      	ands	r7, r0
    10fc:	01ff      	lsls	r7, r7, #7
    10fe:	2280      	movs	r2, #128	; 0x80
    1100:	4393      	bics	r3, r2
    1102:	433b      	orrs	r3, r7
    1104:	3a79      	subs	r2, #121	; 0x79
    1106:	4015      	ands	r5, r2
    1108:	022d      	lsls	r5, r5, #8
    110a:	4f08      	ldr	r7, [pc, #32]	; (112c <system_clock_source_osc32k_set_config+0x80>)
    110c:	403b      	ands	r3, r7
    110e:	432b      	orrs	r3, r5
    1110:	4004      	ands	r4, r0
    1112:	0320      	lsls	r0, r4, #12
    1114:	4c06      	ldr	r4, [pc, #24]	; (1130 <system_clock_source_osc32k_set_config+0x84>)
    1116:	401c      	ands	r4, r3
    1118:	4304      	orrs	r4, r0
    111a:	61b4      	str	r4, [r6, #24]
}
    111c:	bc1c      	pop	{r2, r3, r4}
    111e:	4690      	mov	r8, r2
    1120:	4699      	mov	r9, r3
    1122:	46a2      	mov	sl, r4
    1124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1126:	46c0      	nop			; (mov r8, r8)
    1128:	40000800 	.word	0x40000800
    112c:	fffff8ff 	.word	0xfffff8ff
    1130:	ffffefff 	.word	0xffffefff

00001134 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1134:	b5f0      	push	{r4, r5, r6, r7, lr}
    1136:	465f      	mov	r7, fp
    1138:	4656      	mov	r6, sl
    113a:	464d      	mov	r5, r9
    113c:	4644      	mov	r4, r8
    113e:	b4f0      	push	{r4, r5, r6, r7}
    1140:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1142:	4e2e      	ldr	r6, [pc, #184]	; (11fc <system_clock_source_xosc32k_set_config+0xc8>)
    1144:	8ab3      	ldrh	r3, [r6, #20]
    1146:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    1148:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    114a:	7803      	ldrb	r3, [r0, #0]
    114c:	425a      	negs	r2, r3
    114e:	415a      	adcs	r2, r3
    1150:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1152:	7883      	ldrb	r3, [r0, #2]
    1154:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    1156:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    1158:	7902      	ldrb	r2, [r0, #4]
    115a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    115c:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    115e:	7b02      	ldrb	r2, [r0, #12]
    1160:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    1162:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1164:	6882      	ldr	r2, [r0, #8]
    1166:	4826      	ldr	r0, [pc, #152]	; (1200 <system_clock_source_xosc32k_set_config+0xcc>)
    1168:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    116a:	2001      	movs	r0, #1
    116c:	464a      	mov	r2, r9
    116e:	0092      	lsls	r2, r2, #2
    1170:	4691      	mov	r9, r2
    1172:	2204      	movs	r2, #4
    1174:	4692      	mov	sl, r2
    1176:	4662      	mov	r2, ip
    1178:	4651      	mov	r1, sl
    117a:	438a      	bics	r2, r1
    117c:	4694      	mov	ip, r2
    117e:	464a      	mov	r2, r9
    1180:	4661      	mov	r1, ip
    1182:	430a      	orrs	r2, r1
    1184:	4694      	mov	ip, r2
    1186:	4642      	mov	r2, r8
    1188:	4002      	ands	r2, r0
    118a:	00d2      	lsls	r2, r2, #3
    118c:	4690      	mov	r8, r2
    118e:	2208      	movs	r2, #8
    1190:	4691      	mov	r9, r2
    1192:	4662      	mov	r2, ip
    1194:	4649      	mov	r1, r9
    1196:	438a      	bics	r2, r1
    1198:	4694      	mov	ip, r2
    119a:	4642      	mov	r2, r8
    119c:	4661      	mov	r1, ip
    119e:	430a      	orrs	r2, r1
    11a0:	4694      	mov	ip, r2
    11a2:	4003      	ands	r3, r0
    11a4:	011b      	lsls	r3, r3, #4
    11a6:	2210      	movs	r2, #16
    11a8:	4690      	mov	r8, r2
    11aa:	4662      	mov	r2, ip
    11ac:	4641      	mov	r1, r8
    11ae:	438a      	bics	r2, r1
    11b0:	4313      	orrs	r3, r2
    11b2:	4659      	mov	r1, fp
    11b4:	4001      	ands	r1, r0
    11b6:	0149      	lsls	r1, r1, #5
    11b8:	2220      	movs	r2, #32
    11ba:	4393      	bics	r3, r2
    11bc:	430b      	orrs	r3, r1
    11be:	9a01      	ldr	r2, [sp, #4]
    11c0:	4002      	ands	r2, r0
    11c2:	0192      	lsls	r2, r2, #6
    11c4:	2140      	movs	r1, #64	; 0x40
    11c6:	438b      	bics	r3, r1
    11c8:	4313      	orrs	r3, r2
    11ca:	4007      	ands	r7, r0
    11cc:	01ff      	lsls	r7, r7, #7
    11ce:	2280      	movs	r2, #128	; 0x80
    11d0:	4393      	bics	r3, r2
    11d2:	433b      	orrs	r3, r7
    11d4:	3a79      	subs	r2, #121	; 0x79
    11d6:	4015      	ands	r5, r2
    11d8:	022d      	lsls	r5, r5, #8
    11da:	4f0a      	ldr	r7, [pc, #40]	; (1204 <system_clock_source_xosc32k_set_config+0xd0>)
    11dc:	403b      	ands	r3, r7
    11de:	432b      	orrs	r3, r5
    11e0:	4004      	ands	r4, r0
    11e2:	0320      	lsls	r0, r4, #12
    11e4:	4c08      	ldr	r4, [pc, #32]	; (1208 <system_clock_source_xosc32k_set_config+0xd4>)
    11e6:	401c      	ands	r4, r3
    11e8:	4304      	orrs	r4, r0
    11ea:	82b4      	strh	r4, [r6, #20]
}
    11ec:	b003      	add	sp, #12
    11ee:	bc3c      	pop	{r2, r3, r4, r5}
    11f0:	4690      	mov	r8, r2
    11f2:	4699      	mov	r9, r3
    11f4:	46a2      	mov	sl, r4
    11f6:	46ab      	mov	fp, r5
    11f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	40000800 	.word	0x40000800
    1200:	2000017c 	.word	0x2000017c
    1204:	fffff8ff 	.word	0xfffff8ff
    1208:	ffffefff 	.word	0xffffefff

0000120c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    120c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    120e:	7a03      	ldrb	r3, [r0, #8]
    1210:	069b      	lsls	r3, r3, #26
    1212:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1214:	8943      	ldrh	r3, [r0, #10]
    1216:	059b      	lsls	r3, r3, #22
    1218:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    121a:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    121c:	4c19      	ldr	r4, [pc, #100]	; (1284 <system_clock_source_dfll_set_config+0x78>)
    121e:	6063      	str	r3, [r4, #4]
    1220:	8881      	ldrh	r1, [r0, #4]
    1222:	8843      	ldrh	r3, [r0, #2]
    1224:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1226:	79c3      	ldrb	r3, [r0, #7]
    1228:	7982      	ldrb	r2, [r0, #6]
    122a:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    122c:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    122e:	7842      	ldrb	r2, [r0, #1]
    1230:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    1232:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    1234:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1236:	7803      	ldrb	r3, [r0, #0]
    1238:	2b04      	cmp	r3, #4
    123a:	d10f      	bne.n	125c <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    123c:	7b03      	ldrb	r3, [r0, #12]
    123e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1240:	8a02      	ldrh	r2, [r0, #16]
    1242:	4313      	orrs	r3, r2
    1244:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1246:	89c3      	ldrh	r3, [r0, #14]
    1248:	041b      	lsls	r3, r3, #16
    124a:	4a0f      	ldr	r2, [pc, #60]	; (1288 <system_clock_source_dfll_set_config+0x7c>)
    124c:	4013      	ands	r3, r2
    124e:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    1250:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    1252:	6821      	ldr	r1, [r4, #0]
    1254:	2304      	movs	r3, #4
    1256:	430b      	orrs	r3, r1
    1258:	6023      	str	r3, [r4, #0]
    125a:	e011      	b.n	1280 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    125c:	2b20      	cmp	r3, #32
    125e:	d10f      	bne.n	1280 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1260:	7b03      	ldrb	r3, [r0, #12]
    1262:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1264:	8a02      	ldrh	r2, [r0, #16]
    1266:	4313      	orrs	r3, r2
    1268:	1c19      	adds	r1, r3, #0
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    126a:	89c3      	ldrh	r3, [r0, #14]
    126c:	041b      	lsls	r3, r3, #16
    126e:	4a06      	ldr	r2, [pc, #24]	; (1288 <system_clock_source_dfll_set_config+0x7c>)
    1270:	4013      	ands	r3, r2
    1272:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    1274:	4a03      	ldr	r2, [pc, #12]	; (1284 <system_clock_source_dfll_set_config+0x78>)
    1276:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1278:	6813      	ldr	r3, [r2, #0]
    127a:	4904      	ldr	r1, [pc, #16]	; (128c <system_clock_source_dfll_set_config+0x80>)
    127c:	430b      	orrs	r3, r1
    127e:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1280:	bd10      	pop	{r4, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	2000017c 	.word	0x2000017c
    1288:	03ff0000 	.word	0x03ff0000
    128c:	00000424 	.word	0x00000424

00001290 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1290:	2808      	cmp	r0, #8
    1292:	d803      	bhi.n	129c <system_clock_source_enable+0xc>
    1294:	0080      	lsls	r0, r0, #2
    1296:	4b25      	ldr	r3, [pc, #148]	; (132c <system_clock_source_enable+0x9c>)
    1298:	581b      	ldr	r3, [r3, r0]
    129a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    129c:	2017      	movs	r0, #23
    129e:	e044      	b.n	132a <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    12a0:	4a23      	ldr	r2, [pc, #140]	; (1330 <system_clock_source_enable+0xa0>)
    12a2:	6a11      	ldr	r1, [r2, #32]
    12a4:	2302      	movs	r3, #2
    12a6:	430b      	orrs	r3, r1
    12a8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    12aa:	2000      	movs	r0, #0
    12ac:	e03d      	b.n	132a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    12ae:	4a20      	ldr	r2, [pc, #128]	; (1330 <system_clock_source_enable+0xa0>)
    12b0:	6991      	ldr	r1, [r2, #24]
    12b2:	2302      	movs	r3, #2
    12b4:	430b      	orrs	r3, r1
    12b6:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    12b8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    12ba:	e036      	b.n	132a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    12bc:	4a1c      	ldr	r2, [pc, #112]	; (1330 <system_clock_source_enable+0xa0>)
    12be:	8a11      	ldrh	r1, [r2, #16]
    12c0:	2302      	movs	r3, #2
    12c2:	430b      	orrs	r3, r1
    12c4:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    12c6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    12c8:	e02f      	b.n	132a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    12ca:	4a19      	ldr	r2, [pc, #100]	; (1330 <system_clock_source_enable+0xa0>)
    12cc:	8a91      	ldrh	r1, [r2, #20]
    12ce:	2302      	movs	r3, #2
    12d0:	430b      	orrs	r3, r1
    12d2:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    12d4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    12d6:	e028      	b.n	132a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    12d8:	4916      	ldr	r1, [pc, #88]	; (1334 <system_clock_source_enable+0xa4>)
    12da:	680b      	ldr	r3, [r1, #0]
    12dc:	2202      	movs	r2, #2
    12de:	4313      	orrs	r3, r2
    12e0:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    12e2:	4b13      	ldr	r3, [pc, #76]	; (1330 <system_clock_source_enable+0xa0>)
    12e4:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12e6:	1c19      	adds	r1, r3, #0
    12e8:	320e      	adds	r2, #14
    12ea:	68cb      	ldr	r3, [r1, #12]
    12ec:	421a      	tst	r2, r3
    12ee:	d0fc      	beq.n	12ea <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    12f0:	4a10      	ldr	r2, [pc, #64]	; (1334 <system_clock_source_enable+0xa4>)
    12f2:	6891      	ldr	r1, [r2, #8]
    12f4:	4b0e      	ldr	r3, [pc, #56]	; (1330 <system_clock_source_enable+0xa0>)
    12f6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    12f8:	6852      	ldr	r2, [r2, #4]
    12fa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    12fc:	2200      	movs	r2, #0
    12fe:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1300:	1c19      	adds	r1, r3, #0
    1302:	3210      	adds	r2, #16
    1304:	68cb      	ldr	r3, [r1, #12]
    1306:	421a      	tst	r2, r3
    1308:	d0fc      	beq.n	1304 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    130a:	4b0a      	ldr	r3, [pc, #40]	; (1334 <system_clock_source_enable+0xa4>)
    130c:	681b      	ldr	r3, [r3, #0]
    130e:	b29b      	uxth	r3, r3
    1310:	4a07      	ldr	r2, [pc, #28]	; (1330 <system_clock_source_enable+0xa0>)
    1312:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1314:	2000      	movs	r0, #0
    1316:	e008      	b.n	132a <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1318:	4905      	ldr	r1, [pc, #20]	; (1330 <system_clock_source_enable+0xa0>)
    131a:	2244      	movs	r2, #68	; 0x44
    131c:	5c88      	ldrb	r0, [r1, r2]
    131e:	2302      	movs	r3, #2
    1320:	4303      	orrs	r3, r0
    1322:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1324:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1326:	e000      	b.n	132a <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1328:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    132a:	4770      	bx	lr
    132c:	00003020 	.word	0x00003020
    1330:	40000800 	.word	0x40000800
    1334:	2000017c 	.word	0x2000017c

00001338 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	464f      	mov	r7, r9
    133c:	4646      	mov	r6, r8
    133e:	b4c0      	push	{r6, r7}
    1340:	b091      	sub	sp, #68	; 0x44
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1342:	22c2      	movs	r2, #194	; 0xc2
    1344:	00d2      	lsls	r2, r2, #3
    1346:	4b61      	ldr	r3, [pc, #388]	; (14cc <system_clock_init+0x194>)
    1348:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    134a:	4961      	ldr	r1, [pc, #388]	; (14d0 <system_clock_init+0x198>)
    134c:	684b      	ldr	r3, [r1, #4]
    134e:	221e      	movs	r2, #30
    1350:	4393      	bics	r3, r2
    1352:	3a1a      	subs	r2, #26
    1354:	4313      	orrs	r3, r2
    1356:	604b      	str	r3, [r1, #4]
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
#elif CONF_CLOCK_GCLK_4_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_4;
    1358:	ab01      	add	r3, sp, #4
    135a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    135c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    135e:	4d5d      	ldr	r5, [pc, #372]	; (14d4 <system_clock_init+0x19c>)
    1360:	b2e0      	uxtb	r0, r4
    1362:	a901      	add	r1, sp, #4
    1364:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1366:	3401      	adds	r4, #1
    1368:	2c25      	cmp	r4, #37	; 0x25
    136a:	d1f9      	bne.n	1360 <system_clock_init+0x28>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    136c:	a80c      	add	r0, sp, #48	; 0x30
    136e:	2300      	movs	r3, #0
    1370:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
	config->frequency           = 32768UL;
    1372:	2280      	movs	r2, #128	; 0x80
    1374:	0212      	lsls	r2, r2, #8
    1376:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1378:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    137a:	2201      	movs	r2, #1
    137c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    137e:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    1380:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1382:	2106      	movs	r1, #6
    1384:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    1386:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1388:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    138a:	4b53      	ldr	r3, [pc, #332]	; (14d8 <system_clock_init+0x1a0>)
    138c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    138e:	2005      	movs	r0, #5
    1390:	4b52      	ldr	r3, [pc, #328]	; (14dc <system_clock_init+0x1a4>)
    1392:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1394:	494d      	ldr	r1, [pc, #308]	; (14cc <system_clock_init+0x194>)
    1396:	2202      	movs	r2, #2
    1398:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    139a:	421a      	tst	r2, r3
    139c:	d0fc      	beq.n	1398 <system_clock_init+0x60>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    139e:	494b      	ldr	r1, [pc, #300]	; (14cc <system_clock_init+0x194>)
    13a0:	8a8a      	ldrh	r2, [r1, #20]
    13a2:	2380      	movs	r3, #128	; 0x80
    13a4:	4313      	orrs	r3, r2
    13a6:	828b      	strh	r3, [r1, #20]


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    13a8:	4d4d      	ldr	r5, [pc, #308]	; (14e0 <system_clock_init+0x1a8>)
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    13aa:	682b      	ldr	r3, [r5, #0]
    13ac:	04db      	lsls	r3, r3, #19
    13ae:	0e5b      	lsrs	r3, r3, #25
    13b0:	041a      	lsls	r2, r3, #16
    13b2:	6988      	ldr	r0, [r1, #24]
    13b4:	4b4b      	ldr	r3, [pc, #300]	; (14e4 <system_clock_init+0x1ac>)
    13b6:	4003      	ands	r3, r0
    13b8:	4313      	orrs	r3, r2
    13ba:	618b      	str	r3, [r1, #24]
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
	Assert(config);

	config->enable_1khz_output  = true;
    13bc:	a80a      	add	r0, sp, #40	; 0x28
    13be:	2301      	movs	r3, #1
    13c0:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    13c2:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    13c4:	2400      	movs	r4, #0
    13c6:	70c4      	strb	r4, [r0, #3]
	config->on_demand           = true;
    13c8:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    13ca:	3306      	adds	r3, #6
    13cc:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    13ce:	7144      	strb	r4, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    13d0:	4b45      	ldr	r3, [pc, #276]	; (14e8 <system_clock_init+0x1b0>)
    13d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    13d4:	2004      	movs	r0, #4
    13d6:	4b41      	ldr	r3, [pc, #260]	; (14dc <system_clock_init+0x1a4>)
    13d8:	4798      	blx	r3
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    13da:	ab05      	add	r3, sp, #20
    13dc:	2200      	movs	r2, #0
    13de:	805c      	strh	r4, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    13e0:	809c      	strh	r4, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    13e2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    13e4:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    13e6:	213f      	movs	r1, #63	; 0x3f
    13e8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    13ea:	393b      	subs	r1, #59	; 0x3b
    13ec:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    13ee:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    13f0:	682b      	ldr	r3, [r5, #0]
    13f2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    13f4:	2b3f      	cmp	r3, #63	; 0x3f
    13f6:	d100      	bne.n	13fa <system_clock_init+0xc2>
		coarse = 0x1f;
    13f8:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    13fa:	a805      	add	r0, sp, #20
    13fc:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    13fe:	23b7      	movs	r3, #183	; 0xb7
    1400:	00db      	lsls	r3, r3, #3
    1402:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1404:	2307      	movs	r3, #7
    1406:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1408:	3338      	adds	r3, #56	; 0x38
    140a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    140c:	4b37      	ldr	r3, [pc, #220]	; (14ec <system_clock_init+0x1b4>)
    140e:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1410:	a804      	add	r0, sp, #16
    1412:	2500      	movs	r5, #0
    1414:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1416:	2601      	movs	r6, #1
    1418:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    141a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    141c:	4b34      	ldr	r3, [pc, #208]	; (14f0 <system_clock_init+0x1b8>)
    141e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1420:	2006      	movs	r0, #6
    1422:	4b2e      	ldr	r3, [pc, #184]	; (14dc <system_clock_init+0x1a4>)
    1424:	4699      	mov	r9, r3
    1426:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1428:	4b32      	ldr	r3, [pc, #200]	; (14f4 <system_clock_init+0x1bc>)
    142a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    142c:	ac01      	add	r4, sp, #4
    142e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1430:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1432:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1434:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1436:	2305      	movs	r3, #5
    1438:	7023      	strb	r3, [r4, #0]
    143a:	2001      	movs	r0, #1
    143c:	1c21      	adds	r1, r4, #0
    143e:	4b2e      	ldr	r3, [pc, #184]	; (14f8 <system_clock_init+0x1c0>)
    1440:	4698      	mov	r8, r3
    1442:	4798      	blx	r3
    1444:	2001      	movs	r0, #1
    1446:	4f2d      	ldr	r7, [pc, #180]	; (14fc <system_clock_init+0x1c4>)
    1448:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    144a:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    144c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    144e:	7265      	strb	r5, [r4, #9]
    1450:	2304      	movs	r3, #4
    1452:	7023      	strb	r3, [r4, #0]
    1454:	331c      	adds	r3, #28
    1456:	6063      	str	r3, [r4, #4]
    1458:	2002      	movs	r0, #2
    145a:	1c21      	adds	r1, r4, #0
    145c:	47c0      	blx	r8
    145e:	2002      	movs	r0, #2
    1460:	47b8      	blx	r7
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1462:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    1464:	7065      	strb	r5, [r4, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1466:	2306      	movs	r3, #6
    1468:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
    146a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    146c:	7265      	strb	r5, [r4, #9]
    146e:	2003      	movs	r0, #3
    1470:	1c21      	adds	r1, r4, #0
    1472:	47c0      	blx	r8
    1474:	2003      	movs	r0, #3
    1476:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1478:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    147a:	2000      	movs	r0, #0
    147c:	1c21      	adds	r1, r4, #0
    147e:	4b15      	ldr	r3, [pc, #84]	; (14d4 <system_clock_init+0x19c>)
    1480:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1482:	2000      	movs	r0, #0
    1484:	4b1e      	ldr	r3, [pc, #120]	; (1500 <system_clock_init+0x1c8>)
    1486:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1488:	2007      	movs	r0, #7
    148a:	47c8      	blx	r9

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    148c:	490f      	ldr	r1, [pc, #60]	; (14cc <system_clock_init+0x194>)
    148e:	22d0      	movs	r2, #208	; 0xd0
    1490:	68cb      	ldr	r3, [r1, #12]
    1492:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1494:	2bd0      	cmp	r3, #208	; 0xd0
    1496:	d1fb      	bne.n	1490 <system_clock_init+0x158>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1498:	4a1a      	ldr	r2, [pc, #104]	; (1504 <system_clock_init+0x1cc>)
    149a:	2300      	movs	r3, #0
    149c:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    149e:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    14a0:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    14a2:	72d3      	strb	r3, [r2, #11]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    14a4:	a901      	add	r1, sp, #4
    14a6:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    14a8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    14aa:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    14ac:	3307      	adds	r3, #7
    14ae:	700b      	strb	r3, [r1, #0]
    14b0:	3b04      	subs	r3, #4
    14b2:	604b      	str	r3, [r1, #4]
    14b4:	2000      	movs	r0, #0
    14b6:	4b10      	ldr	r3, [pc, #64]	; (14f8 <system_clock_init+0x1c0>)
    14b8:	4798      	blx	r3
    14ba:	2000      	movs	r0, #0
    14bc:	4b0f      	ldr	r3, [pc, #60]	; (14fc <system_clock_init+0x1c4>)
    14be:	4798      	blx	r3
#endif
}
    14c0:	b011      	add	sp, #68	; 0x44
    14c2:	bc0c      	pop	{r2, r3}
    14c4:	4690      	mov	r8, r2
    14c6:	4699      	mov	r9, r3
    14c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	40000800 	.word	0x40000800
    14d0:	41004000 	.word	0x41004000
    14d4:	00001741 	.word	0x00001741
    14d8:	00001135 	.word	0x00001135
    14dc:	00001291 	.word	0x00001291
    14e0:	00806024 	.word	0x00806024
    14e4:	ff80ffff 	.word	0xff80ffff
    14e8:	000010ad 	.word	0x000010ad
    14ec:	0000120d 	.word	0x0000120d
    14f0:	00001071 	.word	0x00001071
    14f4:	00001509 	.word	0x00001509
    14f8:	0000152d 	.word	0x0000152d
    14fc:	000015e5 	.word	0x000015e5
    1500:	000016b5 	.word	0x000016b5
    1504:	40000400 	.word	0x40000400

00001508 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1508:	4a06      	ldr	r2, [pc, #24]	; (1524 <system_gclk_init+0x1c>)
    150a:	6991      	ldr	r1, [r2, #24]
    150c:	2308      	movs	r3, #8
    150e:	430b      	orrs	r3, r1
    1510:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1512:	2201      	movs	r2, #1
    1514:	4b04      	ldr	r3, [pc, #16]	; (1528 <system_gclk_init+0x20>)
    1516:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1518:	1c19      	adds	r1, r3, #0
    151a:	780b      	ldrb	r3, [r1, #0]
    151c:	4213      	tst	r3, r2
    151e:	d1fc      	bne.n	151a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1520:	4770      	bx	lr
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	40000400 	.word	0x40000400
    1528:	40000c00 	.word	0x40000c00

0000152c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1530:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1532:	780d      	ldrb	r5, [r1, #0]
    1534:	022d      	lsls	r5, r5, #8
    1536:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1538:	784b      	ldrb	r3, [r1, #1]
    153a:	2b00      	cmp	r3, #0
    153c:	d002      	beq.n	1544 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    153e:	2380      	movs	r3, #128	; 0x80
    1540:	02db      	lsls	r3, r3, #11
    1542:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1544:	7a4b      	ldrb	r3, [r1, #9]
    1546:	2b00      	cmp	r3, #0
    1548:	d002      	beq.n	1550 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    154a:	2380      	movs	r3, #128	; 0x80
    154c:	031b      	lsls	r3, r3, #12
    154e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1550:	6848      	ldr	r0, [r1, #4]
    1552:	2801      	cmp	r0, #1
    1554:	d918      	bls.n	1588 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1556:	1e43      	subs	r3, r0, #1
    1558:	4218      	tst	r0, r3
    155a:	d110      	bne.n	157e <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    155c:	2802      	cmp	r0, #2
    155e:	d906      	bls.n	156e <system_gclk_gen_set_config+0x42>
    1560:	2302      	movs	r3, #2
    1562:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1564:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1566:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1568:	4298      	cmp	r0, r3
    156a:	d8fb      	bhi.n	1564 <system_gclk_gen_set_config+0x38>
    156c:	e000      	b.n	1570 <system_gclk_gen_set_config+0x44>
    156e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1570:	0212      	lsls	r2, r2, #8
    1572:	4332      	orrs	r2, r6
    1574:	1c14      	adds	r4, r2, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1576:	2380      	movs	r3, #128	; 0x80
    1578:	035b      	lsls	r3, r3, #13
    157a:	431d      	orrs	r5, r3
    157c:	e004      	b.n	1588 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    157e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1580:	4334      	orrs	r4, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1582:	2380      	movs	r3, #128	; 0x80
    1584:	029b      	lsls	r3, r3, #10
    1586:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1588:	7a0b      	ldrb	r3, [r1, #8]
    158a:	2b00      	cmp	r3, #0
    158c:	d002      	beq.n	1594 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    158e:	2380      	movs	r3, #128	; 0x80
    1590:	039b      	lsls	r3, r3, #14
    1592:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1594:	4a0f      	ldr	r2, [pc, #60]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    1596:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1598:	b25b      	sxtb	r3, r3
    159a:	2b00      	cmp	r3, #0
    159c:	dbfb      	blt.n	1596 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    159e:	4b0e      	ldr	r3, [pc, #56]	; (15d8 <system_gclk_gen_set_config+0xac>)
    15a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15a2:	4b0e      	ldr	r3, [pc, #56]	; (15dc <system_gclk_gen_set_config+0xb0>)
    15a4:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15a6:	4a0b      	ldr	r2, [pc, #44]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    15a8:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    15aa:	b25b      	sxtb	r3, r3
    15ac:	2b00      	cmp	r3, #0
    15ae:	dbfb      	blt.n	15a8 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15b0:	4b08      	ldr	r3, [pc, #32]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    15b2:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15b4:	1c1a      	adds	r2, r3, #0
    15b6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    15b8:	b25b      	sxtb	r3, r3
    15ba:	2b00      	cmp	r3, #0
    15bc:	dbfb      	blt.n	15b6 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    15be:	4a05      	ldr	r2, [pc, #20]	; (15d4 <system_gclk_gen_set_config+0xa8>)
    15c0:	6851      	ldr	r1, [r2, #4]
    15c2:	2380      	movs	r3, #128	; 0x80
    15c4:	025b      	lsls	r3, r3, #9
    15c6:	400b      	ands	r3, r1
    15c8:	431d      	orrs	r5, r3
    15ca:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15cc:	4b04      	ldr	r3, [pc, #16]	; (15e0 <system_gclk_gen_set_config+0xb4>)
    15ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15d0:	bd70      	pop	{r4, r5, r6, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	40000c00 	.word	0x40000c00
    15d8:	00000efd 	.word	0x00000efd
    15dc:	40000c08 	.word	0x40000c08
    15e0:	00000f3d 	.word	0x00000f3d

000015e4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    15e4:	b510      	push	{r4, lr}
    15e6:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15e8:	4a0b      	ldr	r2, [pc, #44]	; (1618 <system_gclk_gen_enable+0x34>)
    15ea:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    15ec:	b25b      	sxtb	r3, r3
    15ee:	2b00      	cmp	r3, #0
    15f0:	dbfb      	blt.n	15ea <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15f2:	4b0a      	ldr	r3, [pc, #40]	; (161c <system_gclk_gen_enable+0x38>)
    15f4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15f6:	4b0a      	ldr	r3, [pc, #40]	; (1620 <system_gclk_gen_enable+0x3c>)
    15f8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15fa:	4a07      	ldr	r2, [pc, #28]	; (1618 <system_gclk_gen_enable+0x34>)
    15fc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    15fe:	b25b      	sxtb	r3, r3
    1600:	2b00      	cmp	r3, #0
    1602:	dbfb      	blt.n	15fc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1604:	4a04      	ldr	r2, [pc, #16]	; (1618 <system_gclk_gen_enable+0x34>)
    1606:	6853      	ldr	r3, [r2, #4]
    1608:	2180      	movs	r1, #128	; 0x80
    160a:	0249      	lsls	r1, r1, #9
    160c:	430b      	orrs	r3, r1
    160e:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1610:	4b04      	ldr	r3, [pc, #16]	; (1624 <system_gclk_gen_enable+0x40>)
    1612:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1614:	bd10      	pop	{r4, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	40000c00 	.word	0x40000c00
    161c:	00000efd 	.word	0x00000efd
    1620:	40000c04 	.word	0x40000c04
    1624:	00000f3d 	.word	0x00000f3d

00001628 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1628:	b570      	push	{r4, r5, r6, lr}
    162a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    162c:	4a1a      	ldr	r2, [pc, #104]	; (1698 <system_gclk_gen_get_hz+0x70>)
    162e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1630:	b25b      	sxtb	r3, r3
    1632:	2b00      	cmp	r3, #0
    1634:	dbfb      	blt.n	162e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1636:	4b19      	ldr	r3, [pc, #100]	; (169c <system_gclk_gen_get_hz+0x74>)
    1638:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    163a:	4b19      	ldr	r3, [pc, #100]	; (16a0 <system_gclk_gen_get_hz+0x78>)
    163c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    163e:	4a16      	ldr	r2, [pc, #88]	; (1698 <system_gclk_gen_get_hz+0x70>)
    1640:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1642:	b25b      	sxtb	r3, r3
    1644:	2b00      	cmp	r3, #0
    1646:	dbfb      	blt.n	1640 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1648:	4e13      	ldr	r6, [pc, #76]	; (1698 <system_gclk_gen_get_hz+0x70>)
    164a:	6870      	ldr	r0, [r6, #4]
    164c:	04c0      	lsls	r0, r0, #19
    164e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1650:	4b14      	ldr	r3, [pc, #80]	; (16a4 <system_gclk_gen_get_hz+0x7c>)
    1652:	4798      	blx	r3
    1654:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1656:	4b12      	ldr	r3, [pc, #72]	; (16a0 <system_gclk_gen_get_hz+0x78>)
    1658:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    165a:	6876      	ldr	r6, [r6, #4]
    165c:	02f6      	lsls	r6, r6, #11
    165e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1660:	4b11      	ldr	r3, [pc, #68]	; (16a8 <system_gclk_gen_get_hz+0x80>)
    1662:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1664:	4a0c      	ldr	r2, [pc, #48]	; (1698 <system_gclk_gen_get_hz+0x70>)
    1666:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1668:	b25b      	sxtb	r3, r3
    166a:	2b00      	cmp	r3, #0
    166c:	dbfb      	blt.n	1666 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    166e:	4b0a      	ldr	r3, [pc, #40]	; (1698 <system_gclk_gen_get_hz+0x70>)
    1670:	689c      	ldr	r4, [r3, #8]
    1672:	0a24      	lsrs	r4, r4, #8
    1674:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1676:	4b0d      	ldr	r3, [pc, #52]	; (16ac <system_gclk_gen_get_hz+0x84>)
    1678:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    167a:	2e00      	cmp	r6, #0
    167c:	d107      	bne.n	168e <system_gclk_gen_get_hz+0x66>
    167e:	2c01      	cmp	r4, #1
    1680:	d907      	bls.n	1692 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1682:	1c28      	adds	r0, r5, #0
    1684:	1c21      	adds	r1, r4, #0
    1686:	4b0a      	ldr	r3, [pc, #40]	; (16b0 <system_gclk_gen_get_hz+0x88>)
    1688:	4798      	blx	r3
    168a:	1c05      	adds	r5, r0, #0
    168c:	e001      	b.n	1692 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    168e:	3401      	adds	r4, #1
    1690:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1692:	1c28      	adds	r0, r5, #0
    1694:	bd70      	pop	{r4, r5, r6, pc}
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	40000c00 	.word	0x40000c00
    169c:	00000efd 	.word	0x00000efd
    16a0:	40000c04 	.word	0x40000c04
    16a4:	00000fe1 	.word	0x00000fe1
    16a8:	40000c08 	.word	0x40000c08
    16ac:	00000f3d 	.word	0x00000f3d
    16b0:	00001e91 	.word	0x00001e91

000016b4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    16b4:	b510      	push	{r4, lr}
    16b6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16b8:	4b06      	ldr	r3, [pc, #24]	; (16d4 <system_gclk_chan_enable+0x20>)
    16ba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16bc:	4b06      	ldr	r3, [pc, #24]	; (16d8 <system_gclk_chan_enable+0x24>)
    16be:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    16c0:	4a06      	ldr	r2, [pc, #24]	; (16dc <system_gclk_chan_enable+0x28>)
    16c2:	8851      	ldrh	r1, [r2, #2]
    16c4:	2380      	movs	r3, #128	; 0x80
    16c6:	01db      	lsls	r3, r3, #7
    16c8:	430b      	orrs	r3, r1
    16ca:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16cc:	4b04      	ldr	r3, [pc, #16]	; (16e0 <system_gclk_chan_enable+0x2c>)
    16ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16d0:	bd10      	pop	{r4, pc}
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	00000efd 	.word	0x00000efd
    16d8:	40000c02 	.word	0x40000c02
    16dc:	40000c00 	.word	0x40000c00
    16e0:	00000f3d 	.word	0x00000f3d

000016e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    16e4:	b510      	push	{r4, lr}
    16e6:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16e8:	4b0f      	ldr	r3, [pc, #60]	; (1728 <system_gclk_chan_disable+0x44>)
    16ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16ec:	4b0f      	ldr	r3, [pc, #60]	; (172c <system_gclk_chan_disable+0x48>)
    16ee:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    16f0:	4b0f      	ldr	r3, [pc, #60]	; (1730 <system_gclk_chan_disable+0x4c>)
    16f2:	885a      	ldrh	r2, [r3, #2]
    16f4:	0512      	lsls	r2, r2, #20
    16f6:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    16f8:	8859      	ldrh	r1, [r3, #2]
    16fa:	4a0e      	ldr	r2, [pc, #56]	; (1734 <system_gclk_chan_disable+0x50>)
    16fc:	400a      	ands	r2, r1
    16fe:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1700:	8859      	ldrh	r1, [r3, #2]
    1702:	4a0d      	ldr	r2, [pc, #52]	; (1738 <system_gclk_chan_disable+0x54>)
    1704:	400a      	ands	r2, r1
    1706:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1708:	1c19      	adds	r1, r3, #0
    170a:	2280      	movs	r2, #128	; 0x80
    170c:	01d2      	lsls	r2, r2, #7
    170e:	884b      	ldrh	r3, [r1, #2]
    1710:	4213      	tst	r3, r2
    1712:	d1fc      	bne.n	170e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1714:	4906      	ldr	r1, [pc, #24]	; (1730 <system_gclk_chan_disable+0x4c>)
    1716:	0202      	lsls	r2, r0, #8
    1718:	8848      	ldrh	r0, [r1, #2]
    171a:	4b06      	ldr	r3, [pc, #24]	; (1734 <system_gclk_chan_disable+0x50>)
    171c:	4003      	ands	r3, r0
    171e:	4313      	orrs	r3, r2
    1720:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1722:	4b06      	ldr	r3, [pc, #24]	; (173c <system_gclk_chan_disable+0x58>)
    1724:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1726:	bd10      	pop	{r4, pc}
    1728:	00000efd 	.word	0x00000efd
    172c:	40000c02 	.word	0x40000c02
    1730:	40000c00 	.word	0x40000c00
    1734:	fffff0ff 	.word	0xfffff0ff
    1738:	ffffbfff 	.word	0xffffbfff
    173c:	00000f3d 	.word	0x00000f3d

00001740 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1740:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1742:	780c      	ldrb	r4, [r1, #0]
    1744:	0224      	lsls	r4, r4, #8
    1746:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1748:	4b02      	ldr	r3, [pc, #8]	; (1754 <system_gclk_chan_set_config+0x14>)
    174a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    174c:	b2a4      	uxth	r4, r4
    174e:	4b02      	ldr	r3, [pc, #8]	; (1758 <system_gclk_chan_set_config+0x18>)
    1750:	805c      	strh	r4, [r3, #2]
}
    1752:	bd10      	pop	{r4, pc}
    1754:	000016e5 	.word	0x000016e5
    1758:	40000c00 	.word	0x40000c00

0000175c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    175c:	b510      	push	{r4, lr}
    175e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1760:	4b06      	ldr	r3, [pc, #24]	; (177c <system_gclk_chan_get_hz+0x20>)
    1762:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1764:	4b06      	ldr	r3, [pc, #24]	; (1780 <system_gclk_chan_get_hz+0x24>)
    1766:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1768:	4b06      	ldr	r3, [pc, #24]	; (1784 <system_gclk_chan_get_hz+0x28>)
    176a:	885c      	ldrh	r4, [r3, #2]
    176c:	0524      	lsls	r4, r4, #20
    176e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1770:	4b05      	ldr	r3, [pc, #20]	; (1788 <system_gclk_chan_get_hz+0x2c>)
    1772:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1774:	1c20      	adds	r0, r4, #0
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <system_gclk_chan_get_hz+0x30>)
    1778:	4798      	blx	r3
}
    177a:	bd10      	pop	{r4, pc}
    177c:	00000efd 	.word	0x00000efd
    1780:	40000c02 	.word	0x40000c02
    1784:	40000c00 	.word	0x40000c00
    1788:	00000f3d 	.word	0x00000f3d
    178c:	00001629 	.word	0x00001629

00001790 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1790:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1792:	78d3      	ldrb	r3, [r2, #3]
    1794:	2b00      	cmp	r3, #0
    1796:	d11e      	bne.n	17d6 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1798:	7814      	ldrb	r4, [r2, #0]
    179a:	2c80      	cmp	r4, #128	; 0x80
    179c:	d004      	beq.n	17a8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    179e:	0624      	lsls	r4, r4, #24
    17a0:	2380      	movs	r3, #128	; 0x80
    17a2:	025b      	lsls	r3, r3, #9
    17a4:	431c      	orrs	r4, r3
    17a6:	e000      	b.n	17aa <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    17a8:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17aa:	7853      	ldrb	r3, [r2, #1]
    17ac:	2502      	movs	r5, #2
    17ae:	43ab      	bics	r3, r5
    17b0:	d10a      	bne.n	17c8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    17b2:	7893      	ldrb	r3, [r2, #2]
    17b4:	2b00      	cmp	r3, #0
    17b6:	d103      	bne.n	17c0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    17b8:	2380      	movs	r3, #128	; 0x80
    17ba:	029b      	lsls	r3, r3, #10
    17bc:	431c      	orrs	r4, r3
    17be:	e002      	b.n	17c6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    17c0:	23c0      	movs	r3, #192	; 0xc0
    17c2:	02db      	lsls	r3, r3, #11
    17c4:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    17c6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17c8:	7853      	ldrb	r3, [r2, #1]
    17ca:	3b01      	subs	r3, #1
    17cc:	2b01      	cmp	r3, #1
    17ce:	d812      	bhi.n	17f6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    17d0:	4b18      	ldr	r3, [pc, #96]	; (1834 <_system_pinmux_config+0xa4>)
    17d2:	401c      	ands	r4, r3
    17d4:	e00f      	b.n	17f6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    17d6:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17d8:	040b      	lsls	r3, r1, #16
    17da:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17dc:	24a0      	movs	r4, #160	; 0xa0
    17de:	05e4      	lsls	r4, r4, #23
    17e0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17e2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17e4:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17e6:	24d0      	movs	r4, #208	; 0xd0
    17e8:	0624      	lsls	r4, r4, #24
    17ea:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17ec:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    17ee:	78d3      	ldrb	r3, [r2, #3]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d018      	beq.n	1826 <_system_pinmux_config+0x96>
    17f4:	e01c      	b.n	1830 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17f6:	040b      	lsls	r3, r1, #16
    17f8:	0c1b      	lsrs	r3, r3, #16
    17fa:	25a0      	movs	r5, #160	; 0xa0
    17fc:	05ed      	lsls	r5, r5, #23
    17fe:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1800:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1802:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1804:	0c0b      	lsrs	r3, r1, #16
    1806:	25d0      	movs	r5, #208	; 0xd0
    1808:	062d      	lsls	r5, r5, #24
    180a:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    180c:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    180e:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1810:	78d3      	ldrb	r3, [r2, #3]
    1812:	2b00      	cmp	r3, #0
    1814:	d10c      	bne.n	1830 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1816:	0363      	lsls	r3, r4, #13
    1818:	d505      	bpl.n	1826 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    181a:	7893      	ldrb	r3, [r2, #2]
    181c:	2b01      	cmp	r3, #1
    181e:	d101      	bne.n	1824 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    1820:	6181      	str	r1, [r0, #24]
    1822:	e000      	b.n	1826 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1824:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1826:	7853      	ldrb	r3, [r2, #1]
    1828:	3b01      	subs	r3, #1
    182a:	2b01      	cmp	r3, #1
    182c:	d800      	bhi.n	1830 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    182e:	6081      	str	r1, [r0, #8]
		}
	}
}
    1830:	bd30      	pop	{r4, r5, pc}
    1832:	46c0      	nop			; (mov r8, r8)
    1834:	fffbffff 	.word	0xfffbffff

00001838 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1838:	b508      	push	{r3, lr}
    183a:	1c03      	adds	r3, r0, #0
    183c:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    183e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1840:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1842:	2900      	cmp	r1, #0
    1844:	d104      	bne.n	1850 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1846:	0958      	lsrs	r0, r3, #5
    1848:	01c0      	lsls	r0, r0, #7
    184a:	4905      	ldr	r1, [pc, #20]	; (1860 <system_pinmux_pin_set_config+0x28>)
    184c:	468c      	mov	ip, r1
    184e:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1850:	211f      	movs	r1, #31
    1852:	400b      	ands	r3, r1
    1854:	391e      	subs	r1, #30
    1856:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1858:	4b02      	ldr	r3, [pc, #8]	; (1864 <system_pinmux_pin_set_config+0x2c>)
    185a:	4798      	blx	r3
}
    185c:	bd08      	pop	{r3, pc}
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	41004400 	.word	0x41004400
    1864:	00001791 	.word	0x00001791

00001868 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1868:	4770      	bx	lr
    186a:	46c0      	nop			; (mov r8, r8)

0000186c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    186c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    186e:	4b05      	ldr	r3, [pc, #20]	; (1884 <system_init+0x18>)
    1870:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1872:	4b05      	ldr	r3, [pc, #20]	; (1888 <system_init+0x1c>)
    1874:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1876:	4b05      	ldr	r3, [pc, #20]	; (188c <system_init+0x20>)
    1878:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    187a:	4b05      	ldr	r3, [pc, #20]	; (1890 <system_init+0x24>)
    187c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    187e:	4b05      	ldr	r3, [pc, #20]	; (1894 <system_init+0x28>)
    1880:	4798      	blx	r3
}
    1882:	bd08      	pop	{r3, pc}
    1884:	00001339 	.word	0x00001339
    1888:	00000f6d 	.word	0x00000f6d
    188c:	00001869 	.word	0x00001869
    1890:	00001869 	.word	0x00001869
    1894:	00001869 	.word	0x00001869

00001898 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    1898:	e7fe      	b.n	1898 <Dummy_Handler>
    189a:	46c0      	nop			; (mov r8, r8)

0000189c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    189c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    189e:	4b2e      	ldr	r3, [pc, #184]	; (1958 <Reset_Handler+0xbc>)
    18a0:	4a2e      	ldr	r2, [pc, #184]	; (195c <Reset_Handler+0xc0>)
    18a2:	429a      	cmp	r2, r3
    18a4:	d003      	beq.n	18ae <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    18a6:	4b2e      	ldr	r3, [pc, #184]	; (1960 <Reset_Handler+0xc4>)
    18a8:	4a2b      	ldr	r2, [pc, #172]	; (1958 <Reset_Handler+0xbc>)
    18aa:	429a      	cmp	r2, r3
    18ac:	d304      	bcc.n	18b8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    18ae:	4b2d      	ldr	r3, [pc, #180]	; (1964 <Reset_Handler+0xc8>)
    18b0:	4a2d      	ldr	r2, [pc, #180]	; (1968 <Reset_Handler+0xcc>)
    18b2:	429a      	cmp	r2, r3
    18b4:	d310      	bcc.n	18d8 <Reset_Handler+0x3c>
    18b6:	e01e      	b.n	18f6 <Reset_Handler+0x5a>
    18b8:	4a2c      	ldr	r2, [pc, #176]	; (196c <Reset_Handler+0xd0>)
    18ba:	4b29      	ldr	r3, [pc, #164]	; (1960 <Reset_Handler+0xc4>)
    18bc:	3303      	adds	r3, #3
    18be:	1a9b      	subs	r3, r3, r2
    18c0:	089b      	lsrs	r3, r3, #2
    18c2:	3301      	adds	r3, #1
    18c4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    18c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    18c8:	4823      	ldr	r0, [pc, #140]	; (1958 <Reset_Handler+0xbc>)
    18ca:	4924      	ldr	r1, [pc, #144]	; (195c <Reset_Handler+0xc0>)
    18cc:	588c      	ldr	r4, [r1, r2]
    18ce:	5084      	str	r4, [r0, r2]
    18d0:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    18d2:	429a      	cmp	r2, r3
    18d4:	d1fa      	bne.n	18cc <Reset_Handler+0x30>
    18d6:	e7ea      	b.n	18ae <Reset_Handler+0x12>
    18d8:	4a25      	ldr	r2, [pc, #148]	; (1970 <Reset_Handler+0xd4>)
    18da:	4b22      	ldr	r3, [pc, #136]	; (1964 <Reset_Handler+0xc8>)
    18dc:	3303      	adds	r3, #3
    18de:	1a9b      	subs	r3, r3, r2
    18e0:	089b      	lsrs	r3, r3, #2
    18e2:	3301      	adds	r3, #1
    18e4:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    18e6:	2200      	movs	r2, #0
                *pDest++ = 0;
    18e8:	481f      	ldr	r0, [pc, #124]	; (1968 <Reset_Handler+0xcc>)
    18ea:	2100      	movs	r1, #0
    18ec:	1814      	adds	r4, r2, r0
    18ee:	6021      	str	r1, [r4, #0]
    18f0:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    18f2:	429a      	cmp	r2, r3
    18f4:	d1fa      	bne.n	18ec <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    18f6:	4a1f      	ldr	r2, [pc, #124]	; (1974 <Reset_Handler+0xd8>)
    18f8:	21ff      	movs	r1, #255	; 0xff
    18fa:	4b1f      	ldr	r3, [pc, #124]	; (1978 <Reset_Handler+0xdc>)
    18fc:	438b      	bics	r3, r1
    18fe:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1900:	39fd      	subs	r1, #253	; 0xfd
    1902:	2390      	movs	r3, #144	; 0x90
    1904:	005b      	lsls	r3, r3, #1
    1906:	4a1d      	ldr	r2, [pc, #116]	; (197c <Reset_Handler+0xe0>)
    1908:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    190a:	481d      	ldr	r0, [pc, #116]	; (1980 <Reset_Handler+0xe4>)
    190c:	78c3      	ldrb	r3, [r0, #3]
    190e:	2403      	movs	r4, #3
    1910:	43a3      	bics	r3, r4
    1912:	2202      	movs	r2, #2
    1914:	4313      	orrs	r3, r2
    1916:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1918:	78c3      	ldrb	r3, [r0, #3]
    191a:	260c      	movs	r6, #12
    191c:	43b3      	bics	r3, r6
    191e:	2108      	movs	r1, #8
    1920:	430b      	orrs	r3, r1
    1922:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1924:	4b17      	ldr	r3, [pc, #92]	; (1984 <Reset_Handler+0xe8>)
    1926:	7b98      	ldrb	r0, [r3, #14]
    1928:	2530      	movs	r5, #48	; 0x30
    192a:	43a8      	bics	r0, r5
    192c:	1c05      	adds	r5, r0, #0
    192e:	2020      	movs	r0, #32
    1930:	4328      	orrs	r0, r5
    1932:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1934:	7b98      	ldrb	r0, [r3, #14]
    1936:	43b0      	bics	r0, r6
    1938:	4301      	orrs	r1, r0
    193a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    193c:	7b99      	ldrb	r1, [r3, #14]
    193e:	43a1      	bics	r1, r4
    1940:	430a      	orrs	r2, r1
    1942:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1944:	4a10      	ldr	r2, [pc, #64]	; (1988 <Reset_Handler+0xec>)
    1946:	6851      	ldr	r1, [r2, #4]
    1948:	2380      	movs	r3, #128	; 0x80
    194a:	430b      	orrs	r3, r1
    194c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    194e:	4b0f      	ldr	r3, [pc, #60]	; (198c <Reset_Handler+0xf0>)
    1950:	4798      	blx	r3

        /* Branch to main function */
        main();
    1952:	4b0f      	ldr	r3, [pc, #60]	; (1990 <Reset_Handler+0xf4>)
    1954:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    1956:	e7fe      	b.n	1956 <Reset_Handler+0xba>
    1958:	20000000 	.word	0x20000000
    195c:	00003144 	.word	0x00003144
    1960:	20000068 	.word	0x20000068
    1964:	200001d4 	.word	0x200001d4
    1968:	20000068 	.word	0x20000068
    196c:	20000004 	.word	0x20000004
    1970:	2000006c 	.word	0x2000006c
    1974:	e000ed00 	.word	0xe000ed00
    1978:	00000000 	.word	0x00000000
    197c:	41007000 	.word	0x41007000
    1980:	41005000 	.word	0x41005000
    1984:	41004800 	.word	0x41004800
    1988:	41004000 	.word	0x41004000
    198c:	00002009 	.word	0x00002009
    1990:	000019d5 	.word	0x000019d5

00001994 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1994:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1996:	4a06      	ldr	r2, [pc, #24]	; (19b0 <_sbrk+0x1c>)
    1998:	6812      	ldr	r2, [r2, #0]
    199a:	2a00      	cmp	r2, #0
    199c:	d102      	bne.n	19a4 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    199e:	4905      	ldr	r1, [pc, #20]	; (19b4 <_sbrk+0x20>)
    19a0:	4a03      	ldr	r2, [pc, #12]	; (19b0 <_sbrk+0x1c>)
    19a2:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    19a4:	4a02      	ldr	r2, [pc, #8]	; (19b0 <_sbrk+0x1c>)
    19a6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    19a8:	18c3      	adds	r3, r0, r3
    19aa:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    19ac:	4770      	bx	lr
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	20000194 	.word	0x20000194
    19b4:	200021d8 	.word	0x200021d8

000019b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    19b8:	2001      	movs	r0, #1
    19ba:	4240      	negs	r0, r0
    19bc:	4770      	bx	lr
    19be:	46c0      	nop			; (mov r8, r8)

000019c0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    19c0:	2380      	movs	r3, #128	; 0x80
    19c2:	019b      	lsls	r3, r3, #6
    19c4:	604b      	str	r3, [r1, #4]

	return 0;
}
    19c6:	2000      	movs	r0, #0
    19c8:	4770      	bx	lr
    19ca:	46c0      	nop			; (mov r8, r8)

000019cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    19cc:	2001      	movs	r0, #1
    19ce:	4770      	bx	lr

000019d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    19d0:	2000      	movs	r0, #0
    19d2:	4770      	bx	lr

000019d4 <main>:

}
	
	
int main (void)
{
    19d4:	b508      	push	{r3, lr}
	system_init();
    19d6:	4b0c      	ldr	r3, [pc, #48]	; (1a08 <main+0x34>)
    19d8:	4798      	blx	r3
	
	sio2host_init();
    19da:	4b0c      	ldr	r3, [pc, #48]	; (1a0c <main+0x38>)
    19dc:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    19de:	b672      	cpsid	i
    19e0:	f3bf 8f5f 	dmb	sy
	
	//delay_init();
	
	//system_interrupt_enable_global();
	
	cpu_irq_disable();
    19e4:	2200      	movs	r2, #0
    19e6:	4b0a      	ldr	r3, [pc, #40]	; (1a10 <main+0x3c>)
    19e8:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19ea:	f3ef 8310 	mrs	r3, PRIMASK
	
	bool inter = false;
	
	inter = system_interrupt_is_global_enabled();
	printf(" Interrups state: %s ", inter?"1":"0");
    19ee:	4909      	ldr	r1, [pc, #36]	; (1a14 <main+0x40>)
    19f0:	2b00      	cmp	r3, #0
    19f2:	d000      	beq.n	19f6 <main+0x22>
    19f4:	4908      	ldr	r1, [pc, #32]	; (1a18 <main+0x44>)
    19f6:	4809      	ldr	r0, [pc, #36]	; (1a1c <main+0x48>)
    19f8:	4b09      	ldr	r3, [pc, #36]	; (1a20 <main+0x4c>)
    19fa:	4798      	blx	r3
    19fc:	210c      	movs	r1, #12
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    19fe:	4a09      	ldr	r2, [pc, #36]	; (1a24 <main+0x50>)
    1a00:	2380      	movs	r3, #128	; 0x80
    1a02:	019b      	lsls	r3, r3, #6
    1a04:	e010      	b.n	1a28 <main+0x54>
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	0000186d 	.word	0x0000186d
    1a0c:	0000064d 	.word	0x0000064d
    1a10:	20000000 	.word	0x20000000
    1a14:	00003068 	.word	0x00003068
    1a18:	0000306c 	.word	0x0000306c
    1a1c:	00003070 	.word	0x00003070
    1a20:	00002079 	.word	0x00002079
    1a24:	41004400 	.word	0x41004400
    1a28:	6193      	str	r3, [r2, #24]
			*/
		
		
			//GREEN
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1a2a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a2c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	46c0      	nop			; (mov r8, r8)
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	46c0      	nop			; (mov r8, r8)
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	46c0      	nop			; (mov r8, r8)
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	46c0      	nop			; (mov r8, r8)
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	46c0      	nop			; (mov r8, r8)
    1a42:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a44:	46c0      	nop			; (mov r8, r8)
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	46c0      	nop			; (mov r8, r8)
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	46c0      	nop			; (mov r8, r8)
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	46c0      	nop			; (mov r8, r8)
    1a56:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a58:	6193      	str	r3, [r2, #24]
				
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1a5a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a5c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	46c0      	nop			; (mov r8, r8)
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	46c0      	nop			; (mov r8, r8)
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	46c0      	nop			; (mov r8, r8)
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	46c0      	nop			; (mov r8, r8)
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	46c0      	nop			; (mov r8, r8)
    1a72:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a74:	46c0      	nop			; (mov r8, r8)
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	46c0      	nop			; (mov r8, r8)
    1a7a:	46c0      	nop			; (mov r8, r8)
    1a7c:	46c0      	nop			; (mov r8, r8)
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	46c0      	nop			; (mov r8, r8)
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	46c0      	nop			; (mov r8, r8)
    1a86:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1a88:	6193      	str	r3, [r2, #24]
				
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1a8a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a8c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	46c0      	nop			; (mov r8, r8)
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	46c0      	nop			; (mov r8, r8)
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	46c0      	nop			; (mov r8, r8)
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	46c0      	nop			; (mov r8, r8)
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	46c0      	nop			; (mov r8, r8)
    1aa2:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1aa4:	46c0      	nop			; (mov r8, r8)
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	46c0      	nop			; (mov r8, r8)
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	46c0      	nop			; (mov r8, r8)
    1aae:	46c0      	nop			; (mov r8, r8)
    1ab0:	46c0      	nop			; (mov r8, r8)
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	46c0      	nop			; (mov r8, r8)
    1ab6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ab8:	6193      	str	r3, [r2, #24]
				
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1aba:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1abc:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1abe:	46c0      	nop			; (mov r8, r8)
    1ac0:	46c0      	nop			; (mov r8, r8)
    1ac2:	46c0      	nop			; (mov r8, r8)
    1ac4:	46c0      	nop			; (mov r8, r8)
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	46c0      	nop			; (mov r8, r8)
    1aca:	46c0      	nop			; (mov r8, r8)
    1acc:	46c0      	nop			; (mov r8, r8)
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	46c0      	nop			; (mov r8, r8)
    1ad2:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ad4:	46c0      	nop			; (mov r8, r8)
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	46c0      	nop			; (mov r8, r8)
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	46c0      	nop			; (mov r8, r8)
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	46c0      	nop			; (mov r8, r8)
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	46c0      	nop			; (mov r8, r8)
    1ae6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ae8:	6193      	str	r3, [r2, #24]
				
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1aea:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1aec:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	46c0      	nop			; (mov r8, r8)
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	46c0      	nop			; (mov r8, r8)
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	46c0      	nop			; (mov r8, r8)
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	46c0      	nop			; (mov r8, r8)
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	46c0      	nop			; (mov r8, r8)
    1b02:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b04:	46c0      	nop			; (mov r8, r8)
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	46c0      	nop			; (mov r8, r8)
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	46c0      	nop			; (mov r8, r8)
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	46c0      	nop			; (mov r8, r8)
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	46c0      	nop			; (mov r8, r8)
    1b16:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b18:	6193      	str	r3, [r2, #24]
				
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1b1a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b1c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	46c0      	nop			; (mov r8, r8)
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	46c0      	nop			; (mov r8, r8)
    1b26:	46c0      	nop			; (mov r8, r8)
    1b28:	46c0      	nop			; (mov r8, r8)
    1b2a:	46c0      	nop			; (mov r8, r8)
    1b2c:	46c0      	nop			; (mov r8, r8)
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	46c0      	nop			; (mov r8, r8)
    1b32:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b34:	46c0      	nop			; (mov r8, r8)
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	46c0      	nop			; (mov r8, r8)
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	46c0      	nop			; (mov r8, r8)
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	46c0      	nop			; (mov r8, r8)
    1b46:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b48:	6193      	str	r3, [r2, #24]
				
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1b4a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b4c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	46c0      	nop			; (mov r8, r8)
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	46c0      	nop			; (mov r8, r8)
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	46c0      	nop			; (mov r8, r8)
    1b5a:	46c0      	nop			; (mov r8, r8)
    1b5c:	46c0      	nop			; (mov r8, r8)
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	46c0      	nop			; (mov r8, r8)
    1b62:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b64:	46c0      	nop			; (mov r8, r8)
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	46c0      	nop			; (mov r8, r8)
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	46c0      	nop			; (mov r8, r8)
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	46c0      	nop			; (mov r8, r8)
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	46c0      	nop			; (mov r8, r8)
    1b76:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b78:	6193      	str	r3, [r2, #24]
				
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1b7a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b7c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	46c0      	nop			; (mov r8, r8)
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	46c0      	nop			; (mov r8, r8)
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	46c0      	nop			; (mov r8, r8)
    1b8a:	46c0      	nop			; (mov r8, r8)
    1b8c:	46c0      	nop			; (mov r8, r8)
    1b8e:	46c0      	nop			; (mov r8, r8)
    1b90:	46c0      	nop			; (mov r8, r8)
    1b92:	46c0      	nop			; (mov r8, r8)
				
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1b94:	46c0      	nop			; (mov r8, r8)
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	46c0      	nop			; (mov r8, r8)
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	46c0      	nop			; (mov r8, r8)
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	46c0      	nop			; (mov r8, r8)
    1ba2:	46c0      	nop			; (mov r8, r8)
    1ba4:	46c0      	nop			; (mov r8, r8)
    1ba6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1ba8:	6193      	str	r3, [r2, #24]
				
			//RED
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1baa:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1bac:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	46c0      	nop			; (mov r8, r8)
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	46c0      	nop			; (mov r8, r8)
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	46c0      	nop			; (mov r8, r8)
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	46c0      	nop			; (mov r8, r8)
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	46c0      	nop			; (mov r8, r8)
    1bc2:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1bc4:	46c0      	nop			; (mov r8, r8)
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	46c0      	nop			; (mov r8, r8)
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	46c0      	nop			; (mov r8, r8)
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	46c0      	nop			; (mov r8, r8)
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	46c0      	nop			; (mov r8, r8)
    1bd6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1bd8:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1bda:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1bdc:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	46c0      	nop			; (mov r8, r8)
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	46c0      	nop			; (mov r8, r8)
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	46c0      	nop			; (mov r8, r8)
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	46c0      	nop			; (mov r8, r8)
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	46c0      	nop			; (mov r8, r8)
    1bf2:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1bf4:	46c0      	nop			; (mov r8, r8)
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	46c0      	nop			; (mov r8, r8)
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	46c0      	nop			; (mov r8, r8)
    1bfe:	46c0      	nop			; (mov r8, r8)
    1c00:	46c0      	nop			; (mov r8, r8)
    1c02:	46c0      	nop			; (mov r8, r8)
    1c04:	46c0      	nop			; (mov r8, r8)
    1c06:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c08:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1c0a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c0c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	46c0      	nop			; (mov r8, r8)
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	46c0      	nop			; (mov r8, r8)
    1c16:	46c0      	nop			; (mov r8, r8)
    1c18:	46c0      	nop			; (mov r8, r8)
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	46c0      	nop			; (mov r8, r8)
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	46c0      	nop			; (mov r8, r8)
    1c22:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c24:	46c0      	nop			; (mov r8, r8)
    1c26:	46c0      	nop			; (mov r8, r8)
    1c28:	46c0      	nop			; (mov r8, r8)
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	46c0      	nop			; (mov r8, r8)
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	46c0      	nop			; (mov r8, r8)
    1c32:	46c0      	nop			; (mov r8, r8)
    1c34:	46c0      	nop			; (mov r8, r8)
    1c36:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c38:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1c3a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c3c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	46c0      	nop			; (mov r8, r8)
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	46c0      	nop			; (mov r8, r8)
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	46c0      	nop			; (mov r8, r8)
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	46c0      	nop			; (mov r8, r8)
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	46c0      	nop			; (mov r8, r8)
    1c52:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c54:	46c0      	nop			; (mov r8, r8)
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	46c0      	nop			; (mov r8, r8)
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	46c0      	nop			; (mov r8, r8)
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	46c0      	nop			; (mov r8, r8)
    1c62:	46c0      	nop			; (mov r8, r8)
    1c64:	46c0      	nop			; (mov r8, r8)
    1c66:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c68:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1c6a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c6c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	46c0      	nop			; (mov r8, r8)
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	46c0      	nop			; (mov r8, r8)
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	46c0      	nop			; (mov r8, r8)
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	46c0      	nop			; (mov r8, r8)
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	46c0      	nop			; (mov r8, r8)
    1c82:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c84:	46c0      	nop			; (mov r8, r8)
    1c86:	46c0      	nop			; (mov r8, r8)
    1c88:	46c0      	nop			; (mov r8, r8)
    1c8a:	46c0      	nop			; (mov r8, r8)
    1c8c:	46c0      	nop			; (mov r8, r8)
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	46c0      	nop			; (mov r8, r8)
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	46c0      	nop			; (mov r8, r8)
    1c96:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c98:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1c9a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1c9c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	46c0      	nop			; (mov r8, r8)
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	46c0      	nop			; (mov r8, r8)
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	46c0      	nop			; (mov r8, r8)
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	46c0      	nop			; (mov r8, r8)
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	46c0      	nop			; (mov r8, r8)
    1cb2:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1cb4:	46c0      	nop			; (mov r8, r8)
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	46c0      	nop			; (mov r8, r8)
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	46c0      	nop			; (mov r8, r8)
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	46c0      	nop			; (mov r8, r8)
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	46c0      	nop			; (mov r8, r8)
    1cc6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1cc8:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1cca:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1ccc:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1cce:	46c0      	nop			; (mov r8, r8)
    1cd0:	46c0      	nop			; (mov r8, r8)
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	46c0      	nop			; (mov r8, r8)
    1cd6:	46c0      	nop			; (mov r8, r8)
    1cd8:	46c0      	nop			; (mov r8, r8)
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	46c0      	nop			; (mov r8, r8)
    1cde:	46c0      	nop			; (mov r8, r8)
    1ce0:	46c0      	nop			; (mov r8, r8)
    1ce2:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1ce4:	46c0      	nop			; (mov r8, r8)
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	46c0      	nop			; (mov r8, r8)
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	46c0      	nop			; (mov r8, r8)
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	46c0      	nop			; (mov r8, r8)
    1cf2:	46c0      	nop			; (mov r8, r8)
    1cf4:	46c0      	nop			; (mov r8, r8)
    1cf6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1cf8:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1cfa:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1cfc:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1cfe:	46c0      	nop			; (mov r8, r8)
    1d00:	46c0      	nop			; (mov r8, r8)
    1d02:	46c0      	nop			; (mov r8, r8)
    1d04:	46c0      	nop			; (mov r8, r8)
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	46c0      	nop			; (mov r8, r8)
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	46c0      	nop			; (mov r8, r8)
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	46c0      	nop			; (mov r8, r8)
    1d12:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d14:	46c0      	nop			; (mov r8, r8)
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	46c0      	nop			; (mov r8, r8)
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	46c0      	nop			; (mov r8, r8)
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	46c0      	nop			; (mov r8, r8)
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	46c0      	nop			; (mov r8, r8)
    1d26:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d28:	6193      	str	r3, [r2, #24]
			
			//BLUE
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1d2a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d2c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	46c0      	nop			; (mov r8, r8)
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	46c0      	nop			; (mov r8, r8)
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	46c0      	nop			; (mov r8, r8)
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	46c0      	nop			; (mov r8, r8)
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	46c0      	nop			; (mov r8, r8)
    1d42:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d44:	46c0      	nop			; (mov r8, r8)
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	46c0      	nop			; (mov r8, r8)
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	46c0      	nop			; (mov r8, r8)
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	46c0      	nop			; (mov r8, r8)
    1d52:	46c0      	nop			; (mov r8, r8)
    1d54:	46c0      	nop			; (mov r8, r8)
    1d56:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d58:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1d5a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d5c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	46c0      	nop			; (mov r8, r8)
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	46c0      	nop			; (mov r8, r8)
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	46c0      	nop			; (mov r8, r8)
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	46c0      	nop			; (mov r8, r8)
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	46c0      	nop			; (mov r8, r8)
    1d72:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d74:	46c0      	nop			; (mov r8, r8)
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	46c0      	nop			; (mov r8, r8)
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	46c0      	nop			; (mov r8, r8)
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	46c0      	nop			; (mov r8, r8)
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	46c0      	nop			; (mov r8, r8)
    1d86:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1d88:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1d8a:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1d8c:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	46c0      	nop			; (mov r8, r8)
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	46c0      	nop			; (mov r8, r8)
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	46c0      	nop			; (mov r8, r8)
    1d9a:	46c0      	nop			; (mov r8, r8)
    1d9c:	46c0      	nop			; (mov r8, r8)
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	46c0      	nop			; (mov r8, r8)
    1da2:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1da4:	46c0      	nop			; (mov r8, r8)
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	46c0      	nop			; (mov r8, r8)
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	46c0      	nop			; (mov r8, r8)
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	46c0      	nop			; (mov r8, r8)
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	46c0      	nop			; (mov r8, r8)
    1db6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1db8:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;");
    1dba:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1dbc:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	46c0      	nop			; (mov r8, r8)
    1dc2:	46c0      	nop			; (mov r8, r8)
    1dc4:	46c0      	nop			; (mov r8, r8)
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	46c0      	nop			; (mov r8, r8)
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	46c0      	nop			; (mov r8, r8)
    1dce:	46c0      	nop			; (mov r8, r8)
    1dd0:	46c0      	nop			; (mov r8, r8)
    1dd2:	46c0      	nop			; (mov r8, r8)
			
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1dd4:	46c0      	nop			; (mov r8, r8)
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	46c0      	nop			; (mov r8, r8)
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	46c0      	nop			; (mov r8, r8)
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	46c0      	nop			; (mov r8, r8)
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	46c0      	nop			; (mov r8, r8)
    1de6:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1de8:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	46c0      	nop			; (mov r8, r8)
    1dee:	46c0      	nop			; (mov r8, r8)
    1df0:	46c0      	nop			; (mov r8, r8)
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	46c0      	nop			; (mov r8, r8)
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1dfa:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;");
    1dfc:	46c0      	nop			; (mov r8, r8)
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	46c0      	nop			; (mov r8, r8)
    1e02:	46c0      	nop			; (mov r8, r8)
			
	        asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e04:	46c0      	nop			; (mov r8, r8)
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	46c0      	nop			; (mov r8, r8)
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	46c0      	nop			; (mov r8, r8)
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	46c0      	nop			; (mov r8, r8)
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	46c0      	nop			; (mov r8, r8)
    1e16:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1e18:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	46c0      	nop			; (mov r8, r8)
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	46c0      	nop			; (mov r8, r8)
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	46c0      	nop			; (mov r8, r8)
    1e26:	46c0      	nop			; (mov r8, r8)
    1e28:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e2a:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;");
    1e2c:	46c0      	nop			; (mov r8, r8)
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	46c0      	nop			; (mov r8, r8)
    1e32:	46c0      	nop			; (mov r8, r8)
			
		    asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
    1e34:	46c0      	nop			; (mov r8, r8)
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	46c0      	nop			; (mov r8, r8)
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	46c0      	nop			; (mov r8, r8)
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	46c0      	nop			; (mov r8, r8)
    1e42:	46c0      	nop			; (mov r8, r8)
    1e44:	46c0      	nop			; (mov r8, r8)
    1e46:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1e48:	6193      	str	r3, [r2, #24]
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1e4a:	46c0      	nop			; (mov r8, r8)
    1e4c:	46c0      	nop			; (mov r8, r8)
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	46c0      	nop			; (mov r8, r8)
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	46c0      	nop			; (mov r8, r8)
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e5a:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;");
    1e5c:	46c0      	nop			; (mov r8, r8)
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	46c0      	nop			; (mov r8, r8)
    1e62:	46c0      	nop			; (mov r8, r8)
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1e64:	6193      	str	r3, [r2, #24]
			
			//asm( "nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;");
			
			port_pin_set_output_level(PIN_PA13, true);
			asm( "nop;nop;nop;nop;nop;nop;nop;nop;");
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	46c0      	nop			; (mov r8, r8)
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	46c0      	nop			; (mov r8, r8)
    1e6e:	46c0      	nop			; (mov r8, r8)
    1e70:	46c0      	nop			; (mov r8, r8)
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	46c0      	nop			; (mov r8, r8)
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1e76:	6153      	str	r3, [r2, #20]
			port_pin_set_output_level(PIN_PA13, false);
			asm( "nop;nop;nop;nop;");
    1e78:	46c0      	nop			; (mov r8, r8)
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	46c0      	nop			; (mov r8, r8)
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	3901      	subs	r1, #1
	printf(" Interrups state: %s ", inter?"1":"0");
	
	
	
	
	for(int i =0;i<12;i++) {
    1e82:	2900      	cmp	r1, #0
    1e84:	d001      	beq.n	1e8a <main+0x4b6>
    1e86:	f7ff fdcf 	bl	1a28 <main+0x54>
		}
		*/
	}
	
	
}
    1e8a:	2000      	movs	r0, #0
    1e8c:	bd08      	pop	{r3, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)

00001e90 <__aeabi_uidiv>:
    1e90:	2200      	movs	r2, #0
    1e92:	0843      	lsrs	r3, r0, #1
    1e94:	428b      	cmp	r3, r1
    1e96:	d374      	bcc.n	1f82 <__aeabi_uidiv+0xf2>
    1e98:	0903      	lsrs	r3, r0, #4
    1e9a:	428b      	cmp	r3, r1
    1e9c:	d35f      	bcc.n	1f5e <__aeabi_uidiv+0xce>
    1e9e:	0a03      	lsrs	r3, r0, #8
    1ea0:	428b      	cmp	r3, r1
    1ea2:	d344      	bcc.n	1f2e <__aeabi_uidiv+0x9e>
    1ea4:	0b03      	lsrs	r3, r0, #12
    1ea6:	428b      	cmp	r3, r1
    1ea8:	d328      	bcc.n	1efc <__aeabi_uidiv+0x6c>
    1eaa:	0c03      	lsrs	r3, r0, #16
    1eac:	428b      	cmp	r3, r1
    1eae:	d30d      	bcc.n	1ecc <__aeabi_uidiv+0x3c>
    1eb0:	22ff      	movs	r2, #255	; 0xff
    1eb2:	0209      	lsls	r1, r1, #8
    1eb4:	ba12      	rev	r2, r2
    1eb6:	0c03      	lsrs	r3, r0, #16
    1eb8:	428b      	cmp	r3, r1
    1eba:	d302      	bcc.n	1ec2 <__aeabi_uidiv+0x32>
    1ebc:	1212      	asrs	r2, r2, #8
    1ebe:	0209      	lsls	r1, r1, #8
    1ec0:	d065      	beq.n	1f8e <__aeabi_uidiv+0xfe>
    1ec2:	0b03      	lsrs	r3, r0, #12
    1ec4:	428b      	cmp	r3, r1
    1ec6:	d319      	bcc.n	1efc <__aeabi_uidiv+0x6c>
    1ec8:	e000      	b.n	1ecc <__aeabi_uidiv+0x3c>
    1eca:	0a09      	lsrs	r1, r1, #8
    1ecc:	0bc3      	lsrs	r3, r0, #15
    1ece:	428b      	cmp	r3, r1
    1ed0:	d301      	bcc.n	1ed6 <__aeabi_uidiv+0x46>
    1ed2:	03cb      	lsls	r3, r1, #15
    1ed4:	1ac0      	subs	r0, r0, r3
    1ed6:	4152      	adcs	r2, r2
    1ed8:	0b83      	lsrs	r3, r0, #14
    1eda:	428b      	cmp	r3, r1
    1edc:	d301      	bcc.n	1ee2 <__aeabi_uidiv+0x52>
    1ede:	038b      	lsls	r3, r1, #14
    1ee0:	1ac0      	subs	r0, r0, r3
    1ee2:	4152      	adcs	r2, r2
    1ee4:	0b43      	lsrs	r3, r0, #13
    1ee6:	428b      	cmp	r3, r1
    1ee8:	d301      	bcc.n	1eee <__aeabi_uidiv+0x5e>
    1eea:	034b      	lsls	r3, r1, #13
    1eec:	1ac0      	subs	r0, r0, r3
    1eee:	4152      	adcs	r2, r2
    1ef0:	0b03      	lsrs	r3, r0, #12
    1ef2:	428b      	cmp	r3, r1
    1ef4:	d301      	bcc.n	1efa <__aeabi_uidiv+0x6a>
    1ef6:	030b      	lsls	r3, r1, #12
    1ef8:	1ac0      	subs	r0, r0, r3
    1efa:	4152      	adcs	r2, r2
    1efc:	0ac3      	lsrs	r3, r0, #11
    1efe:	428b      	cmp	r3, r1
    1f00:	d301      	bcc.n	1f06 <__aeabi_uidiv+0x76>
    1f02:	02cb      	lsls	r3, r1, #11
    1f04:	1ac0      	subs	r0, r0, r3
    1f06:	4152      	adcs	r2, r2
    1f08:	0a83      	lsrs	r3, r0, #10
    1f0a:	428b      	cmp	r3, r1
    1f0c:	d301      	bcc.n	1f12 <__aeabi_uidiv+0x82>
    1f0e:	028b      	lsls	r3, r1, #10
    1f10:	1ac0      	subs	r0, r0, r3
    1f12:	4152      	adcs	r2, r2
    1f14:	0a43      	lsrs	r3, r0, #9
    1f16:	428b      	cmp	r3, r1
    1f18:	d301      	bcc.n	1f1e <__aeabi_uidiv+0x8e>
    1f1a:	024b      	lsls	r3, r1, #9
    1f1c:	1ac0      	subs	r0, r0, r3
    1f1e:	4152      	adcs	r2, r2
    1f20:	0a03      	lsrs	r3, r0, #8
    1f22:	428b      	cmp	r3, r1
    1f24:	d301      	bcc.n	1f2a <__aeabi_uidiv+0x9a>
    1f26:	020b      	lsls	r3, r1, #8
    1f28:	1ac0      	subs	r0, r0, r3
    1f2a:	4152      	adcs	r2, r2
    1f2c:	d2cd      	bcs.n	1eca <__aeabi_uidiv+0x3a>
    1f2e:	09c3      	lsrs	r3, r0, #7
    1f30:	428b      	cmp	r3, r1
    1f32:	d301      	bcc.n	1f38 <__aeabi_uidiv+0xa8>
    1f34:	01cb      	lsls	r3, r1, #7
    1f36:	1ac0      	subs	r0, r0, r3
    1f38:	4152      	adcs	r2, r2
    1f3a:	0983      	lsrs	r3, r0, #6
    1f3c:	428b      	cmp	r3, r1
    1f3e:	d301      	bcc.n	1f44 <__aeabi_uidiv+0xb4>
    1f40:	018b      	lsls	r3, r1, #6
    1f42:	1ac0      	subs	r0, r0, r3
    1f44:	4152      	adcs	r2, r2
    1f46:	0943      	lsrs	r3, r0, #5
    1f48:	428b      	cmp	r3, r1
    1f4a:	d301      	bcc.n	1f50 <__aeabi_uidiv+0xc0>
    1f4c:	014b      	lsls	r3, r1, #5
    1f4e:	1ac0      	subs	r0, r0, r3
    1f50:	4152      	adcs	r2, r2
    1f52:	0903      	lsrs	r3, r0, #4
    1f54:	428b      	cmp	r3, r1
    1f56:	d301      	bcc.n	1f5c <__aeabi_uidiv+0xcc>
    1f58:	010b      	lsls	r3, r1, #4
    1f5a:	1ac0      	subs	r0, r0, r3
    1f5c:	4152      	adcs	r2, r2
    1f5e:	08c3      	lsrs	r3, r0, #3
    1f60:	428b      	cmp	r3, r1
    1f62:	d301      	bcc.n	1f68 <__aeabi_uidiv+0xd8>
    1f64:	00cb      	lsls	r3, r1, #3
    1f66:	1ac0      	subs	r0, r0, r3
    1f68:	4152      	adcs	r2, r2
    1f6a:	0883      	lsrs	r3, r0, #2
    1f6c:	428b      	cmp	r3, r1
    1f6e:	d301      	bcc.n	1f74 <__aeabi_uidiv+0xe4>
    1f70:	008b      	lsls	r3, r1, #2
    1f72:	1ac0      	subs	r0, r0, r3
    1f74:	4152      	adcs	r2, r2
    1f76:	0843      	lsrs	r3, r0, #1
    1f78:	428b      	cmp	r3, r1
    1f7a:	d301      	bcc.n	1f80 <__aeabi_uidiv+0xf0>
    1f7c:	004b      	lsls	r3, r1, #1
    1f7e:	1ac0      	subs	r0, r0, r3
    1f80:	4152      	adcs	r2, r2
    1f82:	1a41      	subs	r1, r0, r1
    1f84:	d200      	bcs.n	1f88 <__aeabi_uidiv+0xf8>
    1f86:	4601      	mov	r1, r0
    1f88:	4152      	adcs	r2, r2
    1f8a:	4610      	mov	r0, r2
    1f8c:	4770      	bx	lr
    1f8e:	e7ff      	b.n	1f90 <__aeabi_uidiv+0x100>
    1f90:	b501      	push	{r0, lr}
    1f92:	2000      	movs	r0, #0
    1f94:	f000 f80c 	bl	1fb0 <__aeabi_idiv0>
    1f98:	bd02      	pop	{r1, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)

00001f9c <__aeabi_uidivmod>:
    1f9c:	2900      	cmp	r1, #0
    1f9e:	d0f7      	beq.n	1f90 <__aeabi_uidiv+0x100>
    1fa0:	b503      	push	{r0, r1, lr}
    1fa2:	f7ff ff75 	bl	1e90 <__aeabi_uidiv>
    1fa6:	bc0e      	pop	{r1, r2, r3}
    1fa8:	4342      	muls	r2, r0
    1faa:	1a89      	subs	r1, r1, r2
    1fac:	4718      	bx	r3
    1fae:	46c0      	nop			; (mov r8, r8)

00001fb0 <__aeabi_idiv0>:
    1fb0:	4770      	bx	lr
    1fb2:	46c0      	nop			; (mov r8, r8)

00001fb4 <__aeabi_lmul>:
    1fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb6:	464f      	mov	r7, r9
    1fb8:	4646      	mov	r6, r8
    1fba:	0405      	lsls	r5, r0, #16
    1fbc:	0c2d      	lsrs	r5, r5, #16
    1fbe:	1c2c      	adds	r4, r5, #0
    1fc0:	b4c0      	push	{r6, r7}
    1fc2:	0417      	lsls	r7, r2, #16
    1fc4:	0c16      	lsrs	r6, r2, #16
    1fc6:	0c3f      	lsrs	r7, r7, #16
    1fc8:	4699      	mov	r9, r3
    1fca:	0c03      	lsrs	r3, r0, #16
    1fcc:	437c      	muls	r4, r7
    1fce:	4375      	muls	r5, r6
    1fd0:	435f      	muls	r7, r3
    1fd2:	4373      	muls	r3, r6
    1fd4:	197d      	adds	r5, r7, r5
    1fd6:	0c26      	lsrs	r6, r4, #16
    1fd8:	19ad      	adds	r5, r5, r6
    1fda:	469c      	mov	ip, r3
    1fdc:	42af      	cmp	r7, r5
    1fde:	d903      	bls.n	1fe8 <__aeabi_lmul+0x34>
    1fe0:	2380      	movs	r3, #128	; 0x80
    1fe2:	025b      	lsls	r3, r3, #9
    1fe4:	4698      	mov	r8, r3
    1fe6:	44c4      	add	ip, r8
    1fe8:	464b      	mov	r3, r9
    1fea:	4351      	muls	r1, r2
    1fec:	4343      	muls	r3, r0
    1fee:	0424      	lsls	r4, r4, #16
    1ff0:	0c2e      	lsrs	r6, r5, #16
    1ff2:	0c24      	lsrs	r4, r4, #16
    1ff4:	042d      	lsls	r5, r5, #16
    1ff6:	4466      	add	r6, ip
    1ff8:	192c      	adds	r4, r5, r4
    1ffa:	1859      	adds	r1, r3, r1
    1ffc:	1989      	adds	r1, r1, r6
    1ffe:	1c20      	adds	r0, r4, #0
    2000:	bc0c      	pop	{r2, r3}
    2002:	4690      	mov	r8, r2
    2004:	4699      	mov	r9, r3
    2006:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002008 <__libc_init_array>:
    2008:	4b0e      	ldr	r3, [pc, #56]	; (2044 <__libc_init_array+0x3c>)
    200a:	b570      	push	{r4, r5, r6, lr}
    200c:	2500      	movs	r5, #0
    200e:	1c1e      	adds	r6, r3, #0
    2010:	4c0d      	ldr	r4, [pc, #52]	; (2048 <__libc_init_array+0x40>)
    2012:	1ae4      	subs	r4, r4, r3
    2014:	10a4      	asrs	r4, r4, #2
    2016:	42a5      	cmp	r5, r4
    2018:	d004      	beq.n	2024 <__libc_init_array+0x1c>
    201a:	00ab      	lsls	r3, r5, #2
    201c:	58f3      	ldr	r3, [r6, r3]
    201e:	4798      	blx	r3
    2020:	3501      	adds	r5, #1
    2022:	e7f8      	b.n	2016 <__libc_init_array+0xe>
    2024:	f001 f87e 	bl	3124 <_init>
    2028:	4b08      	ldr	r3, [pc, #32]	; (204c <__libc_init_array+0x44>)
    202a:	2500      	movs	r5, #0
    202c:	1c1e      	adds	r6, r3, #0
    202e:	4c08      	ldr	r4, [pc, #32]	; (2050 <__libc_init_array+0x48>)
    2030:	1ae4      	subs	r4, r4, r3
    2032:	10a4      	asrs	r4, r4, #2
    2034:	42a5      	cmp	r5, r4
    2036:	d004      	beq.n	2042 <__libc_init_array+0x3a>
    2038:	00ab      	lsls	r3, r5, #2
    203a:	58f3      	ldr	r3, [r6, r3]
    203c:	4798      	blx	r3
    203e:	3501      	adds	r5, #1
    2040:	e7f8      	b.n	2034 <__libc_init_array+0x2c>
    2042:	bd70      	pop	{r4, r5, r6, pc}
    2044:	00003130 	.word	0x00003130
    2048:	00003130 	.word	0x00003130
    204c:	00003130 	.word	0x00003130
    2050:	00003134 	.word	0x00003134

00002054 <memcpy>:
    2054:	2300      	movs	r3, #0
    2056:	b510      	push	{r4, lr}
    2058:	4293      	cmp	r3, r2
    205a:	d003      	beq.n	2064 <memcpy+0x10>
    205c:	5ccc      	ldrb	r4, [r1, r3]
    205e:	54c4      	strb	r4, [r0, r3]
    2060:	3301      	adds	r3, #1
    2062:	e7f9      	b.n	2058 <memcpy+0x4>
    2064:	bd10      	pop	{r4, pc}

00002066 <memset>:
    2066:	1c03      	adds	r3, r0, #0
    2068:	1882      	adds	r2, r0, r2
    206a:	4293      	cmp	r3, r2
    206c:	d002      	beq.n	2074 <memset+0xe>
    206e:	7019      	strb	r1, [r3, #0]
    2070:	3301      	adds	r3, #1
    2072:	e7fa      	b.n	206a <memset+0x4>
    2074:	4770      	bx	lr
	...

00002078 <iprintf>:
    2078:	b40f      	push	{r0, r1, r2, r3}
    207a:	4b0b      	ldr	r3, [pc, #44]	; (20a8 <iprintf+0x30>)
    207c:	b513      	push	{r0, r1, r4, lr}
    207e:	681c      	ldr	r4, [r3, #0]
    2080:	2c00      	cmp	r4, #0
    2082:	d005      	beq.n	2090 <iprintf+0x18>
    2084:	69a3      	ldr	r3, [r4, #24]
    2086:	2b00      	cmp	r3, #0
    2088:	d102      	bne.n	2090 <iprintf+0x18>
    208a:	1c20      	adds	r0, r4, #0
    208c:	f000 f996 	bl	23bc <__sinit>
    2090:	ab05      	add	r3, sp, #20
    2092:	1c20      	adds	r0, r4, #0
    2094:	68a1      	ldr	r1, [r4, #8]
    2096:	9a04      	ldr	r2, [sp, #16]
    2098:	9301      	str	r3, [sp, #4]
    209a:	f000 faf1 	bl	2680 <_vfiprintf_r>
    209e:	bc16      	pop	{r1, r2, r4}
    20a0:	bc08      	pop	{r3}
    20a2:	b004      	add	sp, #16
    20a4:	4718      	bx	r3
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	20000064 	.word	0x20000064

000020ac <setbuf>:
    20ac:	b508      	push	{r3, lr}
    20ae:	424a      	negs	r2, r1
    20b0:	414a      	adcs	r2, r1
    20b2:	2380      	movs	r3, #128	; 0x80
    20b4:	0052      	lsls	r2, r2, #1
    20b6:	00db      	lsls	r3, r3, #3
    20b8:	f000 f802 	bl	20c0 <setvbuf>
    20bc:	bd08      	pop	{r3, pc}
	...

000020c0 <setvbuf>:
    20c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20c2:	1c1e      	adds	r6, r3, #0
    20c4:	4b3c      	ldr	r3, [pc, #240]	; (21b8 <setvbuf+0xf8>)
    20c6:	1c04      	adds	r4, r0, #0
    20c8:	681d      	ldr	r5, [r3, #0]
    20ca:	1c0f      	adds	r7, r1, #0
    20cc:	9201      	str	r2, [sp, #4]
    20ce:	2d00      	cmp	r5, #0
    20d0:	d005      	beq.n	20de <setvbuf+0x1e>
    20d2:	69ab      	ldr	r3, [r5, #24]
    20d4:	2b00      	cmp	r3, #0
    20d6:	d102      	bne.n	20de <setvbuf+0x1e>
    20d8:	1c28      	adds	r0, r5, #0
    20da:	f000 f96f 	bl	23bc <__sinit>
    20de:	4b37      	ldr	r3, [pc, #220]	; (21bc <setvbuf+0xfc>)
    20e0:	429c      	cmp	r4, r3
    20e2:	d101      	bne.n	20e8 <setvbuf+0x28>
    20e4:	686c      	ldr	r4, [r5, #4]
    20e6:	e008      	b.n	20fa <setvbuf+0x3a>
    20e8:	4b35      	ldr	r3, [pc, #212]	; (21c0 <setvbuf+0x100>)
    20ea:	429c      	cmp	r4, r3
    20ec:	d101      	bne.n	20f2 <setvbuf+0x32>
    20ee:	68ac      	ldr	r4, [r5, #8]
    20f0:	e003      	b.n	20fa <setvbuf+0x3a>
    20f2:	4b34      	ldr	r3, [pc, #208]	; (21c4 <setvbuf+0x104>)
    20f4:	429c      	cmp	r4, r3
    20f6:	d100      	bne.n	20fa <setvbuf+0x3a>
    20f8:	68ec      	ldr	r4, [r5, #12]
    20fa:	9b01      	ldr	r3, [sp, #4]
    20fc:	2b02      	cmp	r3, #2
    20fe:	d858      	bhi.n	21b2 <setvbuf+0xf2>
    2100:	2e00      	cmp	r6, #0
    2102:	db56      	blt.n	21b2 <setvbuf+0xf2>
    2104:	1c28      	adds	r0, r5, #0
    2106:	1c21      	adds	r1, r4, #0
    2108:	f000 f8ea 	bl	22e0 <_fflush_r>
    210c:	2300      	movs	r3, #0
    210e:	6063      	str	r3, [r4, #4]
    2110:	61a3      	str	r3, [r4, #24]
    2112:	89a3      	ldrh	r3, [r4, #12]
    2114:	061b      	lsls	r3, r3, #24
    2116:	d503      	bpl.n	2120 <setvbuf+0x60>
    2118:	1c28      	adds	r0, r5, #0
    211a:	6921      	ldr	r1, [r4, #16]
    211c:	f000 f9ea 	bl	24f4 <_free_r>
    2120:	2283      	movs	r2, #131	; 0x83
    2122:	89a3      	ldrh	r3, [r4, #12]
    2124:	4393      	bics	r3, r2
    2126:	81a3      	strh	r3, [r4, #12]
    2128:	9b01      	ldr	r3, [sp, #4]
    212a:	2b02      	cmp	r3, #2
    212c:	d013      	beq.n	2156 <setvbuf+0x96>
    212e:	2f00      	cmp	r7, #0
    2130:	d125      	bne.n	217e <setvbuf+0xbe>
    2132:	2e00      	cmp	r6, #0
    2134:	d101      	bne.n	213a <setvbuf+0x7a>
    2136:	2680      	movs	r6, #128	; 0x80
    2138:	00f6      	lsls	r6, r6, #3
    213a:	1c30      	adds	r0, r6, #0
    213c:	f000 f9d0 	bl	24e0 <malloc>
    2140:	1e07      	subs	r7, r0, #0
    2142:	d118      	bne.n	2176 <setvbuf+0xb6>
    2144:	2080      	movs	r0, #128	; 0x80
    2146:	00c0      	lsls	r0, r0, #3
    2148:	f000 f9ca 	bl	24e0 <malloc>
    214c:	1e07      	subs	r7, r0, #0
    214e:	d110      	bne.n	2172 <setvbuf+0xb2>
    2150:	2001      	movs	r0, #1
    2152:	4240      	negs	r0, r0
    2154:	e000      	b.n	2158 <setvbuf+0x98>
    2156:	2000      	movs	r0, #0
    2158:	2202      	movs	r2, #2
    215a:	89a3      	ldrh	r3, [r4, #12]
    215c:	4313      	orrs	r3, r2
    215e:	81a3      	strh	r3, [r4, #12]
    2160:	2300      	movs	r3, #0
    2162:	60a3      	str	r3, [r4, #8]
    2164:	1c23      	adds	r3, r4, #0
    2166:	3347      	adds	r3, #71	; 0x47
    2168:	6023      	str	r3, [r4, #0]
    216a:	6123      	str	r3, [r4, #16]
    216c:	2301      	movs	r3, #1
    216e:	6163      	str	r3, [r4, #20]
    2170:	e021      	b.n	21b6 <setvbuf+0xf6>
    2172:	2680      	movs	r6, #128	; 0x80
    2174:	00f6      	lsls	r6, r6, #3
    2176:	2280      	movs	r2, #128	; 0x80
    2178:	89a3      	ldrh	r3, [r4, #12]
    217a:	4313      	orrs	r3, r2
    217c:	81a3      	strh	r3, [r4, #12]
    217e:	9b01      	ldr	r3, [sp, #4]
    2180:	2b01      	cmp	r3, #1
    2182:	d105      	bne.n	2190 <setvbuf+0xd0>
    2184:	89a3      	ldrh	r3, [r4, #12]
    2186:	9a01      	ldr	r2, [sp, #4]
    2188:	431a      	orrs	r2, r3
    218a:	4273      	negs	r3, r6
    218c:	81a2      	strh	r2, [r4, #12]
    218e:	61a3      	str	r3, [r4, #24]
    2190:	4b0d      	ldr	r3, [pc, #52]	; (21c8 <setvbuf+0x108>)
    2192:	2000      	movs	r0, #0
    2194:	62ab      	str	r3, [r5, #40]	; 0x28
    2196:	89a2      	ldrh	r2, [r4, #12]
    2198:	6027      	str	r7, [r4, #0]
    219a:	6127      	str	r7, [r4, #16]
    219c:	6166      	str	r6, [r4, #20]
    219e:	0713      	lsls	r3, r2, #28
    21a0:	d509      	bpl.n	21b6 <setvbuf+0xf6>
    21a2:	2303      	movs	r3, #3
    21a4:	401a      	ands	r2, r3
    21a6:	4253      	negs	r3, r2
    21a8:	4153      	adcs	r3, r2
    21aa:	425b      	negs	r3, r3
    21ac:	401e      	ands	r6, r3
    21ae:	60a6      	str	r6, [r4, #8]
    21b0:	e001      	b.n	21b6 <setvbuf+0xf6>
    21b2:	2001      	movs	r0, #1
    21b4:	4240      	negs	r0, r0
    21b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    21b8:	20000064 	.word	0x20000064
    21bc:	00003090 	.word	0x00003090
    21c0:	000030b0 	.word	0x000030b0
    21c4:	000030d0 	.word	0x000030d0
    21c8:	00002339 	.word	0x00002339

000021cc <__sflush_r>:
    21cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    21ce:	898a      	ldrh	r2, [r1, #12]
    21d0:	1c05      	adds	r5, r0, #0
    21d2:	1c0c      	adds	r4, r1, #0
    21d4:	0713      	lsls	r3, r2, #28
    21d6:	d45e      	bmi.n	2296 <__sflush_r+0xca>
    21d8:	684b      	ldr	r3, [r1, #4]
    21da:	2b00      	cmp	r3, #0
    21dc:	dc02      	bgt.n	21e4 <__sflush_r+0x18>
    21de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    21e0:	2b00      	cmp	r3, #0
    21e2:	dd1a      	ble.n	221a <__sflush_r+0x4e>
    21e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    21e6:	2f00      	cmp	r7, #0
    21e8:	d017      	beq.n	221a <__sflush_r+0x4e>
    21ea:	2300      	movs	r3, #0
    21ec:	682e      	ldr	r6, [r5, #0]
    21ee:	602b      	str	r3, [r5, #0]
    21f0:	2380      	movs	r3, #128	; 0x80
    21f2:	015b      	lsls	r3, r3, #5
    21f4:	401a      	ands	r2, r3
    21f6:	d001      	beq.n	21fc <__sflush_r+0x30>
    21f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    21fa:	e015      	b.n	2228 <__sflush_r+0x5c>
    21fc:	1c28      	adds	r0, r5, #0
    21fe:	6a21      	ldr	r1, [r4, #32]
    2200:	2301      	movs	r3, #1
    2202:	47b8      	blx	r7
    2204:	1c02      	adds	r2, r0, #0
    2206:	1c43      	adds	r3, r0, #1
    2208:	d10e      	bne.n	2228 <__sflush_r+0x5c>
    220a:	682b      	ldr	r3, [r5, #0]
    220c:	2b00      	cmp	r3, #0
    220e:	d00b      	beq.n	2228 <__sflush_r+0x5c>
    2210:	2b1d      	cmp	r3, #29
    2212:	d001      	beq.n	2218 <__sflush_r+0x4c>
    2214:	2b16      	cmp	r3, #22
    2216:	d102      	bne.n	221e <__sflush_r+0x52>
    2218:	602e      	str	r6, [r5, #0]
    221a:	2000      	movs	r0, #0
    221c:	e05e      	b.n	22dc <__sflush_r+0x110>
    221e:	2140      	movs	r1, #64	; 0x40
    2220:	89a3      	ldrh	r3, [r4, #12]
    2222:	430b      	orrs	r3, r1
    2224:	81a3      	strh	r3, [r4, #12]
    2226:	e059      	b.n	22dc <__sflush_r+0x110>
    2228:	89a3      	ldrh	r3, [r4, #12]
    222a:	075b      	lsls	r3, r3, #29
    222c:	d506      	bpl.n	223c <__sflush_r+0x70>
    222e:	6863      	ldr	r3, [r4, #4]
    2230:	1ad2      	subs	r2, r2, r3
    2232:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2234:	2b00      	cmp	r3, #0
    2236:	d001      	beq.n	223c <__sflush_r+0x70>
    2238:	6c23      	ldr	r3, [r4, #64]	; 0x40
    223a:	1ad2      	subs	r2, r2, r3
    223c:	2300      	movs	r3, #0
    223e:	1c28      	adds	r0, r5, #0
    2240:	6a21      	ldr	r1, [r4, #32]
    2242:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2244:	47b8      	blx	r7
    2246:	89a3      	ldrh	r3, [r4, #12]
    2248:	1c42      	adds	r2, r0, #1
    224a:	d106      	bne.n	225a <__sflush_r+0x8e>
    224c:	682a      	ldr	r2, [r5, #0]
    224e:	2a00      	cmp	r2, #0
    2250:	d003      	beq.n	225a <__sflush_r+0x8e>
    2252:	2a1d      	cmp	r2, #29
    2254:	d001      	beq.n	225a <__sflush_r+0x8e>
    2256:	2a16      	cmp	r2, #22
    2258:	d119      	bne.n	228e <__sflush_r+0xc2>
    225a:	2200      	movs	r2, #0
    225c:	6062      	str	r2, [r4, #4]
    225e:	6922      	ldr	r2, [r4, #16]
    2260:	6022      	str	r2, [r4, #0]
    2262:	04db      	lsls	r3, r3, #19
    2264:	d505      	bpl.n	2272 <__sflush_r+0xa6>
    2266:	1c43      	adds	r3, r0, #1
    2268:	d102      	bne.n	2270 <__sflush_r+0xa4>
    226a:	682b      	ldr	r3, [r5, #0]
    226c:	2b00      	cmp	r3, #0
    226e:	d100      	bne.n	2272 <__sflush_r+0xa6>
    2270:	6560      	str	r0, [r4, #84]	; 0x54
    2272:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2274:	602e      	str	r6, [r5, #0]
    2276:	2900      	cmp	r1, #0
    2278:	d0cf      	beq.n	221a <__sflush_r+0x4e>
    227a:	1c23      	adds	r3, r4, #0
    227c:	3344      	adds	r3, #68	; 0x44
    227e:	4299      	cmp	r1, r3
    2280:	d002      	beq.n	2288 <__sflush_r+0xbc>
    2282:	1c28      	adds	r0, r5, #0
    2284:	f000 f936 	bl	24f4 <_free_r>
    2288:	2000      	movs	r0, #0
    228a:	6360      	str	r0, [r4, #52]	; 0x34
    228c:	e026      	b.n	22dc <__sflush_r+0x110>
    228e:	2240      	movs	r2, #64	; 0x40
    2290:	4313      	orrs	r3, r2
    2292:	81a3      	strh	r3, [r4, #12]
    2294:	e022      	b.n	22dc <__sflush_r+0x110>
    2296:	690f      	ldr	r7, [r1, #16]
    2298:	2f00      	cmp	r7, #0
    229a:	d0be      	beq.n	221a <__sflush_r+0x4e>
    229c:	680b      	ldr	r3, [r1, #0]
    229e:	600f      	str	r7, [r1, #0]
    22a0:	1bdb      	subs	r3, r3, r7
    22a2:	9301      	str	r3, [sp, #4]
    22a4:	2300      	movs	r3, #0
    22a6:	0792      	lsls	r2, r2, #30
    22a8:	d100      	bne.n	22ac <__sflush_r+0xe0>
    22aa:	694b      	ldr	r3, [r1, #20]
    22ac:	60a3      	str	r3, [r4, #8]
    22ae:	9b01      	ldr	r3, [sp, #4]
    22b0:	2b00      	cmp	r3, #0
    22b2:	ddb2      	ble.n	221a <__sflush_r+0x4e>
    22b4:	1c28      	adds	r0, r5, #0
    22b6:	6a21      	ldr	r1, [r4, #32]
    22b8:	1c3a      	adds	r2, r7, #0
    22ba:	9b01      	ldr	r3, [sp, #4]
    22bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    22be:	47b0      	blx	r6
    22c0:	2800      	cmp	r0, #0
    22c2:	dc06      	bgt.n	22d2 <__sflush_r+0x106>
    22c4:	2240      	movs	r2, #64	; 0x40
    22c6:	2001      	movs	r0, #1
    22c8:	89a3      	ldrh	r3, [r4, #12]
    22ca:	4240      	negs	r0, r0
    22cc:	4313      	orrs	r3, r2
    22ce:	81a3      	strh	r3, [r4, #12]
    22d0:	e004      	b.n	22dc <__sflush_r+0x110>
    22d2:	9b01      	ldr	r3, [sp, #4]
    22d4:	183f      	adds	r7, r7, r0
    22d6:	1a1b      	subs	r3, r3, r0
    22d8:	9301      	str	r3, [sp, #4]
    22da:	e7e8      	b.n	22ae <__sflush_r+0xe2>
    22dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000022e0 <_fflush_r>:
    22e0:	b538      	push	{r3, r4, r5, lr}
    22e2:	690b      	ldr	r3, [r1, #16]
    22e4:	1c05      	adds	r5, r0, #0
    22e6:	1c0c      	adds	r4, r1, #0
    22e8:	2b00      	cmp	r3, #0
    22ea:	d101      	bne.n	22f0 <_fflush_r+0x10>
    22ec:	2000      	movs	r0, #0
    22ee:	e01c      	b.n	232a <_fflush_r+0x4a>
    22f0:	2800      	cmp	r0, #0
    22f2:	d004      	beq.n	22fe <_fflush_r+0x1e>
    22f4:	6983      	ldr	r3, [r0, #24]
    22f6:	2b00      	cmp	r3, #0
    22f8:	d101      	bne.n	22fe <_fflush_r+0x1e>
    22fa:	f000 f85f 	bl	23bc <__sinit>
    22fe:	4b0b      	ldr	r3, [pc, #44]	; (232c <_fflush_r+0x4c>)
    2300:	429c      	cmp	r4, r3
    2302:	d101      	bne.n	2308 <_fflush_r+0x28>
    2304:	686c      	ldr	r4, [r5, #4]
    2306:	e008      	b.n	231a <_fflush_r+0x3a>
    2308:	4b09      	ldr	r3, [pc, #36]	; (2330 <_fflush_r+0x50>)
    230a:	429c      	cmp	r4, r3
    230c:	d101      	bne.n	2312 <_fflush_r+0x32>
    230e:	68ac      	ldr	r4, [r5, #8]
    2310:	e003      	b.n	231a <_fflush_r+0x3a>
    2312:	4b08      	ldr	r3, [pc, #32]	; (2334 <_fflush_r+0x54>)
    2314:	429c      	cmp	r4, r3
    2316:	d100      	bne.n	231a <_fflush_r+0x3a>
    2318:	68ec      	ldr	r4, [r5, #12]
    231a:	220c      	movs	r2, #12
    231c:	5ea3      	ldrsh	r3, [r4, r2]
    231e:	2b00      	cmp	r3, #0
    2320:	d0e4      	beq.n	22ec <_fflush_r+0xc>
    2322:	1c28      	adds	r0, r5, #0
    2324:	1c21      	adds	r1, r4, #0
    2326:	f7ff ff51 	bl	21cc <__sflush_r>
    232a:	bd38      	pop	{r3, r4, r5, pc}
    232c:	00003090 	.word	0x00003090
    2330:	000030b0 	.word	0x000030b0
    2334:	000030d0 	.word	0x000030d0

00002338 <_cleanup_r>:
    2338:	b508      	push	{r3, lr}
    233a:	4902      	ldr	r1, [pc, #8]	; (2344 <_cleanup_r+0xc>)
    233c:	f000 f8ae 	bl	249c <_fwalk_reent>
    2340:	bd08      	pop	{r3, pc}
    2342:	46c0      	nop			; (mov r8, r8)
    2344:	000022e1 	.word	0x000022e1

00002348 <std.isra.0>:
    2348:	2300      	movs	r3, #0
    234a:	b510      	push	{r4, lr}
    234c:	1c04      	adds	r4, r0, #0
    234e:	6003      	str	r3, [r0, #0]
    2350:	6043      	str	r3, [r0, #4]
    2352:	6083      	str	r3, [r0, #8]
    2354:	8181      	strh	r1, [r0, #12]
    2356:	6643      	str	r3, [r0, #100]	; 0x64
    2358:	81c2      	strh	r2, [r0, #14]
    235a:	6103      	str	r3, [r0, #16]
    235c:	6143      	str	r3, [r0, #20]
    235e:	6183      	str	r3, [r0, #24]
    2360:	1c19      	adds	r1, r3, #0
    2362:	2208      	movs	r2, #8
    2364:	305c      	adds	r0, #92	; 0x5c
    2366:	f7ff fe7e 	bl	2066 <memset>
    236a:	4b05      	ldr	r3, [pc, #20]	; (2380 <std.isra.0+0x38>)
    236c:	6224      	str	r4, [r4, #32]
    236e:	6263      	str	r3, [r4, #36]	; 0x24
    2370:	4b04      	ldr	r3, [pc, #16]	; (2384 <std.isra.0+0x3c>)
    2372:	62a3      	str	r3, [r4, #40]	; 0x28
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <std.isra.0+0x40>)
    2376:	62e3      	str	r3, [r4, #44]	; 0x2c
    2378:	4b04      	ldr	r3, [pc, #16]	; (238c <std.isra.0+0x44>)
    237a:	6323      	str	r3, [r4, #48]	; 0x30
    237c:	bd10      	pop	{r4, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	00002bd1 	.word	0x00002bd1
    2384:	00002bf9 	.word	0x00002bf9
    2388:	00002c31 	.word	0x00002c31
    238c:	00002c5d 	.word	0x00002c5d

00002390 <__sfmoreglue>:
    2390:	b570      	push	{r4, r5, r6, lr}
    2392:	2568      	movs	r5, #104	; 0x68
    2394:	1e4b      	subs	r3, r1, #1
    2396:	435d      	muls	r5, r3
    2398:	1c0e      	adds	r6, r1, #0
    239a:	1c29      	adds	r1, r5, #0
    239c:	3174      	adds	r1, #116	; 0x74
    239e:	f000 f8ef 	bl	2580 <_malloc_r>
    23a2:	1e04      	subs	r4, r0, #0
    23a4:	d008      	beq.n	23b8 <__sfmoreglue+0x28>
    23a6:	2100      	movs	r1, #0
    23a8:	1c2a      	adds	r2, r5, #0
    23aa:	6001      	str	r1, [r0, #0]
    23ac:	6046      	str	r6, [r0, #4]
    23ae:	300c      	adds	r0, #12
    23b0:	60a0      	str	r0, [r4, #8]
    23b2:	3268      	adds	r2, #104	; 0x68
    23b4:	f7ff fe57 	bl	2066 <memset>
    23b8:	1c20      	adds	r0, r4, #0
    23ba:	bd70      	pop	{r4, r5, r6, pc}

000023bc <__sinit>:
    23bc:	6983      	ldr	r3, [r0, #24]
    23be:	b513      	push	{r0, r1, r4, lr}
    23c0:	2b00      	cmp	r3, #0
    23c2:	d128      	bne.n	2416 <__sinit+0x5a>
    23c4:	6483      	str	r3, [r0, #72]	; 0x48
    23c6:	64c3      	str	r3, [r0, #76]	; 0x4c
    23c8:	6503      	str	r3, [r0, #80]	; 0x50
    23ca:	4b13      	ldr	r3, [pc, #76]	; (2418 <__sinit+0x5c>)
    23cc:	4a13      	ldr	r2, [pc, #76]	; (241c <__sinit+0x60>)
    23ce:	681b      	ldr	r3, [r3, #0]
    23d0:	6282      	str	r2, [r0, #40]	; 0x28
    23d2:	9301      	str	r3, [sp, #4]
    23d4:	4298      	cmp	r0, r3
    23d6:	d101      	bne.n	23dc <__sinit+0x20>
    23d8:	2301      	movs	r3, #1
    23da:	6183      	str	r3, [r0, #24]
    23dc:	1c04      	adds	r4, r0, #0
    23de:	f000 f81f 	bl	2420 <__sfp>
    23e2:	6060      	str	r0, [r4, #4]
    23e4:	1c20      	adds	r0, r4, #0
    23e6:	f000 f81b 	bl	2420 <__sfp>
    23ea:	60a0      	str	r0, [r4, #8]
    23ec:	1c20      	adds	r0, r4, #0
    23ee:	f000 f817 	bl	2420 <__sfp>
    23f2:	2104      	movs	r1, #4
    23f4:	60e0      	str	r0, [r4, #12]
    23f6:	2200      	movs	r2, #0
    23f8:	6860      	ldr	r0, [r4, #4]
    23fa:	f7ff ffa5 	bl	2348 <std.isra.0>
    23fe:	68a0      	ldr	r0, [r4, #8]
    2400:	2109      	movs	r1, #9
    2402:	2201      	movs	r2, #1
    2404:	f7ff ffa0 	bl	2348 <std.isra.0>
    2408:	68e0      	ldr	r0, [r4, #12]
    240a:	2112      	movs	r1, #18
    240c:	2202      	movs	r2, #2
    240e:	f7ff ff9b 	bl	2348 <std.isra.0>
    2412:	2301      	movs	r3, #1
    2414:	61a3      	str	r3, [r4, #24]
    2416:	bd13      	pop	{r0, r1, r4, pc}
    2418:	0000308c 	.word	0x0000308c
    241c:	00002339 	.word	0x00002339

00002420 <__sfp>:
    2420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2422:	4b1d      	ldr	r3, [pc, #116]	; (2498 <__sfp+0x78>)
    2424:	1c06      	adds	r6, r0, #0
    2426:	681d      	ldr	r5, [r3, #0]
    2428:	69ab      	ldr	r3, [r5, #24]
    242a:	2b00      	cmp	r3, #0
    242c:	d102      	bne.n	2434 <__sfp+0x14>
    242e:	1c28      	adds	r0, r5, #0
    2430:	f7ff ffc4 	bl	23bc <__sinit>
    2434:	3548      	adds	r5, #72	; 0x48
    2436:	68ac      	ldr	r4, [r5, #8]
    2438:	686b      	ldr	r3, [r5, #4]
    243a:	3b01      	subs	r3, #1
    243c:	d405      	bmi.n	244a <__sfp+0x2a>
    243e:	220c      	movs	r2, #12
    2440:	5ea7      	ldrsh	r7, [r4, r2]
    2442:	2f00      	cmp	r7, #0
    2444:	d010      	beq.n	2468 <__sfp+0x48>
    2446:	3468      	adds	r4, #104	; 0x68
    2448:	e7f7      	b.n	243a <__sfp+0x1a>
    244a:	682b      	ldr	r3, [r5, #0]
    244c:	2b00      	cmp	r3, #0
    244e:	d106      	bne.n	245e <__sfp+0x3e>
    2450:	1c30      	adds	r0, r6, #0
    2452:	2104      	movs	r1, #4
    2454:	f7ff ff9c 	bl	2390 <__sfmoreglue>
    2458:	6028      	str	r0, [r5, #0]
    245a:	2800      	cmp	r0, #0
    245c:	d001      	beq.n	2462 <__sfp+0x42>
    245e:	682d      	ldr	r5, [r5, #0]
    2460:	e7e9      	b.n	2436 <__sfp+0x16>
    2462:	230c      	movs	r3, #12
    2464:	6033      	str	r3, [r6, #0]
    2466:	e016      	b.n	2496 <__sfp+0x76>
    2468:	2301      	movs	r3, #1
    246a:	1c20      	adds	r0, r4, #0
    246c:	425b      	negs	r3, r3
    246e:	81e3      	strh	r3, [r4, #14]
    2470:	3302      	adds	r3, #2
    2472:	81a3      	strh	r3, [r4, #12]
    2474:	6667      	str	r7, [r4, #100]	; 0x64
    2476:	6027      	str	r7, [r4, #0]
    2478:	60a7      	str	r7, [r4, #8]
    247a:	6067      	str	r7, [r4, #4]
    247c:	6127      	str	r7, [r4, #16]
    247e:	6167      	str	r7, [r4, #20]
    2480:	61a7      	str	r7, [r4, #24]
    2482:	305c      	adds	r0, #92	; 0x5c
    2484:	1c39      	adds	r1, r7, #0
    2486:	2208      	movs	r2, #8
    2488:	f7ff fded 	bl	2066 <memset>
    248c:	1c20      	adds	r0, r4, #0
    248e:	6367      	str	r7, [r4, #52]	; 0x34
    2490:	63a7      	str	r7, [r4, #56]	; 0x38
    2492:	64a7      	str	r7, [r4, #72]	; 0x48
    2494:	64e7      	str	r7, [r4, #76]	; 0x4c
    2496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2498:	0000308c 	.word	0x0000308c

0000249c <_fwalk_reent>:
    249c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    249e:	1c04      	adds	r4, r0, #0
    24a0:	1c07      	adds	r7, r0, #0
    24a2:	2600      	movs	r6, #0
    24a4:	9101      	str	r1, [sp, #4]
    24a6:	3448      	adds	r4, #72	; 0x48
    24a8:	2c00      	cmp	r4, #0
    24aa:	d016      	beq.n	24da <_fwalk_reent+0x3e>
    24ac:	6863      	ldr	r3, [r4, #4]
    24ae:	68a5      	ldr	r5, [r4, #8]
    24b0:	9300      	str	r3, [sp, #0]
    24b2:	9b00      	ldr	r3, [sp, #0]
    24b4:	3b01      	subs	r3, #1
    24b6:	9300      	str	r3, [sp, #0]
    24b8:	d40d      	bmi.n	24d6 <_fwalk_reent+0x3a>
    24ba:	89ab      	ldrh	r3, [r5, #12]
    24bc:	2b01      	cmp	r3, #1
    24be:	d908      	bls.n	24d2 <_fwalk_reent+0x36>
    24c0:	220e      	movs	r2, #14
    24c2:	5eab      	ldrsh	r3, [r5, r2]
    24c4:	3301      	adds	r3, #1
    24c6:	d004      	beq.n	24d2 <_fwalk_reent+0x36>
    24c8:	1c38      	adds	r0, r7, #0
    24ca:	1c29      	adds	r1, r5, #0
    24cc:	9b01      	ldr	r3, [sp, #4]
    24ce:	4798      	blx	r3
    24d0:	4306      	orrs	r6, r0
    24d2:	3568      	adds	r5, #104	; 0x68
    24d4:	e7ed      	b.n	24b2 <_fwalk_reent+0x16>
    24d6:	6824      	ldr	r4, [r4, #0]
    24d8:	e7e6      	b.n	24a8 <_fwalk_reent+0xc>
    24da:	1c30      	adds	r0, r6, #0
    24dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000024e0 <malloc>:
    24e0:	b508      	push	{r3, lr}
    24e2:	4b03      	ldr	r3, [pc, #12]	; (24f0 <malloc+0x10>)
    24e4:	1c01      	adds	r1, r0, #0
    24e6:	6818      	ldr	r0, [r3, #0]
    24e8:	f000 f84a 	bl	2580 <_malloc_r>
    24ec:	bd08      	pop	{r3, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	20000064 	.word	0x20000064

000024f4 <_free_r>:
    24f4:	b530      	push	{r4, r5, lr}
    24f6:	2900      	cmp	r1, #0
    24f8:	d03e      	beq.n	2578 <_free_r+0x84>
    24fa:	3904      	subs	r1, #4
    24fc:	680b      	ldr	r3, [r1, #0]
    24fe:	2b00      	cmp	r3, #0
    2500:	da00      	bge.n	2504 <_free_r+0x10>
    2502:	18c9      	adds	r1, r1, r3
    2504:	4a1d      	ldr	r2, [pc, #116]	; (257c <_free_r+0x88>)
    2506:	6813      	ldr	r3, [r2, #0]
    2508:	1c14      	adds	r4, r2, #0
    250a:	2b00      	cmp	r3, #0
    250c:	d102      	bne.n	2514 <_free_r+0x20>
    250e:	604b      	str	r3, [r1, #4]
    2510:	6011      	str	r1, [r2, #0]
    2512:	e031      	b.n	2578 <_free_r+0x84>
    2514:	4299      	cmp	r1, r3
    2516:	d20d      	bcs.n	2534 <_free_r+0x40>
    2518:	6808      	ldr	r0, [r1, #0]
    251a:	180a      	adds	r2, r1, r0
    251c:	429a      	cmp	r2, r3
    251e:	d103      	bne.n	2528 <_free_r+0x34>
    2520:	6813      	ldr	r3, [r2, #0]
    2522:	18c3      	adds	r3, r0, r3
    2524:	600b      	str	r3, [r1, #0]
    2526:	6853      	ldr	r3, [r2, #4]
    2528:	604b      	str	r3, [r1, #4]
    252a:	6021      	str	r1, [r4, #0]
    252c:	e024      	b.n	2578 <_free_r+0x84>
    252e:	428a      	cmp	r2, r1
    2530:	d803      	bhi.n	253a <_free_r+0x46>
    2532:	1c13      	adds	r3, r2, #0
    2534:	685a      	ldr	r2, [r3, #4]
    2536:	2a00      	cmp	r2, #0
    2538:	d1f9      	bne.n	252e <_free_r+0x3a>
    253a:	681d      	ldr	r5, [r3, #0]
    253c:	195c      	adds	r4, r3, r5
    253e:	428c      	cmp	r4, r1
    2540:	d10b      	bne.n	255a <_free_r+0x66>
    2542:	6809      	ldr	r1, [r1, #0]
    2544:	1869      	adds	r1, r5, r1
    2546:	1858      	adds	r0, r3, r1
    2548:	6019      	str	r1, [r3, #0]
    254a:	4290      	cmp	r0, r2
    254c:	d114      	bne.n	2578 <_free_r+0x84>
    254e:	6810      	ldr	r0, [r2, #0]
    2550:	6852      	ldr	r2, [r2, #4]
    2552:	1809      	adds	r1, r1, r0
    2554:	6019      	str	r1, [r3, #0]
    2556:	605a      	str	r2, [r3, #4]
    2558:	e00e      	b.n	2578 <_free_r+0x84>
    255a:	428c      	cmp	r4, r1
    255c:	d902      	bls.n	2564 <_free_r+0x70>
    255e:	230c      	movs	r3, #12
    2560:	6003      	str	r3, [r0, #0]
    2562:	e009      	b.n	2578 <_free_r+0x84>
    2564:	6808      	ldr	r0, [r1, #0]
    2566:	180c      	adds	r4, r1, r0
    2568:	4294      	cmp	r4, r2
    256a:	d103      	bne.n	2574 <_free_r+0x80>
    256c:	6814      	ldr	r4, [r2, #0]
    256e:	6852      	ldr	r2, [r2, #4]
    2570:	1900      	adds	r0, r0, r4
    2572:	6008      	str	r0, [r1, #0]
    2574:	604a      	str	r2, [r1, #4]
    2576:	6059      	str	r1, [r3, #4]
    2578:	bd30      	pop	{r4, r5, pc}
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	2000019c 	.word	0x2000019c

00002580 <_malloc_r>:
    2580:	2303      	movs	r3, #3
    2582:	b570      	push	{r4, r5, r6, lr}
    2584:	1ccc      	adds	r4, r1, #3
    2586:	439c      	bics	r4, r3
    2588:	3408      	adds	r4, #8
    258a:	1c05      	adds	r5, r0, #0
    258c:	2c0c      	cmp	r4, #12
    258e:	d201      	bcs.n	2594 <_malloc_r+0x14>
    2590:	240c      	movs	r4, #12
    2592:	e005      	b.n	25a0 <_malloc_r+0x20>
    2594:	2c00      	cmp	r4, #0
    2596:	da03      	bge.n	25a0 <_malloc_r+0x20>
    2598:	230c      	movs	r3, #12
    259a:	2000      	movs	r0, #0
    259c:	602b      	str	r3, [r5, #0]
    259e:	e042      	b.n	2626 <_malloc_r+0xa6>
    25a0:	428c      	cmp	r4, r1
    25a2:	d3f9      	bcc.n	2598 <_malloc_r+0x18>
    25a4:	4a20      	ldr	r2, [pc, #128]	; (2628 <_malloc_r+0xa8>)
    25a6:	6813      	ldr	r3, [r2, #0]
    25a8:	1c10      	adds	r0, r2, #0
    25aa:	1c19      	adds	r1, r3, #0
    25ac:	2900      	cmp	r1, #0
    25ae:	d013      	beq.n	25d8 <_malloc_r+0x58>
    25b0:	680a      	ldr	r2, [r1, #0]
    25b2:	1b12      	subs	r2, r2, r4
    25b4:	d40d      	bmi.n	25d2 <_malloc_r+0x52>
    25b6:	2a0b      	cmp	r2, #11
    25b8:	d902      	bls.n	25c0 <_malloc_r+0x40>
    25ba:	600a      	str	r2, [r1, #0]
    25bc:	188b      	adds	r3, r1, r2
    25be:	e01f      	b.n	2600 <_malloc_r+0x80>
    25c0:	428b      	cmp	r3, r1
    25c2:	d102      	bne.n	25ca <_malloc_r+0x4a>
    25c4:	685a      	ldr	r2, [r3, #4]
    25c6:	6002      	str	r2, [r0, #0]
    25c8:	e01b      	b.n	2602 <_malloc_r+0x82>
    25ca:	684a      	ldr	r2, [r1, #4]
    25cc:	605a      	str	r2, [r3, #4]
    25ce:	1c0b      	adds	r3, r1, #0
    25d0:	e017      	b.n	2602 <_malloc_r+0x82>
    25d2:	1c0b      	adds	r3, r1, #0
    25d4:	6849      	ldr	r1, [r1, #4]
    25d6:	e7e9      	b.n	25ac <_malloc_r+0x2c>
    25d8:	4e14      	ldr	r6, [pc, #80]	; (262c <_malloc_r+0xac>)
    25da:	6833      	ldr	r3, [r6, #0]
    25dc:	2b00      	cmp	r3, #0
    25de:	d103      	bne.n	25e8 <_malloc_r+0x68>
    25e0:	1c28      	adds	r0, r5, #0
    25e2:	f000 fae3 	bl	2bac <_sbrk_r>
    25e6:	6030      	str	r0, [r6, #0]
    25e8:	1c28      	adds	r0, r5, #0
    25ea:	1c21      	adds	r1, r4, #0
    25ec:	f000 fade 	bl	2bac <_sbrk_r>
    25f0:	1c03      	adds	r3, r0, #0
    25f2:	1c42      	adds	r2, r0, #1
    25f4:	d0d0      	beq.n	2598 <_malloc_r+0x18>
    25f6:	2203      	movs	r2, #3
    25f8:	1cc6      	adds	r6, r0, #3
    25fa:	4396      	bics	r6, r2
    25fc:	4286      	cmp	r6, r0
    25fe:	d10a      	bne.n	2616 <_malloc_r+0x96>
    2600:	601c      	str	r4, [r3, #0]
    2602:	1c18      	adds	r0, r3, #0
    2604:	2107      	movs	r1, #7
    2606:	300b      	adds	r0, #11
    2608:	1d1a      	adds	r2, r3, #4
    260a:	4388      	bics	r0, r1
    260c:	1a82      	subs	r2, r0, r2
    260e:	d00a      	beq.n	2626 <_malloc_r+0xa6>
    2610:	4251      	negs	r1, r2
    2612:	5099      	str	r1, [r3, r2]
    2614:	e007      	b.n	2626 <_malloc_r+0xa6>
    2616:	1a31      	subs	r1, r6, r0
    2618:	1c28      	adds	r0, r5, #0
    261a:	f000 fac7 	bl	2bac <_sbrk_r>
    261e:	1c43      	adds	r3, r0, #1
    2620:	d0ba      	beq.n	2598 <_malloc_r+0x18>
    2622:	1c33      	adds	r3, r6, #0
    2624:	e7ec      	b.n	2600 <_malloc_r+0x80>
    2626:	bd70      	pop	{r4, r5, r6, pc}
    2628:	2000019c 	.word	0x2000019c
    262c:	20000198 	.word	0x20000198

00002630 <__sfputc_r>:
    2630:	6893      	ldr	r3, [r2, #8]
    2632:	b510      	push	{r4, lr}
    2634:	3b01      	subs	r3, #1
    2636:	6093      	str	r3, [r2, #8]
    2638:	2b00      	cmp	r3, #0
    263a:	da05      	bge.n	2648 <__sfputc_r+0x18>
    263c:	6994      	ldr	r4, [r2, #24]
    263e:	42a3      	cmp	r3, r4
    2640:	db08      	blt.n	2654 <__sfputc_r+0x24>
    2642:	b2cb      	uxtb	r3, r1
    2644:	2b0a      	cmp	r3, #10
    2646:	d005      	beq.n	2654 <__sfputc_r+0x24>
    2648:	6813      	ldr	r3, [r2, #0]
    264a:	1c58      	adds	r0, r3, #1
    264c:	6010      	str	r0, [r2, #0]
    264e:	7019      	strb	r1, [r3, #0]
    2650:	b2c8      	uxtb	r0, r1
    2652:	e001      	b.n	2658 <__sfputc_r+0x28>
    2654:	f000 fb08 	bl	2c68 <__swbuf_r>
    2658:	bd10      	pop	{r4, pc}

0000265a <__sfputs_r>:
    265a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    265c:	1c06      	adds	r6, r0, #0
    265e:	1c0f      	adds	r7, r1, #0
    2660:	1c14      	adds	r4, r2, #0
    2662:	18d5      	adds	r5, r2, r3
    2664:	42ac      	cmp	r4, r5
    2666:	d008      	beq.n	267a <__sfputs_r+0x20>
    2668:	7821      	ldrb	r1, [r4, #0]
    266a:	1c30      	adds	r0, r6, #0
    266c:	1c3a      	adds	r2, r7, #0
    266e:	f7ff ffdf 	bl	2630 <__sfputc_r>
    2672:	3401      	adds	r4, #1
    2674:	1c43      	adds	r3, r0, #1
    2676:	d1f5      	bne.n	2664 <__sfputs_r+0xa>
    2678:	e000      	b.n	267c <__sfputs_r+0x22>
    267a:	2000      	movs	r0, #0
    267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002680 <_vfiprintf_r>:
    2680:	b5f0      	push	{r4, r5, r6, r7, lr}
    2682:	b09f      	sub	sp, #124	; 0x7c
    2684:	1c06      	adds	r6, r0, #0
    2686:	1c0f      	adds	r7, r1, #0
    2688:	9202      	str	r2, [sp, #8]
    268a:	9305      	str	r3, [sp, #20]
    268c:	2800      	cmp	r0, #0
    268e:	d004      	beq.n	269a <_vfiprintf_r+0x1a>
    2690:	6983      	ldr	r3, [r0, #24]
    2692:	2b00      	cmp	r3, #0
    2694:	d101      	bne.n	269a <_vfiprintf_r+0x1a>
    2696:	f7ff fe91 	bl	23bc <__sinit>
    269a:	4b79      	ldr	r3, [pc, #484]	; (2880 <_vfiprintf_r+0x200>)
    269c:	429f      	cmp	r7, r3
    269e:	d101      	bne.n	26a4 <_vfiprintf_r+0x24>
    26a0:	6877      	ldr	r7, [r6, #4]
    26a2:	e008      	b.n	26b6 <_vfiprintf_r+0x36>
    26a4:	4b77      	ldr	r3, [pc, #476]	; (2884 <_vfiprintf_r+0x204>)
    26a6:	429f      	cmp	r7, r3
    26a8:	d101      	bne.n	26ae <_vfiprintf_r+0x2e>
    26aa:	68b7      	ldr	r7, [r6, #8]
    26ac:	e003      	b.n	26b6 <_vfiprintf_r+0x36>
    26ae:	4b76      	ldr	r3, [pc, #472]	; (2888 <_vfiprintf_r+0x208>)
    26b0:	429f      	cmp	r7, r3
    26b2:	d100      	bne.n	26b6 <_vfiprintf_r+0x36>
    26b4:	68f7      	ldr	r7, [r6, #12]
    26b6:	89bb      	ldrh	r3, [r7, #12]
    26b8:	071b      	lsls	r3, r3, #28
    26ba:	d50a      	bpl.n	26d2 <_vfiprintf_r+0x52>
    26bc:	693b      	ldr	r3, [r7, #16]
    26be:	2b00      	cmp	r3, #0
    26c0:	d007      	beq.n	26d2 <_vfiprintf_r+0x52>
    26c2:	2300      	movs	r3, #0
    26c4:	ad06      	add	r5, sp, #24
    26c6:	616b      	str	r3, [r5, #20]
    26c8:	3320      	adds	r3, #32
    26ca:	766b      	strb	r3, [r5, #25]
    26cc:	3310      	adds	r3, #16
    26ce:	76ab      	strb	r3, [r5, #26]
    26d0:	e03d      	b.n	274e <_vfiprintf_r+0xce>
    26d2:	1c30      	adds	r0, r6, #0
    26d4:	1c39      	adds	r1, r7, #0
    26d6:	f000 fb33 	bl	2d40 <__swsetup_r>
    26da:	2800      	cmp	r0, #0
    26dc:	d0f1      	beq.n	26c2 <_vfiprintf_r+0x42>
    26de:	2001      	movs	r0, #1
    26e0:	4240      	negs	r0, r0
    26e2:	e0ca      	b.n	287a <_vfiprintf_r+0x1fa>
    26e4:	9a05      	ldr	r2, [sp, #20]
    26e6:	1d11      	adds	r1, r2, #4
    26e8:	6812      	ldr	r2, [r2, #0]
    26ea:	9105      	str	r1, [sp, #20]
    26ec:	2a00      	cmp	r2, #0
    26ee:	db7e      	blt.n	27ee <_vfiprintf_r+0x16e>
    26f0:	9209      	str	r2, [sp, #36]	; 0x24
    26f2:	3401      	adds	r4, #1
    26f4:	7823      	ldrb	r3, [r4, #0]
    26f6:	2b2e      	cmp	r3, #46	; 0x2e
    26f8:	d100      	bne.n	26fc <_vfiprintf_r+0x7c>
    26fa:	e089      	b.n	2810 <_vfiprintf_r+0x190>
    26fc:	7821      	ldrb	r1, [r4, #0]
    26fe:	4863      	ldr	r0, [pc, #396]	; (288c <_vfiprintf_r+0x20c>)
    2700:	2203      	movs	r2, #3
    2702:	f000 fc0f 	bl	2f24 <memchr>
    2706:	2800      	cmp	r0, #0
    2708:	d008      	beq.n	271c <_vfiprintf_r+0x9c>
    270a:	4b60      	ldr	r3, [pc, #384]	; (288c <_vfiprintf_r+0x20c>)
    270c:	3401      	adds	r4, #1
    270e:	1ac0      	subs	r0, r0, r3
    2710:	2340      	movs	r3, #64	; 0x40
    2712:	4083      	lsls	r3, r0
    2714:	1c18      	adds	r0, r3, #0
    2716:	682b      	ldr	r3, [r5, #0]
    2718:	4318      	orrs	r0, r3
    271a:	6028      	str	r0, [r5, #0]
    271c:	7821      	ldrb	r1, [r4, #0]
    271e:	1c63      	adds	r3, r4, #1
    2720:	485b      	ldr	r0, [pc, #364]	; (2890 <_vfiprintf_r+0x210>)
    2722:	2206      	movs	r2, #6
    2724:	9302      	str	r3, [sp, #8]
    2726:	7629      	strb	r1, [r5, #24]
    2728:	f000 fbfc 	bl	2f24 <memchr>
    272c:	2800      	cmp	r0, #0
    272e:	d100      	bne.n	2732 <_vfiprintf_r+0xb2>
    2730:	e091      	b.n	2856 <_vfiprintf_r+0x1d6>
    2732:	4b58      	ldr	r3, [pc, #352]	; (2894 <_vfiprintf_r+0x214>)
    2734:	2b00      	cmp	r3, #0
    2736:	d000      	beq.n	273a <_vfiprintf_r+0xba>
    2738:	e084      	b.n	2844 <_vfiprintf_r+0x1c4>
    273a:	2207      	movs	r2, #7
    273c:	9b05      	ldr	r3, [sp, #20]
    273e:	3307      	adds	r3, #7
    2740:	4393      	bics	r3, r2
    2742:	3308      	adds	r3, #8
    2744:	9305      	str	r3, [sp, #20]
    2746:	696b      	ldr	r3, [r5, #20]
    2748:	9a03      	ldr	r2, [sp, #12]
    274a:	189b      	adds	r3, r3, r2
    274c:	616b      	str	r3, [r5, #20]
    274e:	9c02      	ldr	r4, [sp, #8]
    2750:	7823      	ldrb	r3, [r4, #0]
    2752:	2b00      	cmp	r3, #0
    2754:	d104      	bne.n	2760 <_vfiprintf_r+0xe0>
    2756:	9b02      	ldr	r3, [sp, #8]
    2758:	1ae3      	subs	r3, r4, r3
    275a:	9304      	str	r3, [sp, #16]
    275c:	d011      	beq.n	2782 <_vfiprintf_r+0x102>
    275e:	e003      	b.n	2768 <_vfiprintf_r+0xe8>
    2760:	2b25      	cmp	r3, #37	; 0x25
    2762:	d0f8      	beq.n	2756 <_vfiprintf_r+0xd6>
    2764:	3401      	adds	r4, #1
    2766:	e7f3      	b.n	2750 <_vfiprintf_r+0xd0>
    2768:	9b04      	ldr	r3, [sp, #16]
    276a:	1c30      	adds	r0, r6, #0
    276c:	1c39      	adds	r1, r7, #0
    276e:	9a02      	ldr	r2, [sp, #8]
    2770:	f7ff ff73 	bl	265a <__sfputs_r>
    2774:	1c43      	adds	r3, r0, #1
    2776:	d07b      	beq.n	2870 <_vfiprintf_r+0x1f0>
    2778:	696a      	ldr	r2, [r5, #20]
    277a:	9b04      	ldr	r3, [sp, #16]
    277c:	4694      	mov	ip, r2
    277e:	4463      	add	r3, ip
    2780:	616b      	str	r3, [r5, #20]
    2782:	7823      	ldrb	r3, [r4, #0]
    2784:	2b00      	cmp	r3, #0
    2786:	d073      	beq.n	2870 <_vfiprintf_r+0x1f0>
    2788:	2201      	movs	r2, #1
    278a:	2300      	movs	r3, #0
    278c:	4252      	negs	r2, r2
    278e:	606a      	str	r2, [r5, #4]
    2790:	a902      	add	r1, sp, #8
    2792:	3254      	adds	r2, #84	; 0x54
    2794:	1852      	adds	r2, r2, r1
    2796:	3401      	adds	r4, #1
    2798:	602b      	str	r3, [r5, #0]
    279a:	60eb      	str	r3, [r5, #12]
    279c:	60ab      	str	r3, [r5, #8]
    279e:	7013      	strb	r3, [r2, #0]
    27a0:	65ab      	str	r3, [r5, #88]	; 0x58
    27a2:	7821      	ldrb	r1, [r4, #0]
    27a4:	483c      	ldr	r0, [pc, #240]	; (2898 <_vfiprintf_r+0x218>)
    27a6:	2205      	movs	r2, #5
    27a8:	f000 fbbc 	bl	2f24 <memchr>
    27ac:	2800      	cmp	r0, #0
    27ae:	d009      	beq.n	27c4 <_vfiprintf_r+0x144>
    27b0:	4b39      	ldr	r3, [pc, #228]	; (2898 <_vfiprintf_r+0x218>)
    27b2:	3401      	adds	r4, #1
    27b4:	1ac0      	subs	r0, r0, r3
    27b6:	2301      	movs	r3, #1
    27b8:	4083      	lsls	r3, r0
    27ba:	1c18      	adds	r0, r3, #0
    27bc:	682b      	ldr	r3, [r5, #0]
    27be:	4318      	orrs	r0, r3
    27c0:	6028      	str	r0, [r5, #0]
    27c2:	e7ee      	b.n	27a2 <_vfiprintf_r+0x122>
    27c4:	682b      	ldr	r3, [r5, #0]
    27c6:	06da      	lsls	r2, r3, #27
    27c8:	d504      	bpl.n	27d4 <_vfiprintf_r+0x154>
    27ca:	2253      	movs	r2, #83	; 0x53
    27cc:	2120      	movs	r1, #32
    27ce:	a802      	add	r0, sp, #8
    27d0:	1812      	adds	r2, r2, r0
    27d2:	7011      	strb	r1, [r2, #0]
    27d4:	071a      	lsls	r2, r3, #28
    27d6:	d504      	bpl.n	27e2 <_vfiprintf_r+0x162>
    27d8:	2253      	movs	r2, #83	; 0x53
    27da:	212b      	movs	r1, #43	; 0x2b
    27dc:	a802      	add	r0, sp, #8
    27de:	1812      	adds	r2, r2, r0
    27e0:	7011      	strb	r1, [r2, #0]
    27e2:	7822      	ldrb	r2, [r4, #0]
    27e4:	2a2a      	cmp	r2, #42	; 0x2a
    27e6:	d100      	bne.n	27ea <_vfiprintf_r+0x16a>
    27e8:	e77c      	b.n	26e4 <_vfiprintf_r+0x64>
    27ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27ec:	e005      	b.n	27fa <_vfiprintf_r+0x17a>
    27ee:	4252      	negs	r2, r2
    27f0:	60ea      	str	r2, [r5, #12]
    27f2:	2202      	movs	r2, #2
    27f4:	4313      	orrs	r3, r2
    27f6:	602b      	str	r3, [r5, #0]
    27f8:	e77b      	b.n	26f2 <_vfiprintf_r+0x72>
    27fa:	7822      	ldrb	r2, [r4, #0]
    27fc:	3a30      	subs	r2, #48	; 0x30
    27fe:	2a09      	cmp	r2, #9
    2800:	d804      	bhi.n	280c <_vfiprintf_r+0x18c>
    2802:	210a      	movs	r1, #10
    2804:	434b      	muls	r3, r1
    2806:	3401      	adds	r4, #1
    2808:	189b      	adds	r3, r3, r2
    280a:	e7f6      	b.n	27fa <_vfiprintf_r+0x17a>
    280c:	9309      	str	r3, [sp, #36]	; 0x24
    280e:	e771      	b.n	26f4 <_vfiprintf_r+0x74>
    2810:	7863      	ldrb	r3, [r4, #1]
    2812:	2b2a      	cmp	r3, #42	; 0x2a
    2814:	d109      	bne.n	282a <_vfiprintf_r+0x1aa>
    2816:	9b05      	ldr	r3, [sp, #20]
    2818:	3402      	adds	r4, #2
    281a:	1d1a      	adds	r2, r3, #4
    281c:	681b      	ldr	r3, [r3, #0]
    281e:	9205      	str	r2, [sp, #20]
    2820:	2b00      	cmp	r3, #0
    2822:	da0d      	bge.n	2840 <_vfiprintf_r+0x1c0>
    2824:	2301      	movs	r3, #1
    2826:	425b      	negs	r3, r3
    2828:	e00a      	b.n	2840 <_vfiprintf_r+0x1c0>
    282a:	2300      	movs	r3, #0
    282c:	3401      	adds	r4, #1
    282e:	7822      	ldrb	r2, [r4, #0]
    2830:	3a30      	subs	r2, #48	; 0x30
    2832:	2a09      	cmp	r2, #9
    2834:	d804      	bhi.n	2840 <_vfiprintf_r+0x1c0>
    2836:	210a      	movs	r1, #10
    2838:	434b      	muls	r3, r1
    283a:	3401      	adds	r4, #1
    283c:	189b      	adds	r3, r3, r2
    283e:	e7f6      	b.n	282e <_vfiprintf_r+0x1ae>
    2840:	9307      	str	r3, [sp, #28]
    2842:	e75b      	b.n	26fc <_vfiprintf_r+0x7c>
    2844:	ab05      	add	r3, sp, #20
    2846:	9300      	str	r3, [sp, #0]
    2848:	1c30      	adds	r0, r6, #0
    284a:	1c29      	adds	r1, r5, #0
    284c:	1c3a      	adds	r2, r7, #0
    284e:	4b13      	ldr	r3, [pc, #76]	; (289c <_vfiprintf_r+0x21c>)
    2850:	e000      	b.n	2854 <_vfiprintf_r+0x1d4>
    2852:	bf00      	nop
    2854:	e007      	b.n	2866 <_vfiprintf_r+0x1e6>
    2856:	ab05      	add	r3, sp, #20
    2858:	9300      	str	r3, [sp, #0]
    285a:	1c30      	adds	r0, r6, #0
    285c:	1c29      	adds	r1, r5, #0
    285e:	1c3a      	adds	r2, r7, #0
    2860:	4b0e      	ldr	r3, [pc, #56]	; (289c <_vfiprintf_r+0x21c>)
    2862:	f000 f88b 	bl	297c <_printf_i>
    2866:	9003      	str	r0, [sp, #12]
    2868:	9b03      	ldr	r3, [sp, #12]
    286a:	3301      	adds	r3, #1
    286c:	d000      	beq.n	2870 <_vfiprintf_r+0x1f0>
    286e:	e76a      	b.n	2746 <_vfiprintf_r+0xc6>
    2870:	89bb      	ldrh	r3, [r7, #12]
    2872:	065b      	lsls	r3, r3, #25
    2874:	d500      	bpl.n	2878 <_vfiprintf_r+0x1f8>
    2876:	e732      	b.n	26de <_vfiprintf_r+0x5e>
    2878:	980b      	ldr	r0, [sp, #44]	; 0x2c
    287a:	b01f      	add	sp, #124	; 0x7c
    287c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    287e:	46c0      	nop			; (mov r8, r8)
    2880:	00003090 	.word	0x00003090
    2884:	000030b0 	.word	0x000030b0
    2888:	000030d0 	.word	0x000030d0
    288c:	000030f6 	.word	0x000030f6
    2890:	000030fa 	.word	0x000030fa
    2894:	00000000 	.word	0x00000000
    2898:	000030f0 	.word	0x000030f0
    289c:	0000265b 	.word	0x0000265b

000028a0 <_printf_common>:
    28a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28a2:	1c17      	adds	r7, r2, #0
    28a4:	9301      	str	r3, [sp, #4]
    28a6:	690a      	ldr	r2, [r1, #16]
    28a8:	688b      	ldr	r3, [r1, #8]
    28aa:	9000      	str	r0, [sp, #0]
    28ac:	1c0c      	adds	r4, r1, #0
    28ae:	4293      	cmp	r3, r2
    28b0:	da00      	bge.n	28b4 <_printf_common+0x14>
    28b2:	1c13      	adds	r3, r2, #0
    28b4:	1c22      	adds	r2, r4, #0
    28b6:	603b      	str	r3, [r7, #0]
    28b8:	3243      	adds	r2, #67	; 0x43
    28ba:	7812      	ldrb	r2, [r2, #0]
    28bc:	2a00      	cmp	r2, #0
    28be:	d001      	beq.n	28c4 <_printf_common+0x24>
    28c0:	3301      	adds	r3, #1
    28c2:	603b      	str	r3, [r7, #0]
    28c4:	6823      	ldr	r3, [r4, #0]
    28c6:	069b      	lsls	r3, r3, #26
    28c8:	d502      	bpl.n	28d0 <_printf_common+0x30>
    28ca:	683b      	ldr	r3, [r7, #0]
    28cc:	3302      	adds	r3, #2
    28ce:	603b      	str	r3, [r7, #0]
    28d0:	2506      	movs	r5, #6
    28d2:	6823      	ldr	r3, [r4, #0]
    28d4:	401d      	ands	r5, r3
    28d6:	d01e      	beq.n	2916 <_printf_common+0x76>
    28d8:	1c23      	adds	r3, r4, #0
    28da:	3343      	adds	r3, #67	; 0x43
    28dc:	781b      	ldrb	r3, [r3, #0]
    28de:	1e5a      	subs	r2, r3, #1
    28e0:	4193      	sbcs	r3, r2
    28e2:	6822      	ldr	r2, [r4, #0]
    28e4:	0692      	lsls	r2, r2, #26
    28e6:	d51c      	bpl.n	2922 <_printf_common+0x82>
    28e8:	2030      	movs	r0, #48	; 0x30
    28ea:	18e1      	adds	r1, r4, r3
    28ec:	3140      	adds	r1, #64	; 0x40
    28ee:	70c8      	strb	r0, [r1, #3]
    28f0:	1c21      	adds	r1, r4, #0
    28f2:	1c5a      	adds	r2, r3, #1
    28f4:	3145      	adds	r1, #69	; 0x45
    28f6:	7809      	ldrb	r1, [r1, #0]
    28f8:	18a2      	adds	r2, r4, r2
    28fa:	3240      	adds	r2, #64	; 0x40
    28fc:	3302      	adds	r3, #2
    28fe:	70d1      	strb	r1, [r2, #3]
    2900:	e00f      	b.n	2922 <_printf_common+0x82>
    2902:	1c22      	adds	r2, r4, #0
    2904:	2301      	movs	r3, #1
    2906:	9800      	ldr	r0, [sp, #0]
    2908:	9901      	ldr	r1, [sp, #4]
    290a:	3219      	adds	r2, #25
    290c:	9e08      	ldr	r6, [sp, #32]
    290e:	47b0      	blx	r6
    2910:	1c43      	adds	r3, r0, #1
    2912:	d00e      	beq.n	2932 <_printf_common+0x92>
    2914:	3501      	adds	r5, #1
    2916:	68e3      	ldr	r3, [r4, #12]
    2918:	683a      	ldr	r2, [r7, #0]
    291a:	1a9b      	subs	r3, r3, r2
    291c:	429d      	cmp	r5, r3
    291e:	dbf0      	blt.n	2902 <_printf_common+0x62>
    2920:	e7da      	b.n	28d8 <_printf_common+0x38>
    2922:	1c22      	adds	r2, r4, #0
    2924:	9800      	ldr	r0, [sp, #0]
    2926:	9901      	ldr	r1, [sp, #4]
    2928:	3243      	adds	r2, #67	; 0x43
    292a:	9d08      	ldr	r5, [sp, #32]
    292c:	47a8      	blx	r5
    292e:	1c43      	adds	r3, r0, #1
    2930:	d102      	bne.n	2938 <_printf_common+0x98>
    2932:	2001      	movs	r0, #1
    2934:	4240      	negs	r0, r0
    2936:	e020      	b.n	297a <_printf_common+0xda>
    2938:	2306      	movs	r3, #6
    293a:	6820      	ldr	r0, [r4, #0]
    293c:	68e1      	ldr	r1, [r4, #12]
    293e:	683a      	ldr	r2, [r7, #0]
    2940:	4003      	ands	r3, r0
    2942:	2500      	movs	r5, #0
    2944:	2b04      	cmp	r3, #4
    2946:	d103      	bne.n	2950 <_printf_common+0xb0>
    2948:	1a8d      	subs	r5, r1, r2
    294a:	43eb      	mvns	r3, r5
    294c:	17db      	asrs	r3, r3, #31
    294e:	401d      	ands	r5, r3
    2950:	68a3      	ldr	r3, [r4, #8]
    2952:	6922      	ldr	r2, [r4, #16]
    2954:	4293      	cmp	r3, r2
    2956:	dd01      	ble.n	295c <_printf_common+0xbc>
    2958:	1a9b      	subs	r3, r3, r2
    295a:	18ed      	adds	r5, r5, r3
    295c:	2700      	movs	r7, #0
    295e:	42af      	cmp	r7, r5
    2960:	da0a      	bge.n	2978 <_printf_common+0xd8>
    2962:	1c22      	adds	r2, r4, #0
    2964:	2301      	movs	r3, #1
    2966:	9800      	ldr	r0, [sp, #0]
    2968:	9901      	ldr	r1, [sp, #4]
    296a:	321a      	adds	r2, #26
    296c:	9e08      	ldr	r6, [sp, #32]
    296e:	47b0      	blx	r6
    2970:	1c43      	adds	r3, r0, #1
    2972:	d0de      	beq.n	2932 <_printf_common+0x92>
    2974:	3701      	adds	r7, #1
    2976:	e7f2      	b.n	295e <_printf_common+0xbe>
    2978:	2000      	movs	r0, #0
    297a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000297c <_printf_i>:
    297c:	b5f0      	push	{r4, r5, r6, r7, lr}
    297e:	b08b      	sub	sp, #44	; 0x2c
    2980:	9206      	str	r2, [sp, #24]
    2982:	1c0a      	adds	r2, r1, #0
    2984:	3243      	adds	r2, #67	; 0x43
    2986:	9307      	str	r3, [sp, #28]
    2988:	9005      	str	r0, [sp, #20]
    298a:	9204      	str	r2, [sp, #16]
    298c:	7e0a      	ldrb	r2, [r1, #24]
    298e:	1c0c      	adds	r4, r1, #0
    2990:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2992:	2a6e      	cmp	r2, #110	; 0x6e
    2994:	d100      	bne.n	2998 <_printf_i+0x1c>
    2996:	e0a8      	b.n	2aea <_printf_i+0x16e>
    2998:	d811      	bhi.n	29be <_printf_i+0x42>
    299a:	2a63      	cmp	r2, #99	; 0x63
    299c:	d022      	beq.n	29e4 <_printf_i+0x68>
    299e:	d809      	bhi.n	29b4 <_printf_i+0x38>
    29a0:	2a00      	cmp	r2, #0
    29a2:	d100      	bne.n	29a6 <_printf_i+0x2a>
    29a4:	e0b2      	b.n	2b0c <_printf_i+0x190>
    29a6:	2a58      	cmp	r2, #88	; 0x58
    29a8:	d000      	beq.n	29ac <_printf_i+0x30>
    29aa:	e0c2      	b.n	2b32 <_printf_i+0x1b6>
    29ac:	3145      	adds	r1, #69	; 0x45
    29ae:	700a      	strb	r2, [r1, #0]
    29b0:	4a7c      	ldr	r2, [pc, #496]	; (2ba4 <_printf_i+0x228>)
    29b2:	e04f      	b.n	2a54 <_printf_i+0xd8>
    29b4:	2a64      	cmp	r2, #100	; 0x64
    29b6:	d01d      	beq.n	29f4 <_printf_i+0x78>
    29b8:	2a69      	cmp	r2, #105	; 0x69
    29ba:	d01b      	beq.n	29f4 <_printf_i+0x78>
    29bc:	e0b9      	b.n	2b32 <_printf_i+0x1b6>
    29be:	2a73      	cmp	r2, #115	; 0x73
    29c0:	d100      	bne.n	29c4 <_printf_i+0x48>
    29c2:	e0a7      	b.n	2b14 <_printf_i+0x198>
    29c4:	d809      	bhi.n	29da <_printf_i+0x5e>
    29c6:	2a6f      	cmp	r2, #111	; 0x6f
    29c8:	d029      	beq.n	2a1e <_printf_i+0xa2>
    29ca:	2a70      	cmp	r2, #112	; 0x70
    29cc:	d000      	beq.n	29d0 <_printf_i+0x54>
    29ce:	e0b0      	b.n	2b32 <_printf_i+0x1b6>
    29d0:	2220      	movs	r2, #32
    29d2:	6809      	ldr	r1, [r1, #0]
    29d4:	430a      	orrs	r2, r1
    29d6:	6022      	str	r2, [r4, #0]
    29d8:	e037      	b.n	2a4a <_printf_i+0xce>
    29da:	2a75      	cmp	r2, #117	; 0x75
    29dc:	d01f      	beq.n	2a1e <_printf_i+0xa2>
    29de:	2a78      	cmp	r2, #120	; 0x78
    29e0:	d033      	beq.n	2a4a <_printf_i+0xce>
    29e2:	e0a6      	b.n	2b32 <_printf_i+0x1b6>
    29e4:	1c0e      	adds	r6, r1, #0
    29e6:	681a      	ldr	r2, [r3, #0]
    29e8:	3642      	adds	r6, #66	; 0x42
    29ea:	1d11      	adds	r1, r2, #4
    29ec:	6019      	str	r1, [r3, #0]
    29ee:	6813      	ldr	r3, [r2, #0]
    29f0:	7033      	strb	r3, [r6, #0]
    29f2:	e0a1      	b.n	2b38 <_printf_i+0x1bc>
    29f4:	6821      	ldr	r1, [r4, #0]
    29f6:	681a      	ldr	r2, [r3, #0]
    29f8:	0608      	lsls	r0, r1, #24
    29fa:	d406      	bmi.n	2a0a <_printf_i+0x8e>
    29fc:	0649      	lsls	r1, r1, #25
    29fe:	d504      	bpl.n	2a0a <_printf_i+0x8e>
    2a00:	1d11      	adds	r1, r2, #4
    2a02:	6019      	str	r1, [r3, #0]
    2a04:	2300      	movs	r3, #0
    2a06:	5ed5      	ldrsh	r5, [r2, r3]
    2a08:	e002      	b.n	2a10 <_printf_i+0x94>
    2a0a:	1d11      	adds	r1, r2, #4
    2a0c:	6019      	str	r1, [r3, #0]
    2a0e:	6815      	ldr	r5, [r2, #0]
    2a10:	2d00      	cmp	r5, #0
    2a12:	da3b      	bge.n	2a8c <_printf_i+0x110>
    2a14:	232d      	movs	r3, #45	; 0x2d
    2a16:	9a04      	ldr	r2, [sp, #16]
    2a18:	426d      	negs	r5, r5
    2a1a:	7013      	strb	r3, [r2, #0]
    2a1c:	e036      	b.n	2a8c <_printf_i+0x110>
    2a1e:	6821      	ldr	r1, [r4, #0]
    2a20:	681a      	ldr	r2, [r3, #0]
    2a22:	0608      	lsls	r0, r1, #24
    2a24:	d406      	bmi.n	2a34 <_printf_i+0xb8>
    2a26:	0649      	lsls	r1, r1, #25
    2a28:	d504      	bpl.n	2a34 <_printf_i+0xb8>
    2a2a:	6815      	ldr	r5, [r2, #0]
    2a2c:	1d11      	adds	r1, r2, #4
    2a2e:	6019      	str	r1, [r3, #0]
    2a30:	b2ad      	uxth	r5, r5
    2a32:	e002      	b.n	2a3a <_printf_i+0xbe>
    2a34:	1d11      	adds	r1, r2, #4
    2a36:	6019      	str	r1, [r3, #0]
    2a38:	6815      	ldr	r5, [r2, #0]
    2a3a:	4b5a      	ldr	r3, [pc, #360]	; (2ba4 <_printf_i+0x228>)
    2a3c:	7e22      	ldrb	r2, [r4, #24]
    2a3e:	9303      	str	r3, [sp, #12]
    2a40:	270a      	movs	r7, #10
    2a42:	2a6f      	cmp	r2, #111	; 0x6f
    2a44:	d11d      	bne.n	2a82 <_printf_i+0x106>
    2a46:	2708      	movs	r7, #8
    2a48:	e01b      	b.n	2a82 <_printf_i+0x106>
    2a4a:	1c22      	adds	r2, r4, #0
    2a4c:	2178      	movs	r1, #120	; 0x78
    2a4e:	3245      	adds	r2, #69	; 0x45
    2a50:	7011      	strb	r1, [r2, #0]
    2a52:	4a55      	ldr	r2, [pc, #340]	; (2ba8 <_printf_i+0x22c>)
    2a54:	6819      	ldr	r1, [r3, #0]
    2a56:	9203      	str	r2, [sp, #12]
    2a58:	1d08      	adds	r0, r1, #4
    2a5a:	6822      	ldr	r2, [r4, #0]
    2a5c:	6018      	str	r0, [r3, #0]
    2a5e:	680d      	ldr	r5, [r1, #0]
    2a60:	0610      	lsls	r0, r2, #24
    2a62:	d402      	bmi.n	2a6a <_printf_i+0xee>
    2a64:	0650      	lsls	r0, r2, #25
    2a66:	d500      	bpl.n	2a6a <_printf_i+0xee>
    2a68:	b2ad      	uxth	r5, r5
    2a6a:	07d3      	lsls	r3, r2, #31
    2a6c:	d502      	bpl.n	2a74 <_printf_i+0xf8>
    2a6e:	2320      	movs	r3, #32
    2a70:	431a      	orrs	r2, r3
    2a72:	6022      	str	r2, [r4, #0]
    2a74:	2710      	movs	r7, #16
    2a76:	2d00      	cmp	r5, #0
    2a78:	d103      	bne.n	2a82 <_printf_i+0x106>
    2a7a:	2320      	movs	r3, #32
    2a7c:	6822      	ldr	r2, [r4, #0]
    2a7e:	439a      	bics	r2, r3
    2a80:	6022      	str	r2, [r4, #0]
    2a82:	1c23      	adds	r3, r4, #0
    2a84:	2200      	movs	r2, #0
    2a86:	3343      	adds	r3, #67	; 0x43
    2a88:	701a      	strb	r2, [r3, #0]
    2a8a:	e002      	b.n	2a92 <_printf_i+0x116>
    2a8c:	270a      	movs	r7, #10
    2a8e:	4b45      	ldr	r3, [pc, #276]	; (2ba4 <_printf_i+0x228>)
    2a90:	9303      	str	r3, [sp, #12]
    2a92:	6863      	ldr	r3, [r4, #4]
    2a94:	60a3      	str	r3, [r4, #8]
    2a96:	2b00      	cmp	r3, #0
    2a98:	db03      	blt.n	2aa2 <_printf_i+0x126>
    2a9a:	2204      	movs	r2, #4
    2a9c:	6821      	ldr	r1, [r4, #0]
    2a9e:	4391      	bics	r1, r2
    2aa0:	6021      	str	r1, [r4, #0]
    2aa2:	2d00      	cmp	r5, #0
    2aa4:	d102      	bne.n	2aac <_printf_i+0x130>
    2aa6:	9e04      	ldr	r6, [sp, #16]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d00e      	beq.n	2aca <_printf_i+0x14e>
    2aac:	9e04      	ldr	r6, [sp, #16]
    2aae:	1c28      	adds	r0, r5, #0
    2ab0:	1c39      	adds	r1, r7, #0
    2ab2:	f7ff fa73 	bl	1f9c <__aeabi_uidivmod>
    2ab6:	9b03      	ldr	r3, [sp, #12]
    2ab8:	3e01      	subs	r6, #1
    2aba:	5c5b      	ldrb	r3, [r3, r1]
    2abc:	1c28      	adds	r0, r5, #0
    2abe:	7033      	strb	r3, [r6, #0]
    2ac0:	1c39      	adds	r1, r7, #0
    2ac2:	f7ff f9e5 	bl	1e90 <__aeabi_uidiv>
    2ac6:	1e05      	subs	r5, r0, #0
    2ac8:	d1f1      	bne.n	2aae <_printf_i+0x132>
    2aca:	2f08      	cmp	r7, #8
    2acc:	d109      	bne.n	2ae2 <_printf_i+0x166>
    2ace:	6823      	ldr	r3, [r4, #0]
    2ad0:	07db      	lsls	r3, r3, #31
    2ad2:	d506      	bpl.n	2ae2 <_printf_i+0x166>
    2ad4:	6863      	ldr	r3, [r4, #4]
    2ad6:	6922      	ldr	r2, [r4, #16]
    2ad8:	4293      	cmp	r3, r2
    2ada:	dc02      	bgt.n	2ae2 <_printf_i+0x166>
    2adc:	2330      	movs	r3, #48	; 0x30
    2ade:	3e01      	subs	r6, #1
    2ae0:	7033      	strb	r3, [r6, #0]
    2ae2:	9b04      	ldr	r3, [sp, #16]
    2ae4:	1b9b      	subs	r3, r3, r6
    2ae6:	6123      	str	r3, [r4, #16]
    2ae8:	e02b      	b.n	2b42 <_printf_i+0x1c6>
    2aea:	6809      	ldr	r1, [r1, #0]
    2aec:	681a      	ldr	r2, [r3, #0]
    2aee:	0608      	lsls	r0, r1, #24
    2af0:	d407      	bmi.n	2b02 <_printf_i+0x186>
    2af2:	0649      	lsls	r1, r1, #25
    2af4:	d505      	bpl.n	2b02 <_printf_i+0x186>
    2af6:	1d11      	adds	r1, r2, #4
    2af8:	6019      	str	r1, [r3, #0]
    2afa:	6813      	ldr	r3, [r2, #0]
    2afc:	8aa2      	ldrh	r2, [r4, #20]
    2afe:	801a      	strh	r2, [r3, #0]
    2b00:	e004      	b.n	2b0c <_printf_i+0x190>
    2b02:	1d11      	adds	r1, r2, #4
    2b04:	6019      	str	r1, [r3, #0]
    2b06:	6813      	ldr	r3, [r2, #0]
    2b08:	6962      	ldr	r2, [r4, #20]
    2b0a:	601a      	str	r2, [r3, #0]
    2b0c:	2300      	movs	r3, #0
    2b0e:	9e04      	ldr	r6, [sp, #16]
    2b10:	6123      	str	r3, [r4, #16]
    2b12:	e016      	b.n	2b42 <_printf_i+0x1c6>
    2b14:	681a      	ldr	r2, [r3, #0]
    2b16:	1d11      	adds	r1, r2, #4
    2b18:	6019      	str	r1, [r3, #0]
    2b1a:	6816      	ldr	r6, [r2, #0]
    2b1c:	2100      	movs	r1, #0
    2b1e:	1c30      	adds	r0, r6, #0
    2b20:	6862      	ldr	r2, [r4, #4]
    2b22:	f000 f9ff 	bl	2f24 <memchr>
    2b26:	2800      	cmp	r0, #0
    2b28:	d001      	beq.n	2b2e <_printf_i+0x1b2>
    2b2a:	1b80      	subs	r0, r0, r6
    2b2c:	6060      	str	r0, [r4, #4]
    2b2e:	6863      	ldr	r3, [r4, #4]
    2b30:	e003      	b.n	2b3a <_printf_i+0x1be>
    2b32:	1c26      	adds	r6, r4, #0
    2b34:	3642      	adds	r6, #66	; 0x42
    2b36:	7032      	strb	r2, [r6, #0]
    2b38:	2301      	movs	r3, #1
    2b3a:	6123      	str	r3, [r4, #16]
    2b3c:	2300      	movs	r3, #0
    2b3e:	9a04      	ldr	r2, [sp, #16]
    2b40:	7013      	strb	r3, [r2, #0]
    2b42:	9b07      	ldr	r3, [sp, #28]
    2b44:	9805      	ldr	r0, [sp, #20]
    2b46:	9300      	str	r3, [sp, #0]
    2b48:	1c21      	adds	r1, r4, #0
    2b4a:	9b06      	ldr	r3, [sp, #24]
    2b4c:	aa09      	add	r2, sp, #36	; 0x24
    2b4e:	f7ff fea7 	bl	28a0 <_printf_common>
    2b52:	1c43      	adds	r3, r0, #1
    2b54:	d102      	bne.n	2b5c <_printf_i+0x1e0>
    2b56:	2001      	movs	r0, #1
    2b58:	4240      	negs	r0, r0
    2b5a:	e021      	b.n	2ba0 <_printf_i+0x224>
    2b5c:	6923      	ldr	r3, [r4, #16]
    2b5e:	9805      	ldr	r0, [sp, #20]
    2b60:	9906      	ldr	r1, [sp, #24]
    2b62:	1c32      	adds	r2, r6, #0
    2b64:	9d07      	ldr	r5, [sp, #28]
    2b66:	47a8      	blx	r5
    2b68:	1c43      	adds	r3, r0, #1
    2b6a:	d0f4      	beq.n	2b56 <_printf_i+0x1da>
    2b6c:	6823      	ldr	r3, [r4, #0]
    2b6e:	079b      	lsls	r3, r3, #30
    2b70:	d405      	bmi.n	2b7e <_printf_i+0x202>
    2b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2b74:	68e0      	ldr	r0, [r4, #12]
    2b76:	4298      	cmp	r0, r3
    2b78:	da12      	bge.n	2ba0 <_printf_i+0x224>
    2b7a:	1c18      	adds	r0, r3, #0
    2b7c:	e010      	b.n	2ba0 <_printf_i+0x224>
    2b7e:	2500      	movs	r5, #0
    2b80:	68e3      	ldr	r3, [r4, #12]
    2b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2b84:	1a9b      	subs	r3, r3, r2
    2b86:	429d      	cmp	r5, r3
    2b88:	daf3      	bge.n	2b72 <_printf_i+0x1f6>
    2b8a:	1c22      	adds	r2, r4, #0
    2b8c:	2301      	movs	r3, #1
    2b8e:	9805      	ldr	r0, [sp, #20]
    2b90:	9906      	ldr	r1, [sp, #24]
    2b92:	3219      	adds	r2, #25
    2b94:	9e07      	ldr	r6, [sp, #28]
    2b96:	47b0      	blx	r6
    2b98:	1c43      	adds	r3, r0, #1
    2b9a:	d0dc      	beq.n	2b56 <_printf_i+0x1da>
    2b9c:	3501      	adds	r5, #1
    2b9e:	e7ef      	b.n	2b80 <_printf_i+0x204>
    2ba0:	b00b      	add	sp, #44	; 0x2c
    2ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ba4:	00003101 	.word	0x00003101
    2ba8:	00003112 	.word	0x00003112

00002bac <_sbrk_r>:
    2bac:	b538      	push	{r3, r4, r5, lr}
    2bae:	2300      	movs	r3, #0
    2bb0:	4c06      	ldr	r4, [pc, #24]	; (2bcc <_sbrk_r+0x20>)
    2bb2:	1c05      	adds	r5, r0, #0
    2bb4:	1c08      	adds	r0, r1, #0
    2bb6:	6023      	str	r3, [r4, #0]
    2bb8:	f7fe feec 	bl	1994 <_sbrk>
    2bbc:	1c43      	adds	r3, r0, #1
    2bbe:	d103      	bne.n	2bc8 <_sbrk_r+0x1c>
    2bc0:	6823      	ldr	r3, [r4, #0]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d000      	beq.n	2bc8 <_sbrk_r+0x1c>
    2bc6:	602b      	str	r3, [r5, #0]
    2bc8:	bd38      	pop	{r3, r4, r5, pc}
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	200001d0 	.word	0x200001d0

00002bd0 <__sread>:
    2bd0:	b538      	push	{r3, r4, r5, lr}
    2bd2:	1c0c      	adds	r4, r1, #0
    2bd4:	250e      	movs	r5, #14
    2bd6:	5f49      	ldrsh	r1, [r1, r5]
    2bd8:	f000 f9b0 	bl	2f3c <_read_r>
    2bdc:	2800      	cmp	r0, #0
    2bde:	db03      	blt.n	2be8 <__sread+0x18>
    2be0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2be2:	181b      	adds	r3, r3, r0
    2be4:	6563      	str	r3, [r4, #84]	; 0x54
    2be6:	e003      	b.n	2bf0 <__sread+0x20>
    2be8:	89a2      	ldrh	r2, [r4, #12]
    2bea:	4b02      	ldr	r3, [pc, #8]	; (2bf4 <__sread+0x24>)
    2bec:	4013      	ands	r3, r2
    2bee:	81a3      	strh	r3, [r4, #12]
    2bf0:	bd38      	pop	{r3, r4, r5, pc}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	ffffefff 	.word	0xffffefff

00002bf8 <__swrite>:
    2bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bfa:	1c1e      	adds	r6, r3, #0
    2bfc:	898b      	ldrh	r3, [r1, #12]
    2bfe:	1c05      	adds	r5, r0, #0
    2c00:	1c0c      	adds	r4, r1, #0
    2c02:	1c17      	adds	r7, r2, #0
    2c04:	05db      	lsls	r3, r3, #23
    2c06:	d505      	bpl.n	2c14 <__swrite+0x1c>
    2c08:	230e      	movs	r3, #14
    2c0a:	5ec9      	ldrsh	r1, [r1, r3]
    2c0c:	2200      	movs	r2, #0
    2c0e:	2302      	movs	r3, #2
    2c10:	f000 f91c 	bl	2e4c <_lseek_r>
    2c14:	89a2      	ldrh	r2, [r4, #12]
    2c16:	4b05      	ldr	r3, [pc, #20]	; (2c2c <__swrite+0x34>)
    2c18:	1c28      	adds	r0, r5, #0
    2c1a:	4013      	ands	r3, r2
    2c1c:	81a3      	strh	r3, [r4, #12]
    2c1e:	1c3a      	adds	r2, r7, #0
    2c20:	230e      	movs	r3, #14
    2c22:	5ee1      	ldrsh	r1, [r4, r3]
    2c24:	1c33      	adds	r3, r6, #0
    2c26:	f000 f877 	bl	2d18 <_write_r>
    2c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c2c:	ffffefff 	.word	0xffffefff

00002c30 <__sseek>:
    2c30:	b538      	push	{r3, r4, r5, lr}
    2c32:	1c0c      	adds	r4, r1, #0
    2c34:	250e      	movs	r5, #14
    2c36:	5f49      	ldrsh	r1, [r1, r5]
    2c38:	f000 f908 	bl	2e4c <_lseek_r>
    2c3c:	89a3      	ldrh	r3, [r4, #12]
    2c3e:	1c42      	adds	r2, r0, #1
    2c40:	d103      	bne.n	2c4a <__sseek+0x1a>
    2c42:	4a05      	ldr	r2, [pc, #20]	; (2c58 <__sseek+0x28>)
    2c44:	4013      	ands	r3, r2
    2c46:	81a3      	strh	r3, [r4, #12]
    2c48:	e004      	b.n	2c54 <__sseek+0x24>
    2c4a:	2280      	movs	r2, #128	; 0x80
    2c4c:	0152      	lsls	r2, r2, #5
    2c4e:	4313      	orrs	r3, r2
    2c50:	81a3      	strh	r3, [r4, #12]
    2c52:	6560      	str	r0, [r4, #84]	; 0x54
    2c54:	bd38      	pop	{r3, r4, r5, pc}
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	ffffefff 	.word	0xffffefff

00002c5c <__sclose>:
    2c5c:	b508      	push	{r3, lr}
    2c5e:	230e      	movs	r3, #14
    2c60:	5ec9      	ldrsh	r1, [r1, r3]
    2c62:	f000 f8e1 	bl	2e28 <_close_r>
    2c66:	bd08      	pop	{r3, pc}

00002c68 <__swbuf_r>:
    2c68:	b570      	push	{r4, r5, r6, lr}
    2c6a:	1c05      	adds	r5, r0, #0
    2c6c:	1c0e      	adds	r6, r1, #0
    2c6e:	1c14      	adds	r4, r2, #0
    2c70:	2800      	cmp	r0, #0
    2c72:	d004      	beq.n	2c7e <__swbuf_r+0x16>
    2c74:	6983      	ldr	r3, [r0, #24]
    2c76:	2b00      	cmp	r3, #0
    2c78:	d101      	bne.n	2c7e <__swbuf_r+0x16>
    2c7a:	f7ff fb9f 	bl	23bc <__sinit>
    2c7e:	4b23      	ldr	r3, [pc, #140]	; (2d0c <__swbuf_r+0xa4>)
    2c80:	429c      	cmp	r4, r3
    2c82:	d101      	bne.n	2c88 <__swbuf_r+0x20>
    2c84:	686c      	ldr	r4, [r5, #4]
    2c86:	e008      	b.n	2c9a <__swbuf_r+0x32>
    2c88:	4b21      	ldr	r3, [pc, #132]	; (2d10 <__swbuf_r+0xa8>)
    2c8a:	429c      	cmp	r4, r3
    2c8c:	d101      	bne.n	2c92 <__swbuf_r+0x2a>
    2c8e:	68ac      	ldr	r4, [r5, #8]
    2c90:	e003      	b.n	2c9a <__swbuf_r+0x32>
    2c92:	4b20      	ldr	r3, [pc, #128]	; (2d14 <__swbuf_r+0xac>)
    2c94:	429c      	cmp	r4, r3
    2c96:	d100      	bne.n	2c9a <__swbuf_r+0x32>
    2c98:	68ec      	ldr	r4, [r5, #12]
    2c9a:	69a3      	ldr	r3, [r4, #24]
    2c9c:	60a3      	str	r3, [r4, #8]
    2c9e:	89a3      	ldrh	r3, [r4, #12]
    2ca0:	071b      	lsls	r3, r3, #28
    2ca2:	d50a      	bpl.n	2cba <__swbuf_r+0x52>
    2ca4:	6923      	ldr	r3, [r4, #16]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d007      	beq.n	2cba <__swbuf_r+0x52>
    2caa:	6823      	ldr	r3, [r4, #0]
    2cac:	6922      	ldr	r2, [r4, #16]
    2cae:	b2f6      	uxtb	r6, r6
    2cb0:	1a98      	subs	r0, r3, r2
    2cb2:	6963      	ldr	r3, [r4, #20]
    2cb4:	4298      	cmp	r0, r3
    2cb6:	db0f      	blt.n	2cd8 <__swbuf_r+0x70>
    2cb8:	e008      	b.n	2ccc <__swbuf_r+0x64>
    2cba:	1c28      	adds	r0, r5, #0
    2cbc:	1c21      	adds	r1, r4, #0
    2cbe:	f000 f83f 	bl	2d40 <__swsetup_r>
    2cc2:	2800      	cmp	r0, #0
    2cc4:	d0f1      	beq.n	2caa <__swbuf_r+0x42>
    2cc6:	2001      	movs	r0, #1
    2cc8:	4240      	negs	r0, r0
    2cca:	e01d      	b.n	2d08 <__swbuf_r+0xa0>
    2ccc:	1c28      	adds	r0, r5, #0
    2cce:	1c21      	adds	r1, r4, #0
    2cd0:	f7ff fb06 	bl	22e0 <_fflush_r>
    2cd4:	2800      	cmp	r0, #0
    2cd6:	d1f6      	bne.n	2cc6 <__swbuf_r+0x5e>
    2cd8:	68a3      	ldr	r3, [r4, #8]
    2cda:	3001      	adds	r0, #1
    2cdc:	3b01      	subs	r3, #1
    2cde:	60a3      	str	r3, [r4, #8]
    2ce0:	6823      	ldr	r3, [r4, #0]
    2ce2:	1c5a      	adds	r2, r3, #1
    2ce4:	6022      	str	r2, [r4, #0]
    2ce6:	701e      	strb	r6, [r3, #0]
    2ce8:	6963      	ldr	r3, [r4, #20]
    2cea:	4298      	cmp	r0, r3
    2cec:	d005      	beq.n	2cfa <__swbuf_r+0x92>
    2cee:	89a3      	ldrh	r3, [r4, #12]
    2cf0:	1c30      	adds	r0, r6, #0
    2cf2:	07db      	lsls	r3, r3, #31
    2cf4:	d508      	bpl.n	2d08 <__swbuf_r+0xa0>
    2cf6:	2e0a      	cmp	r6, #10
    2cf8:	d106      	bne.n	2d08 <__swbuf_r+0xa0>
    2cfa:	1c28      	adds	r0, r5, #0
    2cfc:	1c21      	adds	r1, r4, #0
    2cfe:	f7ff faef 	bl	22e0 <_fflush_r>
    2d02:	2800      	cmp	r0, #0
    2d04:	d1df      	bne.n	2cc6 <__swbuf_r+0x5e>
    2d06:	1c30      	adds	r0, r6, #0
    2d08:	bd70      	pop	{r4, r5, r6, pc}
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	00003090 	.word	0x00003090
    2d10:	000030b0 	.word	0x000030b0
    2d14:	000030d0 	.word	0x000030d0

00002d18 <_write_r>:
    2d18:	b538      	push	{r3, r4, r5, lr}
    2d1a:	1c05      	adds	r5, r0, #0
    2d1c:	2000      	movs	r0, #0
    2d1e:	4c07      	ldr	r4, [pc, #28]	; (2d3c <_write_r+0x24>)
    2d20:	6020      	str	r0, [r4, #0]
    2d22:	1c08      	adds	r0, r1, #0
    2d24:	1c11      	adds	r1, r2, #0
    2d26:	1c1a      	adds	r2, r3, #0
    2d28:	f7fd fc16 	bl	558 <_write>
    2d2c:	1c43      	adds	r3, r0, #1
    2d2e:	d103      	bne.n	2d38 <_write_r+0x20>
    2d30:	6823      	ldr	r3, [r4, #0]
    2d32:	2b00      	cmp	r3, #0
    2d34:	d000      	beq.n	2d38 <_write_r+0x20>
    2d36:	602b      	str	r3, [r5, #0]
    2d38:	bd38      	pop	{r3, r4, r5, pc}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	200001d0 	.word	0x200001d0

00002d40 <__swsetup_r>:
    2d40:	4b35      	ldr	r3, [pc, #212]	; (2e18 <__swsetup_r+0xd8>)
    2d42:	b570      	push	{r4, r5, r6, lr}
    2d44:	681d      	ldr	r5, [r3, #0]
    2d46:	1c06      	adds	r6, r0, #0
    2d48:	1c0c      	adds	r4, r1, #0
    2d4a:	2d00      	cmp	r5, #0
    2d4c:	d005      	beq.n	2d5a <__swsetup_r+0x1a>
    2d4e:	69ab      	ldr	r3, [r5, #24]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d102      	bne.n	2d5a <__swsetup_r+0x1a>
    2d54:	1c28      	adds	r0, r5, #0
    2d56:	f7ff fb31 	bl	23bc <__sinit>
    2d5a:	4b30      	ldr	r3, [pc, #192]	; (2e1c <__swsetup_r+0xdc>)
    2d5c:	429c      	cmp	r4, r3
    2d5e:	d101      	bne.n	2d64 <__swsetup_r+0x24>
    2d60:	686c      	ldr	r4, [r5, #4]
    2d62:	e008      	b.n	2d76 <__swsetup_r+0x36>
    2d64:	4b2e      	ldr	r3, [pc, #184]	; (2e20 <__swsetup_r+0xe0>)
    2d66:	429c      	cmp	r4, r3
    2d68:	d101      	bne.n	2d6e <__swsetup_r+0x2e>
    2d6a:	68ac      	ldr	r4, [r5, #8]
    2d6c:	e003      	b.n	2d76 <__swsetup_r+0x36>
    2d6e:	4b2d      	ldr	r3, [pc, #180]	; (2e24 <__swsetup_r+0xe4>)
    2d70:	429c      	cmp	r4, r3
    2d72:	d100      	bne.n	2d76 <__swsetup_r+0x36>
    2d74:	68ec      	ldr	r4, [r5, #12]
    2d76:	89a3      	ldrh	r3, [r4, #12]
    2d78:	b29a      	uxth	r2, r3
    2d7a:	0711      	lsls	r1, r2, #28
    2d7c:	d423      	bmi.n	2dc6 <__swsetup_r+0x86>
    2d7e:	06d1      	lsls	r1, r2, #27
    2d80:	d407      	bmi.n	2d92 <__swsetup_r+0x52>
    2d82:	2209      	movs	r2, #9
    2d84:	2001      	movs	r0, #1
    2d86:	6032      	str	r2, [r6, #0]
    2d88:	3237      	adds	r2, #55	; 0x37
    2d8a:	4313      	orrs	r3, r2
    2d8c:	81a3      	strh	r3, [r4, #12]
    2d8e:	4240      	negs	r0, r0
    2d90:	e040      	b.n	2e14 <__swsetup_r+0xd4>
    2d92:	0753      	lsls	r3, r2, #29
    2d94:	d513      	bpl.n	2dbe <__swsetup_r+0x7e>
    2d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2d98:	2900      	cmp	r1, #0
    2d9a:	d008      	beq.n	2dae <__swsetup_r+0x6e>
    2d9c:	1c23      	adds	r3, r4, #0
    2d9e:	3344      	adds	r3, #68	; 0x44
    2da0:	4299      	cmp	r1, r3
    2da2:	d002      	beq.n	2daa <__swsetup_r+0x6a>
    2da4:	1c30      	adds	r0, r6, #0
    2da6:	f7ff fba5 	bl	24f4 <_free_r>
    2daa:	2300      	movs	r3, #0
    2dac:	6363      	str	r3, [r4, #52]	; 0x34
    2dae:	2224      	movs	r2, #36	; 0x24
    2db0:	89a3      	ldrh	r3, [r4, #12]
    2db2:	4393      	bics	r3, r2
    2db4:	81a3      	strh	r3, [r4, #12]
    2db6:	2300      	movs	r3, #0
    2db8:	6063      	str	r3, [r4, #4]
    2dba:	6923      	ldr	r3, [r4, #16]
    2dbc:	6023      	str	r3, [r4, #0]
    2dbe:	2208      	movs	r2, #8
    2dc0:	89a3      	ldrh	r3, [r4, #12]
    2dc2:	4313      	orrs	r3, r2
    2dc4:	81a3      	strh	r3, [r4, #12]
    2dc6:	6923      	ldr	r3, [r4, #16]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d10b      	bne.n	2de4 <__swsetup_r+0xa4>
    2dcc:	23a0      	movs	r3, #160	; 0xa0
    2dce:	89a2      	ldrh	r2, [r4, #12]
    2dd0:	009b      	lsls	r3, r3, #2
    2dd2:	4013      	ands	r3, r2
    2dd4:	2280      	movs	r2, #128	; 0x80
    2dd6:	0092      	lsls	r2, r2, #2
    2dd8:	4293      	cmp	r3, r2
    2dda:	d003      	beq.n	2de4 <__swsetup_r+0xa4>
    2ddc:	1c30      	adds	r0, r6, #0
    2dde:	1c21      	adds	r1, r4, #0
    2de0:	f000 f848 	bl	2e74 <__smakebuf_r>
    2de4:	2301      	movs	r3, #1
    2de6:	89a2      	ldrh	r2, [r4, #12]
    2de8:	4013      	ands	r3, r2
    2dea:	d005      	beq.n	2df8 <__swsetup_r+0xb8>
    2dec:	2300      	movs	r3, #0
    2dee:	60a3      	str	r3, [r4, #8]
    2df0:	6963      	ldr	r3, [r4, #20]
    2df2:	425b      	negs	r3, r3
    2df4:	61a3      	str	r3, [r4, #24]
    2df6:	e003      	b.n	2e00 <__swsetup_r+0xc0>
    2df8:	0791      	lsls	r1, r2, #30
    2dfa:	d400      	bmi.n	2dfe <__swsetup_r+0xbe>
    2dfc:	6963      	ldr	r3, [r4, #20]
    2dfe:	60a3      	str	r3, [r4, #8]
    2e00:	2000      	movs	r0, #0
    2e02:	6923      	ldr	r3, [r4, #16]
    2e04:	4283      	cmp	r3, r0
    2e06:	d105      	bne.n	2e14 <__swsetup_r+0xd4>
    2e08:	0613      	lsls	r3, r2, #24
    2e0a:	d503      	bpl.n	2e14 <__swsetup_r+0xd4>
    2e0c:	2340      	movs	r3, #64	; 0x40
    2e0e:	431a      	orrs	r2, r3
    2e10:	81a2      	strh	r2, [r4, #12]
    2e12:	3801      	subs	r0, #1
    2e14:	bd70      	pop	{r4, r5, r6, pc}
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	20000064 	.word	0x20000064
    2e1c:	00003090 	.word	0x00003090
    2e20:	000030b0 	.word	0x000030b0
    2e24:	000030d0 	.word	0x000030d0

00002e28 <_close_r>:
    2e28:	b538      	push	{r3, r4, r5, lr}
    2e2a:	2300      	movs	r3, #0
    2e2c:	4c06      	ldr	r4, [pc, #24]	; (2e48 <_close_r+0x20>)
    2e2e:	1c05      	adds	r5, r0, #0
    2e30:	1c08      	adds	r0, r1, #0
    2e32:	6023      	str	r3, [r4, #0]
    2e34:	f7fe fdc0 	bl	19b8 <_close>
    2e38:	1c43      	adds	r3, r0, #1
    2e3a:	d103      	bne.n	2e44 <_close_r+0x1c>
    2e3c:	6823      	ldr	r3, [r4, #0]
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d000      	beq.n	2e44 <_close_r+0x1c>
    2e42:	602b      	str	r3, [r5, #0]
    2e44:	bd38      	pop	{r3, r4, r5, pc}
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	200001d0 	.word	0x200001d0

00002e4c <_lseek_r>:
    2e4c:	b538      	push	{r3, r4, r5, lr}
    2e4e:	1c05      	adds	r5, r0, #0
    2e50:	2000      	movs	r0, #0
    2e52:	4c07      	ldr	r4, [pc, #28]	; (2e70 <_lseek_r+0x24>)
    2e54:	6020      	str	r0, [r4, #0]
    2e56:	1c08      	adds	r0, r1, #0
    2e58:	1c11      	adds	r1, r2, #0
    2e5a:	1c1a      	adds	r2, r3, #0
    2e5c:	f7fe fdb8 	bl	19d0 <_lseek>
    2e60:	1c43      	adds	r3, r0, #1
    2e62:	d103      	bne.n	2e6c <_lseek_r+0x20>
    2e64:	6823      	ldr	r3, [r4, #0]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d000      	beq.n	2e6c <_lseek_r+0x20>
    2e6a:	602b      	str	r3, [r5, #0]
    2e6c:	bd38      	pop	{r3, r4, r5, pc}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	200001d0 	.word	0x200001d0

00002e74 <__smakebuf_r>:
    2e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e76:	898b      	ldrh	r3, [r1, #12]
    2e78:	b091      	sub	sp, #68	; 0x44
    2e7a:	079b      	lsls	r3, r3, #30
    2e7c:	d506      	bpl.n	2e8c <__smakebuf_r+0x18>
    2e7e:	1c0b      	adds	r3, r1, #0
    2e80:	3347      	adds	r3, #71	; 0x47
    2e82:	600b      	str	r3, [r1, #0]
    2e84:	610b      	str	r3, [r1, #16]
    2e86:	2301      	movs	r3, #1
    2e88:	614b      	str	r3, [r1, #20]
    2e8a:	e045      	b.n	2f18 <__smakebuf_r+0xa4>
    2e8c:	1c0c      	adds	r4, r1, #0
    2e8e:	230e      	movs	r3, #14
    2e90:	5ec9      	ldrsh	r1, [r1, r3]
    2e92:	1c06      	adds	r6, r0, #0
    2e94:	2900      	cmp	r1, #0
    2e96:	da04      	bge.n	2ea2 <__smakebuf_r+0x2e>
    2e98:	2380      	movs	r3, #128	; 0x80
    2e9a:	89a5      	ldrh	r5, [r4, #12]
    2e9c:	401d      	ands	r5, r3
    2e9e:	d110      	bne.n	2ec2 <__smakebuf_r+0x4e>
    2ea0:	e00c      	b.n	2ebc <__smakebuf_r+0x48>
    2ea2:	aa01      	add	r2, sp, #4
    2ea4:	f000 f85e 	bl	2f64 <_fstat_r>
    2ea8:	2800      	cmp	r0, #0
    2eaa:	dbf5      	blt.n	2e98 <__smakebuf_r+0x24>
    2eac:	23f0      	movs	r3, #240	; 0xf0
    2eae:	9d02      	ldr	r5, [sp, #8]
    2eb0:	021b      	lsls	r3, r3, #8
    2eb2:	401d      	ands	r5, r3
    2eb4:	4b19      	ldr	r3, [pc, #100]	; (2f1c <__smakebuf_r+0xa8>)
    2eb6:	18ed      	adds	r5, r5, r3
    2eb8:	426b      	negs	r3, r5
    2eba:	415d      	adcs	r5, r3
    2ebc:	2780      	movs	r7, #128	; 0x80
    2ebe:	00ff      	lsls	r7, r7, #3
    2ec0:	e001      	b.n	2ec6 <__smakebuf_r+0x52>
    2ec2:	2500      	movs	r5, #0
    2ec4:	2740      	movs	r7, #64	; 0x40
    2ec6:	1c30      	adds	r0, r6, #0
    2ec8:	1c39      	adds	r1, r7, #0
    2eca:	f7ff fb59 	bl	2580 <_malloc_r>
    2ece:	2800      	cmp	r0, #0
    2ed0:	d10c      	bne.n	2eec <__smakebuf_r+0x78>
    2ed2:	89a3      	ldrh	r3, [r4, #12]
    2ed4:	059a      	lsls	r2, r3, #22
    2ed6:	d41f      	bmi.n	2f18 <__smakebuf_r+0xa4>
    2ed8:	2202      	movs	r2, #2
    2eda:	4313      	orrs	r3, r2
    2edc:	81a3      	strh	r3, [r4, #12]
    2ede:	1c23      	adds	r3, r4, #0
    2ee0:	3347      	adds	r3, #71	; 0x47
    2ee2:	6023      	str	r3, [r4, #0]
    2ee4:	6123      	str	r3, [r4, #16]
    2ee6:	2301      	movs	r3, #1
    2ee8:	6163      	str	r3, [r4, #20]
    2eea:	e015      	b.n	2f18 <__smakebuf_r+0xa4>
    2eec:	2280      	movs	r2, #128	; 0x80
    2eee:	4b0c      	ldr	r3, [pc, #48]	; (2f20 <__smakebuf_r+0xac>)
    2ef0:	62b3      	str	r3, [r6, #40]	; 0x28
    2ef2:	89a3      	ldrh	r3, [r4, #12]
    2ef4:	6020      	str	r0, [r4, #0]
    2ef6:	4313      	orrs	r3, r2
    2ef8:	81a3      	strh	r3, [r4, #12]
    2efa:	6120      	str	r0, [r4, #16]
    2efc:	6167      	str	r7, [r4, #20]
    2efe:	2d00      	cmp	r5, #0
    2f00:	d00a      	beq.n	2f18 <__smakebuf_r+0xa4>
    2f02:	230e      	movs	r3, #14
    2f04:	5ee1      	ldrsh	r1, [r4, r3]
    2f06:	1c30      	adds	r0, r6, #0
    2f08:	f000 f83e 	bl	2f88 <_isatty_r>
    2f0c:	2800      	cmp	r0, #0
    2f0e:	d003      	beq.n	2f18 <__smakebuf_r+0xa4>
    2f10:	2201      	movs	r2, #1
    2f12:	89a3      	ldrh	r3, [r4, #12]
    2f14:	4313      	orrs	r3, r2
    2f16:	81a3      	strh	r3, [r4, #12]
    2f18:	b011      	add	sp, #68	; 0x44
    2f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f1c:	ffffe000 	.word	0xffffe000
    2f20:	00002339 	.word	0x00002339

00002f24 <memchr>:
    2f24:	b2c9      	uxtb	r1, r1
    2f26:	1882      	adds	r2, r0, r2
    2f28:	4290      	cmp	r0, r2
    2f2a:	d004      	beq.n	2f36 <memchr+0x12>
    2f2c:	7803      	ldrb	r3, [r0, #0]
    2f2e:	428b      	cmp	r3, r1
    2f30:	d002      	beq.n	2f38 <memchr+0x14>
    2f32:	3001      	adds	r0, #1
    2f34:	e7f8      	b.n	2f28 <memchr+0x4>
    2f36:	2000      	movs	r0, #0
    2f38:	4770      	bx	lr
	...

00002f3c <_read_r>:
    2f3c:	b538      	push	{r3, r4, r5, lr}
    2f3e:	1c05      	adds	r5, r0, #0
    2f40:	2000      	movs	r0, #0
    2f42:	4c07      	ldr	r4, [pc, #28]	; (2f60 <_read_r+0x24>)
    2f44:	6020      	str	r0, [r4, #0]
    2f46:	1c08      	adds	r0, r1, #0
    2f48:	1c11      	adds	r1, r2, #0
    2f4a:	1c1a      	adds	r2, r3, #0
    2f4c:	f7fd fae2 	bl	514 <_read>
    2f50:	1c43      	adds	r3, r0, #1
    2f52:	d103      	bne.n	2f5c <_read_r+0x20>
    2f54:	6823      	ldr	r3, [r4, #0]
    2f56:	2b00      	cmp	r3, #0
    2f58:	d000      	beq.n	2f5c <_read_r+0x20>
    2f5a:	602b      	str	r3, [r5, #0]
    2f5c:	bd38      	pop	{r3, r4, r5, pc}
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	200001d0 	.word	0x200001d0

00002f64 <_fstat_r>:
    2f64:	b538      	push	{r3, r4, r5, lr}
    2f66:	2300      	movs	r3, #0
    2f68:	4c06      	ldr	r4, [pc, #24]	; (2f84 <_fstat_r+0x20>)
    2f6a:	1c05      	adds	r5, r0, #0
    2f6c:	1c08      	adds	r0, r1, #0
    2f6e:	1c11      	adds	r1, r2, #0
    2f70:	6023      	str	r3, [r4, #0]
    2f72:	f7fe fd25 	bl	19c0 <_fstat>
    2f76:	1c43      	adds	r3, r0, #1
    2f78:	d103      	bne.n	2f82 <_fstat_r+0x1e>
    2f7a:	6823      	ldr	r3, [r4, #0]
    2f7c:	2b00      	cmp	r3, #0
    2f7e:	d000      	beq.n	2f82 <_fstat_r+0x1e>
    2f80:	602b      	str	r3, [r5, #0]
    2f82:	bd38      	pop	{r3, r4, r5, pc}
    2f84:	200001d0 	.word	0x200001d0

00002f88 <_isatty_r>:
    2f88:	b538      	push	{r3, r4, r5, lr}
    2f8a:	2300      	movs	r3, #0
    2f8c:	4c06      	ldr	r4, [pc, #24]	; (2fa8 <_isatty_r+0x20>)
    2f8e:	1c05      	adds	r5, r0, #0
    2f90:	1c08      	adds	r0, r1, #0
    2f92:	6023      	str	r3, [r4, #0]
    2f94:	f7fe fd1a 	bl	19cc <_isatty>
    2f98:	1c43      	adds	r3, r0, #1
    2f9a:	d103      	bne.n	2fa4 <_isatty_r+0x1c>
    2f9c:	6823      	ldr	r3, [r4, #0]
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d000      	beq.n	2fa4 <_isatty_r+0x1c>
    2fa2:	602b      	str	r3, [r5, #0]
    2fa4:	bd38      	pop	{r3, r4, r5, pc}
    2fa6:	46c0      	nop			; (mov r8, r8)
    2fa8:	200001d0 	.word	0x200001d0
    2fac:	42000800 	.word	0x42000800
    2fb0:	42000c00 	.word	0x42000c00
    2fb4:	42001000 	.word	0x42001000
    2fb8:	42001400 	.word	0x42001400
    2fbc:	42001800 	.word	0x42001800
    2fc0:	42001c00 	.word	0x42001c00
    2fc4:	0c0b0a09 	.word	0x0c0b0a09
    2fc8:	00000e0d 	.word	0x00000e0d

00002fcc <_tcc_intflag>:
    2fcc:	00000001 00000002 00000004 00000008     ................
    2fdc:	00001000 00002000 00004000 00008000     ..... ...@......
    2fec:	00010000 00020000 00040000 00080000     ................
    2ffc:	00000ff2 00000fee 00000fee 0000104e     ............N...
    300c:	0000104e 00001008 00000ff8 0000100e     N...............
    301c:	0000103c 000012bc 0000129c 0000129c     <...............
    302c:	00001328 000012ae 000012ca 000012a0     (...............
    303c:	000012d8 00001318 71657246 636e6575     ........Frequenc
    304c:	25203a79 2d202075 202d2d2d 79747544     y: %u  ---- Duty
    305c:	63796320 203a656c 000a7525 00000031      cycle: %u..1...
    306c:	00000030 746e4920 75727265 73207370     0... Interrups s
    307c:	65746174 7325203a 00000020 00000043     tate: %s ...C...

0000308c <_global_impure_ptr>:
    308c:	20000004                                ... 

00003090 <__sf_fake_stdin>:
	...

000030b0 <__sf_fake_stdout>:
	...

000030d0 <__sf_fake_stderr>:
	...
    30f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3100:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3110:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3120:	00006665                                ef..

00003124 <_init>:
    3124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	bcf8      	pop	{r3, r4, r5, r6, r7}
    312a:	bc08      	pop	{r3}
    312c:	469e      	mov	lr, r3
    312e:	4770      	bx	lr

00003130 <__init_array_start>:
    3130:	000000dd 	.word	0x000000dd

00003134 <_fini>:
    3134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3136:	46c0      	nop			; (mov r8, r8)
    3138:	bcf8      	pop	{r3, r4, r5, r6, r7}
    313a:	bc08      	pop	{r3}
    313c:	469e      	mov	lr, r3
    313e:	4770      	bx	lr

00003140 <__fini_array_start>:
    3140:	000000b5 	.word	0x000000b5
